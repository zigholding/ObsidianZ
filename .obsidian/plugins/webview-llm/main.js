/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WebViewLLMPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/strings.ts
var Strings = class {
  constructor() {
    let lang = window.localStorage.getItem("language");
    if (lang) {
      this.language = lang;
    } else {
      this.language = "en";
    }
  }
  get cmd_refresh_llms() {
    if (this.language == "zh") {
      return "\u5237\u65B0\u7FA4\u7EC4";
    } else {
      return "Refresh llms";
    }
  }
  get cmd_open_new_llm() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u65B0AI";
    } else {
      return "Open new llm";
    }
  }
};
var strings = new Strings();

// src/setting.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  strict_mode: false,
  vaultDir: ""
};

// src/LLM/DeepSeek.ts
var import_obsidian2 = require("obsidian");

// src/LLM/BaseWebViewer.ts
var BaseWebViewer = class {
  constructor(app, homepage = "", name = "") {
    this.app = app;
    this.homepage = homepage;
    this.view = this.get_webviews(this.homepage)[0];
    this.name = name;
  }
  get allLeaves() {
    let leaves = [];
    this.app.workspace.iterateAllLeaves((x) => {
      leaves.push(x);
    });
    return leaves;
  }
  get allViews() {
    return this.allLeaves.map(
      (x) => x.view
    );
  }
  // 所有 webview 标签
  get leaves() {
    let leaves = this.allLeaves.filter(
      (x) => x.view.webview
    );
    return leaves;
  }
  // 所有 webview 视图
  get views() {
    return this.leaves.map(
      (x) => x.view
    );
  }
  get activeLeaf() {
    let leaves = this.leaves.filter(
      (x) => x.containerEl.className.contains("mod-active")
    );
    if (leaves.length != 1) {
      return null;
    } else {
      return leaves[0];
    }
  }
  get activeView() {
    let leaf = this.activeLeaf;
    if (leaf) {
      return leaf.view;
    } else {
      return null;
    }
  }
  get webviews_blank() {
    return this.get_webviews("about:blank");
  }
  get webview() {
    if (this.view) {
      return this.view.webview;
    } else {
      return null;
    }
  }
  // 获取指定标签
  get_webviews(prefix) {
    return this.views.filter(
      (x) => x.url.startsWith(prefix)
    );
  }
  async open_homepage(url = this.homepage, idx = 0) {
    let views = this.get_webviews(url);
    if (idx == -1) {
      idx = views.length;
    }
    while (views.length < idx + 1) {
      let blank = this.webviews_blank;
      if (blank.length == 0) {
        await this.app.commands.executeCommandById("webviewer:open");
        await this.delay(3e3);
        blank = this.webviews_blank;
      }
      if (blank.length == 0) {
        return null;
      }
      await blank[0].webview.setAttr("src", url);
      await this.delay(3e3);
      views = this.get_webviews(url);
      break;
    }
    if (views.length >= idx + 1) {
      return views[idx];
    } else {
      return null;
    }
  }
  async set_homepage(url = this.homepage, idx = 0) {
    this.view = await this.open_homepage(url, idx);
  }
  async source(view = this.view) {
    if (!view || !view.webview) {
      return "";
    }
    let html = await view.webview.executeJavaScript(`document.documentElement.outerHTML`);
    return html;
  }
  async document(view = this.view) {
    let html = await this.source(this.view);
    let doc = this.html_to_dom(html);
    return doc;
  }
  html_to_dom(html) {
    let parser = new DOMParser();
    let dom = parser.parseFromString(html, "text/html");
    return dom;
  }
  html_to_markdown(html) {
    let doc = this.html_to_dom(html);
    function tree(node, level = 1) {
      node.childNodes.forEach((child) => {
        tree(child, level + 1);
      });
    }
    tree(doc);
    function convertNode(node) {
      let markdown = "";
      if (node.nodeType === 1) {
        switch (node.nodeName.toLowerCase()) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            let level = parseInt(node.nodeName.charAt(1), 10);
            markdown += "#".repeat(level) + " " + node.textContent.trim() + "\n\n";
            break;
          case "p":
            markdown += node.textContent.trim() + "\n\n";
            break;
          case "ul":
          case "ol":
            node.childNodes.forEach((child) => {
              if (child.nodeName.toLowerCase() === "li") {
                markdown += "- " + child.textContent.trim() + "\n";
              }
            });
            markdown += "\n";
            break;
          case "a":
            markdown += `[${node.textContent.trim()}](${node.getAttribute("href")})`;
            break;
          case "img":
            markdown += `![${node.getAttribute("alt") || "Image"}](${node.getAttribute("src")})`;
            break;
          case "strong":
          case "b":
            markdown += `**${node.textContent.trim()}**`;
            break;
          case "em":
          case "i":
            markdown += `*${node.textContent.trim()}*`;
            break;
          case "blockquote":
            markdown += "> " + node.textContent.trim() + "\n\n";
            break;
          case "pre":
            if (node.firstChild && node.firstChild.nodeName.toLowerCase() === "code") {
              let code = node.firstChild.textContent.trim();
              markdown += "```\n" + code + "\n```\n\n";
            }
            break;
          case "code":
            markdown += "`" + node.textContent + "`";
            break;
          case "#text":
            markdown += node.textContent.trim();
            break;
          default:
            node.childNodes.forEach((child) => {
              markdown += convertNode(child);
            });
        }
      } else if (node.nodeType === 3) {
        markdown += node.textContent.trim();
      }
      return markdown;
    }
    let md = convertNode(doc.body);
    return md;
  }
  async delay(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
  }
  setActiveLeaf(view = this.view) {
    if (!view) {
      return;
    }
    ;
    let leaf = this.allLeaves.filter((x) => x.view == view)[0];
    if (!leaf) {
      return;
    }
    ;
    this.app.workspace.setActiveLeaf(leaf);
  }
  get_safe_ctx(ctx) {
    let safeCtx = JSON.stringify(ctx.replace(/`/g, "~").replace(/\$/g, "\uFFE5"));
    return safeCtx;
  }
};

// src/LLM/DeepSeek.ts
var DeepSeek = class extends BaseWebViewer {
  constructor(app, homepage = "https://chat.deepseek.com") {
    super(app, homepage, "DeepSeek");
  }
  async click_btn_of_send() {
    let view = this.view;
    let msg = await this.view.webview.executeJavaScript(
      `
			function delay(ms) {
				return new Promise(resolve => {
					setTimeout(resolve, ms);
				});
			}
			async function click(){
				let button = document.querySelector('div[role="button"]:not(.ds-button)');
				let ariaDisabled = button.getAttribute('aria-disabled');
				while(!ariaDisabled || ariaDisabled == 'false'){
					button.click();
					await delay(100);
					button = document.querySelector('div[role="button"]:not(.ds-button)');
					ariaDisabled =  button.getAttribute('aria-disabled');
				}
			}
			click();
			`
    );
    return msg;
  }
  async paste_msg(ctx) {
    let msg;
    ctx = this.get_safe_ctx(ctx);
    const maxRetries = 1;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      msg = await this.webview.executeJavaScript(
        `
				function delay(ms) {
					return new Promise(resolve => {
					setTimeout(resolve, ms);
					});
				}

				// \u5C06\u5F02\u6B65\u903B\u8F91\u5C01\u88C5\u5230\u4E00\u4E2A async \u51FD\u6570\u4E2D
				async function insertTextAndSend(ctx) {
					// \u83B7\u53D6 textarea \u5E76\u805A\u7126
					let item = document.querySelector('textarea[id="chat-input"]');
					item.focus();

					// \u63D2\u5165\u6587\u672C
					setTimeout(() => {
						document.execCommand('insertText', false, ctx);
					}, 1000);
					let i = 100;
					// \u7B49\u5F85\u6309\u94AE\u53EF\u70B9\u51FB
					while (true) {
						let button = document.querySelector('div[role="button"]:not(.ds-button)');
						let ariaDisabled = button.getAttribute('aria-disabled');
						if (!ariaDisabled || ariaDisabled == 'false') {
							console.log('\u590D\u5236\u6210\u529F');
							break;
						} else {
							await delay(100);
						}
						i = i-1;
						if(i<0){break}
					}
				}

				// \u8C03\u7528 async \u51FD\u6570
				insertTextAndSend(\`${ctx}\`);
				`
      );
      if (msg) {
        break;
      }
      await this.delay(1e3);
    }
    return msg;
  }
  async get_last_response() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".ds-markdown");
    if (items.length < 1) {
      return null;
    }
    let item = items[items.length - 1];
    let ctx = this.html_to_markdown(item.outerHTML);
    return ctx;
  }
  async number_of_receive_msg() {
    let msg = await this.webview.executeJavaScript(
      `
			function number_of_receive_msg(){
				let N = parseInt(document.querySelectorAll('rect[id="\u590D\u5236"]').length/2);
				return N;
			}
			number_of_receive_msg()
			`
    );
    return msg;
  }
  async number_of_contents() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".message-content");
    return items.length;
  }
  async request(ctx, timeout = 60) {
    this.setActiveLeaf();
    let N1 = await this.number_of_receive_msg();
    await this.paste_msg(ctx);
    let N2 = await this.number_of_receive_msg();
    while (N2 != N1 + 1) {
      await this.delay(1e3);
      N2 = await this.number_of_receive_msg();
      timeout = timeout - 1;
      if (timeout < 0) {
        break;
      }
    }
    if (N2 == N1 + 1) {
      let ctx2 = await this.get_last_response();
      new import_obsidian2.Notice(`${this.name} \u8BF4\u4E86\u70B9\u4EC0\u4E48`);
      return ctx2;
    } else {
      new import_obsidian2.Notice(`${this.name} \u4E0D\u8BF4\u8BDD`);
      return null;
    }
  }
};

// src/LLM/Doubao.ts
var import_obsidian3 = require("obsidian");
var Doubao = class extends BaseWebViewer {
  constructor(app, homepage = "https://www.doubao.com") {
    super(app, homepage, "\u8C46\u5305");
  }
  async click_btn_of_send() {
    let msg = await this.webview.executeJavaScript(
      `
			function delay(ms) {
				return new Promise(resolve => {
					setTimeout(resolve, ms);
				});
			}
			async function click(){
				let button = document.getElementById('flow-end-msg-send');
				let ariaDisabled = button.getAttribute('aria-disabled');
				while(ariaDisabled=='false'){
					button.click();
					await delay(100);
					button = document.getElementById('flow-end-msg-send');
					ariaDisabled = button.getAttribute('aria-disabled');
				}
			}
			click();
			`
    );
    return msg;
  }
  async paste_msg(ctx) {
    let msg;
    ctx = this.get_safe_ctx(ctx);
    const maxRetries = 1;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      msg = await this.webview.executeJavaScript(
        `
				function delay(ms) {
					return new Promise(resolve => {
					setTimeout(resolve, ms);
					});
				}

				// \u5C06\u5F02\u6B65\u903B\u8F91\u5C01\u88C5\u5230\u4E00\u4E2A async \u51FD\u6570\u4E2D
				async function insertTextAndSend(ctx) {
					// \u83B7\u53D6 textarea \u5E76\u805A\u7126
					console.log('hrer',document)
					let item = document.querySelector('textarea[data-testid="chat_input_input"]');
					item.focus();

					// \u63D2\u5165\u6587\u672C
					setTimeout(() => {
						document.execCommand('insertText', false, ctx);
					}, 1000);
					let i = 100;
					// \u7B49\u5F85\u6309\u94AE\u53EF\u70B9\u51FB
					while (true) {
						let button = document.getElementById('flow-end-msg-send');
						let ariaDisabled = button.getAttribute('aria-disabled');
						if (ariaDisabled == 'false') {
							console.log('\u590D\u5236\u6210\u529F');
							break;
						} else {
							await delay(100);
						}
						i = i-1;
						if(i<0){break}
					}
				}

				// \u8C03\u7528 async \u51FD\u6570
				insertTextAndSend(\`${ctx}\`);
				`
      );
      if (msg) {
        break;
      }
      await this.delay(1e3);
    }
    return msg;
  }
  async get_last_response() {
    let doc = await this.document();
    let items = doc.querySelectorAll('div[data-testid="receive_message"]');
    if (items.length < 1) {
      return null;
    }
    let item = items[items.length - 1];
    let ctx = this.html_to_markdown(item.outerHTML);
    return ctx;
  }
  async number_of_receive_msg() {
    let msg = await this.webview.executeJavaScript(
      `
			function number_of_receive_msg(){
				let items = document.querySelectorAll('div[data-testid="receive_message"]');
				if(items.length==0){
					return 0;
				}
				item = items[items.length-1]
				if(item.querySelectorAll('button[data-testid="message_action_like"]').length==0){
					msg = items.length-1;
				}else{
					msg = items.length;
				}
				return msg;
			}
			number_of_receive_msg()
			`
    );
    return msg;
  }
  async copy_last_content() {
    let msg = await this.webview.executeJavaScript(
      `
			btns = document.querySelectorAll('.segment-actions-content-btn');
			btns = Array.from(btns).filter(x=>x.textContent=='\u590D\u5236');
			if(btns.length>0){
				btns[btns.length-1].click();
				msg = true;
			}else{
				msg = false;
			}
			`
    );
    return msg;
  }
  async number_of_contents() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".message-content");
    return items.length;
  }
  async get_last_content() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".message-content");
    return items[items.length - 1].textContent;
  }
  async request(ctx, timeout = 60) {
    let view = this.view;
    let N1 = await this.number_of_receive_msg();
    await this.paste_msg(ctx);
    await this.delay(1e3);
    let click = await this.click_btn_of_send();
    let N2 = await this.number_of_receive_msg();
    while (N2 != N1 + 1) {
      await this.delay(1e3);
      N2 = await this.number_of_receive_msg();
      timeout = timeout - 1;
      if (timeout < 0) {
        break;
      }
    }
    if (N2 == N1 + 1) {
      let doc = await this.document();
      let items = doc.querySelectorAll(".message-content");
      N2 = await this.number_of_contents();
      new import_obsidian3.Notice(`${this.name} \u8BF4\u4E86\u70B9\u4EC0\u4E48`);
      return items[N2 - 1].textContent;
    } else {
      new import_obsidian3.Notice(`${this.name} \u4E0D\u8BF4\u8BDD`);
      console.log("Doubao N:", N1, N2);
      return null;
    }
  }
};

// src/LLM/Kimi.ts
var import_obsidian4 = require("obsidian");
var Kimi = class extends BaseWebViewer {
  constructor(app, homepage = "https://kimi.moonshot.cn/") {
    super(app, homepage, "Kimi");
  }
  async new_chat() {
    let msg = await this.view.webview.executeJavaScript(
      `
			document.querySelector('.new-chat-btn').click()
			`
    );
    return msg;
  }
  async click_btn_of_send() {
    let msg = await this.view.webview.executeJavaScript(
      `
			function delay(ms) {
				return new Promise(resolve => {
					setTimeout(resolve, ms);
				});
			}
			async function click(){
				let button = document.querySelector('.send-button');
				let ariaDisabled = button.parentElement.classList.contains('disabled');
				while(!ariaDisabled){
					button.click();
					await delay(100);
					button = document.querySelector('.send-button');
					ariaDisabled = button.parentElement.classList.contains('disabled');
				}
			}
			click();
			`
    );
    return msg;
  }
  async paste_msg(ctx) {
    let msg;
    ctx = this.get_safe_ctx(ctx);
    const maxRetries = 1;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      msg = await this.webview.executeJavaScript(
        `
				function delay(ms) {
					return new Promise(resolve => {
					setTimeout(resolve, ms);
					});
				}

				// \u5C06\u5F02\u6B65\u903B\u8F91\u5C01\u88C5\u5230\u4E00\u4E2A async \u51FD\u6570\u4E2D
				async function insertTextAndSend(ctx) {
					// \u83B7\u53D6 textarea \u5E76\u805A\u7126
					let item = document.querySelector('.chat-input-editor-container').querySelector('.chat-input-editor');
					item.focus();

					// \u63D2\u5165\u6587\u672C
					setTimeout(() => {
						document.execCommand('insertText', false, ctx);
					}, 1000);
					let i = 100;
					// \u7B49\u5F85\u6309\u94AE\u53EF\u70B9\u51FB
					while (true) {
						let button = document.querySelector('.send-button');;
						let ariaDisabled = button.parentElement.classList.contains('disabled');
						if (ariaDisabled == false) {
							break;
						} else {
							await delay(100);
						}
						i = i-1;
						if(i<0){break}
					}
				}

				// \u8C03\u7528 async \u51FD\u6570
				insertTextAndSend(\`${ctx}\`);
				`
      );
      if (msg) {
        break;
      }
      await this.delay(1e3);
    }
    return msg;
  }
  async get_last_response() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".markdown-container");
    if (items.length < 1) {
      return null;
    }
    let item = items[items.length - 1];
    let ctx = this.html_to_markdown(item.outerHTML);
    return ctx;
  }
  async number_of_copy_btns() {
    let doc = await this.document();
    let btns = doc.querySelectorAll('svg[name="Like"]');
    return btns.length;
  }
  async copy_last_content() {
    let msg = await this.webview.executeJavaScript(
      `
			btns = document.querySelectorAll('.segment-actions-content-btn');
			btns = Array.from(btns).filter(x=>x.textContent=='\u590D\u5236');
			if(btns.length>0){
				btns[btns.length-1].click();
				msg = true;
			}else{
				msg = false;
			}
			`
    );
    return msg;
  }
  async get_last_content() {
    var _a;
    let doc = await this.document();
    let chats = doc.getElementsByClassName("chat-content-item");
    return (_a = chats[chats.length - 1].querySelector(".segment-content-box")) == null ? void 0 : _a.textContent;
  }
  async number_of_receive_msg() {
    let doc = await this.document();
    let btns = doc.querySelectorAll('svg[name="Like"]');
    return btns.length;
  }
  async request(ctx, timeout = 60) {
    var _a;
    let N1 = await this.number_of_receive_msg();
    await this.paste_msg(ctx);
    await this.delay(1e3);
    await this.click_btn_of_send();
    let N2 = await this.number_of_receive_msg();
    while (N2 != N1 + 1) {
      await this.delay(1e3);
      N2 = await this.number_of_receive_msg();
      timeout = timeout - 1;
      if (timeout < 0) {
        break;
      }
    }
    if (N2 == N1 + 1) {
      let doc = await this.document();
      let chats = doc.getElementsByClassName("chat-content-item");
      new import_obsidian4.Notice(`${this.name} \u8BF4\u4E86\u70B9\u4EC0\u4E48`);
      let res = (_a = chats[chats.length - 1].querySelector(".segment-content-box")) == null ? void 0 : _a.textContent;
      if (res == null ? void 0 : res.contains("\u5F53\u524D\u957F\u6587\u672C\u5BF9\u8BDD\u5DF2\u8FBE20\u8F6E")) {
        await this.new_chat();
        return this.request(ctx);
      } else {
        return res;
      }
    } else {
      let res = await this.get_last_content();
      if (res == null ? void 0 : res.contains("\u5F53\u524D\u957F\u6587\u672C\u5BF9\u8BDD\u5DF2\u8FBE20\u8F6E")) {
        await this.new_chat();
        return this.request(ctx);
      }
      new import_obsidian4.Notice(`${this.name} \u4E0D\u8BF4\u8BDD`);
      return null;
    }
  }
};

// src/commands.ts
var cmd_refresh_llms = (plugin) => ({
  id: "cmd_refresh_llms",
  name: plugin.strings.cmd_refresh_llms,
  callback: async () => {
    let views = plugin.basewv.views;
    plugin.llms = plugin.llms.slice(0, 0);
    for (let view of views) {
      if (view.url.startsWith(plugin.deepseek.homepage)) {
        let llm = new DeepSeek(plugin.app);
        llm.view = view;
        plugin.llms.push(llm);
      } else if (view.url.startsWith(plugin.doubao.homepage)) {
        let llm = new Doubao(plugin.app);
        llm.view = view;
        plugin.llms.push(llm);
      } else if (view.url.startsWith(plugin.kimi.homepage)) {
        let llm = new Kimi(plugin.app);
        llm.view = view;
        plugin.llms.push(llm);
      }
    }
  }
});
var cmd_open_new_llm = (plugin) => ({
  id: "cmd_open_new_llm",
  name: plugin.strings.cmd_open_new_llm,
  callback: async () => {
    let hpage = await plugin.easyapi.dialog_suggest(
      plugin.basellms.map((x) => x.name),
      plugin.basellms.map((x) => x.homepage)
    );
    if (hpage) {
      await plugin.basewv.open_homepage(hpage, -1);
    }
  }
});
var commandBuilders = [];
var commandBuildersDesktop = [
  cmd_refresh_llms,
  cmd_open_new_llm
];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
  if (plugin.app.isMobile == false) {
    commandBuildersDesktop.forEach((c) => {
      plugin.addCommand(c(plugin));
    });
  }
}

// main.ts
var WebViewLLMPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    this.app.workspace.onLayoutReady(
      async () => {
        await this._onload_();
      }
    );
  }
  get easyapi() {
    var _a;
    return (_a = this.app.plugins.plugins["easyapi"]) == null ? void 0 : _a.api;
  }
  async _onload_() {
    this.strings = new Strings();
    await this.loadSettings();
    this.llms = [];
    this.deepseek = new DeepSeek(this.app);
    this.doubao = new Doubao(this.app);
    this.kimi = new Kimi(this.app);
    this.basellms = [
      this.kimi,
      this.doubao,
      this.deepseek
    ];
    this.basewv = new BaseWebViewer(this.app, "");
    addCommands(this);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
