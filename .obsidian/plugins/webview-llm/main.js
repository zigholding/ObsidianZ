/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WebViewLLMPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");

// src/strings.ts
var Strings = class {
  constructor() {
    let lang = window.localStorage.getItem("language");
    if (lang) {
      this.language = lang;
    } else {
      this.language = "en";
    }
  }
  get cmd_refresh_llms() {
    if (this.language == "zh") {
      return "\u5237\u65B0AI\u6A21\u578B\u5217\u8868";
    } else {
      return "Refresh AI Models";
    }
  }
  get cmd_open_new_llm() {
    if (this.language == "zh") {
      return "\u65B0\u5EFAAI\u5BF9\u8BDD";
    } else {
      return "New AI Chat";
    }
  }
  get cmd_chat_sequence() {
    if (this.language == "zh") {
      return "\u5F00\u59CB\u8FDE\u7EED\u5BF9\u8BDD";
    } else {
      return "Start Continuous Chat";
    }
  }
  get cmd_chat_sequence_stop() {
    if (this.language == "zh") {
      return "\u505C\u6B62\u8FDE\u7EED\u5BF9\u8BDD";
    } else {
      return "Stop Continuous Chat";
    }
  }
  get setting_prompt_name() {
    if (this.language == "zh") {
      return "\u63D0\u793A\u8BCD\u540D\u79F0\uFF08\u7528\u4E8E\u6807\u9898\u6216\u4EE3\u7801\u5757\uFF09";
    } else {
      return "Prompt Name (for heading or code block)";
    }
  }
  get setting_auto_stop() {
    if (this.language == "zh") {
      return "\u5F53AI\u8FD4\u56DE\u4EE5\u4E0B\u6587\u672C\u65F6\u81EA\u52A8\u7ED3\u675F\u5BF9\u8BDD";
    } else {
      return "Auto-stop chat when AI responds with";
    }
  }
  get cmd_chat_every_llms() {
    if (this.language == "zh") {
      return "\u5411\u6240\u6709AI\u6A21\u578B\u53D1\u9001\u6D88\u606F";
    } else {
      return "Send Message to All AI Models";
    }
  }
  get cmd_chat_first_llms() {
    if (this.language == "zh") {
      return "\u5411\u9996\u4E2AAI\u6A21\u578B\u53D1\u9001\u6D88\u606F";
    } else {
      return "Send Message to First AI Model";
    }
  }
};
var strings = new Strings();

// src/setting.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  prompt_name: "prompt\n\u63D0\u793A\u8BCD",
  auto_stop: "\u4FEE\u6539\u5B8C\u6210\n\u4FEE\u6539\u5B8C\u6210\u3002"
};
var WebViewLLMSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  getSettingValue(field) {
    return this.plugin.settings[field];
  }
  add_toggle(name, desc, field) {
    let { containerEl } = this;
    let value = this.plugin.settings[field];
    let item = new import_obsidian.Setting(containerEl).setName(name).setDesc(desc).addToggle(
      (text) => text.setValue(value).onChange(async (value2) => {
        this.plugin.settings[field] = value2;
        await this.plugin.saveSettings();
      })
    );
    return item;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName(this.plugin.strings.setting_prompt_name).addTextArea(
      (text) => text.setValue(this.plugin.settings.prompt_name).onChange(async (value) => {
        this.plugin.settings.prompt_name = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName(this.plugin.strings.setting_auto_stop).addTextArea(
      (text) => text.setValue(this.plugin.settings.auto_stop).onChange(async (value) => {
        this.plugin.settings.auto_stop = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// ../easyapi/src/easyapi/gui/inputSuggester.ts
var import_obsidian2 = require("obsidian");
var InputSuggester = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app, displayItems, items, options = {}) {
    super(app);
    this.displayItems = displayItems;
    this.items = items;
    this.promise = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.inputEl.addEventListener("keydown", (event) => {
      var _a;
      if (event.code !== "Tab") {
        return;
      }
      const self = this;
      const { values, selectedItem } = self.chooser;
      const { value } = this.inputEl;
      this.inputEl.value = (_a = values[selectedItem].item) != null ? _a : value;
    });
    if (options.placeholder)
      this.setPlaceholder(options.placeholder);
    if (options.limit)
      this.limit = options.limit;
    if (options.emptyStateText)
      this.emptyStateText = options.emptyStateText;
    this.open();
  }
  static Suggest(app, displayItems, items, options = {}) {
    const newSuggester = new InputSuggester(
      app,
      displayItems,
      items,
      options
    );
    return newSuggester.promise;
  }
  getItemText(item) {
    if (item === this.inputEl.value)
      return item;
    return this.displayItems[this.items.indexOf(item)];
  }
  getItems() {
    if (this.inputEl.value === "")
      return this.items;
    return [this.inputEl.value, ...this.items];
  }
  selectSuggestion(value, evt) {
    this.resolved = true;
    super.selectSuggestion(value, evt);
  }
  onChooseItem(item, evt) {
    this.resolved = true;
    this.resolvePromise(item);
  }
  onClose() {
    super.onClose();
    if (!this.resolved)
      this.rejectPromise("no input given.");
  }
};
async function dialog_suggest(displayItems, items, placeholder = "") {
  try {
    return await InputSuggester.Suggest(
      this.app,
      displayItems,
      items,
      {
        placeholder
      }
    );
  } catch (error) {
    return null;
  }
}

// ../easyapi/src/easyapi/gui/inputPrompt.ts
var import_obsidian3 = require("obsidian");
var InputPrompt = class extends import_obsidian3.Modal {
  constructor(app, header, placeholder, value) {
    super(app);
    this.header = header;
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (!evt.isComposing && evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.placeholder = placeholder != null ? placeholder : "";
    this.input = value != null ? value : "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app, header, placeholder, value) {
    const newPromptModal = new InputPrompt(
      app,
      header,
      placeholder,
      value
    );
    return newPromptModal.waitForClose;
  }
  display() {
    this.containerEl.addClass("quickAddModal", "qaInputPrompt");
    this.contentEl.empty();
    this.titleEl.textContent = this.header;
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(
      mainContentContainer,
      this.placeholder,
      this.input
    );
    this.createButtonBar(mainContentContainer);
  }
  createInputField(container, placeholder, value) {
    const textComponent = new import_obsidian3.TextComponent(container);
    textComponent.inputEl.classList.add("input-field");
    textComponent.setPlaceholder(placeholder != null ? placeholder : "").setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  createButton(container, text, callback) {
    const btn = new import_obsidian3.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    this.createButton(
      buttonBarContainer,
      "Ok",
      this.submitClickCallback
    ).setCta();
    this.createButton(
      buttonBarContainer,
      "Cancel",
      this.cancelClickCallback
    );
    buttonBarContainer.classList.add("button-bar");
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener(
      "keydown",
      this.submitEnterCallback
    );
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
async function dialog_prompt(header = "Input", placeholder = "", value = "") {
  try {
    return await InputPrompt.Prompt(
      this.app,
      header,
      placeholder,
      value
    );
  } catch (e) {
    return null;
  }
}

// ../easyapi/src/easyapi/editor.ts
var EasyEditor = class {
  constructor(app, api) {
    this.app = app;
    this.api = api;
  }
  async get_selection(cancel_selection = false) {
    var _a;
    let editor = (_a = this.app.workspace.getActiveFileView()) == null ? void 0 : _a.editor;
    if (editor) {
      let sel = editor.getSelection();
      if (cancel_selection) {
        let cursor = editor.getCursor();
        await editor.setSelection(cursor, cursor);
      }
      return sel;
    } else {
      return "";
    }
  }
  async get_code_section(tfile, ctype = "", idx = 0, as_simple = true) {
    var _a;
    let dvmeta = this.app.metadataCache.getFileCache(tfile);
    let ctx = await this.app.vault.cachedRead(tfile);
    let section = (_a = dvmeta == null ? void 0 : dvmeta.sections) == null ? void 0 : _a.filter((x) => x.type == "code").filter((x) => {
      let c = ctx.slice(x.position.start.offset, x.position.end.offset).trim();
      return c.startsWith("```" + ctype) || c.startsWith("~~~" + ctype);
    })[idx];
    if (section) {
      let c = ctx.slice(
        section.position.start.offset,
        section.position.end.offset
      );
      if (as_simple) {
        return c.slice(4 + ctype.length, c.length - 4);
      } else {
        let res = {
          code: c,
          section,
          ctx
        };
        return res;
      }
    }
  }
  async get_heading_section(tfile, heading, idx = 0) {
    var _a;
    let dvmeta = this.app.metadataCache.getFileCache(tfile);
    let ctx = await this.app.vault.cachedRead(tfile);
    let section = (_a = dvmeta == null ? void 0 : dvmeta.headings) == null ? void 0 : _a.filter((x) => x.heading == heading)[idx];
    if (section) {
      let c = ctx.slice(
        section.position.start.offset,
        section.position.end.offset
      );
      return c;
    }
  }
};

// ../easyapi/src/easyapi/file.ts
var import_obsidian4 = require("obsidian");
var File = class {
  constructor(app, api) {
    this.app = app;
    this.api = api;
  }
  generate_structure(tfolder, depth = 0, isRoot = true, only_folder = false, only_md = true) {
    let structure = "";
    const indentUnit = "    ";
    const verticalLine = "\u2502   ";
    const indent = verticalLine.repeat(Math.max(depth - 1, 0)) + indentUnit.repeat(depth > 0 ? 1 : 0);
    const children = tfolder.children || [];
    if (isRoot) {
      structure += `${tfolder.name}/
`;
      isRoot = false;
    }
    children.forEach((child, index) => {
      const isLast = index === children.length - 1;
      const prefix = isLast ? "\u2514\u2500\u2500 " : "\u251C\u2500\u2500 ";
      if (child instanceof import_obsidian4.TFolder) {
        structure += `${indent}${prefix}${child.name}/
`;
        structure += this.generate_structure(child, depth + 1, isRoot, only_folder, only_md);
      } else if (!only_folder) {
        if (only_md && child.extension != "md") {
          return;
        }
        structure += `${indent}${prefix}${child.name}
`;
      }
    });
    return structure;
  }
};

// ../easyapi/src/easyapi/easyapi.ts
var EasyAPI = class {
  constructor(app) {
    this.app = app;
    this.dialog_suggest = dialog_suggest;
    this.dialog_prompt = dialog_prompt;
    this.editor = new EasyEditor(app, this);
    this.file = new File(app, this);
  }
  get_plugin(name) {
    var _a;
    return (_a = this.app.plugins) == null ? void 0 : _a.plugins[name];
  }
  get nc() {
    return this.get_plugin("note-chain");
  }
  get cfile() {
    return this.app.workspace.getActiveFile();
  }
};

// src/LLM/BaseWebViewer.ts
var import_obsidian5 = require("obsidian");
var BaseWebViewer = class {
  constructor(app, homepage = "", name = "") {
    this.app = app;
    this.homepage = homepage;
    this.view = this.get_webviews(this.homepage)[0];
    this.name = name;
  }
  get allLeaves() {
    let leaves = [];
    this.app.workspace.iterateAllLeaves((x) => {
      leaves.push(x);
    });
    return leaves;
  }
  get allViews() {
    return this.allLeaves.map(
      (x) => x.view
    );
  }
  // 所有 webview 标签
  get leaves() {
    let leaves = this.allLeaves.filter(
      (x) => x.view.webview
    );
    return leaves;
  }
  // 所有 webview 视图
  get views() {
    return this.leaves.map(
      (x) => x.view
    );
  }
  get activeLeaf() {
    let leaves = this.leaves.filter(
      (x) => x.containerEl.className.contains("mod-active")
    );
    if (leaves.length != 1) {
      return null;
    } else {
      return leaves[0];
    }
  }
  get activeView() {
    let leaf = this.activeLeaf;
    if (leaf) {
      return leaf.view;
    } else {
      return null;
    }
  }
  get webviews_blank() {
    return this.get_webviews("about:blank");
  }
  get webview() {
    if (this.view) {
      return this.view.webview;
    } else {
      return null;
    }
  }
  // 获取指定标签
  get_webviews(prefix) {
    return this.views.filter(
      (x) => x.url.startsWith(prefix)
    );
  }
  async open_homepage(url = this.homepage, idx = 0) {
    let views = this.get_webviews(url);
    if (idx == -1) {
      idx = views.length;
    }
    while (views.length < idx + 1) {
      let blank = this.webviews_blank;
      if (blank.length == 0) {
        await this.app.commands.executeCommandById("webviewer:open");
        await this.delay(3e3);
        blank = this.webviews_blank;
      }
      if (blank.length == 0) {
        return null;
      }
      await blank[0].webview.executeJavaScript(`
                window.location.href = '${url}';
            `);
      await blank[0].webview.setAttr("src", url);
      await this.delay(3e3);
      views = this.get_webviews(url);
      break;
    }
    if (views.length >= idx + 1) {
      return views[idx];
    } else {
      return null;
    }
  }
  async set_homepage(url = this.homepage, idx = 0) {
    this.view = await this.open_homepage(url, idx);
  }
  async source(view = this.view) {
    if (!view || !view.webview) {
      return "";
    }
    let html = await view.webview.executeJavaScript(`document.documentElement.outerHTML`);
    return html;
  }
  async document(view = this.view) {
    let html = await this.source(this.view);
    let doc = this.html_to_dom(html);
    return doc;
  }
  html_to_dom(html) {
    let parser = new DOMParser();
    let dom = parser.parseFromString(html, "text/html");
    return dom;
  }
  html_to_markdown(html) {
    let doc = this.html_to_dom(html);
    function tree(node, level = 1) {
      node.childNodes.forEach((child) => {
        tree(child, level + 1);
      });
    }
    tree(doc);
    function convertNode(node) {
      let markdown = "";
      if (node.nodeType === 1) {
        switch (node.nodeName.toLowerCase()) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            let level = parseInt(node.nodeName.charAt(1), 10);
            markdown += "#".repeat(level) + " " + node.textContent.trim() + "\n\n";
            break;
          case "p":
            markdown += node.textContent.trim() + "\n\n";
            break;
          case "ul":
          case "ol":
            node.childNodes.forEach((child) => {
              if (child.nodeName.toLowerCase() === "li") {
                markdown += "- " + child.textContent.trim() + "\n";
              }
            });
            markdown += "\n";
            break;
          case "a":
            markdown += `[${node.textContent.trim()}](${node.getAttribute("href")})`;
            break;
          case "img":
            markdown += `![${node.getAttribute("alt") || "Image"}](${node.getAttribute("src")})`;
            break;
          case "strong":
          case "b":
            markdown += `**${node.textContent.trim()}**`;
            break;
          case "em":
          case "i":
            markdown += `*${node.textContent.trim()}*`;
            break;
          case "blockquote":
            markdown += "> " + node.textContent.trim() + "\n\n";
            break;
          case "pre":
            if (node.firstChild && node.firstChild.nodeName.toLowerCase() === "code") {
              let code = node.firstChild.textContent.trim();
              markdown += "```\n" + code + "\n```\n\n";
            }
            break;
          case "code":
            markdown += "`" + node.textContent + "`";
            break;
          case "#text":
            markdown += node.textContent.trim();
            break;
          default:
            node.childNodes.forEach((child) => {
              markdown += convertNode(child);
            });
        }
      } else if (node.nodeType === 3) {
        markdown += node.textContent.trim();
      }
      return markdown;
    }
    let md = convertNode(doc.body);
    return md;
  }
  async delay(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
  }
  setActiveLeaf(view = this.view) {
    if (!view) {
      return;
    }
    ;
    let leaf = this.allLeaves.filter((x) => x.view == view)[0];
    if (!leaf) {
      return;
    }
    ;
    this.app.workspace.setActiveLeaf(leaf);
  }
  get_safe_ctx(ctx) {
    let safeCtx = JSON.stringify(ctx.replace(/`/g, "~").replace(/\$/g, "\uFFE5"));
    return safeCtx.slice(1, safeCtx.length - 1);
  }
  async paste_msg(ctx) {
  }
  async click_btn_of_send() {
  }
  async number_of_receive_msg() {
    return 0;
  }
  async get_last_content() {
    return "";
  }
  async request(ctx, timeout = 60) {
    let N1 = await this.number_of_receive_msg();
    await this.paste_msg(ctx);
    await this.delay(1e3);
    await this.click_btn_of_send();
    let N2 = await this.number_of_receive_msg();
    while (N2 != N1 + 1) {
      await this.delay(1e3);
      N2 = await this.number_of_receive_msg();
      timeout = timeout - 1;
      if (timeout < 0) {
        break;
      }
    }
    if (N2 == N1 + 1) {
      let ctx2 = await this.get_last_content();
      new import_obsidian5.Notice(`${this.name} \u8BF4\u4E86\u70B9\u4EC0\u4E48`);
      return ctx2;
    } else {
      new import_obsidian5.Notice(`${this.name} \u4E0D\u8BF4\u8BDD`);
      console.log("Doubao N:", N1, N2);
      return null;
    }
  }
};

// src/LLM/DeepSeek.ts
var import_obsidian6 = require("obsidian");
var DeepSeek = class extends BaseWebViewer {
  constructor(app, homepage = "https://chat.deepseek.com") {
    super(app, homepage, "DeepSeek");
  }
  async click_btn_of_send() {
    let view = this.view;
    let msg = await this.view.webview.executeJavaScript(
      `
			function delay(ms) {
				return new Promise(resolve => {
					setTimeout(resolve, ms);
				});
			}
			async function click(){
				let button = document.querySelector('div[role="button"]:not(.ds-button)');
				let ariaDisabled = button.getAttribute('aria-disabled');
				while(!ariaDisabled || ariaDisabled == 'false'){
					button.click();
					await delay(100);
					button = document.querySelector('div[role="button"]:not(.ds-button)');
					ariaDisabled =  button.getAttribute('aria-disabled');
				}
			}
			click();
			`
    );
    return msg;
  }
  async paste_msg(ctx) {
    let msg;
    ctx = this.get_safe_ctx(ctx);
    const maxRetries = 1;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      msg = await this.webview.executeJavaScript(
        `
				function delay(ms) {
					return new Promise(resolve => {
					setTimeout(resolve, ms);
					});
				}

				// \u5C06\u5F02\u6B65\u903B\u8F91\u5C01\u88C5\u5230\u4E00\u4E2A async \u51FD\u6570\u4E2D
				async function insertTextAndSend(ctx) {
					// \u83B7\u53D6 textarea \u5E76\u805A\u7126
					let item = document.querySelector('textarea[id="chat-input"]');
					item.focus();

					// \u63D2\u5165\u6587\u672C
					setTimeout(() => {
						document.execCommand('insertText', false, ctx);
					}, 1000);
					let i = 100;
					// \u7B49\u5F85\u6309\u94AE\u53EF\u70B9\u51FB
					while (true) {
						let button = document.querySelector('div[role="button"]:not(.ds-button)');
						let ariaDisabled = button.getAttribute('aria-disabled');
						if (!ariaDisabled || ariaDisabled == 'false') {
							console.log('\u590D\u5236\u6210\u529F');
							break;
						} else {
							await delay(100);
						}
						i = i-1;
						if(i<0){break}
					}
				}

				// \u8C03\u7528 async \u51FD\u6570
				insertTextAndSend(\`${ctx}\`);
				`
      );
      if (msg) {
        break;
      }
      await this.delay(1e3);
    }
    return msg;
  }
  async get_last_response() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".ds-markdown");
    if (items.length < 1) {
      return null;
    }
    let item = items[items.length - 1];
    let ctx = this.html_to_markdown(item.outerHTML);
    return ctx;
  }
  async number_of_receive_msg() {
    let msg = await this.webview.executeJavaScript(
      `
			function number_of_receive_msg(){
				let btns = document.querySelectorAll('.ds-flex>.ds-flex >.ds-icon-button:nth-child(4)');
				let N = parseInt(btns.length);
				return N;
			}
			number_of_receive_msg()
			`
    );
    return msg;
  }
  async number_of_contents() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".message-content");
    return items.length;
  }
  async request(ctx, timeout = 60) {
    this.setActiveLeaf();
    let N1 = await this.number_of_receive_msg();
    await this.paste_msg(ctx);
    let N2 = await this.number_of_receive_msg();
    await this.click_btn_of_send();
    while (N2 != N1 + 1) {
      await this.delay(1e3);
      N2 = await this.number_of_receive_msg();
      timeout = timeout - 1;
      if (timeout < 0) {
        break;
      }
    }
    if (N2 == N1 + 1) {
      let ctx2 = await this.get_last_response();
      new import_obsidian6.Notice(`${this.name} \u8BF4\u4E86\u70B9\u4EC0\u4E48`);
      return ctx2;
    } else {
      new import_obsidian6.Notice(`${this.name} \u4E0D\u8BF4\u8BDD`);
      return null;
    }
  }
};

// src/LLM/Doubao.ts
var import_obsidian7 = require("obsidian");
var Doubao = class extends BaseWebViewer {
  constructor(app, homepage = "https://www.doubao.com") {
    super(app, homepage, "\u8C46\u5305");
  }
  async click_btn_of_send() {
    let msg = await this.webview.executeJavaScript(
      `
			function delay(ms) {
				return new Promise(resolve => {
					setTimeout(resolve, ms);
				});
			}
			async function click(){
				let button = document.getElementById('flow-end-msg-send');
				let ariaDisabled = button.getAttribute('aria-disabled');
				while(ariaDisabled=='false'){
					button.click();
					await delay(100);
					button = document.getElementById('flow-end-msg-send');
					ariaDisabled = button.getAttribute('aria-disabled');
				}
			}
			click();
			`
    );
    return msg;
  }
  async paste_msg(ctx) {
    let msg;
    ctx = this.get_safe_ctx(ctx);
    const maxRetries = 1;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      msg = await this.webview.executeJavaScript(
        `
				function delay(ms) {
					return new Promise(resolve => {
					setTimeout(resolve, ms);
					});
				}

				// \u5C06\u5F02\u6B65\u903B\u8F91\u5C01\u88C5\u5230\u4E00\u4E2A async \u51FD\u6570\u4E2D
				async function insertTextAndSend(ctx) {
					// \u83B7\u53D6 textarea \u5E76\u805A\u7126
					console.log('hrer',document)
					let item = document.querySelector('textarea[data-testid="chat_input_input"]');
					item.focus();

					// \u63D2\u5165\u6587\u672C
					setTimeout(() => {
						document.execCommand('insertText', false, ctx);
					}, 1000);
					let i = 100;
					// \u7B49\u5F85\u6309\u94AE\u53EF\u70B9\u51FB
					while (true) {
						let button = document.getElementById('flow-end-msg-send');
						let ariaDisabled = button.getAttribute('aria-disabled');
						if (ariaDisabled == 'false') {
							console.log('\u590D\u5236\u6210\u529F');
							break;
						} else {
							await delay(100);
						}
						i = i-1;
						if(i<0){break}
					}
				}

				// \u8C03\u7528 async \u51FD\u6570
				insertTextAndSend(\`${ctx}\`);
				`
      );
      if (msg) {
        break;
      }
      await this.delay(1e3);
    }
    return msg;
  }
  async get_last_response() {
    let doc = await this.document();
    let items = doc.querySelectorAll('div[data-testid="receive_message"]');
    if (items.length < 1) {
      return null;
    }
    let item = items[items.length - 1];
    let ctx = this.html_to_markdown(item.outerHTML);
    return ctx;
  }
  async number_of_receive_msg() {
    let msg = await this.webview.executeJavaScript(
      `
			function number_of_receive_msg(){
				let items = document.querySelectorAll('div[data-testid="receive_message"]');
				if(items.length==0){
					return 0;
				}
				item = items[items.length-1]
				if(item.querySelectorAll('button[data-testid="message_action_like"]').length==0){
					msg = items.length-1;
				}else{
					msg = items.length;
				}
				return msg;
			}
			number_of_receive_msg()
			`
    );
    return msg;
  }
  async copy_last_content() {
    let msg = await this.webview.executeJavaScript(
      `
			btns = document.querySelectorAll('.segment-actions-content-btn');
			btns = Array.from(btns).filter(x=>x.textContent=='\u590D\u5236');
			if(btns.length>0){
				btns[btns.length-1].click();
				msg = true;
			}else{
				msg = false;
			}
			`
    );
    return msg;
  }
  async number_of_contents() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".message-content");
    return items.length;
  }
  async get_last_content() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".message-content");
    return items[items.length - 1].textContent || "";
  }
  async request(ctx, timeout = 60) {
    let view = this.view;
    let N1 = await this.number_of_receive_msg();
    await this.paste_msg(ctx);
    await this.delay(1e3);
    await this.click_btn_of_send();
    let N2 = await this.number_of_receive_msg();
    while (N2 != N1 + 1) {
      await this.delay(1e3);
      N2 = await this.number_of_receive_msg();
      timeout = timeout - 1;
      if (timeout < 0) {
        break;
      }
    }
    if (N2 == N1 + 1) {
      let doc = await this.document();
      let items = doc.querySelectorAll(".message-content");
      N2 = await this.number_of_contents();
      new import_obsidian7.Notice(`${this.name} \u8BF4\u4E86\u70B9\u4EC0\u4E48`);
      return items[N2 - 1].textContent;
    } else {
      new import_obsidian7.Notice(`${this.name} \u4E0D\u8BF4\u8BDD`);
      console.log("Doubao N:", N1, N2);
      return null;
    }
  }
};

// src/LLM/Kimi.ts
var import_obsidian8 = require("obsidian");
var Kimi = class extends BaseWebViewer {
  constructor(app, homepage = "https://kimi.moonshot.cn/") {
    super(app, homepage, "Kimi");
  }
  async new_chat() {
    let msg = await this.view.webview.executeJavaScript(
      `
			document.querySelector('.new-chat-btn').click()
			`
    );
    return msg;
  }
  async click_btn_of_send() {
    let msg = await this.view.webview.executeJavaScript(
      `
			function delay(ms) {
				return new Promise(resolve => {
					setTimeout(resolve, ms);
				});
			}
			async function click(){
				let button = document.querySelector('.send-button');
				let ariaDisabled = button.parentElement.classList.contains('disabled');
				while(!ariaDisabled){
					button.click();
					await delay(100);
					button = document.querySelector('.send-button');
					ariaDisabled = button.parentElement.classList.contains('disabled');
				}
			}
			click();
			`
    );
    return msg;
  }
  async paste_msg(ctx) {
    let msg;
    ctx = this.get_safe_ctx(ctx);
    const maxRetries = 1;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      msg = await this.webview.executeJavaScript(
        `
				function delay(ms) {
					return new Promise(resolve => {
					setTimeout(resolve, ms);
					});
				}

				// \u5C06\u5F02\u6B65\u903B\u8F91\u5C01\u88C5\u5230\u4E00\u4E2A async \u51FD\u6570\u4E2D
				async function insertTextAndSend(ctx) {
					// \u83B7\u53D6 textarea \u5E76\u805A\u7126
					let item = document.querySelector('.chat-input-editor-container').querySelector('.chat-input-editor');
					item.focus();

					// \u63D2\u5165\u6587\u672C
					setTimeout(() => {
						document.execCommand('insertText', false, ctx);
					}, 1000);
					let i = 100;
					// \u7B49\u5F85\u6309\u94AE\u53EF\u70B9\u51FB
					while (true) {
						let button = document.querySelector('.send-button');;
						let ariaDisabled = button.parentElement.classList.contains('disabled');
						if (ariaDisabled == false) {
							break;
						} else {
							await delay(100);
						}
						i = i-1;
						if(i<0){break}
					}
				}

				// \u8C03\u7528 async \u51FD\u6570
				insertTextAndSend(\`${ctx}\`);
				`
      );
      if (msg) {
        break;
      }
      await this.delay(1e3);
    }
    return msg;
  }
  async get_last_response() {
    let doc = await this.document();
    let items = doc.querySelectorAll(".markdown-container");
    if (items.length < 1) {
      return null;
    }
    let item = items[items.length - 1];
    let ctx = this.html_to_markdown(item.outerHTML);
    return ctx;
  }
  async number_of_copy_btns() {
    let doc = await this.document();
    let btns = doc.querySelectorAll('svg[name="Like"]');
    return btns.length;
  }
  async copy_last_content() {
    let msg = await this.webview.executeJavaScript(
      `
			btns = document.querySelectorAll('.segment-actions-content-btn');
			btns = Array.from(btns).filter(x=>x.textContent=='\u590D\u5236');
			if(btns.length>0){
				btns[btns.length-1].click();
				msg = true;
			}else{
				msg = false;
			}
			`
    );
    return msg;
  }
  async get_last_content() {
    var _a, _b, _c;
    let doc = await this.document();
    let chats = doc.getElementsByClassName("chat-content-item");
    return (_c = (_b = (_a = chats[chats.length - 1].querySelector(".segment-content-box")) == null ? void 0 : _a.textContent) == null ? void 0 : _b.trim()) != null ? _c : "";
  }
  async number_of_receive_msg() {
    let doc = await this.document();
    let btns = doc.querySelectorAll('svg[name="Like"]');
    return btns.length;
  }
  async request(ctx, timeout = 60) {
    var _a, _b;
    let N1 = await this.number_of_receive_msg();
    await this.paste_msg(ctx);
    await this.delay(1e3);
    await this.click_btn_of_send();
    let N2 = await this.number_of_receive_msg();
    while (N2 != N1 + 1) {
      await this.delay(1e3);
      N2 = await this.number_of_receive_msg();
      timeout = timeout - 1;
      if (timeout < 0) {
        break;
      }
    }
    if (N2 == N1 + 1) {
      let doc = await this.document();
      let chats = doc.getElementsByClassName("chat-content-item");
      new import_obsidian8.Notice(`${this.name} \u8BF4\u4E86\u70B9\u4EC0\u4E48`);
      let res = (_b = (_a = chats[chats.length - 1].querySelector(".segment-content-box")) == null ? void 0 : _a.textContent) != null ? _b : "";
      if (res == null ? void 0 : res.contains("\u5F53\u524D\u957F\u6587\u672C\u5BF9\u8BDD\u5DF2\u8FBE20\u8F6E")) {
        await this.new_chat();
        return this.request(ctx);
      } else {
        return res;
      }
    } else {
      let res = await this.get_last_content();
      if (res == null ? void 0 : res.contains("\u5F53\u524D\u957F\u6587\u672C\u5BF9\u8BDD\u5DF2\u8FBE20\u8F6E")) {
        await this.new_chat();
        return this.request(ctx);
      }
      new import_obsidian8.Notice(`${this.name} \u4E0D\u8BF4\u8BDD`);
      return "";
    }
  }
};

// src/LLM/Yuanbao.ts
var Yuanbao = class extends BaseWebViewer {
  constructor(app, homepage = "https://yuanbao.tencent.com/chat") {
    super(app, homepage, "\u5143\u5B9D");
  }
  async new_chat() {
    let msg = await this.view.webview.executeJavaScript(
      `
			document.querySelector('.yb-common-nav__new-chat').click()
			`
    );
    return msg;
  }
  async paste_msg(ctx) {
    let msg;
    ctx = this.get_safe_ctx(ctx);
    const maxRetries = 1;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      msg = await this.webview.executeJavaScript(
        `
				function delay(ms) {
					return new Promise(resolve => {
					setTimeout(resolve, ms);
					});
				}

				// \u5C06\u5F02\u6B65\u903B\u8F91\u5C01\u88C5\u5230\u4E00\u4E2A async \u51FD\u6570\u4E2D
				async function insertTextAndSend(ctx) {
					// \u83B7\u53D6 textarea \u5E76\u805A\u7126
					
					let item = document.querySelector('.chat-input-editor  .ql-editor.ql-blank');
					item.focus();

					// \u63D2\u5165\u6587\u672C
					setTimeout(() => {
						document.execCommand('insertText', false, ctx);
					}, 1000);
					let i = 100;
					// \u7B49\u5F85\u6309\u94AE\u53EF\u70B9\u51FB
					while (true) {
						let item = document.querySelector('.chat-input-editor').querySelector('.ql-editor.ql-blank')
						if(item){
							await delay(100);
						}else{
							break;
						}
						i = i-1;
						if(i<0){break}
					}
				}

				// \u8C03\u7528 async \u51FD\u6570
				insertTextAndSend(\`${ctx}\`);
				`
      );
      if (msg) {
        break;
      }
      await this.delay(1e3);
    }
    return msg;
  }
  async click_btn_of_send() {
    let msg = await this.webview.executeJavaScript(
      `
			function delay(ms) {
				return new Promise(resolve => {
					setTimeout(resolve, ms);
				});
			}
			async function click(){
				let button = document.querySelector('a[class^="style__send-btn"]');
				while(!button){
					await delay(100);
					button = document.querySelector('a[class^="style__send-btn"]');
				}
				button.click();
			}
			click();
			`
    );
    return msg;
  }
  async number_of_receive_msg() {
    let msg = await this.webview.executeJavaScript(
      `
			function number_of_receive_msg(){
				let btns = document.querySelectorAll('.agent-chat__toolbar > .agent-chat__toolbar__right > .agent-chat__toolbar__item:nth-child(5)');
				let N = parseInt(btns.length);
				return N;
			}
			number_of_receive_msg()
			`
    );
    return msg;
  }
  async get_last_content() {
    let doc = await this.document();
    let items = Array.from(doc.querySelectorAll(".hyc-content-md .hyc-common-markdown")).filter(
      (el) => {
        var _a, _b;
        return !((_b = (_a = el.parentElement) == null ? void 0 : _a.parentElement) == null ? void 0 : _b.classList.contains("hyc-component-reasoner__think-content"));
      }
    );
    let ctx = this.html_to_markdown(items[items.length - 1].outerHTML);
    return ctx;
  }
};

// src/LLM/ChatGPT.ts
var ChatGPT = class extends BaseWebViewer {
  constructor(app, homepage = "https://chatgpt.com") {
    super(app, homepage, "ChatGPT");
  }
  async new_chat() {
    let msg = await this.view.webview.executeJavaScript(
      `
			document.querySelector('a[data-testid="create-new-chat-button"]').click()
			`
    );
    return msg;
  }
  async paste_msg(ctx) {
    let msg;
    ctx = this.get_safe_ctx(ctx);
    const maxRetries = 1;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      msg = await this.webview.executeJavaScript(
        `
				function delay(ms) {
					return new Promise(resolve => {
					setTimeout(resolve, ms);
					});
				}

				// \u5C06\u5F02\u6B65\u903B\u8F91\u5C01\u88C5\u5230\u4E00\u4E2A async \u51FD\u6570\u4E2D
				async function insertTextAndSend(ctx) {
					// \u83B7\u53D6 textarea \u5E76\u805A\u7126
					
					ctx = '\u4F60\u662F\u8C01'
					let item = document.querySelector('div#prompt-textarea.ProseMirror');
					item.focus();

					// \u63D2\u5165\u6587\u672C
					setTimeout(() => {
						document.execCommand('insertText', false, ctx);
					}, 1000);
					let i = 100;
					// \u7B49\u5F85\u6309\u94AE\u53EF\u70B9\u51FB
					while (true) {
						let item = document.querySelector('button#composer-submit-button')
						if(!item){
							await delay(100);
						}else{
							break;
						}
						i = i-1;
						if(i<0){break}
					}
				}

				// \u8C03\u7528 async \u51FD\u6570
				insertTextAndSend(\`${ctx}\`);
				`
      );
      if (msg) {
        break;
      }
      await this.delay(1e3);
    }
    return msg;
  }
  async click_btn_of_send() {
    let msg = await this.webview.executeJavaScript(
      `
			function delay(ms) {
				return new Promise(resolve => {
					setTimeout(resolve, ms);
				});
			}
			async function click(){
				let button = document.querySelector('button#composer-submit-button');
				while(!button){
					await delay(100);
					button = document.querySelector('button#composer-submit-button');
				}
				button.click();
			}
			click();
			`
    );
    return msg;
  }
  async number_of_receive_msg() {
    let msg = await this.webview.executeJavaScript(
      `
			function number_of_receive_msg(){
				let btns = document.querySelectorAll('div.flex.justify-start span[data-state="closed"]:nth-child(5)');
				let N = parseInt(btns.length);
				return N;
			}
			number_of_receive_msg()
			`
    );
    return msg;
  }
  async get_last_content() {
    let doc = await this.document();
    let items = Array.from(doc.querySelectorAll('div[data-message-author-role="assistant"] div.markdown'));
    let ctx = this.html_to_markdown(items[items.length - 1].outerHTML);
    return ctx;
  }
};

// src/commands.ts
var cmd_chat_sequence = (plugin) => ({
  id: "cmd_chat_sequence",
  name: plugin.strings.cmd_chat_sequence,
  callback: async () => {
    await plugin.cmd_chat_sequence();
  }
});
var cmd_chat_sequence_stop = (plugin) => ({
  id: "cmd_chat_sequence_stop",
  name: plugin.strings.cmd_chat_sequence_stop,
  callback: async () => {
    plugin.auto_chat = false;
  }
});
var cmd_open_new_llm = (plugin) => ({
  id: "cmd_open_new_llm",
  name: plugin.strings.cmd_open_new_llm,
  callback: async () => {
    let hpage = await plugin.easyapi.dialog_suggest(
      plugin.basellms.map((x) => x.name),
      plugin.basellms.map((x) => x.homepage)
    );
    if (hpage) {
      await plugin.basewv.open_homepage(hpage, -1);
    }
  }
});
var cmd_chat_every_llms = (plugin) => ({
  id: "cmd_chat_every_llms",
  name: plugin.strings.cmd_chat_every_llms,
  callback: async () => {
    await plugin.cmd_chat_every_llms();
  }
});
var cmd_chat_first_llms = (plugin) => ({
  id: "cmd_chat_first_llms",
  name: plugin.strings.cmd_chat_first_llms,
  callback: async () => {
    await plugin.cmd_chat_first_llms();
  }
});
var commandBuilders = [];
var commandBuildersDesktop = [
  // cmd_refresh_llms,
  cmd_open_new_llm,
  cmd_chat_first_llms,
  cmd_chat_every_llms,
  cmd_chat_sequence,
  cmd_chat_sequence_stop
];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
  if (plugin.app.isMobile == false) {
    commandBuildersDesktop.forEach((c) => {
      plugin.addCommand(c(plugin));
    });
  }
}

// main.ts
var WebViewLLMPlugin = class extends import_obsidian9.Plugin {
  async onload() {
    this.app.workspace.onLayoutReady(
      async () => {
        await this._onload_();
      }
    );
  }
  async _onload_() {
    this.auto_chat = true;
    this.easyapi = new EasyAPI(this.app);
    this.strings = new Strings();
    await this.loadSettings();
    this.addSettingTab(new WebViewLLMSettingTab(this.app, this));
    this.llms = [];
    this.deepseek = new DeepSeek(this.app);
    this.doubao = new Doubao(this.app);
    this.kimi = new Kimi(this.app);
    this.yuanbao = new Yuanbao(this.app);
    this.chatgpt = new ChatGPT(this.app);
    this.basellms = [
      this.yuanbao,
      this.chatgpt,
      this.kimi,
      this.doubao,
      this.deepseek
    ];
    this.basewv = new BaseWebViewer(this.app, "");
    addCommands(this);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async cmd_refresh_llms() {
    let views = this.basewv.views;
    this.llms = this.llms.slice(0, 0);
    for (let view of views) {
      if (view.url.startsWith(this.deepseek.homepage)) {
        let llm = new DeepSeek(this.app);
        llm.view = view;
        this.llms.push(llm);
      } else if (view.url.startsWith(this.doubao.homepage)) {
        let llm = new Doubao(this.app);
        llm.view = view;
        this.llms.push(llm);
      } else if (view.url.startsWith(this.kimi.homepage)) {
        let llm = new Kimi(this.app);
        llm.view = view;
        this.llms.push(llm);
      } else if (view.url.startsWith(this.chatgpt.homepage)) {
        let llm = new ChatGPT(this.app);
        llm.view = view;
        this.llms.push(llm);
      } else if (view.url.startsWith(this.yuanbao.homepage)) {
        let llm = new Yuanbao(this.app);
        llm.view = view;
        this.llms.push(llm);
      }
    }
  }
  async cmd_chat_sequence() {
    var _a, _b;
    await this.cmd_refresh_llms();
    if (this.llms.length == 0) {
      return;
    }
    this.auto_chat = true;
    let idx = 0;
    let llm = this.llms[idx];
    let rsp = (_a = await llm.get_last_content()) != null ? _a : "";
    while (this.auto_chat && rsp && rsp != "") {
      if (this.settings.auto_stop.split("\n").contains(rsp.trim())) {
        this.auto_chat = false;
        break;
      }
      idx = idx + 1;
      if (idx == this.llms.length) {
        idx = 0;
      }
      llm = this.llms[idx];
      rsp = (_b = await llm.request(rsp)) != null ? _b : "";
    }
    this.auto_chat = false;
  }
  async get_prompt(tfile, idx = 0) {
    let prompt = await this.easyapi.editor.get_selection();
    if (prompt != "") {
      return prompt;
    }
    if (!tfile) {
      return "";
    }
    let items = this.settings.prompt_name.trim().split("\n");
    if (items.length == 0) {
      return "";
    }
    for (let item of items) {
      prompt = await this.easyapi.editor.get_code_section(tfile, item, idx);
      if (prompt) {
        return prompt;
      }
      prompt = await this.easyapi.editor.get_heading_section(tfile, item, idx);
      if (prompt) {
        return prompt;
      }
    }
    return "";
  }
  async cmd_chat_every_llms() {
    await this.cmd_refresh_llms();
    let prompt = await this.get_prompt(this.easyapi.cfile);
    if (prompt == "") {
      return;
    }
    for (let llm of this.llms) {
      let rsp = await llm.request(prompt);
    }
  }
  async cmd_chat_first_llms() {
    await this.cmd_refresh_llms();
    let prompt = await this.get_prompt(this.easyapi.cfile);
    if (prompt == "") {
      return;
    }
    for (let llm of this.llms) {
      await llm.request(prompt);
      break;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
