/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EasyApiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/strings.ts
var Strings = class {
  constructor() {
    let lang = window.localStorage.getItem("language");
    if (lang) {
      this.language = lang;
    } else {
      this.language = "en";
    }
  }
  get cmd_refresh_llms() {
    if (this.language == "zh") {
      return "\u5237\u65B0\u7FA4\u7EC4";
    } else {
      return "Refresh llms";
    }
  }
  get cmd_open_new_llm() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u65B0AI";
    } else {
      return "Open new llm";
    }
  }
};
var strings = new Strings();

// src/setting.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  strict_mode: false,
  vaultDir: ""
};

// src/commands.ts
var commandBuilders = [];
var commandBuildersDesktop = [];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
  if (plugin.app.isMobile == false) {
    commandBuildersDesktop.forEach((c) => {
      console.log("add:", c);
      plugin.addCommand(c(plugin));
    });
  }
}

// src/gui/inputSuggester.ts
var import_obsidian2 = require("obsidian");
var InputSuggester = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app, displayItems, items, options = {}) {
    super(app);
    this.displayItems = displayItems;
    this.items = items;
    this.promise = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.inputEl.addEventListener("keydown", (event) => {
      var _a;
      if (event.code !== "Tab") {
        return;
      }
      const self = this;
      const { values, selectedItem } = self.chooser;
      const { value } = this.inputEl;
      this.inputEl.value = (_a = values[selectedItem].item) != null ? _a : value;
    });
    if (options.placeholder)
      this.setPlaceholder(options.placeholder);
    if (options.limit)
      this.limit = options.limit;
    if (options.emptyStateText)
      this.emptyStateText = options.emptyStateText;
    this.open();
  }
  static Suggest(app, displayItems, items, options = {}) {
    const newSuggester = new InputSuggester(
      app,
      displayItems,
      items,
      options
    );
    return newSuggester.promise;
  }
  getItemText(item) {
    if (item === this.inputEl.value)
      return item;
    return this.displayItems[this.items.indexOf(item)];
  }
  getItems() {
    if (this.inputEl.value === "")
      return this.items;
    return [this.inputEl.value, ...this.items];
  }
  selectSuggestion(value, evt) {
    this.resolved = true;
    super.selectSuggestion(value, evt);
  }
  onChooseItem(item, evt) {
    this.resolved = true;
    this.resolvePromise(item);
  }
  onClose() {
    super.onClose();
    if (!this.resolved)
      this.rejectPromise("no input given.");
  }
};
async function dialog_suggest(displayItems, items, placeholder = "") {
  try {
    return await InputSuggester.Suggest(
      this.app,
      displayItems,
      items,
      {
        placeholder
      }
    );
  } catch (error) {
    return null;
  }
}

// src/gui/inputPrompt.ts
var import_obsidian3 = require("obsidian");
var InputPrompt = class extends import_obsidian3.Modal {
  constructor(app, header, placeholder, value) {
    super(app);
    this.header = header;
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (!evt.isComposing && evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.placeholder = placeholder != null ? placeholder : "";
    this.input = value != null ? value : "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app, header, placeholder, value) {
    const newPromptModal = new InputPrompt(
      app,
      header,
      placeholder,
      value
    );
    return newPromptModal.waitForClose;
  }
  display() {
    this.containerEl.addClass("quickAddModal", "qaInputPrompt");
    this.contentEl.empty();
    this.titleEl.textContent = this.header;
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(
      mainContentContainer,
      this.placeholder,
      this.input
    );
    this.createButtonBar(mainContentContainer);
  }
  createInputField(container, placeholder, value) {
    const textComponent = new import_obsidian3.TextComponent(container);
    textComponent.inputEl.classList.add("input-field");
    textComponent.setPlaceholder(placeholder != null ? placeholder : "").setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  createButton(container, text, callback) {
    const btn = new import_obsidian3.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    this.createButton(
      buttonBarContainer,
      "Ok",
      this.submitClickCallback
    ).setCta();
    this.createButton(
      buttonBarContainer,
      "Cancel",
      this.cancelClickCallback
    );
    buttonBarContainer.classList.add("button-bar");
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener(
      "keydown",
      this.submitEnterCallback
    );
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
async function dialog_prompt(header = "Input", placeholder = "", value = "") {
  try {
    return await InputPrompt.Prompt(
      this.app,
      header,
      placeholder,
      value
    );
  } catch (e) {
    return null;
  }
}

// src/editor.ts
var EasyEditor = class {
  constructor(app, api) {
    this.app = app;
    this.api = api;
  }
  async get_code_section(tfile, ctype = "", idx = 0, as_simple = true) {
    var _a;
    let dvmeta = this.app.metadataCache.getFileCache(tfile);
    let ctx = await this.app.vault.cachedRead(tfile);
    let section = (_a = dvmeta == null ? void 0 : dvmeta.sections) == null ? void 0 : _a.filter((x) => x.type == "code").filter((x) => {
      let c = ctx.slice(x.position.start.offset, x.position.end.offset).trim();
      return c.startsWith("```" + ctype) || c.startsWith("~~~" + ctype);
    })[idx];
    if (section) {
      let c = ctx.slice(
        section.position.start.offset,
        section.position.end.offset
      );
      if (as_simple) {
        return c.slice(4 + ctype.length, c.length - 4);
      } else {
        let res = {
          code: c,
          section,
          ctx
        };
        return res;
      }
    }
  }
};

// src/api.ts
var EasyAPI = class {
  constructor(app) {
    this.app = app;
    this.dialog_suggest = dialog_suggest;
    this.dialog_prompt = dialog_prompt;
    this.editor = new EasyEditor(app, this);
  }
  get_plugin(name) {
    var _a;
    return (_a = this.app.plugins) == null ? void 0 : _a.plugins[name];
  }
  get nc() {
    return this.get_plugin("note-chain");
  }
};

// main.ts
var EasyApiPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    this.app.workspace.onLayoutReady(
      async () => {
        await this._onload_();
      }
    );
  }
  async _onload_() {
    this.strings = new Strings();
    await this.loadSettings();
    this.api = new EasyAPI(this.app);
    this.app.easyapi = this.api;
    addCommands(this);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
