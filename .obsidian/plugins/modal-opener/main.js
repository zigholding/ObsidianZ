/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ModalOpenerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/lang/helpers.ts
var import_obsidian = require("obsidian");

// src/lang/locale/ar.ts
var ar_default = {};

// src/lang/locale/cz.ts
var cz_default = {};

// src/lang/locale/da.ts
var da_default = {};

// src/lang/locale/de.ts
var de_default = {};

// src/lang/locale/en.ts
var en_default = {
  "General": "General",
  "Menu Items": "Menu Items",
  "Custom Commands": "Custom Commands",
  "No active modal window": "No active modal window",
  "No link found at cursor position": "No link found at cursor position",
  "Toggle table of contents": "Toggle table of contents",
  "Create and edit in modal": "Create and edit in modal",
  "Enter new file name": "Enter new file name: ",
  "Wiki link": "Wiki link",
  "Embed link": "Embed link",
  "Custom element selectors": "Custom element selectors",
  "Enter CSS selectors for elements that should trigger preview mode (comma-separated)": "Enter CSS selectors for elements that should trigger preview mode (comma-separated)",
  "File not found: ": "File not found: ",
  "Unsupported file or link format": "Unsupported file or link format",
  "Drag duration too short": "Drag duration too short",
  "The file or link does not valid: ": "The file or link does not valid: ",
  "Failed to create file: ": "Failed to create file: ",
  "Open in modal window error": "Open in modal window error",
  "Open in modal window": "Open in modal window",
  "Delete linked attachment": "Delete linked attachment",
  "Confirm deletion?": "Confirm deletion?",
  "File moved to trash": "File moved to trash",
  "Failed to delete file": "Failed to delete file",
  // General settings
  "Open with": "Open with",
  "Drag & Drop": "Drag & Drop",
  "Alt & Left click": "Alt & Left click",
  "Both": "Both",
  "Default editing mode": "Default editing mode",
  "Select the default mode for opening files in the modal window": "Select the default mode for opening files in the modal window",
  "Current file": "Current file",
  "Reading": "Reading",
  "Editing": "Editing",
  "Drag and drop time threshold": "Drag and drop time threshold",
  "Set the minimum drag and drop time (in milliseconds) to trigger the link to open.": "Set the minimum drag and drop time (in milliseconds) to trigger the link to open",
  "Add hover button": "Add hover button",
  "Add hover button to": "Add hover button to",
  "Add hover button for accessibility functions in the modal window": "Add hover button for accessibility functions in the modal window",
  "File view": "File view",
  "Link view": "Link view",
  "Opens in new tab": "Opens in new tab",
  "Open in browser": "Open in browser",
  "Copy web link": "Copy web link",
  "Switch dark mode": "Switch dark mode",
  "More options": "More options",
  "Copied to clipboard": "Link copied to clipboard",
  "Behavior": "Behavior",
  "Single-click trigger": "Single-click trigger",
  "Single-click trigger\u{1F4F1}": "Single-click trigger\u{1F4F1}",
  "Select trigger type": "Select trigger type",
  "Internal link": "Internal link",
  "External link": "External link",
  "If enabled, clicking links will open them in modal window without holding Alt.": "If enabled, clicking links will open them in modal window without holding Alt.",
  "Disable external click close": "Disable external click close",
  "Only works in read mode": "Only works in read mode",
  "Only works in read mode\u{1F4F1}": "Only works in read mode\u{1F4F1}",
  "Click trigger works only in read mode": "Click trigger works only in read mode",
  "Custom exclude elements": "Custom exclude elements",
  "Enter CSS selectors for specific elements that should not trigger a click event (comma-separated)": "Enter CSS selectors for specific elements that should not trigger a click event (comma-separated)",
  "Enter class names of elements to exclude, e.g., .folder-overview-list-item": "Enter class names of elements to exclude, e.g., .folder-overview-list-item",
  "Custom exclude containers": "Custom exclude containers",
  "Enter CSS selectors for parent containers whose entire content should be excluded from triggering a click event (comma-separated)": "Enter CSS selectors for parent containers whose entire content should be excluded from triggering a click event (comma-separated)",
  "Enter class names of containers to exclude, e.g., .block-language-table-of-contents": "Enter class names of containers to exclude, e.g., .block-language-table-of-contents",
  "Custom exclude files": "Custom exclude files",
  "Enter files to disable click triggering, links in these files will be ignored. (comma separated)": "Enter files to disable click triggering, links in these files will be ignored. (comma separated)",
  "Enter file path to exclude, e.g., untitled.md, folder/subfolder/untitled.md": "Enter file path to exclude, e.g., untitled.md, folder/subfolder/untitled.md",
  "Use only the Close button and Esc to close.": "Use only the Close button and Esc to close",
  "Excalidraw Disables the Esc key": "Excalidraw Disables the Esc key",
  "Disable Esc key to close modal when editing Excalidraw": "Disable Esc key to close modal when editing Excalidraw",
  "Refresh view on close": "Refresh view on close",
  "Refresh views when closing modal window, currently only refreshing after editing Canvas and Markmind file": "Refresh views when closing modal, currently only refreshing after editing Canvas and Markmind file",
  "Prevents duplicate tabs": "Prevents duplicate tabs",
  "In a new leaf opened the note to prevent duplicate (compatible with Modal-Opener, function from Mononote plugin)": "In a new leaf opened the note to prevent duplicate (compatible with Modal-Opener, function from Mononote plugin",
  "Delay time": "Delay time",
  "Delay in milliseconds before performing operations": "Delay in milliseconds before performing operations",
  "Extend": "Extend",
  "Automatically switch to dark mode": "Automatically switch to dark mode",
  "Automatically switch to dark mode in web view": "Automatically switch to dark mode in web view",
  "Enable immersive translation": "Enable immersive translation",
  "Load immersive translation plugin in web view": "Load immersive translation plugin in web view",
  "Styles": "Styles",
  "Modal width": "Modal width",
  "Modal width\u{1F4F1}": "Modal width\u{1F4F1}",
  "Modal height": "Modal height",
  "Modal height\u{1F4F1}": "Modal height\u{1F4F1}",
  "Enter any valid CSS unit": "Enter any valid CSS unit",
  "Enable modal window rounding": "Enable modal window rounding",
  "Toggle to enable or disable modal window rounding": "Toggle to enable or disable modal window rounding",
  "Enable animation and blur": "Enable animation and blur",
  "Toggle to enable or disable animation and blur effects": "Toggle to enable or disable animation and blur effects",
  "Show view header of the file": "Show view header of the file",
  "Show view header of the link": "Show view header of the link",
  "Show the file's navigation bar in the modal window": "Show the file's navigation bar in the modal window",
  "Show the web viewer's navigation bar in the modal window": "Show the web viewer's navigation bar in the modal window",
  "Show metadata": "Display metadata",
  "Show file metadata in the modal window": "Show file metadata in the modal window",
  "Hide scroll": "Hide scroll",
  "Hide scrollbar in the modal window": "Hide scrollbar in the modal window",
  "Enable the right-click menu": "Enable the right-click menu",
  "Show or hide the menu and its menu options": "Show or hide the menu and select menu items",
  "Enable the delete Linked attachment menu item": "Enable the delete Linked attachment menu item",
  "Menu item": "Menu item",
  "Modal window open delay": "Modal window open delay",
  "Set the delay (in milliseconds) before opening modal window after creating new file.": "Set the delay (in milliseconds) before opening modal window after creating new file.",
  "Toggle menu items to show or hide in the right-click context menu": "Toggle menu items to show or hide in the right-click context menu",
  "Plugin is not enabled or installed": "Plugin is not enabled or installed",
  "Details": "Details",
  "Custom commands": "Custom commands",
  "Add custom command": "Add custom command",
  "Add a new custom command": "Commands can be used with other plugins, such as Commander",
  "Add": "Add",
  "Command name": "Input the command name",
  "Command": "Command",
  "Description": "Enter file path or web link",
  "Delete": "Delete",
  "Confirm": "Confirm",
  "Cancel": "Cancel",
  "The command name already exists, please use a different name": "The command name already exists, please use a different name",
  "Command added successfully": "Command added successfully",
  "Please enter both command name and description": "Please enter both command name and description",
  "Command deleted successfully.": "Command deleted successfully."
};

// src/lang/locale/en-gb.ts
var en_gb_default = {};

// src/lang/locale/es.ts
var es_default = {};

// src/lang/locale/fr.ts
var fr_default = {};

// src/lang/locale/hi.ts
var hi_default = {};

// src/lang/locale/id.ts
var id_default = {};

// src/lang/locale/it.ts
var it_default = {};

// src/lang/locale/ja.ts
var ja_default = {};

// src/lang/locale/ko.ts
var ko_default = {};

// src/lang/locale/nl.ts
var nl_default = {};

// src/lang/locale/no.ts
var no_default = {};

// src/lang/locale/pl.ts
var pl_default = {};

// src/lang/locale/pt.ts
var pt_default = {};

// src/lang/locale/pt-br.ts
var pt_br_default = {};

// src/lang/locale/ro.ts
var ro_default = {};

// src/lang/locale/ru.ts
var ru_default = {};

// src/lang/locale/tr.ts
var tr_default = {};

// src/lang/locale/zh-cn.ts
var zh_cn_default = {
  "General": "\u5E38\u89C4",
  "Menu Items": "\u83DC\u5355",
  "Custom Commands": "\u81EA\u5B9A\u4E49\u547D\u4EE4",
  "No active modal window": "\u6CA1\u6709\u6D3B\u52A8\u7684\u6A21\u6001\u7A97\u53E3",
  "No link found at cursor position": "\u5728\u5149\u6807\u4F4D\u7F6E\u627E\u4E0D\u5230\u94FE\u63A5",
  "Toggle table of contents": "\u663E\u793A\u76EE\u5F55",
  "Create and edit in modal": "\u521B\u5EFA\u5E76\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u7F16\u8F91",
  "Enter new file name": "\u8F93\u5165\u65B0\u6587\u4EF6\u540D\uFF1A",
  "Wiki link": "Wiki\u94FE\u63A5",
  "Embed link": "\u5D4C\u5165\u94FE\u63A5",
  "Custom element selectors": "\u81EA\u5B9A\u4E49\u5143\u7D20\u9009\u62E9\u5668",
  "Enter CSS selectors for elements that should trigger preview mode (comma-separated)": "\u4E3A\u5E94\u89E6\u53D1\u9884\u89C8\u6A21\u5F0F\u7684\u5143\u7D20\u8F93\u5165CSS\u9009\u62E9\u5668\uFF08\u9017\u53F7\u5206\u9694\uFF09",
  "File not found: ": "\u672A\u627E\u5230\u6587\u4EF6: ",
  "Unsupported file or link format": "\u4E0D\u652F\u6301\u7684\u6587\u4EF6\u6216\u94FE\u63A5\u683C\u5F0F",
  "Drag duration too short": "\u62D6\u62FD\u65F6\u95F4\u592A\u77ED",
  "The file or link does not valid: ": "\u6587\u4EF6\u6216\u94FE\u63A5\u65E0\u6548: ",
  "Failed to create file: ": "\u521B\u5EFA\u6587\u4EF6\u5931\u8D25: ",
  "Open in modal window error": "\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u6253\u5F00\u9519\u8BEF",
  "Open in modal window": "\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u6253\u5F00",
  "Delete linked attachment": "\u5220\u9664\u94FE\u63A5\u9644\u4EF6",
  "Confirm deletion?": "\u786E\u8BA4\u5220\u9664\uFF1F",
  "File moved to trash": "\u6587\u4EF6\u79FB\u81F3\u5E9F\u7EB8\u7BD3",
  "Failed to delete file": "\u5220\u9664\u6587\u4EF6\u5931\u8D25",
  // General settings
  "Open with": "\u6253\u5F00\u65B9\u5F0F",
  "Drag & Drop": "\u62D6\u62FD",
  // 'Middle mouse button':'鼠标中键（仅阅读视图）',
  "Alt & Left click": "Alt\uFF0B\u5DE6\u952E",
  "Both": "\u5168\u90E8",
  "Default editing mode": "\u9ED8\u8BA4\u7F16\u8F91\u6A21\u5F0F",
  "Select the default mode for opening files in the modal window": "\u9009\u62E9\u6253\u5F00\u6587\u4EF6\u7684\u9ED8\u8BA4\u6A21\u5F0F",
  "Current file": "\u5F53\u524D\u6587\u4EF6",
  "Reading": "\u9605\u8BFB\u6A21\u5F0F",
  "Editing": "\u7F16\u8F91\u6A21\u5F0F",
  "Drag and drop time threshold": "\u62D6\u62FD\u65F6\u95F4\u9608\u503C",
  "Set the minimum drag and drop time (in milliseconds) to trigger the link to open.": "\u8BBE\u7F6E\u89E6\u53D1\u94FE\u63A5\u6253\u5F00\u7684\u6700\u5C0F\u62D6\u653E\u65F6\u95F4\uFF08\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\uFF09",
  "Add hover button": "\u6DFB\u52A0\u60AC\u6D6E\u6309\u94AE",
  "Add hover button to": "\u6DFB\u52A0\u60AC\u6D6E\u6309\u94AE\u7684\u89C6\u56FE",
  "Add hover button for accessibility functions in the modal window": "\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u6DFB\u52A0\u7528\u4E8E\u8F85\u52A9\u529F\u80FD\u7684\u60AC\u505C\u6309\u94AE",
  "File view": "\u6587\u4EF6\u89C6\u56FE",
  "Link view": "\u94FE\u63A5\u89C6\u56FE",
  "Opens in new tab": "\u5728\u65B0\u6807\u7B7E\u9875\u4E2D\u6253\u5F00",
  "Open in browser": "\u5728\u6D4F\u89C8\u5668\u6253\u5F00",
  "Copy web link": "\u590D\u5236\u7F51\u9875\u94FE\u63A5",
  "Switch dark mode": "\u5207\u6362\u591C\u95F4\u6A21\u5F0F",
  "More options": "\u66F4\u591A\u9009\u9879",
  "Copied to clipboard": "\u94FE\u63A5\u5DF2\u590D\u5236\u5230\u526A\u5207\u677F",
  "Behavior": "\u884C\u4E3A",
  "Single-click trigger": "\u5355\u51FB\u89E6\u53D1",
  "Single-click trigger\u{1F4F1}": "\u5355\u51FB\u89E6\u53D1\u{1F4F1}",
  "Select trigger type": "\u9009\u62E9\u89E6\u53D1\u7C7B\u578B",
  "Internal link": "\u5185\u90E8\u94FE\u63A5",
  "External link": "\u5916\u90E8\u94FE\u63A5",
  "If enabled, clicking links will open them in modal window without holding Alt.": "\u5982\u679C\u542F\u7528\uFF0C\u70B9\u51FB\u94FE\u63A5\u5C06\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u6253\u5F00\u94FE\u63A5\uFF0C\u800C\u4E0D\u9700\u8981\u6309\u4F4FAlt\u952E\u3002",
  "Only works in read mode": "\u4EC5\u5728\u9605\u8BFB\u6A21\u5F0F\u4E0B\u751F\u6548",
  "Only works in read mode\u{1F4F1}": "\u4EC5\u5728\u9605\u8BFB\u6A21\u5F0F\u4E0B\u751F\u6548\u{1F4F1}",
  "Click trigger works only in read mode": "\u5355\u51FB\u89E6\u53D1\u4EC5\u5728\u9605\u8BFB\u6A21\u5F0F\u4E0B\u751F\u6548",
  "Custom exclude elements": "\u81EA\u5B9A\u4E49\u6392\u9664\u5143\u7D20",
  "Enter CSS selectors for specific elements that should not trigger a click event (comma-separated)": "\u4E3A\u7279\u5B9A\u5143\u7D20\u8F93\u5165CSS\u9009\u62E9\u5668\uFF0C\u5176\u5C06\u88AB\u6392\u9664\uFF0C\u4E0D\u4F1A\u89E6\u53D1\u5355\u51FB\u4E8B\u4EF6\uFF08\u4EE5\u9017\u53F7\u5206\u9694\uFF09",
  "Enter class names of elements to exclude, e.g., .folder-overview-list-item": "\u8F93\u5165\u8981\u6392\u9664\u7684\u5143\u7D20\u7C7B\u540D\uFF0C\u4F8B\u5982\uFF1A.folder-overview-list-item",
  "Custom exclude containers": "\u81EA\u5B9A\u4E49\u6392\u9664\u5BB9\u5668",
  "Enter CSS selectors for parent containers whose entire content should be excluded from triggering a click event (comma-separated)": "\u4E3A\u7236\u5BB9\u5668\u8F93\u5165CSS\u9009\u62E9\u5668\uFF0C\u7236\u5BB9\u5668\u7684\u5168\u90E8\u5185\u5BB9\u5C06\u88AB\u6392\u9664\uFF0C\u4E0D\u4F1A\u89E6\u53D1\u5355\u51FB\u4E8B\u4EF6\uFF08\u4EE5\u9017\u53F7\u5206\u9694\uFF09",
  "Enter class names of containers to exclude, e.g., .block-language-table-of-contents": "\u8F93\u5165\u8981\u6392\u9664\u7684\u5BB9\u5668\u7C7B\u540D\uFF0C\u4F8B\u5982\uFF1A.block-language-table-of-contents",
  "Custom exclude files": "\u81EA\u5B9A\u4E49\u6392\u9664\u6587\u4EF6",
  "Enter files to disable click triggering, links in these files will be ignored. (comma separated)": "\u8F93\u5165\u8981\u7981\u7528\u5355\u51FB\u89E6\u53D1\u7684\u6587\u4EF6\uFF0C\u8FD9\u4E9B\u6587\u4EF6\u4E2D\u7684\u94FE\u63A5\u5C06\u88AB\u5FFD\u7565\uFF0C\u4E0D\u4F1A\u89E6\u53D1\u5355\u51FB\u4E8B\u4EF6\uFF08\u4EE5\u9017\u53F7\u5206\u9694\uFF09",
  "Enter file path to exclude, e.g., untitled.md, folder/subfolder/untitled.md": "\u8F93\u5165\u8981\u6392\u9664\u7684\u6587\u4EF6\uFF0C\u4F8B\u5982\uFF0Cuntitled.md\uFF0C folder/subfolder/untitled.md",
  "Disable external click close": "\u7981\u7528\u5916\u90E8\u70B9\u51FB\u5173\u95ED",
  "Use only the Close button and Esc to close.": "\u4EC5\u4F7F\u7528 \u201C\u5173\u95ED\u201D \u6309\u94AE\u548C Esc \u952E\u5173\u95ED",
  "Excalidraw Disables the Esc key": "Excalidraw \u7981\u7528 Esc \u952E",
  "Disable Esc key to close modal when editing Excalidraw": "\u5728\u7F16\u8F91 Excalidraw \u65F6\u7981\u7528 Esc \u952E\u5173\u95ED\u6A21\u6001\u7A97\u53E3",
  "Refresh view on close": "\u5173\u95ED\u540E\u5237\u65B0\u89C6\u56FE",
  "Refresh views when closing modal window, currently only refreshing after editing Canvas and Markmind file": "\u5173\u95ED\u6A21\u6001\u7A97\u53E3\u65F6\u5237\u65B0\u89C6\u56FE\uFF0C\u76EE\u524D\u4EC5\u5728\u7F16\u8F91Canvas\u548CMarkmind\u6587\u4EF6\u540E\u5237\u65B0",
  "Prevents duplicate tabs": "\u9632\u6B62\u91CD\u590D\u6807\u7B7E\u9875",
  "In a new leaf opened the note to prevent duplicate (compatible with Modal-Opener, function from Mononote plugin)": "\u9632\u6B62\u91CD\u590D\u6807\u7B7E\u9875\u6253\u5F00\u7B14\u8BB0\uFF08\u517C\u5BB9Modal-Opener\uFF0C\u529F\u80FD\u6765\u81EAMononote\u63D2\u4EF6\uFF09",
  "Delay time": "\u5EF6\u8FDF\u65F6\u95F4",
  "Delay in milliseconds before performing operations": "\u6267\u884C\u64CD\u4F5C\u4E4B\u524D\u7684\u5EF6\u8FDF(\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D)",
  "Extend": "\u6269\u5C55",
  "Automatically switch to dark mode": "\u81EA\u52A8\u5207\u6362\u9ED1\u6697\u6A21\u5F0F",
  "Automatically switch to dark mode in web view": "\u5728\u7F51\u9875\u89C6\u56FE\u4E2D\u81EA\u52A8\u5207\u6362\u9ED1\u6697\u6A21\u5F0F",
  "Enable immersive translation": "\u542F\u7528\u6C89\u6D78\u5F0F\u7FFB\u8BD1",
  "Load immersive translation plugin in web view": "\u5728\u7F51\u9875\u89C6\u56FE\u4E2D\u52A0\u8F7D\u6C89\u6D78\u5F0F\u7FFB\u8BD1\u63D2\u4EF6",
  "Styles": "\u6837\u5F0F",
  "Modal width": "\u7A97\u53E3\u5BBD\u5EA6",
  "Modal width\u{1F4F1}": "\u7A97\u53E3\u5BBD\u5EA6\u{1F4F1}",
  "Modal height": "\u7A97\u53E3\u9AD8\u5EA6",
  "Modal height\u{1F4F1}": "\u7A97\u53E3\u9AD8\u5EA6\u{1F4F1}",
  "Enter any valid CSS unit": "\u8F93\u5165\u4EFB\u4F55\u6709\u6548\u7684CSS\u5355\u4F4D",
  "Enable modal window rounding": "\u542F\u7528\u6A21\u6001\u7A97\u53E3\u5706\u89D2",
  "Toggle to enable or disable modal window rounding": "\u5207\u6362\u4EE5\u542F\u7528\u6216\u7981\u7528\u6A21\u6001\u7A97\u53E3\u5706\u89D2\u6548\u679C",
  "Enable animation and blur": "\u542F\u7528\u52A8\u753B\u548C\u6A21\u7CCA",
  "Toggle to enable or disable animation and blur effects": "\u5207\u6362\u4EE5\u542F\u7528\u6216\u7981\u7528\u52A8\u753B\u548C\u6A21\u7CCA\u6548\u679C",
  "Show view header of the file": "\u663E\u793A\u6587\u4EF6\u7684\u89C6\u56FE\u6807\u9898",
  "Show view header of the link": "\u663E\u793A\u94FE\u63A5\u7684\u89C6\u56FE\u6807\u9898",
  "Show the file's navigation bar in the modal window": "\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u663E\u793A\u6587\u4EF6\u89C6\u56FE\u7684\u7684\u5BFC\u822A\u680F",
  "Show the web viewer's navigation bar in the modal window": "\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u663E\u793A Web viewer \u7684\u5BFC\u822A\u680F",
  "Show metadata": "\u663E\u793A\u5143\u6570\u636E",
  "Show file metadata in the modal window": "\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u663E\u793A\u6587\u4EF6\u5143\u6570\u636E",
  "Hide scroll": "\u9690\u85CF\u6EDA\u52A8\u6761",
  "Hide scrollbar in the modal window": "\u5728\u6A21\u6001\u7A97\u53E3\u4E2D\u9690\u85CF\u6EDA\u52A8\u6761",
  "Enable the right-click menu": "\u542F\u7528\u53F3\u952E\u83DC\u5355",
  "Show or hide the menu and its menu options": "\u663E\u793A\u6216\u9690\u85CF\u83DC\u5355\u53CA\u5176\u83DC\u5355\u9009\u9879",
  "Enable the delete Linked attachment menu item": "\u542F\u7528\u5220\u9664\u94FE\u63A5\u9644\u4EF6\u83DC\u5355\u9009\u9879",
  "Menu item": "\u83DC\u5355\u9879",
  "Modal window open delay": "\u6A21\u6001\u7A97\u53E3\u6253\u5F00\u5EF6\u8FDF",
  "Set the delay (in milliseconds) before opening modal window after creating new file.": "\u5728\u521B\u5EFA\u65B0\u6587\u4EF6\u540E\u6253\u5F00\u6A21\u6001\u7A97\u53E3\u7684\u5EF6\u8FDF\uFF08\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\uFF09\u3002",
  "Toggle menu items to show or hide in the right-click context menu": "\u5207\u6362\u83DC\u5355\u9879\u4EE5\u5728\u53F3\u952E\u5355\u51FB\u4E0A\u4E0B\u6587\u83DC\u5355\u4E2D\u663E\u793A\u6216\u9690\u85CF",
  "Plugin is not enabled or installed": "\u63D2\u4EF6\u672A\u542F\u7528\u6216\u672A\u5B89\u88C5",
  "Details": "\u8BE6\u60C5",
  "Custom commands": "\u81EA\u5B9A\u4E49\u547D\u4EE4",
  "Add custom command": "\u6DFB\u52A0\u81EA\u5B9A\u4E49\u547D\u4EE4",
  "Add a new custom command": "\u547D\u4EE4\u53EF\u4EE5\u4E0E\u5176\u4ED6\u63D2\u4EF6\u642D\u914D\u4F7F\u7528\uFF0C\u4F8B\u5982 Commander",
  "Add": "\u6DFB\u52A0",
  "Command name": "\u8F93\u5165\u547D\u4EE4\u540D\u79F0",
  "Command": "\u547D\u4EE4",
  "Description": "\u8F93\u5165\u6587\u4EF6\u8DEF\u5F84\u6216\u7F51\u9875\u94FE\u63A5",
  "Delete": "\u5220\u9664",
  "Confirm": "\u786E\u8BA4",
  "Cancel": "\u53D6\u6D88",
  "The command name already exists, please use a different name": "\u547D\u4EE4\u540D\u79F0\u5DF2\u5B58\u5728\uFF0C\u8BF7\u4F7F\u7528\u4E0D\u540C\u7684\u540D\u79F0",
  "Command added successfully": "\u547D\u4EE4\u6DFB\u52A0\u6210\u529F",
  "Please enter both command name and description": "\u8BF7\u8F93\u5165\u547D\u4EE4\u540D\u79F0\u548C\u63CF\u8FF0",
  "Command deleted successfully.": "\u547D\u4EE4\u5220\u9664\u6210\u529F\u3002"
};

// src/lang/locale/zh-tw.ts
var zh_tw_default = {};

// src/lang/helpers.ts
var localeMap = {
  ar: ar_default,
  cs: cz_default,
  da: da_default,
  de: de_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  nl: nl_default,
  nn: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  tr: tr_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || en_default[str];
}

// src/modal.ts
var import_obsidian2 = require("obsidian");
var _ModalWindow = class extends import_obsidian2.Modal {
  constructor(plugin, link, file, fragment, viewType) {
    super(plugin.app);
    this.observer = null;
    this.createWebview = (contentEl, containerEl) => {
      if (!this.contentEl) {
        return;
      }
      containerEl.empty();
      const doc = contentEl.doc;
      const webviewEl = doc.createElement("webview");
      webviewEl.setAttribute("allowpopups", "");
      webviewEl.partition = "persist:webview-vault-" + this.app.appId;
      webviewEl.addClass("modal-webview");
      containerEl.appendChild(webviewEl);
      if (this.link)
        webviewEl.setAttribute("src", this.link);
      webviewEl.addEventListener("dom-ready", async (event) => {
        const { remote } = window.require("electron");
        const webContents = remote.webContents.fromId(
          webviewEl.getWebContentsId()
        );
        webContents.setWindowOpenHandler((event2) => {
          this.link = event2.url;
          this.createWebview(contentEl, containerEl);
        });
        if (this.plugin.settings.enableWebAutoDarkMode) {
          await this.registerWebAutoDarkMode(webContents);
        }
        if (this.plugin.settings.enableImmersiveTranslation) {
          await this.registerImmersiveTranslation(webContents);
        }
      });
      webviewEl.addEventListener("destroyed", () => {
        if (doc !== this.contentEl.doc) {
          webviewEl.detach();
        }
      });
    };
    this.refreshMarkdownViews = async () => {
      const view = this.plugin.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (!view)
        return;
      let scrollPosition;
      if (view.getMode() === "preview") {
        scrollPosition = view.previewMode.getScroll();
        setTimeout(() => {
          view.previewMode.rerender(true);
        }, 100);
      } else if (view.getMode() === "source") {
        const editView = view.currentMode;
        if (editView && typeof editView.getScroll === "function") {
          scrollPosition = editView.getScroll();
        } else if (view.editor) {
          scrollPosition = view.editor.getScrollInfo();
        }
        const editor = view.editor;
        const content = editor.getValue();
        const modifiedContent = content.replace(/!\[\[(.+?)\]\]/g, "[[$1]]");
        editor.setValue(modifiedContent);
        setTimeout(() => {
          const finalContent = editor.getValue().replace(/\[\[(.+?)\]\]/g, (match, p1) => {
            return content.includes(`![[${p1}]]`) ? `![[${p1}]]` : `[[${p1}]]`;
          });
          editor.setValue(finalContent);
          const cursor = editor.getCursor();
          editor.setCursor(cursor);
        }, 100);
      }
      setTimeout(() => {
        const editView = view.currentMode;
        editView.applyScroll(scrollPosition);
      }, 500);
    };
    this.plugin = plugin;
    this.link = link;
    this.file = file;
    this.fragment = fragment || "";
    this.viewType = viewType;
    this.scope = new import_obsidian2.Scope(this.app.scope);
    this.webviewPlugin = this.app.internalPlugins.getEnabledPluginById("webviewer");
    this.boundHandleActiveLeafChange = this.handleActiveLeafChange.bind(this);
    this.boundHandleInternalLinkClick = this.handleInternalLinkClick.bind(this);
    _ModalWindow.instances.push(this);
    _ModalWindow.activeInstance = this;
    ModalOpenerPlugin.activeModalWindow = this;
    const modalElement = this.containerEl.querySelector(".modal");
    if (modalElement) {
      modalElement.addClass("modal-opener");
    }
    const modalBgElement = this.containerEl.querySelector(".modal-bg");
    if (modalBgElement) {
      modalBgElement.addClass("modal-opener-bg");
    }
  }
  async onOpen() {
    var _a;
    if (!this.contentEl) {
      return;
    }
    this.prevActiveLeaf = (_a = this.app.workspace.getMostRecentLeaf()) != null ? _a : void 0;
    this.modalLeafRef = this.app.workspace.createLeafInParent(
      this.app.workspace.rootSplit,
      0
    );
    if (this.modalLeafRef) {
      this.modalLeafRef.containerEl.style.display = "none";
    }
    const modalBgElement = this.containerEl.querySelector(".modal-bg.modal-opener-bg");
    if (modalBgElement) {
      if (this.plugin.settings.onlyCloseButton) {
        modalBgElement.classList.remove("closable");
      } else {
        modalBgElement.classList.add("closable");
      }
    }
    const modal = this.containerEl.lastChild;
    const modalWidth = !import_obsidian2.Platform.isMobile ? this.plugin.settings.modalWidth : this.plugin.settings.modalWidthOnMobile;
    const modalHeight = !import_obsidian2.Platform.isMobile ? this.plugin.settings.modalHeight : this.plugin.settings.modalHeightOnMobile;
    if (modal) {
      modal.style.width = modalWidth;
      modal.style.height = modalHeight;
    }
    if (this.file) {
      this.displayFileContent(this.file, this.fragment);
    } else {
      if (!this.link.startsWith("http://") && !this.link.startsWith("https://")) {
        const httpsLink = `https://${this.link}`;
        if (await this.checkURLReachability(httpsLink)) {
          this.link = httpsLink;
        } else {
          this.link = `http://${this.link}`;
        }
      }
      this.displayLinkContent(this.link);
    }
    this.scope.register([], "Escape", (evt) => {
      var _a2;
      const excalidrawView = (_a2 = this.app.workspace.getLeavesOfType("excalidraw").first()) == null ? void 0 : _a2.view;
      if (this.plugin.settings.disableExcalidrawEsc && excalidrawView) {
        return;
      }
      evt.preventDefault();
      this.close();
    });
    this.containerEl.addEventListener("click", this.boundHandleInternalLinkClick, true);
    setTimeout(() => {
      if (_ModalWindow.activeInstance === this) {
        this.app.workspace.on("active-leaf-change", this.boundHandleActiveLeafChange);
      }
    }, 100);
  }
  close() {
    super.close();
    this.app.workspace.off("active-leaf-change", this.boundHandleActiveLeafChange);
    this.containerEl.removeEventListener("click", this.boundHandleInternalLinkClick, true);
    _ModalWindow.instances = _ModalWindow.instances.filter((instance) => instance !== this);
    if (_ModalWindow.activeInstance === this) {
      _ModalWindow.activeInstance = _ModalWindow.instances[_ModalWindow.instances.length - 1] || null;
    }
    if (ModalOpenerPlugin.activeModalWindow === this) {
      ModalOpenerPlugin.activeModalWindow = _ModalWindow.instances[_ModalWindow.instances.length - 1] || null;
    }
  }
  onClose() {
    let leafContent = null;
    let modalContent = null;
    let dataType = null;
    let isWebView = false;
    if (_ModalWindow.activeInstance) {
      leafContent = _ModalWindow.activeInstance.containerEl.querySelector(".workspace-leaf-content");
      if (leafContent) {
        dataType = leafContent.getAttribute("data-type");
      }
      modalContent = _ModalWindow.activeInstance.containerEl.querySelector(".modal-content");
      if (modalContent) {
        const dataSrc = modalContent.getAttribute("data-src");
        if (dataSrc) {
          isWebView = this.isValidURL(dataSrc);
        }
      }
    }
    if (_ModalWindow.instances.length === 1 && (dataType == "markdown" || isWebView)) {
      setTimeout(() => {
        this.exitMultiCursorMode();
      }, 100);
    }
    if (this.plugin.settings.enableRefreshOnClose && (dataType == "canvas" || dataType == "mindmapview")) {
      setTimeout(() => {
        this.refreshMarkdownViews();
      }, this.plugin.settings.delayInMs);
    }
    if (this.observer) {
      this.observer.disconnect();
      this.observer = null;
    }
    const { contentEl } = this;
    contentEl.empty();
    if (this.modalLeafRef) {
      this.modalLeafRef.detach();
      this.modalLeafRef = void 0;
    }
    if (this.prevActiveLeaf) {
      this.app.workspace.setActiveLeaf(this.prevActiveLeaf);
    }
  }
  async displayFileContent(file, fragment) {
    var _a;
    if (!this.contentEl) {
      return;
    }
    this.contentEl.empty();
    this.contentEl.setAttribute("data-src", file.path + (fragment ? "#" + fragment : ""));
    const fileContainer = this.contentEl.createEl("div", "modal-opener-content");
    let mode;
    switch (this.plugin.settings.fileOpenMode) {
      case "source":
        mode = "source";
        break;
      case "preview":
        mode = "preview";
        break;
      default:
        mode = ((_a = this.prevActiveLeaf) == null ? void 0 : _a.view) instanceof import_obsidian2.MarkdownView && this.prevActiveLeaf.view.getMode() === "source" ? "source" : "preview";
    }
    const previewTypes = ["excel-view", "tldraw-view", "mindmapview", "dataloom"];
    if (this.modalLeafRef) {
      await this.modalLeafRef.openFile(file, { state: { mode } });
      fileContainer.appendChild(this.modalLeafRef.view.containerEl);
      if (fragment) {
        const filePath = `${file.path}#${fragment}`;
        this.app.workspace.openLinkText(filePath, file.path, false);
      }
      if (this.plugin.settings.showFloatingButton) {
        if (this.plugin.settings.viewOfDisplayButton == "both" || this.plugin.settings.viewOfDisplayButton == "file") {
          const viewType = this.modalLeafRef.view.getViewType();
          if (viewType === "markdown") {
            this.addTocButton(this.contentEl, file.path);
          }
          this.addOpenInNewLeafButton(this.contentEl);
        }
      }
    }
    this.setupDoubleClickHandler();
    this.setContainerHeight(fileContainer, false);
    const noteToolbarPlugin = this.getPlugin("note-toolbar");
    if (noteToolbarPlugin) {
      this.setupToolbarObserver();
    }
    this.contentEl.tabIndex = -1;
    this.contentEl.focus();
    setTimeout(() => {
      if (this.viewType && previewTypes.includes(this.viewType))
        this.app.commands.executeCommandById("markdown:toggle-preview");
    }, 100);
  }
  async displayLinkContent(link) {
    if (!this.contentEl) {
      return;
    }
    this.contentEl.empty();
    this.contentEl.setAttribute("data-src", this.link);
    const linkContainer = this.contentEl.createEl("div", "modal-opener-content");
    if (this.plugin.settings.showFloatingButton) {
      if (this.plugin.settings.viewOfDisplayButton == "both" || this.plugin.settings.viewOfDisplayButton == "link") {
        this.addFloatingButton(this.contentEl);
      }
    }
    if (this.webviewPlugin && this.modalLeafRef) {
      this.loadSiteByWebViewer(link, this.modalLeafRef);
      linkContainer.appendChild(this.modalLeafRef.view.containerEl);
    } else {
      if (import_obsidian2.Platform.isMobile) {
        const frame = linkContainer.createEl("iframe", { cls: "modal-iframe" });
        frame.src = link;
      } else {
        this.createWebview(this.contentEl, linkContainer);
      }
    }
    this.setupDoubleClickHandler();
    this.setContainerHeight(linkContainer, true);
  }
  handleInternalLinkClick(event) {
    var _a, _b, _c, _d, _e, _f, _g;
    let target = event.target;
    if (!target.closest(".workspace-leaf-content"))
      return;
    let linkText = this.getLinkFromTarget(target);
    const evtElement = target.closest(".excalidraw-hyperlinkContainer");
    if (evtElement)
      linkText = this.getLinkFromTarget(target).replace(/^\[\[(.*?)\]\]$/, "$1");
    if (!linkText)
      return;
    const isCtrlClick = event.ctrlKey && event.button === 0;
    if (isCtrlClick) {
      _ModalWindow.instances.forEach((instance) => {
        instance.close();
      });
      return;
    }
    if (evtElement) {
      event.preventDefault();
      event.stopImmediatePropagation();
      if (this.modalLeafRef) {
        const file = this.app.metadataCache.getFirstLinkpathDest(linkText, "");
        if (!file)
          return;
        this.modalLeafRef.openFile(file);
      }
      return;
    }
    if ((_a = _ModalWindow.activeInstance) == null ? void 0 : _a.contentEl) {
      if (this.isValidURL(linkText)) {
        event.preventDefault();
        event.stopImmediatePropagation();
        this.link = linkText;
        (_b = _ModalWindow.activeInstance) == null ? void 0 : _b.contentEl.setAttribute("data-src", linkText);
        if (this.webviewPlugin && this.modalLeafRef) {
          this.loadSiteByWebViewer(linkText, this.modalLeafRef);
        } else {
          const modalContainer = this.containerEl.querySelector(".modal-opener-content");
          if (import_obsidian2.Platform.isMobile) {
            const frame = modalContainer.createEl("iframe", { cls: "modal-iframe" });
            frame.src = linkText;
          } else {
            this.createWebview(this.contentEl, modalContainer);
          }
          if (this.plugin.settings.viewOfDisplayButton === "both" || this.plugin.settings.viewOfDisplayButton === "link") {
            this.clearAllButton((_c = _ModalWindow.activeInstance) == null ? void 0 : _c.contentEl);
            this.addFloatingButton((_d = _ModalWindow.activeInstance) == null ? void 0 : _d.contentEl);
          }
        }
      } else {
        if (linkText == null ? void 0 : linkText.startsWith("#")) {
          const currentFilePath = ((_e = this.app.workspace.getActiveFile()) == null ? void 0 : _e.path) || "";
          linkText = currentFilePath + linkText;
        }
        const [path, fragment] = linkText.split(/[#]/);
        const file = this.app.metadataCache.getFirstLinkpathDest(path, "");
        if (!file)
          return;
        if (fragment) {
          (_f = _ModalWindow.activeInstance) == null ? void 0 : _f.contentEl.setAttribute("data-src", `${file.path}#${fragment}`);
        } else {
          (_g = _ModalWindow.activeInstance) == null ? void 0 : _g.contentEl.setAttribute("data-src", `${file.path}`);
        }
        this.updateFragmentLink = true;
      }
    }
  }
  handleActiveLeafChange() {
    var _a, _b, _c, _d, _e;
    if (_ModalWindow.activeInstance !== this) {
      return;
    }
    if (this.modalLeafRef) {
      const modalElement = this.containerEl.querySelector(".modal-opener");
      if (!modalElement)
        return;
      const modalContainer = modalElement.querySelector(".modal-opener-content");
      if (modalContainer) {
        modalContainer.empty();
        modalContainer.appendChild(this.modalLeafRef.view.containerEl);
        const leafContent = modalContainer.querySelector(".workspace-leaf-content");
        if (leafContent) {
          const dataType = leafContent.getAttribute("data-type");
          if (dataType == "empty") {
            _ModalWindow.activeInstance.close();
            _ModalWindow.activeInstance = _ModalWindow.instances.length > 0 ? _ModalWindow.instances[_ModalWindow.instances.length - 1] : null;
          }
        }
        if (_ModalWindow.activeInstance && this.plugin.settings.showFloatingButton) {
          const hasWebContent = this.modalLeafRef.view.containerEl.querySelector("webview, iframe, .webviewer-content");
          if (hasWebContent) {
            if (this.plugin.settings.viewOfDisplayButton === "both" || this.plugin.settings.viewOfDisplayButton === "link") {
              const webviewerContent = hasWebContent.classList.contains("webviewer-content") ? hasWebContent : (_a = _ModalWindow.activeInstance) == null ? void 0 : _a.contentEl;
              this.clearAllButton(webviewerContent);
              this.addFloatingButton(webviewerContent);
            }
            const webviewElement = hasWebContent.querySelector("webview");
            if (webviewElement) {
              webviewElement.addEventListener("dom-ready", async () => {
                var _a2;
                const srcValue = webviewElement.getAttribute("src");
                if (srcValue && srcValue !== "data:text/plain,") {
                  (_a2 = _ModalWindow.activeInstance) == null ? void 0 : _a2.contentEl.setAttribute("data-src", srcValue);
                }
              });
            }
            this.setContainerHeight(modalContainer, true);
          } else {
            const activeFile = this.app.workspace.getActiveFile();
            if (activeFile && !this.updateFragmentLink) {
              (_b = _ModalWindow.activeInstance) == null ? void 0 : _b.contentEl.setAttribute("data-src", activeFile.path);
            }
            this.setContainerHeight(modalContainer, false);
            if (this.plugin.settings.viewOfDisplayButton === "both" || this.plugin.settings.viewOfDisplayButton === "file") {
              const leafContent2 = _ModalWindow.activeInstance.containerEl.querySelector(".workspace-leaf-content");
              this.clearAllButton((_c = _ModalWindow.activeInstance) == null ? void 0 : _c.contentEl);
              if (leafContent2 && activeFile) {
                const dataType = leafContent2.getAttribute("data-type");
                if (dataType === "markdown") {
                  this.addTocButton((_d = _ModalWindow.activeInstance) == null ? void 0 : _d.contentEl, activeFile.path);
                }
              }
              this.addOpenInNewLeafButton((_e = _ModalWindow.activeInstance) == null ? void 0 : _e.contentEl);
            }
          }
        }
        this.focusOnModalContent();
        this.updateFragmentLink = false;
      }
    }
  }
  loadSiteByWebViewer(link, leaf) {
    leaf.setViewState({
      type: "webviewer",
      active: true,
      state: {
        url: link,
        navigate: true,
        target: "_self"
      }
    });
    const webviewEl = document.querySelector("webview");
    if (webviewEl) {
      webviewEl.addEventListener("dom-ready", async (event) => {
        const { remote } = window.require("electron");
        const webContents = remote.webContents.fromId(
          webviewEl.getWebContentsId()
        );
        webContents.setWindowOpenHandler((event2) => {
          this.app.workspace.getLeaf(true).setViewState({
            type: "webviewer",
            active: true,
            state: {
              url: event2.url,
              navigate: true,
              target: "_self"
            }
          });
          return {
            action: "allow"
          };
        });
        if (this.plugin.settings.enableWebAutoDarkMode) {
          await this.registerWebAutoDarkMode(webContents);
        }
        if (this.plugin.settings.enableImmersiveTranslation) {
          await this.registerImmersiveTranslation(webContents);
        }
      });
    }
  }
  focusOnModalContent() {
    var _a, _b, _c;
    if (((_a = this.modalLeafRef) == null ? void 0 : _a.view) instanceof import_obsidian2.MarkdownView) {
      const editor = this.modalLeafRef.view.editor;
      editor.focus();
    } else {
      if ((_b = _ModalWindow.activeInstance) == null ? void 0 : _b.contentEl) {
        (_c = _ModalWindow.activeInstance) == null ? void 0 : _c.contentEl.focus();
      }
    }
  }
  setupDoubleClickHandler() {
    var _a;
    if ((_a = _ModalWindow.activeInstance) == null ? void 0 : _a.contentEl) {
      this.modalEl.addEventListener("dblclick", (event) => {
        const target = event.target;
        if (!this.isClickableArea(target)) {
          return;
        }
        this.openInNewTab();
      });
    }
  }
  isClickableArea(element) {
    var _a;
    if (element === this.modalEl || element.parentElement === this.modalEl) {
      return true;
    }
    if ((_a = this.contentEl) == null ? void 0 : _a.contains(element)) {
      return false;
    }
    if (["P", "SPAN", "H1", "H2", "H3", "H4", "H5", "H6", "UL", "OL", "LI", "CODE", "IMG"].includes(element.tagName)) {
      return false;
    }
    const excludedContainers = [".mm-app-container", ".workspace-leaf-content", ".markdown-preview-view", ".cm-node-text"];
    for (const selector of excludedContainers) {
      if (element.closest(selector)) {
        return false;
      }
    }
    return true;
  }
  setContainerHeight(container, isLinkView) {
    const baseHeight = parseInt(this.plugin.settings.modalHeight, 10);
    let heightAdjustment = 5;
    if (isLinkView) {
      if (this.webviewPlugin) {
        heightAdjustment = 6;
      } else {
        if (import_obsidian2.Platform.isMobile) {
          heightAdjustment = 5.5;
        } else {
          heightAdjustment = 4;
        }
      }
    } else {
      if (!this.plugin.settings.showFileViewHeader) {
        const leafContent = this.containerEl.querySelector(".modal-opener-content .workspace-leaf-content");
        if (leafContent) {
          const dataType = leafContent.getAttribute("data-type");
          if (dataType == "canvas" || dataType == "excalidraw" || dataType == "tldraw-view") {
            if (dataType === "canvas") {
              heightAdjustment = 2;
            } else if (dataType === "excalidraw") {
              heightAdjustment = 2;
            } else if (dataType === "tldraw-view") {
              heightAdjustment = -1;
              if (import_obsidian2.Platform.isMobile) {
                heightAdjustment = 2;
              }
            }
          } else {
            const editingPlugin = this.getPlugin("editing-toolbar");
            const toolbarPlugin = this.getPlugin("note-toolbar");
            const topToolbar = this.containerEl.querySelector(".cg-note-toolbar-callout");
            if (toolbarPlugin || editingPlugin) {
              if (toolbarPlugin) {
                heightAdjustment = topToolbar ? 5 : 1;
              } else {
                heightAdjustment = 2;
              }
            } else {
              heightAdjustment = 1;
            }
          }
        }
      } else {
        const leafContent = this.containerEl.querySelector(".modal-opener-content .workspace-leaf-content");
        if (leafContent) {
          const dataType = leafContent.getAttribute("data-type");
          if (dataType == "canvas" || dataType == "excalidraw" || dataType == "tldraw-view") {
            if (dataType === "canvas") {
              heightAdjustment = 6;
            } else if (dataType === "excalidraw") {
              heightAdjustment = 6;
            } else if (dataType === "tldraw-view") {
              heightAdjustment = 3;
              if (import_obsidian2.Platform.isMobile) {
                heightAdjustment = 6;
              }
            }
          } else {
            const editingPlugin = this.getPlugin("editing-toolbar");
            const toolbarPlugin = this.getPlugin("note-toolbar");
            if (editingPlugin || toolbarPlugin) {
              heightAdjustment = toolbarPlugin ? 5 : editingPlugin ? 5 : 4;
            } else {
              heightAdjustment = 1;
            }
          }
        }
      }
    }
    const adjustedModalHeight = `${baseHeight - heightAdjustment}vh`;
    container.style.setProperty("--adjusted-modal-height", adjustedModalHeight);
  }
  async checkURLReachability(url) {
    try {
      const response = await (0, import_obsidian2.requestUrl)({
        url,
        method: "HEAD",
        throw: false
        // 不抛出错误，而是返回响应
      });
      return response.status >= 200 && response.status < 300;
    } catch (error) {
      return false;
    }
  }
  getLinkFromTarget(target) {
    var _a;
    return target.getAttribute("data-href") || target.getAttribute("href") || target.getAttribute("data-path") || target.getAttribute("filesource") || ((_a = target.textContent) == null ? void 0 : _a.trim()) || "";
  }
  isValidURL(url) {
    try {
      const parsedURL = new URL(url);
      if (parsedURL.protocol === "http:" || parsedURL.protocol === "https:") {
        const isLocalIP = /^(https?:\/\/)?(10\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.(1[6-9]|2\d|3[01])\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3})(:\d+)?(\/.*)?$/.test(url);
        return true;
      }
      return false;
    } catch (e) {
      return false;
    }
  }
  exitMultiCursorMode() {
    const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (activeView && activeView.editor) {
      const editor = activeView.editor;
      const cursor = editor.getCursor();
      editor.setCursor(cursor);
    }
  }
  // 适配NoteToolBar
  setupToolbarObserver() {
    this.ensureSingleToolbar();
    this.observer = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.type === "childList") {
          this.ensureSingleToolbar();
        }
      }
    });
    this.observer.observe(this.contentEl, { childList: true, subtree: true });
  }
  ensureSingleToolbar() {
    const toolbars = this.contentEl.querySelectorAll(".cg-note-toolbar-container");
    if (toolbars.length > 1) {
      for (let i = 1; i < toolbars.length; i++) {
        toolbars[i].remove();
      }
    }
  }
  copyWebLink() {
    var _a;
    if ((_a = _ModalWindow.activeInstance) == null ? void 0 : _a.contentEl) {
      const src = _ModalWindow.activeInstance.contentEl.getAttribute("data-src") || "";
      if (src) {
        navigator.clipboard.writeText(src).then(() => new import_obsidian2.Notice(t("Copied to clipboard")));
      }
    }
  }
  openInNewTab() {
    var _a;
    if ((_a = _ModalWindow.activeInstance) == null ? void 0 : _a.contentEl) {
      const src = _ModalWindow.activeInstance.contentEl.getAttribute("data-src") || "";
      _ModalWindow.instances.forEach((instance) => {
        instance.close();
      });
      if (this.isValidURL(src)) {
        if (this.webviewPlugin) {
          const leaf = this.app.workspace.getLeaf(true);
          this.loadSiteByWebViewer(src, leaf);
        } else {
          const newLeaf = this.app.workspace.getLeaf(true);
          const contentEl = newLeaf.view.containerEl;
          contentEl.empty();
          if (import_obsidian2.Platform.isMobile) {
            const frame = contentEl.createEl("iframe", { cls: "modal-iframe" });
            frame.src = src;
          } else {
            this.createWebview(contentEl, newLeaf.view.containerEl);
          }
        }
      } else {
        const [filePath, fragment] = src.split("#");
        const file = this.plugin.app.vault.getAbstractFileByPath(filePath);
        if (file instanceof import_obsidian2.TFile) {
          this.plugin.app.workspace.openLinkText(src, filePath, "tab");
        }
      }
    }
  }
  openInBrowser() {
    var _a;
    if ((_a = _ModalWindow.activeInstance) == null ? void 0 : _a.contentEl) {
      const src = _ModalWindow.activeInstance.contentEl.getAttribute("data-src") || "";
      if (this.isValidURL(src)) {
        if (this.webviewPlugin) {
          window.require("electron").shell.openExternal(src);
        } else {
          window.open(src);
        }
      }
    }
  }
  getPlugin(pluginId) {
    const app = this.plugin.app;
    return app.plugins.plugins[pluginId];
  }
  clearAllButton(container) {
    const buttons = container.querySelectorAll(".floating-menu-container, .floating-button-container.toc-button, .floating-button-container.new-leaf-button");
    buttons.forEach((button) => button.remove());
  }
  createMenuItem(container, icon, title, onClick) {
    const button = container.createEl("button", { cls: "floating-button menu-item" });
    (0, import_obsidian2.setIcon)(button, icon);
    button.setAttribute("title", title);
    button.addEventListener("click", (e) => {
      e.stopPropagation();
      onClick();
    });
    return button;
  }
  // 添加悬浮按钮
  addOpenInNewLeafButton(container) {
    const buttonContainer = container.createEl("div", { cls: "floating-button-container new-leaf-button" });
    const openButton = buttonContainer.createEl("button", { cls: "floating-button" });
    (0, import_obsidian2.setIcon)(openButton, "lucide-panel-top");
    openButton.setAttribute("title", t("Opens in new tab"));
    openButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.openInNewTab();
    });
  }
  addFloatingButton(container) {
    const buttonContainer = container.createEl("div", { cls: "floating-menu-container" });
    const mainButton = buttonContainer.createEl("button", { cls: "floating-button main-button" });
    (0, import_obsidian2.setIcon)(mainButton, "lucide-more-vertical");
    mainButton.setAttribute("title", t("More options"));
    const menuItems = buttonContainer.createEl("div", { cls: "floating-menu-items" });
    this.createMenuItem(menuItems, "lucide-compass", t("Open in browser"), () => this.openInBrowser());
    this.createMenuItem(menuItems, "lucide-panel-top", t("Opens in new tab"), () => this.openInNewTab());
    this.createMenuItem(menuItems, "lucide-copy", t("Copy web link"), () => this.copyWebLink());
    let timeoutId = null;
    buttonContainer.addEventListener("mouseenter", () => {
      if (timeoutId)
        clearTimeout(timeoutId);
      menuItems.style.display = "flex";
    });
    buttonContainer.addEventListener("mouseleave", () => {
      timeoutId = setTimeout(() => {
        menuItems.style.display = "none";
      }, 300);
    });
    menuItems.addEventListener("mouseenter", () => {
      if (timeoutId)
        clearTimeout(timeoutId);
    });
    menuItems.addEventListener("mouseleave", () => {
      timeoutId = setTimeout(() => {
        menuItems.style.display = "none";
      }, 300);
    });
  }
  addTocButton(container, path) {
    const file = this.app.vault.getAbstractFileByPath(path);
    if (!(file instanceof import_obsidian2.TFile))
      return;
    const metadata = this.app.metadataCache.getCache(file.path);
    const headings = (metadata == null ? void 0 : metadata.headings) || [];
    if (!headings || headings.length === 0)
      return;
    const buttonContainer = container.createEl("div", { cls: "floating-button-container toc-button" });
    const tocButton = this.createMenuItem(buttonContainer, "list", t("Toggle table of contents"), () => {
      this.toggleTableOfContents(buttonContainer, path);
    });
    tocButton.addClass("toc-toggle");
    buttonContainer.addEventListener("mouseenter", () => {
      clearTimeout(this.hideTimeout);
      this.toggleTableOfContents(buttonContainer, path, true);
    });
  }
  toggleTableOfContents(buttonContainer, path, isHover = false) {
    let tocContainer = this.contentEl.querySelector(".modal-toc-container");
    if (tocContainer) {
      if (!isHover) {
        tocContainer.remove();
      }
      return;
    }
    tocContainer = this.contentEl.createEl("div", { cls: "modal-toc-container" });
    const file = this.app.vault.getAbstractFileByPath(path);
    if (!(file instanceof import_obsidian2.TFile))
      return;
    const metadata = this.app.metadataCache.getCache(file.path);
    const headings = (metadata == null ? void 0 : metadata.headings) || [];
    tocContainer.createEl("div", { cls: "toc-header", text: "\u76EE\u5F55" });
    this.renderTocContent(tocContainer, headings);
    const buttonRect = buttonContainer.getBoundingClientRect();
    tocContainer.style.bottom = `${window.innerHeight - buttonRect.bottom + 50}px`;
    tocContainer.style.right = `${window.innerWidth - buttonRect.right + 30}px`;
    const handleMouseLeave = () => {
      this.hideTimeout = setTimeout(() => {
        tocContainer.remove();
      }, 100);
    };
    tocContainer.addEventListener("mouseenter", () => {
      clearTimeout(this.hideTimeout);
    });
    tocContainer.addEventListener("mouseleave", handleMouseLeave);
    buttonContainer.addEventListener("mouseleave", (e) => {
      const toElement = e.relatedTarget;
      if (!tocContainer.contains(toElement)) {
        handleMouseLeave();
      }
    });
  }
  renderTocContent(container, headings) {
    if (!headings.length) {
      container.createEl("div", { cls: "toc-empty", text: "No headings found" });
      return;
    }
    const tocList = container.createEl("div", { cls: "toc-list" });
    const minLevel = Math.min(...headings.map((h) => h.level));
    headings.forEach((heading) => {
      const tocItem = tocList.createEl("div", {
        cls: "toc-item",
        attr: { "data-heading": heading.heading }
      });
      const contentContainer = tocItem.createEl("div", { cls: "toc-item-content" });
      contentContainer.style.paddingLeft = `${(heading.level - minLevel) * 20}px`;
      contentContainer.createEl("span", { cls: "toc-bullet" });
      const textContainer = contentContainer.createEl("span", { cls: "toc-item-text" });
      import_obsidian2.MarkdownRenderer.render(
        this.app,
        heading.heading,
        textContainer,
        "",
        this.plugin
      );
      tocItem.addEventListener("click", (e) => {
        e.preventDefault();
        const pathData = this.contentEl.getAttribute("data-src") || "";
        const [filePath, fragment] = pathData.split("#");
        const file = this.app.metadataCache.getFirstLinkpathDest(filePath, "");
        if (file instanceof import_obsidian2.TFile) {
          this.app.workspace.openLinkText(`${file.path}#${heading.heading}`, file.path, false);
          const allItems = container.querySelectorAll(".toc-item");
          allItems.forEach((item) => item.removeClass("active"));
          tocItem.addClass("active");
        }
      });
    });
  }
  async registerWebAutoDarkMode(webContents) {
    try {
      const isDarkMode = document.body.classList.contains("theme-dark");
      if (isDarkMode) {
        try {
          await webContents.executeJavaScript(`
						const element = document.createElement('script');

						fetch('https://cdn.jsdelivr.net/npm/darkreader/darkreader.min.js')
							.then((response) => {
								element.src = response.url;
								document.body.appendChild(element);
							})
							.catch((error) => {
								console.error('Error loading the script:', error);
							});

						element.onload = () => {
							try {
								DarkReader?.setFetchMethod(window.fetch);
								DarkReader?.enable({
									brightness: 100,
									contrast: 90,
									sepia: 10
								});
								console.log(DarkReader);
							} catch (err) {

								window.myPostPort?.postMessage('darkreader-failed');
								console.error('Failed to load dark reader: ', err);

							}
						};
					`);
        } catch (e) {
          console.error(e);
        }
      } else {
        try {
          await webContents.executeJavaScript(`
                        if (DarkReader) {
                            DarkReader.disable();
                            console.log('Dark mode disabled');
                        }
                    `);
        } catch (e) {
          console.error("Error disabling dark mode: ", e);
        }
      }
    } catch (err) {
      console.error("Failed to get background color: ", err);
    }
    webContents.executeJavaScript(`
			window.addEventListener('mouseover', (e) => {
				if(!e.target) return;
				if(!e.ctrlKey && !e.metaKey) return;
				// Tag name is a tag
				if(e.target.tagName.toLowerCase() === 'a'){
					window.myPostPort?.postMessage('link ' + e.clientX + ' ' + e.clientY + ' ' + e.target.href);
				}
			});
		`);
  }
  async registerImmersiveTranslation(webContents) {
    await webContents.executeJavaScript(`
            // 1. \u8BBE\u7F6E\u521D\u59CB\u5316\u53C2\u6570
            window.immersiveTranslateConfig = {
                isAutoTranslate: false,
                pageRule: {
                    // \u667A\u80FD\u9009\u62E9\u9700\u8981\u7FFB\u8BD1\u7684\u5185\u5BB9
                    selectors: ["body"],
                    // \u6392\u9664\u4E0D\u9700\u8981\u7FFB\u8BD1\u7684\u5143\u7D20
                    excludeSelectors: ["pre", "code", ".code", "script", "style"],
                    // \u5C06\u8BD1\u6587\u4F5C\u4E3A block \u7684\u6700\u5C0F\u5B57\u7B26\u6570
                    blockMinTextCount: 0,
                    // \u539F\u6587\u6BB5\u843D\u7684\u6700\u5C0F\u5B57\u7B26\u6570
                    paragraphMinTextCount: 1
                }
            };

            // 2. \u52A0\u8F7D\u6C89\u6D78\u5F0F\u7FFB\u8BD1 SDK
            const script = document.createElement('script');
            script.async = true;
            script.src = 'https://download.immersivetranslate.com/immersive-translate-sdk-latest.js';
            document.head.appendChild(script);
        `);
  }
};
var ModalWindow = _ModalWindow;
ModalWindow.instances = [];
ModalWindow.activeInstance = null;

// src/settings.ts
var import_obsidian3 = require("obsidian");
var DEFAULT_SETTINGS = {
  openMethod: "both",
  fileOpenMode: "current",
  modalWidth: "86vw",
  modalHeight: "86vh",
  modalWidthOnMobile: "86vw",
  modalHeightOnMobile: "86vh",
  dragThreshold: 200,
  enableAnimation: true,
  enableRounding: false,
  clickWithoutAlt: false,
  typeOfClickTrigger: "both",
  onlyWorksInReadMode: false,
  clickWithoutAltOnMobile: true,
  typeOfClickTriggerOnMobile: "both",
  onlyWorksInReadModeOnMobile: false,
  customExcludeElements: "",
  customExcludeContainers: "",
  customExcludeFiles: "",
  onlyCloseButton: false,
  disableExcalidrawEsc: true,
  enableWebAutoDarkMode: true,
  enableImmersiveTranslation: true,
  customCommands: [],
  showFileViewHeader: false,
  showLinkViewHeader: false,
  showMetadata: false,
  hideScroll: true,
  preventsDuplicateTabs: false,
  delayInMs: 100,
  modalOpenDelay: 100,
  enableRefreshOnClose: true,
  showFloatingButton: true,
  viewOfDisplayButton: "both",
  enabledCommands: {
    markdown: true,
    canvas: true,
    excalidraw: true,
    diagrams: true,
    tldraw: true,
    excel: true,
    sheetPlus: true,
    vscode: true,
    markmind: true,
    dataloom: true
  },
  showCommandsContainer: true,
  showDeleteCommands: true
};
var ModalOpenerSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.activeTab = "general";
    // 当前激活的tab
    this.tabs = [
      { id: "general", name: t("General") },
      { id: "style", name: t("Styles") },
      // 添加样式标签页
      { id: "menu", name: t("Menu Items") },
      { id: "commands", name: t("Custom Commands") }
    ];
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const tabsContainer = containerEl.createDiv("nav-buttons-container");
    tabsContainer.addClasses(["modal-opener-tabs"]);
    this.tabs.forEach((tab) => {
      const btn = new import_obsidian3.ButtonComponent(tabsContainer).setButtonText(tab.name).onClick(() => {
        this.activeTab = tab.id;
        this.display();
      });
      if (this.activeTab === tab.id) {
        btn.buttonEl.addClass("is-active");
      }
    });
    switch (this.activeTab) {
      case "general":
        this.displayGeneralSettings(containerEl);
        break;
      case "style":
        this.displayStyleSettings(containerEl);
        break;
      case "menu":
        this.displayMenuSettings(containerEl);
        break;
      case "commands":
        this.displayCommandsSettings(containerEl);
        break;
    }
  }
  displayGeneralSettings(containerEl) {
    const clickEnabled = !import_obsidian3.Platform.isMobile ? this.plugin.settings.clickWithoutAlt : this.plugin.settings.clickWithoutAltOnMobile;
    const clickTriggerType = !import_obsidian3.Platform.isMobile ? this.plugin.settings.typeOfClickTrigger : this.plugin.settings.typeOfClickTriggerOnMobile;
    const onlyInReadMode = !import_obsidian3.Platform.isMobile ? this.plugin.settings.onlyWorksInReadMode : this.plugin.settings.onlyWorksInReadModeOnMobile;
    containerEl.addClass("modal-opener-settings");
    new import_obsidian3.Setting(containerEl).setName(t("Open with")).addDropdown((dd) => dd.addOption("both", t("Both")).addOption("drag", t("Drag & Drop")).addOption("altclick", t("Alt & Left click")).setValue(this.plugin.settings.openMethod).onChange(async (value) => {
      this.plugin.settings.openMethod = value;
      await this.plugin.saveSettings();
      await this.reloadPlugin();
      this.display();
    }));
    if (this.plugin.settings.openMethod === "drag" || this.plugin.settings.openMethod === "both") {
      new import_obsidian3.Setting(containerEl).setName(t("Drag and drop time threshold")).setDesc(t("Set the minimum drag and drop time (in milliseconds) to trigger the link to open.")).addText((text) => text.setValue(String(this.plugin.settings.dragThreshold)).onChange(async (value) => {
        const numValue = Number(value);
        if (!isNaN(numValue) && numValue >= 0) {
          this.plugin.settings.dragThreshold = numValue;
          await this.plugin.saveSettings();
        }
      }));
    }
    new import_obsidian3.Setting(containerEl).setName(t("Default editing mode")).setDesc(t("Select the default mode for opening files in the modal window")).addDropdown((dropdown) => dropdown.addOption("current", t("Current file")).addOption("preview", t("Reading")).addOption("source", t("Editing")).setValue(this.plugin.settings.fileOpenMode).onChange(async (value) => {
      this.plugin.settings.fileOpenMode = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName(t("Add hover button")).setDesc(t("Add hover button for accessibility functions in the modal window")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showFloatingButton).onChange(async (value) => {
      this.plugin.settings.showFloatingButton = value;
      await this.plugin.saveSettings();
      await this.reloadPlugin();
      this.display();
    })).addDropdown((dropdown) => {
      dropdown.selectEl.style.display = this.plugin.settings.showFloatingButton ? "block" : "none";
      dropdown.addOption("both", t("Both")).addOption("file", t("File view")).addOption("link", t("Link view")).setValue(this.plugin.settings.viewOfDisplayButton).onChange(async (value) => {
        this.plugin.settings.viewOfDisplayButton = value;
        await this.plugin.saveSettings();
      });
      return dropdown;
    });
    new import_obsidian3.Setting(containerEl).setName(t("Behavior")).setHeading();
    new import_obsidian3.Setting(containerEl).setName(t(!import_obsidian3.Platform.isMobile ? "Single-click trigger" : "Single-click trigger\u{1F4F1}")).setDesc(t("If enabled, clicking links will open them in modal window without holding Alt.")).addToggle((toggle) => toggle.setValue(clickEnabled).onChange(async (value) => {
      if (!import_obsidian3.Platform.isMobile) {
        this.plugin.settings.clickWithoutAlt = value;
      } else {
        this.plugin.settings.clickWithoutAltOnMobile = value;
      }
      await this.plugin.saveSettings();
      await this.reloadPlugin();
      this.display();
    })).addDropdown((dropdown) => {
      dropdown.selectEl.style.display = clickEnabled ? "block" : "none";
      dropdown.addOption("both", t("Both")).addOption("internal", t("Internal link")).addOption("external", t("External link")).setValue(clickTriggerType).onChange(async (value) => {
        if (!import_obsidian3.Platform.isMobile) {
          this.plugin.settings.typeOfClickTrigger = value;
        } else {
          this.plugin.settings.typeOfClickTriggerOnMobile = value;
        }
        await this.plugin.saveSettings();
        await this.reloadPlugin();
        this.display();
      });
      return dropdown;
    });
    if (clickEnabled) {
      new import_obsidian3.Setting(containerEl).setName(t(!import_obsidian3.Platform.isMobile ? "Only works in read mode" : "Only works in read mode\u{1F4F1}")).setDesc(t("Click trigger works only in read mode")).addToggle((toggle) => toggle.setValue(onlyInReadMode).onChange(async (value) => {
        if (!import_obsidian3.Platform.isMobile) {
          this.plugin.settings.onlyWorksInReadMode = value;
        } else {
          this.plugin.settings.onlyWorksInReadModeOnMobile = value;
        }
        await this.plugin.saveSettings();
      }));
    }
    if (clickEnabled && clickTriggerType !== "external") {
      new import_obsidian3.Setting(containerEl).setName(t("Custom exclude elements")).setDesc(t("Enter CSS selectors for specific elements that should not trigger a click event (comma-separated)")).addTextArea(
        (text) => text.setPlaceholder(t("Enter class names of elements to exclude, e.g., .folder-overview-list-item")).setValue(this.plugin.settings.customExcludeElements).onChange(async (value) => {
          this.plugin.settings.customExcludeElements = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian3.Setting(containerEl).setName(t("Custom exclude containers")).setDesc(t("Enter CSS selectors for parent containers whose entire content should be excluded from triggering a click event (comma-separated)")).addTextArea(
        (text) => text.setPlaceholder(t("Enter class names of containers to exclude, e.g., .block-language-table-of-contents")).setValue(this.plugin.settings.customExcludeContainers).onChange(async (value) => {
          this.plugin.settings.customExcludeContainers = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian3.Setting(containerEl).setName(t("Custom exclude files")).setDesc(t("Enter files to disable click triggering, links in these files will be ignored. (comma separated)")).addTextArea(
        (text) => text.setPlaceholder(t("Enter file path to exclude, e.g., untitled.md, folder/subfolder/untitled.md")).setValue(this.plugin.settings.customExcludeFiles).onChange(async (value) => {
          this.plugin.settings.customExcludeFiles = value;
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian3.Setting(containerEl).setName(t("Disable external click close")).setDesc(t("Use only the Close button and Esc to close.")).addToggle((toggle) => toggle.setValue(this.plugin.settings.onlyCloseButton).onChange(async (value) => {
      this.plugin.settings.onlyCloseButton = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName(t("Refresh view on close")).setDesc(t("Refresh views when closing modal window, currently only refreshing after editing Canvas and Markmind file")).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableRefreshOnClose).onChange(async (value) => {
      this.plugin.settings.enableRefreshOnClose = value;
      await this.plugin.saveSettings();
    }));
    const excalidrawPlugin = this.plugin.getPlugin("obsidian-excalidraw-plugin");
    if (excalidrawPlugin) {
      new import_obsidian3.Setting(containerEl).setName(t("Excalidraw Disables the Esc key")).setDesc(t("Disable Esc key to close modal when editing Excalidraw")).addToggle((toggle) => toggle.setValue(this.plugin.settings.disableExcalidrawEsc).onChange(async (value) => {
        this.plugin.settings.disableExcalidrawEsc = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian3.Setting(containerEl).setName(t("Prevents duplicate tabs")).setDesc(t("In a new leaf opened the note to prevent duplicate (compatible with Modal-Opener, function from Mononote plugin)")).addToggle((toggle) => toggle.setValue(this.plugin.settings.preventsDuplicateTabs).onChange(async (value) => {
      this.plugin.settings.preventsDuplicateTabs = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.preventsDuplicateTabs) {
      new import_obsidian3.Setting(containerEl).setName(t("Delay time")).setDesc(t("Delay in milliseconds before performing operations")).addSlider((slider) => slider.setLimits(100, 500, 100).setValue(this.plugin.settings.delayInMs).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.delayInMs = value;
        await this.plugin.saveSettings();
      }));
    }
    if (!import_obsidian3.Platform.isMobile) {
      new import_obsidian3.Setting(containerEl).setName(t("Extend")).setHeading();
      new import_obsidian3.Setting(containerEl).setName(t("Automatically switch to dark mode")).setDesc(t("Automatically switch to dark mode in web view")).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableWebAutoDarkMode).onChange(async (value) => {
        this.plugin.settings.enableWebAutoDarkMode = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian3.Setting(containerEl).setName(t("Enable immersive translation")).setDesc(t("Load immersive translation plugin in web view")).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableImmersiveTranslation).onChange(async (value) => {
        this.plugin.settings.enableImmersiveTranslation = value;
        await this.plugin.saveSettings();
      }));
    }
  }
  displayStyleSettings(containerEl) {
    new import_obsidian3.Setting(containerEl).setName(t("Styles")).setHeading();
    new import_obsidian3.Setting(containerEl).setName(t(!import_obsidian3.Platform.isMobile ? "Modal width" : "Modal width\u{1F4F1}")).setDesc(t("Enter any valid CSS unit")).addText((text) => text.setValue(!import_obsidian3.Platform.isMobile ? this.plugin.settings.modalWidth : this.plugin.settings.modalWidthOnMobile).onChange(async (value) => {
      if (!import_obsidian3.Platform.isMobile) {
        this.plugin.settings.modalWidth = value;
      } else {
        this.plugin.settings.modalWidthOnMobile = value;
      }
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName(t(!import_obsidian3.Platform.isMobile ? "Modal height" : "Modal height\u{1F4F1}")).setDesc(t("Enter any valid CSS unit")).addText((text) => text.setValue(!import_obsidian3.Platform.isMobile ? this.plugin.settings.modalHeight : this.plugin.settings.modalHeightOnMobile).onChange(async (value) => {
      if (!import_obsidian3.Platform.isMobile) {
        this.plugin.settings.modalHeight = value;
      } else {
        this.plugin.settings.modalHeightOnMobile = value;
      }
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName(t("Enable modal window rounding")).setDesc(t("Toggle to enable or disable modal window rounding")).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableRounding).onChange(async (value) => {
      this.plugin.settings.enableRounding = value;
      await this.plugin.saveSettings();
      this.plugin.applyStyles();
    }));
    new import_obsidian3.Setting(containerEl).setName(t("Enable animation and blur")).setDesc(t("Toggle to enable or disable animation and blur effects")).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableAnimation).onChange(async (value) => {
      this.plugin.settings.enableAnimation = value;
      await this.plugin.saveSettings();
      this.plugin.applyStyles();
    }));
    new import_obsidian3.Setting(containerEl).setName(t("Hide scroll")).setDesc(t("Hide scrollbar in the modal window")).addToggle((toggle) => toggle.setValue(this.plugin.settings.hideScroll).onChange(async (value) => {
      this.plugin.settings.hideScroll = value;
      await this.plugin.saveSettings();
      this.plugin.applyStyles();
    }));
    new import_obsidian3.Setting(containerEl).setName(t("Show metadata")).setDesc(t("Show file metadata in the modal window")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showMetadata).onChange(async (value) => {
      this.plugin.settings.showMetadata = value;
      await this.plugin.saveSettings();
      this.plugin.applyStyles();
    }));
    new import_obsidian3.Setting(containerEl).setName(t("Show view header of the file")).setDesc(t("Show the file's navigation bar in the modal window")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showFileViewHeader).onChange(async (value) => {
      this.plugin.settings.showFileViewHeader = value;
      await this.plugin.saveSettings();
      this.plugin.applyStyles();
    }));
    const webviewerPlugin = this.app.internalPlugins.getEnabledPluginById("webviewer");
    if (!import_obsidian3.Platform.isMobile && webviewerPlugin) {
      new import_obsidian3.Setting(containerEl).setName(t("Show view header of the link")).setDesc(t("Show the web viewer's navigation bar in the modal window")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showLinkViewHeader).onChange(async (value) => {
        this.plugin.settings.showLinkViewHeader = value;
        await this.plugin.saveSettings();
        this.plugin.applyStyles();
      }));
    }
  }
  displayMenuSettings(containerEl) {
    new import_obsidian3.Setting(containerEl).setName(t("Menu item")).setHeading();
    new import_obsidian3.Setting(containerEl).setName(t("Enable the delete Linked attachment menu item")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showDeleteCommands).onChange(async (value) => {
      this.plugin.settings.showDeleteCommands = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName(t("Enable the right-click menu")).setDesc(t("Show or hide the menu and its menu options")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showCommandsContainer).onChange(async (value) => {
      this.plugin.settings.showCommandsContainer = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.showCommandsContainer) {
      const commandsContainer = containerEl.createDiv("command-toggle-container");
      new import_obsidian3.Setting(commandsContainer).setClass("command-toggle-item").setName("Markdown").addToggle((toggle) => toggle.setValue(this.plugin.settings.enabledCommands.markdown).onChange(async (value) => {
        this.plugin.settings.enabledCommands.markdown = value;
        await this.plugin.saveSettings();
      }));
      const canvasPlugin = this.app.internalPlugins.getEnabledPluginById("canvas");
      if (canvasPlugin) {
        new import_obsidian3.Setting(commandsContainer).setClass("command-toggle-item").setName("Canvas").addToggle((toggle) => toggle.setValue(this.plugin.settings.enabledCommands.canvas).onChange(async (value) => {
          this.plugin.settings.enabledCommands.canvas = value;
          await this.plugin.saveSettings();
        }));
      }
      this.createPluginSetting(
        commandsContainer,
        "obsidian-excalidraw-plugin",
        "Excalidraw",
        "excalidraw"
      );
      this.createPluginSetting(
        commandsContainer,
        "obsidian-excalidraw-plugin-ymjr",
        "Excalidraw-ymjr",
        "excalidraw"
      );
      this.createPluginSetting(
        commandsContainer,
        "obsidian-diagrams-net",
        "Diagrams",
        "diagrams"
      );
      this.createPluginSetting(
        commandsContainer,
        "tldraw",
        "Tldraw",
        "tldraw"
      );
      this.createPluginSetting(
        commandsContainer,
        "excel",
        "Excel",
        "excel"
      );
      this.createPluginSetting(
        commandsContainer,
        "sheet-plus",
        "Sheet Plus",
        "sheetPlus"
      );
      this.createPluginSetting(
        commandsContainer,
        "vscode-editor",
        "Code File",
        "vscode"
      );
      this.createPluginSetting(
        commandsContainer,
        "obsidian-markmind",
        "MarkMind",
        "markmind"
      );
      this.createPluginSetting(
        commandsContainer,
        "notion-like-tables",
        "Dataloom",
        "dataloom"
      );
    }
  }
  displayCommandsSettings(containerEl) {
    new import_obsidian3.Setting(containerEl).setName(t("Custom commands")).setHeading();
    new import_obsidian3.Setting(containerEl).setName(t("Add custom command")).setDesc(t("Add a new custom command")).addButton((button) => button.setButtonText(t("Add")).onClick(() => {
      this.addCustomCommand();
    }));
    const customCommandsContainer = containerEl.createDiv("custom-commands-container");
    this.plugin.settings.customCommands.forEach((command, index) => {
      this.createCustomCommandSetting(customCommandsContainer, command, index);
    });
  }
  addCustomCommand() {
    const newCommand = {
      id: "",
      name: "",
      command: ""
    };
    this.plugin.settings.customCommands.push(newCommand);
    this.display();
  }
  createCustomCommandSetting(containerEl, command, index) {
    let tempCommand = { ...command };
    const setting = new import_obsidian3.Setting(containerEl).addText((text) => text.setPlaceholder(t("Command name")).setValue(tempCommand.name).onChange((value) => {
      tempCommand.id = `modal-opener:${value}`;
      tempCommand.name = value;
    })).addText((text) => text.setPlaceholder(t("Description")).setValue(tempCommand.command).onChange((value) => {
      tempCommand.command = value;
    })).addButton((button) => button.setButtonText(t("Confirm")).onClick(async () => {
      if (tempCommand.name && tempCommand.command) {
        const isDuplicate = this.plugin.settings.customCommands.some(
          (cmd, i) => cmd.name === tempCommand.name && i !== index
        );
        if (isDuplicate) {
          new import_obsidian3.Notice(t("The command name already exists, please use a different name"));
          return;
        }
        if (index >= 0) {
          this.plugin.settings.customCommands[index] = tempCommand;
        } else {
          this.plugin.settings.customCommands.push(tempCommand);
        }
        await this.plugin.saveSettings();
        new import_obsidian3.Notice(t("Command added successfully"));
        this.display();
      } else {
        new import_obsidian3.Notice(t("Please enter both command name and description"));
      }
    })).addExtraButton((button) => button.setIcon("trash").setTooltip(t("Delete")).onClick(() => {
      this.deleteCustomCommand(index);
    }));
    const textInputs = setting.controlEl.querySelectorAll(".setting-item-control input");
    textInputs.forEach((input) => {
      input.addClass("custom-command-input");
    });
    return setting;
  }
  deleteCustomCommand(index) {
    this.plugin.settings.customCommands.splice(index, 1);
    this.plugin.saveSettings();
    this.reloadPlugin();
    this.display();
    new import_obsidian3.Notice(t("Command deleted successfully."));
  }
  async reloadPlugin() {
    await this.plugin.saveSettings();
    const app = this.plugin.app;
    await app.plugins.disablePlugin("modal-opener");
    await app.plugins.enablePlugin("modal-opener");
    app.setting.openTabById("modal-opener").display();
  }
  // 添加一个通用的创建插件设置的函数
  createPluginSetting(container, pluginId, displayName, settingKey) {
    const plugin = this.plugin.getPlugin(pluginId);
    const setting = new import_obsidian3.Setting(container).setClass("command-toggle-item");
    if (plugin) {
      if (this.plugin.settings.enabledCommands[settingKey] === void 0) {
        this.plugin.settings.enabledCommands[settingKey] = true;
        this.plugin.saveSettings();
      }
      setting.setName(displayName).addToggle((toggle) => toggle.setValue(this.plugin.settings.enabledCommands[settingKey]).onChange(async (value) => {
        this.plugin.settings.enabledCommands[settingKey] = value;
        await this.plugin.saveSettings();
      }));
    } else {
      setting.setName(displayName).setDesc(t("Plugin is not enabled or installed")).addButton((button) => button.setButtonText(t("Details")).onClick(async () => {
        let obsidianUrl = `obsidian://show-plugin?id=${encodeURIComponent(pluginId)}`;
        if (pluginId === "obsidian-excalidraw-plugin-ymjr") {
          obsidianUrl = "https://github.com/Bowen-0x00/obsidian-excalidraw-plugin-ymjr";
        } else if (pluginId === "obsidian-diagrams-net") {
          obsidianUrl = "https://github.com/likemuuxi/obsidian-diagrams-net";
        }
        window.open(obsidianUrl, "_blank");
      }));
    }
    return setting;
  }
};

// src/main.ts
var _ModalOpenerPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.draggedLink = null;
    this.dragStartTime = null;
    this.processors = /* @__PURE__ */ new Map();
    this.activeLeafChangeTimeout = null;
    this.isProcessing = false;
    this.webviewPlugin = this.app.internalPlugins.getEnabledPluginById("webviewer");
    this.excludeElements = [];
    this.excludeContainers = [];
    this.excludeFiles = [];
    this.isValidURL = (url) => ["http://", "https://", "www.", "192.", "127."].some((prefix) => url.startsWith(prefix));
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ModalOpenerSettingTab(this.app, this));
    this.applyStyles();
    this.updateExcludeData();
    this.registerOpenHandler();
    this.registerContextMenuHandler();
    this.registerCustomCommands();
    this.registerEvent(this.app.workspace.on("active-leaf-change", this.onActiveLeafChange.bind(this)));
    this.documentClickHandler = (evt) => {
      const target = evt.target;
      const { altKey, ctrlKey } = evt;
      const singleClick = !import_obsidian4.Platform.isMobile ? this.settings.clickWithoutAlt : this.settings.clickWithoutAltOnMobile;
      const singleClickType = !import_obsidian4.Platform.isMobile ? this.settings.typeOfClickTrigger : this.settings.typeOfClickTriggerOnMobile;
      if (target instanceof HTMLAnchorElement && target.href && this.isValidURL(target.href)) {
        if (altKey && !ctrlKey || singleClick && !altKey && !ctrlKey && singleClickType !== "internal") {
          evt.preventDefault();
          evt.stopImmediatePropagation();
          this.openInModalWindow(target.href);
        }
        if (ctrlKey && !altKey && this.webviewPlugin) {
          evt.preventDefault();
          evt.stopImmediatePropagation();
          window.require("electron").shell.openExternal(target.href);
        }
      }
    };
    document.addEventListener("click", this.documentClickHandler, true);
    this.addCommand({
      id: "toggle-background-blur",
      name: "Toggle background blur",
      callback: () => this.toggleBackgroundBlur()
    });
    this.addCommand({
      id: "open-in-modal-window",
      name: "Open current tab content in modal",
      callback: () => this.openContentInModal()
    });
    this.addCommand({
      // This command binds the shortcut key in the bindHotkey() function of modal.ts and defines the functionality in the openInNewTab() function
      id: "open-modal-content-in-new-tab",
      name: "Open modal content in new tab",
      callback: () => {
        if (_ModalOpenerPlugin.activeModalWindow) {
          _ModalOpenerPlugin.activeModalWindow.openInNewTab();
        } else {
          new import_obsidian4.Notice(t("No active modal window"));
        }
      }
    });
  }
  applyStyles() {
    document.body.classList.toggle("modal-animation-enabled", this.settings.enableAnimation);
    document.body.classList.toggle("modal-rounding-enabled", this.settings.enableRounding);
    document.body.classList.toggle("show-file-view-header", this.settings.showFileViewHeader);
    document.body.classList.toggle("show-link-view-header", this.settings.showLinkViewHeader);
    document.body.classList.toggle("show-metadata", this.settings.showMetadata);
    document.body.classList.toggle("hider-scroll", !this.settings.hideScroll);
  }
  onunload() {
    this.app.workspace.off("active-leaf-change", this.onActiveLeafChange.bind(this));
    if (this.documentClickHandler) {
      document.removeEventListener("click", this.documentClickHandler, true);
      this.documentClickHandler = void 0;
    }
    if (this.dragHandler) {
      document.removeEventListener("dragstart", this.dragHandler);
      document.removeEventListener("dragend", this.dragHandler);
      this.dragHandler = void 0;
    }
    if (this.altClickHandler) {
      document.removeEventListener("click", this.altClickHandler, { capture: true });
      this.altClickHandler = void 0;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateExcludeData();
    this.registerOpenHandler();
    this.registerCustomCommands();
  }
  updateExcludeData() {
    this.excludeFiles = this.settings.customExcludeFiles.split(",").map((s) => s.trim()).filter(Boolean);
    this.excludeElements = this.settings.customExcludeElements.split(",").map((s) => s.trim()).filter(Boolean);
    this.excludeElements.push(".folder-overview-list-item");
    this.excludeContainers = this.settings.customExcludeContainers.split(",").map((s) => s.trim()).filter(Boolean);
    this.excludeContainers.push(".block-language-table-of-contents");
  }
  openContentInModal() {
    var _a;
    const currentFilePath = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "";
    const file = this.app.vault.getAbstractFileByPath(currentFilePath);
    const activeLeaf = this.app.workspace.getLeaf(false);
    if (!activeLeaf) {
      return;
    }
    const frameSelector = this.webviewPlugin ? "webview" : "iframe";
    const frameElement = activeLeaf.view.containerEl.querySelector(frameSelector);
    const linkValue = (frameElement == null ? void 0 : frameElement.src) || "";
    new ModalWindow(
      this,
      linkValue,
      file instanceof import_obsidian4.TFile ? file : void 0,
      ""
    ).open();
    this.isProcessing = true;
  }
  toggleBackgroundBlur() {
    this.settings.enableAnimation = !this.settings.enableAnimation;
    document.body.classList.toggle("modal-animation-enabled", this.settings.enableAnimation);
    this.saveSettings();
  }
  registerCustomCommands() {
    this.settings.customCommands.forEach((command) => {
      this.addCommand({
        id: command.id,
        name: command.name,
        callback: () => this.executeCustomCommand(command.command)
      });
    });
  }
  executeCustomCommand(command) {
    if (this.isValidURL(command)) {
      this.openInModalWindow(command);
    } else {
      const abstractFile = this.app.vault.getAbstractFileByPath(command);
      if (abstractFile instanceof import_obsidian4.TFile) {
        this.openInModalWindow(command);
      } else {
        const file = this.app.metadataCache.getFirstLinkpathDest(command, "");
        if (file instanceof import_obsidian4.TFile) {
          this.openInModalWindow(command);
        } else {
          new import_obsidian4.Notice(t("File not found: ") + command);
        }
      }
    }
  }
  registerContextMenuHandler() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        const folderTarget = document.querySelector(`.nav-folder-title[data-path="${file.path}"]`);
        const app = this.app;
        const folderPlugin = app.plugins.plugins["folder-notes"];
        if (folderPlugin) {
          if (folderTarget && folderTarget.classList.contains("has-folder-note")) {
            this.addFolderFloatMenuItem(menu, file.path);
          } else if (!folderTarget) {
            this.addFileFloatMenuItem(menu, file.path);
          }
        } else {
          if (!folderTarget) {
            this.addFileFloatMenuItem(menu, file.path);
          }
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("url-menu", (menu, link) => {
        this.addLinkFloatMenuItem(menu, link);
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        if (this.settings.showDeleteCommands) {
          this.addDeleteAttachmentMenuItem(menu, editor);
        }
        if (this.settings.showCommandsContainer) {
          this.addCreateFileMenuItem(menu);
        }
      })
    );
  }
  registerOpenHandler() {
    if (this.dragHandler) {
      document.removeEventListener("dragstart", this.dragHandler);
      document.removeEventListener("dragend", this.dragHandler);
      this.dragHandler = void 0;
    }
    if (this.altClickHandler) {
      document.removeEventListener("click", this.altClickHandler, { capture: true });
      this.altClickHandler = void 0;
    }
    if (this.settings.openMethod === "drag" || this.settings.openMethod === "both") {
      this.registerDragHandler();
    }
    if (this.settings.openMethod === "altclick" || this.settings.openMethod === "both") {
      this.registerAltClickHandler();
      if (import_obsidian4.Platform.isMobile)
        this.registerTouchClickHandler();
    }
  }
  registerDragHandler() {
    this.dragHandler = () => {
      this.registerDomEvent(document, "dragstart", (evt) => {
        const target = evt.target;
        if (this.isPreviewModeLink(target)) {
          if (!target.closest(".nav-folder-children") && !target.closest(".nav-folder")) {
            this.draggedLink = this.getPreviewModeLinkText(target);
            this.dragStartTime = Date.now();
          }
        }
      });
      this.registerDomEvent(document, "dragend", (_evt) => {
        if (this.draggedLink) {
          if (this.settings.dragThreshold === 0) {
            this.openInModalWindow(this.draggedLink);
          } else if (this.dragStartTime) {
            const dragDuration = Date.now() - this.dragStartTime;
            if (dragDuration >= this.settings.dragThreshold) {
              this.openInModalWindow(this.draggedLink);
            } else {
              new import_obsidian4.Notice(t("Drag duration too short"));
            }
          }
          this.draggedLink = null;
          this.dragStartTime = null;
        }
      });
    };
    this.dragHandler();
  }
  registerTouchClickHandler() {
    document.addEventListener("touchstart", (touchEvt) => {
      const target = touchEvt.target;
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
      if (this.settings.clickWithoutAltOnMobile && (activeView == null ? void 0 : activeView.getMode()) === "source" && target.classList.contains("cm-underline")) {
        touchEvt.preventDefault();
        touchEvt.stopImmediatePropagation();
      }
    }, { capture: true });
  }
  /*
      // 等canvas alt+click和其他类型一样表现为选取链接 可以改用此方法
      private registerAltClickHandler() {
          this.registerDomEvent(document, 'click', (evt: MouseEvent) => {
              if (evt.altKey && evt.button === 0) {
                  // 使用 setTimeout 来确保我们的处理在默认操作之后执行
                  setTimeout(() => {
                      const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);
                      if (activeView) {
                          let targetElement = evt.target as HTMLElement;
                          let altText = targetElement.getAttribute("alt");
  
                          if (this.isPreviewModeLink(targetElement)) {
                              this.handlePreviewModeLink(evt);
                          } else {
                              if (activeView.getMode() === 'source') {
                                  // 适配 markmind 在编辑模式下嵌入视图的 alt 点击
                                  if (targetElement.closest('svg')) {
                                      this.handlePreviewModeLink(evt);
                                      return;
                                  }
                                  // 适配diagram.net svg 类型的文件 alt+点击  不做处理
                                  if (altText && altText.endsWith(".svg")) {
                                      return;
                                  }
                                  this.handleSourceModeLink(activeView.editor);
                              } else {
                                  this.handlePreviewModeLink(evt);
                              }
                          }
                      }
                  }, 10);
              }
          });
      } */
  registerAltClickHandler() {
    this.altClickHandler = (evt) => {
      var _a, _b, _c, _d;
      const target = evt.target;
      const activeView = (_a = this.app.workspace.getMostRecentLeaf()) == null ? void 0 : _a.view;
      const editor = (_b = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView)) == null ? void 0 : _b.editor;
      const singleClick = !import_obsidian4.Platform.isMobile ? this.settings.clickWithoutAlt : this.settings.clickWithoutAltOnMobile;
      const singleClickType = !import_obsidian4.Platform.isMobile ? this.settings.typeOfClickTrigger : this.settings.typeOfClickTriggerOnMobile;
      const isAltClick = evt.altKey && evt.button === 0;
      if (!isAltClick && !singleClick)
        return;
      if (editor && editor.somethingSelected())
        return;
      if (!(evt.button === 0 && (!evt.ctrlKey || evt.altKey)))
        return;
      if ((_c = target.getAttribute("alt")) == null ? void 0 : _c.endsWith(".svg"))
        return;
      if (singleClick && !isAltClick && singleClickType !== "external") {
        const currentFilePath = (_d = this.app.workspace.getActiveFile()) == null ? void 0 : _d.path;
        if (currentFilePath && this.excludeFiles.length > 0) {
          const isExcluded = this.excludeFiles.some((file) => currentFilePath === file);
          if (isExcluded) {
            return;
          }
        }
      }
      if (this.isPreviewModeLink(target)) {
        this.handlePreviewModeLink(evt, isAltClick);
      } else if (activeView instanceof import_obsidian4.MarkdownView && activeView.getMode() === "source") {
        if (target.closest(".markdown-source-view")) {
          if (this.isInFencedCodeBlock(activeView.editor, activeView.editor.getCursor())) {
            if (!singleClick || singleClick && isAltClick) {
              this.app.commands.executeCommandById("vscode-editor:edit-fence");
              return;
            }
          }
          if (target.classList.contains("cm-underline") || target.classList.contains("cm-hmd-internal-link") || target.classList.contains("cm-link") || target.classList.contains("cm-url")) {
            this.handleSourceModeLink(activeView.editor, evt, isAltClick);
          }
        }
      } else {
      }
    };
    document.addEventListener("click", this.altClickHandler, { capture: true });
  }
  isPreviewModeLink(target) {
    const element = target;
    if (element.tagName === "A" && (element.classList.contains("external-link") || element.classList.contains("internal-link"))) {
      return true;
    }
    if (element.closest(".search-result-file-title .tree-item-inner")) {
      return true;
    }
    if (element.tagName === "SPAN" && element.closest(".search-result-file-match")) {
      return true;
    }
    if (element.tagName === "SPAN" && element.closest(".callout-content")) {
      return true;
    }
    const hasDefDecoration = element.querySelector(".def-decoration") !== null;
    if (hasDefDecoration || target.closest(".def-decoration")) {
      return true;
    }
    const closestList = [".annotated-link", ".ge-grid-item", ".outgoing-link-item"];
    if (closestList.some((selector) => target.closest(selector) !== null)) {
      const element2 = target.closest(".ge-grid-item");
      if (element2 && element2.classList.contains("ge-folder-item")) {
        return false;
      }
      return true;
    }
    const componentAncestor = target.closest('[class^="components"]');
    if (componentAncestor) {
      const hasLinkClass = target.classList.contains("internal-link") || target.classList.contains("external-link");
      if (hasLinkClass) {
        return true;
      }
      return false;
    }
    let current = element;
    const selectorList = ["rect", "img", "svg"];
    if (selectorList.some((selector) => target.matches(selector))) {
      while (current) {
        if (current instanceof HTMLElement && current.classList.contains("internal-embed")) {
          return true;
        }
        current = current.parentNode;
      }
    }
    const previewClasses = /* @__PURE__ */ new Set([
      "excalidraw-hyperlinkContainer-link",
      "auto-card-link-card",
      "recent-files-title-content",
      "metadata-link-inner",
      // 属性面板
      "search-result-file-title",
      // 反向链接的搜索条目
      "search-result-file-matched-text",
      // 反向链接的搜索条目
      // 'has-folder-note',
      // 'homepage-button',
      // 'view-header-breadcrumb',
      // 'ge-grid-item',
      "internal-embed",
      "file-embed-title",
      "embed-title",
      "markdown-embed-link",
      "markdown-embed-content"
      // 'canvas-minimap',
      // 'svg',
    ]);
    return Array.from(element.classList).some((cls) => previewClasses.has(cls) || cls.startsWith("excalidraw-svg"));
  }
  handlePreviewModeLink(evt, isAltClick) {
    var _a, _b, _c, _d, _e, _f, _g;
    let target = evt.target;
    if (!isAltClick) {
      if (this.excludeElements && this.excludeElements.some((selector) => target.matches(selector))) {
        return;
      }
      if (this.excludeContainers && this.excludeContainers.some((selector) => target.closest(selector))) {
        return;
      }
    }
    let linkElement = target.closest("a");
    if (linkElement) {
      const closestList = [".ge-grid-item", ".def-decoration"];
      const parentClass = closestList.find((selector) => linkElement == null ? void 0 : linkElement.closest(selector));
      if (parentClass) {
        const closestElement = linkElement.closest(parentClass);
        if (!closestElement)
          return;
        if (closestElement.classList.contains("def-decoration")) {
          const tooltipLink = target ? target.closest("a[data-tooltip-position]") : null;
          if (tooltipLink) {
            target = tooltipLink;
          }
        }
      }
    }
    const embedElement = this.findClosestEmbedElement(target);
    if (embedElement) {
      target = embedElement;
    }
    let link = this.getPreviewModeLinkText(target).replace(/^\[\[(.*?)\]\]$/, "$1");
    if (target.closest(".outgoing-link-item")) {
      const treeItemIcon = (_a = target.closest(".outgoing-link-item")) == null ? void 0 : _a.querySelector(".tree-item-icon");
      const subtext = ((_d = (_c = (_b = target.closest(".outgoing-link-item")) == null ? void 0 : _b.querySelector(".tree-item-inner-subtext")) == null ? void 0 : _c.textContent) == null ? void 0 : _d.trim()) || "";
      const text = ((_g = (_f = (_e = target.closest(".outgoing-link-item")) == null ? void 0 : _e.querySelector(".tree-item-inner-text")) == null ? void 0 : _f.textContent) == null ? void 0 : _g.trim()) || "";
      if (subtext) {
        if (treeItemIcon == null ? void 0 : treeItemIcon.querySelector(".heading-glyph")) {
          link = text ? `${subtext}#${text}` : subtext;
        } else if (treeItemIcon == null ? void 0 : treeItemIcon.querySelector(".lucide-link")) {
          link = text ? `${subtext}/${text}` : subtext;
        } else {
          link = subtext;
        }
      }
    }
    const singleClickType = !import_obsidian4.Platform.isMobile ? this.settings.typeOfClickTrigger : this.settings.typeOfClickTriggerOnMobile;
    if (!isAltClick) {
      if (this.isValidURL(link)) {
        if (singleClickType === "internal")
          return;
      } else {
        if (singleClickType === "external")
          return;
      }
    }
    evt.preventDefault();
    evt.stopImmediatePropagation();
    this.openInModalWindow(link);
  }
  getPreviewModeLinkText(target) {
    var _a, _b, _c;
    const container = target.closest(".ge-grid-item") || target;
    if (target.closest(".callout-content")) {
      const externalLink = target.closest(".external-link");
      if (externalLink) {
        return externalLink.getAttribute("href") || "";
      }
    }
    if (container.classList.contains("cm-link-alias")) {
      const parentElement = container.parentElement;
      if (parentElement) {
        const originalLink = parentElement.querySelector(".cm-link-has-alias");
        if (originalLink) {
          return ((_a = originalLink.textContent) == null ? void 0 : _a.trim()) || "";
        }
      }
    }
    if (target.closest(".annotated-link")) {
      return ((_b = container.textContent) == null ? void 0 : _b.trim()) || "";
    }
    return container.getAttribute("data-file-path") || container.getAttribute("filesource") || container.getAttribute("data-path") || container.getAttribute("data-href") || container.getAttribute("href") || container.getAttribute("src") || ((_c = container.textContent) == null ? void 0 : _c.trim()) || "";
  }
  handleSourceModeLink(editor, evt, isAltClick) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const linkMatch = this.findLinkAtPosition(line, cursor.ch);
    const singleClickType = !import_obsidian4.Platform.isMobile ? this.settings.typeOfClickTrigger : this.settings.typeOfClickTriggerOnMobile;
    const worksInReadMode = !import_obsidian4.Platform.isMobile ? this.settings.onlyWorksInReadMode : this.settings.onlyWorksInReadModeOnMobile;
    if (!isAltClick) {
      if (worksInReadMode)
        return;
      if (linkMatch && this.isValidURL(linkMatch)) {
        if (singleClickType === "internal")
          return;
      } else {
        if (singleClickType === "external")
          return;
      }
    }
    if (linkMatch) {
      if (linkMatch.trim().endsWith(".components")) {
        return;
      }
      evt.preventDefault();
      evt.stopImmediatePropagation();
      this.openInModalWindow(linkMatch);
    } else {
      let target = evt.target;
      const embedElement = this.findClosestEmbedElement(target);
      if (embedElement) {
        if (this.isPreviewModeLink(target)) {
          this.handlePreviewModeLink(evt, isAltClick);
        }
      }
    }
  }
  findLinkAtPosition(line, position) {
    const linkRegex = /!?\[\[([^\]]+?)(?:\|[^\]]+?)?\]\]|\[([^\]]+)\]\(([^)]+)\)|(https?:\/\/[^\s]+)|(www\.[^\s]+)|(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?::\d+)?\b)/g;
    let match;
    while ((match = linkRegex.exec(line)) !== null) {
      if (match.index < position && position < match.index + match[0].length) {
        if (match[1] && match[1].includes("|")) {
          return match[1].split("|")[0];
        }
        return match[1] || match[3] || match[4] || match[5] || match[6] || null;
      }
    }
    return null;
  }
  findClosestEmbedElement(element) {
    var _a;
    if (element.classList.contains("canvas-minimap") || element.classList.contains("file-embed-title") || element.classList.contains("markdown-embed-link") || element.closest('.ptl-tldraw-image-container, .dataloom-padding, .dataloom-bottom-bar, [data-viewport-type="element"], svg')) {
      while (element) {
        if ((_a = element.classList) == null ? void 0 : _a.contains("internal-embed")) {
          return element;
        }
        element = element.parentElement || element.parentNode;
      }
    }
    return null;
  }
  isInFencedCodeBlock(editor, pos) {
    if (document.querySelector(".monaco-editor")) {
      return false;
    }
    const currentLine = pos.line;
    let fenceCount = 0;
    for (let i = 0; i <= currentLine; i++) {
      const line = editor.getLine(i).trim();
      if (line.startsWith("```")) {
        fenceCount++;
      }
    }
    return fenceCount % 2 === 1;
  }
  async openInModalWindow(link) {
    try {
      const [linkWithoutAlias] = link.split("|");
      const [filePath, fragment] = linkWithoutAlias.split("#");
      const abstractFile = this.app.metadataCache.getFirstLinkpathDest(filePath, "");
      let file;
      if (abstractFile instanceof import_obsidian4.TFile) {
        file = abstractFile;
      } else {
        file = void 0;
      }
      if (!file && !this.isValidURL(link)) {
        return;
      }
      new ModalWindow(
        this,
        link,
        file,
        fragment != null ? fragment : ""
      ).open();
      this.isProcessing = true;
    } catch (error) {
      new import_obsidian4.Notice(t("Open in modal window error"));
    }
  }
  async folderNoteopenInModalWindow(link) {
    try {
      let file;
      const fileNameOnly = link.split(/[/\\]/).pop() || link;
      let abstractFile = this.app.vault.getAbstractFileByPath(`${link}/${fileNameOnly}.md`);
      if (abstractFile instanceof import_obsidian4.TFile) {
        file = abstractFile;
      } else {
        abstractFile = this.app.vault.getAbstractFileByPath(`${link}/${fileNameOnly}.canvas`);
        if (abstractFile instanceof import_obsidian4.TFile) {
          file = abstractFile;
        } else {
          const possibleFile = this.app.metadataCache.getFirstLinkpathDest(fileNameOnly, "");
          if (possibleFile instanceof import_obsidian4.TFile) {
            file = possibleFile;
          }
        }
      }
      new ModalWindow(
        this,
        "",
        file,
        ""
      ).open();
      this.isProcessing = true;
    } catch (error) {
      new import_obsidian4.Notice(t("Open in modal window error"));
    }
  }
  // menu item
  addFloatMenuItem(menu, link, title, onClick) {
    menu.addItem(
      (item) => item.setTitle(title).setIcon("popup-open").setSection("open").onClick(onClick)
    );
  }
  addLinkFloatMenuItem(menu, link) {
    this.addFloatMenuItem(menu, link || "", t("Open in modal window"), () => {
      if (link) {
        this.openInModalWindow(link);
      }
    });
  }
  addFileFloatMenuItem(menu, link) {
    this.addFloatMenuItem(menu, link || "", t("Open in modal window"), () => {
      var _a;
      if (link) {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
        if (activeView) {
          const mode = activeView.getMode();
          let linkToPreview = link;
          if (mode === "source") {
            const editor = activeView.editor;
            const cursor = editor.getCursor();
            const line = editor.getLine(cursor.line);
            const foundLink = this.findLinkAtPosition(line, cursor.ch);
            if (foundLink) {
              linkToPreview = foundLink;
            }
          } else if (mode === "preview") {
            const selection = window.getSelection();
            if (selection && selection.rangeCount > 0) {
              const range = selection.getRangeAt(0);
              const linkElement = (_a = range.startContainer.parentElement) == null ? void 0 : _a.closest("a");
              if (linkElement) {
                linkToPreview = linkElement.getAttribute("data-href") || linkElement.getAttribute("href") || linkToPreview;
              }
            }
          }
          this.openInModalWindow(linkToPreview);
        } else {
          this.openInModalWindow(link);
        }
      }
    });
  }
  addFolderFloatMenuItem(menu, link) {
    this.addFloatMenuItem(menu, link || "", t("Open in modal window"), () => {
      if (link) {
        this.folderNoteopenInModalWindow(link);
      }
    });
  }
  addCreateFileMenuItem(menu) {
    menu.addItem((item) => {
      item.setTitle(t("Create and edit in modal")).setIcon("file-plus");
      const subMenu = item.setSubmenu();
      let group1Count = 0;
      let group2Count = 0;
      if (this.settings.enabledCommands.markdown) {
        group1Count++;
        subMenu.addItem(
          (subItem) => subItem.setTitle("Markdown").setIcon("file").onClick(() => {
            this.createFileAndEditInModal("md", true);
          })
        );
      }
      const canvasPlugin = this.app.internalPlugins.getEnabledPluginById("canvas");
      if (canvasPlugin && this.settings.enabledCommands.canvas) {
        group1Count++;
        subMenu.addItem(
          (subItem) => subItem.setTitle("Canvas").setIcon("layout-dashboard").onClick(() => {
            this.createFileAndEditInModal("canvas", false);
          })
        );
      }
      if (group1Count >= 1) {
        subMenu.addSeparator();
      }
      const pluginOriginal = this.getPlugin("obsidian-excalidraw-plugin");
      const pluginYMJR = this.getPlugin("obsidian-excalidraw-plugin-ymjr");
      const excalidrawPlugin = pluginOriginal || pluginYMJR;
      if (excalidrawPlugin && this.settings.enabledCommands.excalidraw) {
        group2Count++;
        subMenu.addItem(
          (subItem) => subItem.setTitle("Excalidraw").setIcon("swords").onClick(async () => {
            const defaultNameWithExt = this.getDrawingFilename(excalidrawPlugin.settings);
            const useExcalidrawExtension = excalidrawPlugin.settings.useExcalidrawExtension;
            const result = await this.getNewFileName("", defaultNameWithExt);
            if (!result)
              return;
            const { fileName, isEmbed } = result;
            if (excalidrawPlugin && excalidrawPlugin.settings) {
              const hasCustomName = fileName != defaultNameWithExt;
              const excalidrawFileName = hasCustomName ? fileName + (useExcalidrawExtension ? ".excalidraw.md" : ".md") : defaultNameWithExt;
              try {
                const file = await excalidrawPlugin.createDrawing(excalidrawFileName);
                await this.insertLinkToPreviousView(file.path);
                new ModalWindow(this, "", file, "").open();
              } catch (e) {
                console.error("createExcalidrawFile failed:", e);
                new import_obsidian4.Notice(t("Failed to create file: ") + e.message);
              }
            }
          })
        );
      }
      const diagramsPlugin = this.getPlugin("obsidian-diagrams-net");
      if (diagramsPlugin && this.settings.enabledCommands.diagrams) {
        group2Count++;
        subMenu.addItem(
          (subItem) => subItem.setTitle("Diagrams").setIcon("pencil-ruler").onClick(() => {
            diagramsPlugin.attemptNewDiagram();
          })
        );
      }
      const tldrawPlugin = this.getPlugin("tldraw");
      if (tldrawPlugin && this.settings.enabledCommands.tldraw) {
        group2Count++;
        subMenu.addItem(
          (subItem) => subItem.setTitle("Tldraw").setIcon("shapes").onClick(async () => {
            var _a;
            const defaultName = tldrawPlugin.createDefaultFilename();
            const result = await this.getNewFileName("", defaultName + ".md");
            if (!result)
              return;
            const { fileName, isEmbed } = result;
            const hasCustomName = fileName + ".md" != defaultName;
            const tldrawFileName = hasCustomName ? fileName : defaultName;
            if (tldrawPlugin && tldrawPlugin.settings) {
              const fileDestinations = tldrawPlugin.settings.fileDestinations;
              const destinationMethod = fileDestinations.destinationMethod;
              let folderName;
              switch (destinationMethod) {
                case "attachments-folder": {
                  folderName = (_a = this.app.vault.config.attachmentFolderPath) != null ? _a : "/";
                  break;
                }
                case "colocate": {
                  folderName = tldrawPlugin.settings.fileDestinations.colocationSubfolder;
                  break;
                }
                case "default-folder": {
                  folderName = tldrawPlugin.settings.fileDestinations.defaultFolder;
                  break;
                }
                default: {
                  folderName = "";
                  break;
                }
              }
              try {
                const file = await tldrawPlugin.createTldrFile(tldrawFileName, {
                  foldername: folderName,
                  inMarkdown: true,
                  tlStore: void 0
                });
                await this.insertLinkToPreviousView(file.path);
                new ModalWindow(this, "", file, "", "tldraw-view").open();
              } catch (e) {
                console.error("createTldrFile failed:", e);
                new import_obsidian4.Notice(t("Failed to create file: ") + e.message);
              }
            }
          })
        );
      }
      if (group2Count >= 1) {
        subMenu.addSeparator();
      }
      const excelPlugin = this.getPlugin("excel");
      if (excelPlugin && this.settings.enabledCommands.excel) {
        subMenu.addItem(
          (subItem) => subItem.setTitle("Excel").setIcon("table").onClick(async () => {
            const defaultName = this.getExcelFilename(excelPlugin.settings);
            const result = await this.getNewFileName("", defaultName);
            if (!result)
              return;
            const { fileName, isEmbed } = result;
            if (excelPlugin && excelPlugin.settings) {
              const hasCustomName = fileName !== defaultName;
              const excelFileName = hasCustomName ? fileName + ".sheet.md" : fileName;
              try {
                const file = await excelPlugin.createExcel(excelFileName);
                await this.insertLinkToPreviousView(file.path);
                new ModalWindow(this, "", file, "", "excel-view").open();
              } catch (e) {
                console.error("createExcelFile failed:", e);
                new import_obsidian4.Notice(t("Failed to create file: ") + e.message);
              }
            }
          })
        );
      }
      const sheetPlugin = this.getPlugin("sheet-plus");
      if (sheetPlugin && this.settings.enabledCommands.sheetPlus) {
        subMenu.addItem(
          (subItem) => subItem.setTitle("Sheet Plus").setIcon("grid").onClick(async () => {
            const defaultName = this.getExcelProFilename(sheetPlugin.settings);
            const result = await this.getNewFileName("", defaultName);
            if (!result)
              return;
            const { fileName, isEmbed } = result;
            if (sheetPlugin && sheetPlugin.settings) {
              const hasCustomName = fileName !== defaultName;
              const excelFileName = hasCustomName ? fileName + ".univer.md" : fileName;
              try {
                const file = await sheetPlugin.createExcel(excelFileName);
                await this.insertLinkToPreviousView(file.path);
                new ModalWindow(this, "", file, "", "excel-pro-view").open();
              } catch (e) {
                console.error("createExcelFile failed:", e);
                new import_obsidian4.Notice(t("Failed to create file: ") + e.message);
              }
            }
          })
        );
      }
      const vscodePlugin = this.getPlugin("vscode-editor");
      if (vscodePlugin && this.settings.enabledCommands.vscode) {
        subMenu.addItem(
          (subItem) => subItem.setTitle("Code File").setIcon("file-code").onClick(async () => {
            if (vscodePlugin && vscodePlugin.settings) {
              const defaultLocation = vscodePlugin.settings.defaultLocation;
              let tFolder = this.app.vault.getRoot();
              switch (defaultLocation) {
                case "root": {
                  tFolder = this.app.vault.getRoot();
                  break;
                }
                case "default": {
                  const folderPath = this.app.vault.getConfig("attachmentFolderPath");
                  const folder = this.app.vault.getAbstractFileByPath(folderPath);
                  if (folder instanceof import_obsidian4.TFolder) {
                    tFolder = folder;
                  }
                  break;
                }
                case "custom": {
                  const customPath = vscodePlugin.settings.customPath.replace(/\/$/, "");
                  const customFolder = this.app.vault.getAbstractFileByPath(customPath);
                  if (customFolder instanceof import_obsidian4.TFolder) {
                    tFolder = customFolder;
                  }
                  break;
                }
                case "current": {
                  const activeFile = this.app.workspace.getActiveFile();
                  if ((activeFile == null ? void 0 : activeFile.parent) instanceof import_obsidian4.TFolder) {
                    tFolder = activeFile.parent;
                  }
                  break;
                }
              }
              await this.getNewCodeFileNameAndCreate(vscodePlugin.settings, tFolder);
            }
          })
        );
      }
      const markmindPlugin = this.getPlugin("obsidian-markmind");
      if (markmindPlugin && this.settings.enabledCommands.markmind) {
        subMenu.addItem(
          (subItem) => subItem.setTitle("MarkMind").setIcon("brain-circuit").onClick(async () => {
            var _a, _b;
            try {
              const activeFile = this.app.workspace.getActiveFile();
              const filePath = (activeFile == null ? void 0 : activeFile.path) || "";
              const parentFolder = this.app.fileManager.getNewFileParent(filePath);
              const lang = (0, import_obsidian4.getLanguage)();
              const baseName = lang.startsWith("zh") ? "\u672A\u547D\u540D\u601D\u7EF4\u5BFC\u56FE" : "untitled mindmap";
              const sourcePath = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "";
              const folder = this.app.fileManager.getNewFileParent(sourcePath, `${baseName}.md`);
              const availableFileName = await this.getAvailableFileName(baseName, "md", folder.path);
              const result = await this.getNewFileName("", availableFileName);
              if (!result)
                return;
              const { fileName, isEmbed } = result;
              if (parentFolder) {
                const targetFolder = parentFolder || this.app.fileManager.getNewFileParent(
                  ((_b = this.app.workspace.getActiveFile()) == null ? void 0 : _b.path) || ""
                );
                const folderPath = targetFolder.path;
                const hasCustomName = fileName !== availableFileName;
                const markmindFileName = hasCustomName ? fileName + ".md" : fileName;
                const fullPath = `${folderPath}/${markmindFileName}`;
                const file = await this.app.vault.create(fullPath, "");
                await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
                  if (markmindPlugin.settings.mindmapmode === "basic") {
                    frontmatter["mindmap-plugin"] = "basic";
                  } else {
                    frontmatter["mindmap-plugin"] = "rich";
                  }
                });
                await this.insertLinkToPreviousView(file.path);
                new ModalWindow(this, "", file, "", "mindmapview").open();
              }
            } catch (e) {
              console.error("createMarkmindFile failed:", e);
              new import_obsidian4.Notice(t("Failed to create file: ") + e.message);
            }
          })
        );
      }
      const dataloomPlugin = this.getPlugin("notion-like-tables");
      if (dataloomPlugin && this.settings.enabledCommands.dataloom) {
        subMenu.addItem(
          (subItem) => subItem.setTitle("Dataloom").setIcon("container").onClick(async () => {
            await this.app.commands.executeCommandById("notion-like-tables:create-and-embed");
            setTimeout(() => {
              var _a;
              const editor = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor;
              if (!editor)
                return;
              const line = editor.getLine(editor.getCursor().line);
              const match = line.match(/\[\[([^\]]+)\]\]/);
              if (!match)
                return;
              const filename = match[1];
              const file = this.app.metadataCache.getFirstLinkpathDest(filename, "");
              if (file) {
                new ModalWindow(this, "", file, "", "dataloom").open();
              }
            }, 100);
          })
        );
      }
    });
  }
  addDeleteAttachmentMenuItem(menu, editor) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const linkMatch = this.findLinkAtPosition(line, cursor.ch);
    if (linkMatch) {
      const [filePath] = linkMatch.split("|");
      const [filePathWithoutAnchor] = filePath.split("#");
      const file = this.app.metadataCache.getFirstLinkpathDest(filePathWithoutAnchor, "");
      if (file && file instanceof import_obsidian4.TFile) {
        menu.addItem((item) => {
          item.setTitle(t("Delete linked attachment")).setIcon("trash").onClick(() => {
            const modal = new import_obsidian4.Modal(this.app);
            modal.titleEl.setText(t("Confirm deletion?"));
            const content = modal.contentEl.createDiv();
            content.setText(file.path);
            const buttonContainer = content.createDiv({ cls: "modal-button-container" });
            buttonContainer.createEl("button", { text: t("Cancel") }).onclick = () => modal.close();
            buttonContainer.createEl(
              "button",
              { text: t("Delete"), cls: "mod-warning" }
            ).onclick = async () => {
              try {
                await this.app.fileManager.trashFile(file);
                const startIndex = line.indexOf("![[");
                const isEmbed = startIndex !== -1;
                const from = {
                  line: cursor.line,
                  ch: isEmbed ? startIndex : line.indexOf("[[")
                };
                const to = {
                  line: cursor.line,
                  ch: line.indexOf("]]") + 2
                };
                editor.replaceRange("", from, to);
                new import_obsidian4.Notice(t("File moved to trash"));
                modal.close();
              } catch (error) {
                new import_obsidian4.Notice(t("Failed to delete file"));
              }
            };
            modal.open();
          });
        });
      }
    }
  }
  getDrawingFilename(settings) {
    const prefix = settings.drawingFilenamePrefix || "";
    const datetime = settings.drawingFilenameDateTime ? window.moment().format(settings.drawingFilenameDateTime) : "";
    const extension = settings.compatibilityMode ? ".excalidraw" : settings.useExcalidrawExtension ? ".excalidraw.md" : ".md";
    return prefix + datetime + extension;
  }
  getExcelFilename(settings) {
    return settings.excelFilenamePrefix + (settings.excelFilenameDateTime !== "" ? window.moment().format(settings.excelFilenameDateTime) : "") + ".sheet.md";
  }
  getExcelProFilename(settings) {
    return `${settings.excelFilenamePrefix + (settings.excelFilenameDateTime !== "" ? window.moment().format(settings.excelFilenameDateTime) : "")}.univer.md`;
  }
  async insertLinkToPreviousView(filepath) {
    var _a, _b;
    const previousView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    const previousEditor = (_a = previousView == null ? void 0 : previousView.editor) != null ? _a : null;
    const previousCursor = (_b = previousEditor == null ? void 0 : previousEditor.getCursor()) != null ? _b : null;
    if (previousEditor && previousCursor) {
      const linkText = `![[${filepath}]]`;
      if (previousView) {
        this.app.workspace.setActiveLeaf(previousView.leaf, { focus: true });
        previousEditor == null ? void 0 : previousEditor.replaceRange(linkText, previousCursor);
      }
      const newCursor = {
        line: previousCursor.line,
        ch: previousCursor.ch + linkText.length
      };
      previousEditor.setCursor(newCursor);
    }
  }
  async getAvailableFileName(baseName, ext, folderPath) {
    let index = 0;
    let finalName = `${baseName}.${ext}`;
    let fullPath = folderPath === "/" ? finalName : `${folderPath}/${finalName}`;
    while (await this.app.vault.adapter.exists(fullPath)) {
      index += 1;
      finalName = `${baseName} ${index}.${ext}`;
      fullPath = folderPath === "/" ? finalName : `${folderPath}/${finalName}`;
    }
    return finalName;
  }
  async getNewFileName(fileType, placeholder = "") {
    var _a, _b;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    const selectedText = ((_a = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _a.getSelection()) || "";
    const lang = (0, import_obsidian4.getLanguage)();
    const baseName = lang.startsWith("zh") ? "\u672A\u547D\u540D" : "untitled";
    const sourcePath = ((_b = this.app.workspace.getActiveFile()) == null ? void 0 : _b.path) || "";
    const folder = this.app.fileManager.getNewFileParent(sourcePath, `${baseName}.${fileType}`);
    const availableFileName = await this.getAvailableFileName(baseName, fileType, folder.path);
    const finalPlaceholder = (placeholder == null ? void 0 : placeholder.trim()) || availableFileName;
    return new Promise((resolve) => {
      const modal = new import_obsidian4.Modal(this.app);
      modal.titleEl.setText(t("Enter new file name"));
      const container = modal.contentEl.createDiv({ cls: "new-file-modal-container" });
      const inputContainer = container.createDiv({ cls: "new-file-input-container" });
      const input = inputContainer.createEl("input", {
        type: "text",
        value: selectedText,
        placeholder: finalPlaceholder,
        cls: "new-file-input"
      });
      input.focus();
      input.select();
      let select;
      if (fileType == "md") {
        select = inputContainer.createEl("select", { cls: "new-file-select" });
        select.createEl("option", { text: t("Wiki link"), value: "wikilink" });
        select.createEl("option", { text: t("Embed link"), value: "embed" });
      }
      const buttonContainer = container.createDiv({ cls: "new-file-button-container" });
      const confirmButton = buttonContainer.createEl("button", {
        text: t("Confirm"),
        cls: "new-file-button confirm"
      });
      const cancelButton = buttonContainer.createEl("button", {
        text: t("Cancel"),
        cls: "new-file-button cancel"
      });
      const confirmAction = () => {
        const fileName = input.value.trim() || input.placeholder.trim();
        if (fileName) {
          resolve({
            fileName,
            isEmbed: select ? select.value === "embed" : true
          });
          modal.close();
        }
      };
      confirmButton.onclick = confirmAction;
      input.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          confirmAction();
        }
      });
      cancelButton.onclick = () => {
        resolve(null);
        modal.close();
      };
      modal.open();
    });
  }
  async getNewCodeFileNameAndCreate(settings, parent) {
    return new Promise((resolve) => {
      const modal = new import_obsidian4.Modal(this.app);
      modal.titleEl.setText(t("Enter new file name"));
      const container = modal.contentEl.createDiv({ cls: "new-file-modal-container" });
      const inputContainer = container.createDiv({ cls: "new-file-input-container" });
      const input = inputContainer.createEl("input", {
        type: "text",
        value: "",
        placeholder: "untitled code file",
        cls: "new-file-input"
      });
      input.focus();
      input.select();
      const select = inputContainer.createEl("select", { cls: "new-file-select" });
      settings.extensions.forEach((ext) => {
        select.createEl("option", { text: ext, value: ext });
      });
      select.value = settings.extensions[0];
      const buttonContainer = container.createDiv({ cls: "new-file-button-container" });
      const confirmButton = buttonContainer.createEl("button", {
        text: t("Confirm"),
        cls: "new-file-button confirm"
      });
      const cancelButton = buttonContainer.createEl("button", {
        text: t("Cancel"),
        cls: "new-file-button cancel"
      });
      const complete = async () => {
        const fileName = input.value.trim() || input.placeholder.trim();
        const fileExtension = select.value;
        if (!fileName)
          return;
        modal.close();
        const baseFolder = parent instanceof import_obsidian4.TFile ? parent.parent : parent;
        const newPath = (0, import_obsidian4.normalizePath)(`${baseFolder.path}/${fileName}.${fileExtension}`);
        const existingFile = this.app.vault.getAbstractFileByPath(newPath);
        if (existingFile && existingFile instanceof import_obsidian4.TFile) {
          new import_obsidian4.Notice("File already exists");
          await this.app.workspace.getLeaf(true).openFile(existingFile);
          resolve(existingFile);
          return;
        }
        const file = await this.app.vault.create(newPath, "", {});
        await this.insertLinkToPreviousView(file.path);
        new ModalWindow(this, "", file, "", "vscode-editor").open();
        resolve(file);
      };
      confirmButton.onclick = complete;
      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          complete();
        }
      });
      cancelButton.onclick = () => {
        modal.close();
        resolve(null);
      };
      modal.open();
    });
  }
  insertLinkToActiveFile(filePath, displayName, isEmbed, isAlias) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      const selection = editor.getSelection();
      const linkText = `${isEmbed ? "!" : ""}[[${filePath}${isAlias ? `|${displayName}` : ""}]]`;
      if (selection) {
        const from = editor.getCursor("from");
        const to = editor.getCursor("to");
        editor.replaceRange(linkText, from, to);
      } else {
        const cursor = editor.getCursor();
        editor.replaceRange(linkText, cursor);
      }
    }
  }
  async createFileAndEditInModal(fileType, isAlias) {
    const result = await this.getNewFileName(fileType);
    if (!result)
      return;
    const { fileName, isEmbed } = result;
    const activeFile = this.app.workspace.getActiveFile();
    const sourcePath = activeFile ? activeFile.path : "";
    const folder = this.app.fileManager.getNewFileParent(sourcePath, fileName);
    const newFilePath = folder.path === "/" ? fileName : `${folder.path}/${fileName}`;
    try {
      const newFile = await this.app.vault.create(newFilePath, "");
      const displayName = newFile.basename;
      isAlias ? this.insertLinkToActiveFile(newFilePath, displayName, isEmbed, true) : this.insertLinkToActiveFile(newFilePath, displayName, isEmbed, false);
      new ModalWindow(
        this,
        "",
        newFile,
        ""
      ).open();
    } catch (error) {
      new import_obsidian4.Notice(t("Failed to create file: ") + error.message);
    }
  }
  // no dupe leaf
  async onActiveLeafChange(activeLeaf) {
    var _a;
    if (this.activeLeafChangeTimeout) {
      clearTimeout(this.activeLeafChangeTimeout);
    }
    if (((_a = activeLeaf == null ? void 0 : activeLeaf.view) == null ? void 0 : _a.getViewType()) === "webviewer") {
      const activeLeafEl = document.querySelector(".workspace-leaf.mod-active");
      if (activeLeafEl) {
        const webviewEl = activeLeafEl.querySelector("webview");
        if (webviewEl) {
          webviewEl.addEventListener("dom-ready", () => {
            if (this.settings.enableWebAutoDarkMode) {
              this.registerWebAutoDarkMode(webviewEl);
            }
            if (this.settings.enableImmersiveTranslation) {
              this.registerImmersiveTranslation(webviewEl);
            }
          });
        }
      }
    }
    this.activeLeafChangeTimeout = setTimeout(async () => {
      if (!this.settings.preventsDuplicateTabs) {
        return;
      }
      if (this.isProcessing) {
        if (!activeLeaf.view.containerEl.closest(".modal-opener")) {
          this.isProcessing = false;
        }
        return;
      }
      this.isProcessing = true;
      try {
        const { id } = activeLeaf;
        if (this.processors.has(id)) {
          return;
        }
        const processor = this.processActiveLeaf(activeLeaf);
        this.processors.set(id, processor);
        try {
          await processor;
        } finally {
          this.processors.delete(id);
        }
      } finally {
        this.isProcessing = false;
      }
    }, 100);
  }
  async processActiveLeaf(activeLeaf) {
    await new Promise((resolve) => setTimeout(resolve, this.settings.delayInMs));
    const filePath = activeLeaf.view.getState().file;
    if (!filePath)
      return;
    const viewType = activeLeaf.view.getViewType();
    const duplicateLeaves = this.app.workspace.getLeavesOfType(viewType).filter(
      (l) => l !== activeLeaf && l.view.getState().file === filePath && l.parent.id === activeLeaf.parent.id
    );
    if (duplicateLeaves.length === 0)
      return;
    const sortedLeaves = [activeLeaf, ...duplicateLeaves].sort(
      (a, b) => b.activeTime - a.activeTime
    );
    const mostRecentLeaf = sortedLeaves[0];
    const oldestLeaf = sortedLeaves[sortedLeaves.length - 1];
    if (activeLeaf !== mostRecentLeaf) {
      if (activeLeaf === oldestLeaf) {
        for (const leaf of duplicateLeaves) {
          if (!leaf.pinned) {
            leaf.detach();
          }
        }
        this.app.workspace.setActiveLeaf(activeLeaf, { focus: true });
      } else {
        if (activeLeaf.view.navigation && activeLeaf.history.backHistory.length > 0) {
          activeLeaf.history.back();
        } else if (!activeLeaf.pinned) {
          activeLeaf.detach();
        }
        this.app.workspace.setActiveLeaf(mostRecentLeaf, { focus: true });
      }
    } else {
      for (const leaf of duplicateLeaves) {
        if (!leaf.pinned) {
          leaf.detach();
        }
      }
    }
  }
  async registerWebAutoDarkMode(webContents) {
    try {
      const isDarkMode = document.body.classList.contains("theme-dark");
      if (isDarkMode) {
        try {
          await webContents.executeJavaScript(`
						const element = document.createElement('script');

						fetch('https://cdn.jsdelivr.net/npm/darkreader/darkreader.min.js')
							.then((response) => {
								element.src = response.url;
								document.body.appendChild(element);
							})
							.catch((error) => {
								console.error('Error loading the script:', error);
							});

						element.onload = () => {
							try {
								DarkReader?.setFetchMethod(window.fetch);
								DarkReader?.enable({
									brightness: 100,
									contrast: 90,
									sepia: 10
								});
								console.log(DarkReader);
							} catch (err) {
								window.myPostPort?.postMessage('darkreader-failed');
								console.error('Failed to load dark reader: ', err);
							}
						};
					`);
        } catch (e) {
          console.error(e);
        }
      } else {
        try {
          await webContents.executeJavaScript(`
                        if (DarkReader) {
                            DarkReader.disable();
                            console.log('Dark mode disabled');
                        }
                    `);
        } catch (e) {
          console.error("Error disabling dark mode: ", e);
        }
      }
    } catch (err) {
      console.error("Failed to get background color: ", err);
    }
    webContents.executeJavaScript(`
			window.addEventListener('mouseover', (e) => {
				if(!e.target) return;
				if(!e.ctrlKey && !e.metaKey) return;
				// Tag name is a tag
				if(e.target.tagName.toLowerCase() === 'a'){
					window.myPostPort?.postMessage('link ' + e.clientX + ' ' + e.clientY + ' ' + e.target.href);
				}
			});
		`);
  }
  async registerImmersiveTranslation(webContents) {
    await webContents.executeJavaScript(`
            // 1. \u8BBE\u7F6E\u521D\u59CB\u5316\u53C2\u6570
            window.immersiveTranslateConfig = {
                isAutoTranslate: false,
                pageRule: {
                    // \u6392\u9664\u4E0D\u9700\u8981\u7FFB\u8BD1\u7684\u5143\u7D20
                    excludeSelectors: ["pre", "code", "nav", "footer"],
                }
            };

            // 2. \u52A0\u8F7D\u6C89\u6D78\u5F0F\u7FFB\u8BD1 SDK
            const script = document.createElement('script');
            script.async = true;
            script.src = 'https://download.immersivetranslate.com/immersive-translate-sdk-latest.js';
            document.head.appendChild(script);
        `);
  }
  getPlugin(pluginId) {
    const app = this.app;
    return app.plugins.plugins[pluginId];
  }
};
var ModalOpenerPlugin = _ModalOpenerPlugin;
ModalOpenerPlugin.activeModalWindow = null;

/* nosourcemap */