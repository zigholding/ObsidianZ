/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  array_prefix_id: () => array_prefix_id,
  check_value: () => check_value,
  concat_array: () => concat_array,
  get_customjs_func: () => get_customjs_func,
  get_plugins: () => get_plugins,
  get_str_func: () => get_str_func,
  get_tp_func: () => get_tp_func,
  get_tp_user_func: () => get_tp_user_func,
  parse_templater: () => parse_templater,
  templater$1: () => templater$1,
  toogle_note_css: () => toogle_note_css
});
function get_plugins(app, name) {
}
function array_prefix_id(items, offset = 1) {
  let res = new Array();
  let N = items.length.toString().length;
  for (let i = 0; i < items.length; i++) {
    let id = (i + offset).toString().padStart(N, "0");
    res.push(`${id} \u{1F525} ${items[i]}`);
  }
  return res;
}
function concat_array(items) {
  if (items == null) {
    return [];
  }
  if (typeof items === "string") {
    return [items];
  }
  if (!(items instanceof Array)) {
    return [items];
  }
  let res = [];
  for (let item of items) {
    if (typeof item === "string") {
      res.push(item);
    } else if (item instanceof Array) {
      res = res.concat(this.concat_array(item));
    } else {
      res.push(item);
    }
  }
  return res;
}
async function check_value(t, k, v, dt, T) {
  let i = 0;
  while (t[k] == null || !(t[k] === v)) {
    await sleep(dt);
    i = dt + dt;
    if (i > T) {
      break;
    }
  }
  if (t[k] && t[k] === v) {
    return true;
  } else {
    return false;
  }
}
function get_tp_func(app, target) {
  let templater = app.plugins.getPlugin(
    "templater-obsidian"
  );
  if (!templater) {
    return null;
  }
  let items = target.split(".");
  if (items[0].localeCompare("tp") != 0 || items.length != 3) {
    return void 0;
  }
  let modules = templater.templater.functions_generator.internal_functions.modules_array.filter(
    (item) => item.name.localeCompare(items[1]) == 0
  );
  if (modules.length == 0) {
    return void 0;
  }
  return modules[0].static_functions.get(items[2]);
}
async function get_tp_user_func(app, target) {
  if (!target.match(/^tp\.user\.\w+$/)) {
    return null;
  }
  let templater = app.plugins.getPlugin(
    "templater-obsidian"
  );
  if (!templater) {
    return null;
  }
  let items = target.split(".");
  if (items[0].localeCompare("tp") != 0 || items[1].localeCompare("user") != 0 || items.length != 3) {
    return void 0;
  }
  let funcs = await templater.templater.functions_generator.user_functions.user_script_functions.generate_user_script_functions();
  return funcs.get(items[2]);
}
async function get_customjs_func(target) {
  if (!target.match(/^(cJS|customJS|customjs|customJs)(\.\w+)+$/)) {
    return null;
  }
  let items = target.split(".");
  if (window.hasOwnProperty("cJS")) {
    let cJS = window["cJS"];
    let tmp = await cJS();
    for (let field of items.slice(1)) {
      tmp = tmp[field];
      if (!tmp) {
        return null;
      }
    }
    return tmp;
  }
}
async function get_str_func(app, target) {
  let ufunc = await get_tp_func(app, target);
  if (ufunc) {
    return ufunc;
  }
  ufunc = await get_tp_user_func(app, target);
  if (ufunc) {
    return ufunc;
  }
  ufunc = await get_customjs_func(target);
  if (ufunc) {
    return ufunc;
  }
  return null;
}
async function templater$1(app, template, active_file, target_file, extra = null) {
  const config = {
    template_file: template,
    active_file,
    target_file,
    extra,
    run_mode: "DynamicProcessor"
  };
  const plugins = app.plugins.plugins;
  const exists = plugins["templater-obsidian"];
  if (!exists) {
    new import_obsidian2.Notice("Templater is not installed. Please install it.");
    return;
  }
  const { templater } = plugins["templater-obsidian"];
  const functions = await templater.functions_generator.internal_functions.generate_object(config);
  functions.user = {};
  const userScriptFunctions = await templater.functions_generator.user_functions.user_script_functions.generate_user_script_functions(config);
  userScriptFunctions.forEach(
    (value, key) => {
      functions.user[key] = value;
    }
  );
  if (template) {
    const userSystemFunctions = await templater.functions_generator.user_functions.user_system_functions.generate_system_functions(config);
    userSystemFunctions.forEach(
      (value, key) => {
        functions.user[key] = value;
      }
    );
  }
  return async (command) => {
    return await templater.parser.parse_commands(command, functions);
  };
}
async function parse_templater(app, template, extract = true, extra = null) {
  let nc = app.plugins.getPlugin("note-chain");
  if (!nc) {
    return;
  }
  let file = nc.chain.get_tfile(template);
  if (file) {
    template = file;
  }
  let blocks;
  let template_file = null;
  if (template instanceof import_obsidian2.TFile) {
    template_file = template;
    if (extract) {
      blocks = await nc.editor.extract_templater_block(template);
    } else {
      let item = await app.vault.cachedRead(template);
      blocks = [item];
    }
  } else {
    if (extract) {
      blocks = await nc.editor.extract_templater_block(template);
    } else {
      blocks = [template];
    }
  }
  if (!template_file) {
    template_file = "";
  }
  let active_file = app.workspace.getActiveFile();
  let notes = app.vault.getMarkdownFiles();
  if (notes.length == 0) {
    return;
  }
  let target_file = notes[0];
  let templateFunc = await templater$1(app, template_file, active_file, target_file, extra = extra);
  if (templateFunc) {
    let res = [];
    for (let block of blocks) {
      let item = await templateFunc(block);
      res.push(item);
    }
    return res;
  } else {
    return [];
  }
}
async function toogle_note_css(app, document2, name, refresh = false) {
  let nc = app.plugins.getPlugin("note-chain");
  let tfile = nc.chain.get_tfile(name);
  if (!tfile) {
    let tfiles;
    if (name == "/") {
      tfiles = nc.chain.get_all_tfiles();
    } else {
      let folder = nc.chain.get_all_folders().filter((x) => x.name == name);
      if (folder.length == 0) {
        return;
      }
      tfiles = nc.utils.concat_array(
        folder.map((x) => nc.chain.get_tfiles_of_folder(x))
      );
    }
    if (tfiles.length == 0) {
      return;
    }
    tfile = await nc.chain.sugguster_note(tfiles);
    if (!tfile) {
      return;
    }
  }
  let link = document2.getElementById(tfile.basename);
  if (link && !refresh) {
    link.remove();
  } else {
    let css = await nc.editor.extract_code_block(tfile, "css");
    let inner = css.join("\n");
    if (link) {
      link.innerHTML = inner;
    } else {
      if (inner != "") {
        let styleElement = document2.createElement("style");
        styleElement.innerHTML = inner;
        styleElement.id = tfile.basename;
        document2.head.appendChild(styleElement);
      }
    }
  }
}
var import_obsidian2;
var init_utils = __esm({
  "src/utils.ts"() {
    import_obsidian2 = require("obsidian");
  }
});

// node_modules/js-yaml/lib/common.js
var require_common = __commonJS({
  "node_modules/js-yaml/lib/common.js"(exports, module2) {
    "use strict";
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence))
        return sequence;
      else if (isNothing(sequence))
        return [];
      return [sequence];
    }
    function extend(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    module2.exports.isNothing = isNothing;
    module2.exports.isObject = isObject;
    module2.exports.toArray = toArray;
    module2.exports.repeat = repeat;
    module2.exports.isNegativeZero = isNegativeZero;
    module2.exports.extend = extend;
  }
});

// node_modules/js-yaml/lib/exception.js
var require_exception = __commonJS({
  "node_modules/js-yaml/lib/exception.js"(exports, module2) {
    "use strict";
    function formatError(exception, compact) {
      var where = "", message = exception.reason || "(unknown reason)";
      if (!exception.mark)
        return message;
      if (exception.mark.name) {
        where += 'in "' + exception.mark.name + '" ';
      }
      where += "(" + (exception.mark.line + 1) + ":" + (exception.mark.column + 1) + ")";
      if (!compact && exception.mark.snippet) {
        where += "\n\n" + exception.mark.snippet;
      }
      return message + " " + where;
    }
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = formatError(this, false);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString(compact) {
      return this.name + ": " + formatError(this, compact);
    };
    module2.exports = YAMLException;
  }
});

// node_modules/js-yaml/lib/snippet.js
var require_snippet = __commonJS({
  "node_modules/js-yaml/lib/snippet.js"(exports, module2) {
    "use strict";
    var common = require_common();
    function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
      var head = "";
      var tail = "";
      var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
      if (position - lineStart > maxHalfLength) {
        head = " ... ";
        lineStart = position - maxHalfLength + head.length;
      }
      if (lineEnd - position > maxHalfLength) {
        tail = " ...";
        lineEnd = position + maxHalfLength - tail.length;
      }
      return {
        str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
        pos: position - lineStart + head.length
        // relative position
      };
    }
    function padStart(string, max) {
      return common.repeat(" ", max - string.length) + string;
    }
    function makeSnippet(mark, options) {
      options = Object.create(options || null);
      if (!mark.buffer)
        return null;
      if (!options.maxLength)
        options.maxLength = 79;
      if (typeof options.indent !== "number")
        options.indent = 1;
      if (typeof options.linesBefore !== "number")
        options.linesBefore = 3;
      if (typeof options.linesAfter !== "number")
        options.linesAfter = 2;
      var re = /\r?\n|\r|\0/g;
      var lineStarts = [0];
      var lineEnds = [];
      var match;
      var foundLineNo = -1;
      while (match = re.exec(mark.buffer)) {
        lineEnds.push(match.index);
        lineStarts.push(match.index + match[0].length);
        if (mark.position <= match.index && foundLineNo < 0) {
          foundLineNo = lineStarts.length - 2;
        }
      }
      if (foundLineNo < 0)
        foundLineNo = lineStarts.length - 1;
      var result = "", i, line;
      var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
      var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
      for (i = 1; i <= options.linesBefore; i++) {
        if (foundLineNo - i < 0)
          break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo - i],
          lineEnds[foundLineNo - i],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
          maxLineLength
        );
        result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
      }
      line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
      result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
      for (i = 1; i <= options.linesAfter; i++) {
        if (foundLineNo + i >= lineEnds.length)
          break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo + i],
          lineEnds[foundLineNo + i],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
          maxLineLength
        );
        result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      }
      return result.replace(/\n$/, "");
    }
    module2.exports = makeSnippet;
  }
});

// node_modules/js-yaml/lib/type.js
var require_type = __commonJS({
  "node_modules/js-yaml/lib/type.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "multi",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "representName",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.options = options;
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.representName = options["representName"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.multi = options["multi"] || false;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    module2.exports = Type;
  }
});

// node_modules/js-yaml/lib/schema.js
var require_schema = __commonJS({
  "node_modules/js-yaml/lib/schema.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception();
    var Type = require_type();
    function compileList(schema, name) {
      var result = [];
      schema[name].forEach(function(currentType) {
        var newIndex = result.length;
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
            newIndex = previousIndex;
          }
        });
        result[newIndex] = currentType;
      });
      return result;
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;
      function collectType(type) {
        if (type.multi) {
          result.multi[type.kind].push(type);
          result.multi["fallback"].push(type);
        } else {
          result[type.kind][type.tag] = result["fallback"][type.tag] = type;
        }
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      return this.extend(definition);
    }
    Schema.prototype.extend = function extend(definition) {
      var implicit = [];
      var explicit = [];
      if (definition instanceof Type) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit)
          implicit = implicit.concat(definition.implicit);
        if (definition.explicit)
          explicit = explicit.concat(definition.explicit);
      } else {
        throw new YAMLException("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type.multi) {
          throw new YAMLException("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema.prototype);
      result.implicit = (this.implicit || []).concat(implicit);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    module2.exports = Schema;
  }
});

// node_modules/js-yaml/lib/type/str.js
var require_str = __commonJS({
  "node_modules/js-yaml/lib/type/str.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  }
});

// node_modules/js-yaml/lib/type/seq.js
var require_seq = __commonJS({
  "node_modules/js-yaml/lib/type/seq.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  }
});

// node_modules/js-yaml/lib/type/map.js
var require_map = __commonJS({
  "node_modules/js-yaml/lib/type/map.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  }
});

// node_modules/js-yaml/lib/schema/failsafe.js
var require_failsafe = __commonJS({
  "node_modules/js-yaml/lib/schema/failsafe.js"(exports, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      explicit: [
        require_str(),
        require_seq(),
        require_map()
      ]
    });
  }
});

// node_modules/js-yaml/lib/type/null.js
var require_null = __commonJS({
  "node_modules/js-yaml/lib/type/null.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlNull(data) {
      if (data === null)
        return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/type/bool.js
var require_bool = __commonJS({
  "node_modules/js-yaml/lib/type/bool.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlBoolean(data) {
      if (data === null)
        return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    module2.exports = new Type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/type/int.js
var require_int = __commonJS({
  "node_modules/js-yaml/lib/type/int.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var Type = require_type();
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null)
        return false;
      var max = data.length, index = 0, hasDigits = false, ch;
      if (!max)
        return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max)
          return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (ch !== "0" && ch !== "1")
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isHexCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "o") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isOctCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
      }
      if (ch === "_")
        return false;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_")
        return false;
      return true;
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch;
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-")
          sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0")
        return 0;
      if (ch === "0") {
        if (value[1] === "b")
          return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x")
          return sign * parseInt(value.slice(2), 16);
        if (value[1] === "o")
          return sign * parseInt(value.slice(2), 8);
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  }
});

// node_modules/js-yaml/lib/type/float.js
var require_float = __commonJS({
  "node_modules/js-yaml/lib/type/float.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var Type = require_type();
    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null)
        return false;
      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/schema/json.js
var require_json = __commonJS({
  "node_modules/js-yaml/lib/schema/json.js"(exports, module2) {
    "use strict";
    module2.exports = require_failsafe().extend({
      implicit: [
        require_null(),
        require_bool(),
        require_int(),
        require_float()
      ]
    });
  }
});

// node_modules/js-yaml/lib/schema/core.js
var require_core = __commonJS({
  "node_modules/js-yaml/lib/schema/core.js"(exports, module2) {
    "use strict";
    module2.exports = require_json();
  }
});

// node_modules/js-yaml/lib/type/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/js-yaml/lib/type/timestamp.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    var YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    function resolveYamlTimestamp(data) {
      if (data === null)
        return false;
      if (YAML_DATE_REGEXP.exec(data) !== null)
        return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
        return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null)
        match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null)
        throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-")
          delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta)
        date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    module2.exports = new Type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  }
});

// node_modules/js-yaml/lib/type/merge.js
var require_merge = __commonJS({
  "node_modules/js-yaml/lib/type/merge.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  }
});

// node_modules/js-yaml/lib/type/binary.js
var require_binary = __commonJS({
  "node_modules/js-yaml/lib/type/binary.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null)
        return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64)
          continue;
        if (code < 0)
          return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      return new Uint8Array(result);
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(obj) {
      return Object.prototype.toString.call(obj) === "[object Uint8Array]";
    }
    module2.exports = new Type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  }
});

// node_modules/js-yaml/lib/type/omap.js
var require_omap = __commonJS({
  "node_modules/js-yaml/lib/type/omap.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null)
        return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]")
          return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey)
              pairHasKey = true;
            else
              return false;
          }
        }
        if (!pairHasKey)
          return false;
        if (objectKeys.indexOf(pairKey) === -1)
          objectKeys.push(pairKey);
        else
          return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    module2.exports = new Type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  }
});

// node_modules/js-yaml/lib/type/pairs.js
var require_pairs = __commonJS({
  "node_modules/js-yaml/lib/type/pairs.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _toString = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null)
        return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== "[object Object]")
          return false;
        keys = Object.keys(pair);
        if (keys.length !== 1)
          return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null)
        return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    module2.exports = new Type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  }
});

// node_modules/js-yaml/lib/type/set.js
var require_set = __commonJS({
  "node_modules/js-yaml/lib/type/set.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null)
        return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null)
            return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    module2.exports = new Type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  }
});

// node_modules/js-yaml/lib/schema/default.js
var require_default = __commonJS({
  "node_modules/js-yaml/lib/schema/default.js"(exports, module2) {
    "use strict";
    module2.exports = require_core().extend({
      implicit: [
        require_timestamp(),
        require_merge()
      ],
      explicit: [
        require_binary(),
        require_omap(),
        require_pairs(),
        require_set()
      ]
    });
  }
});

// node_modules/js-yaml/lib/loader.js
var require_loader = __commonJS({
  "node_modules/js-yaml/lib/loader.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var makeSnippet = require_snippet();
    var DEFAULT_SCHEMA = require_default();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode(
        (c - 65536 >> 10) + 55296,
        (c - 65536 & 1023) + 56320
      );
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    var i;
    function State(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.firstTabInLine = -1;
      this.documents = [];
    }
    function generateError(state, message) {
      var mark = {
        name: state.filename,
        buffer: state.input.slice(0, -1),
        // omit trailing \0
        position: state.position,
        line: state.line,
        column: state.position - state.lineStart
      };
      mark.snippet = makeSnippet(mark);
      return new YAMLException(message, mark);
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.lineStart = startLineStart || state.lineStart;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        if (keyNode === "__proto__") {
          Object.defineProperty(_result, keyNode, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: valueNode
          });
        } else {
          _result[keyNode] = valueNode;
        }
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
      state.firstTabInLine = -1;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          if (ch === 9 && state.firstTabInLine === -1) {
            state.firstTabInLine = state.position;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        } else if (ch === 44) {
          throwError(state, "expected the node content, but found ','");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        _lineStart = state.lineStart;
        _pos = state.position;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (!atExplicitKey && state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else {
          _keyLine = state.line;
          _keyLineStart = state.lineStart;
          _keyPos = state.position;
          if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            break;
          }
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (atExplicitKey) {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
          }
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33)
        return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      try {
        tagName = decodeURIComponent(tagName);
      } catch (err) {
        throwError(state, "tag name is malformed: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38)
        return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42)
        return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag === null) {
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      } else if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type = state.implicitTypes[typeIndex];
          if (type.resolve(state.result)) {
            state.result = type.construct(state.result);
            state.tag = type.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (state.tag !== "!") {
        if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
        } else {
          type = null;
          typeList = state.typeMap.multi[state.kind || "fallback"];
          for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
            if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
              type = typeList[typeIndex];
              break;
            }
          }
        }
        if (!type) {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
        if (state.result !== null && type.kind !== state.kind) {
          throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
        }
        if (!type.resolve(state.result, state.tag)) {
          throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type.construct(state.result, state.tag);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = /* @__PURE__ */ Object.create(null);
      state.anchorMap = /* @__PURE__ */ Object.create(null);
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch))
            break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0)
          readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    module2.exports.loadAll = loadAll;
    module2.exports.load = load;
  }
});

// node_modules/js-yaml/lib/dumper.js
var require_dumper = __commonJS({
  "node_modules/js-yaml/lib/dumper.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var DEFAULT_SCHEMA = require_default();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_BOM = 65279;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null)
        return {};
      result = {};
      keys = Object.keys(map);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    var QUOTING_TYPE_SINGLE = 1;
    var QUOTING_TYPE_DOUBLE = 2;
    function State(options) {
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
      this.forceQuotes = options["forceQuotes"] || false;
      this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n")
          result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str) {
      var index, length, type;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
    }
    function isNsCharOrWhitespace(c) {
      return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev, inblock) {
      var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
      var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
      return (
        // ns-plain-safe
        (inblock ? (
          // c = flow-in
          cIsNsCharOrWhitespace
        ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
      );
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function isPlainSafeLast(c) {
      return !isWhitespace(c) && c !== CHAR_COLON;
    }
    function codePointAt(string, pos) {
      var first = string.charCodeAt(pos), second;
      if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
        second = string.charCodeAt(pos + 1);
        if (second >= 56320 && second <= 57343) {
          return (first - 55296) * 1024 + second - 56320 + 65536;
        }
      }
      return first;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
      var i;
      var char = 0;
      var prevChar = null;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
      if (singleLineOnly || forceQuotes) {
        for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
          char = codePointAt(string, i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
      } else {
        for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
          char = codePointAt(string, i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        if (plain && !forceQuotes && !testAmbiguousType(string)) {
          return STYLE_PLAIN;
        }
        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      if (!forceQuotes) {
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    function writeScalar(state, string, level, iskey, inblock) {
      state.dump = function() {
        if (string.length === 0) {
          return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
        }
        if (!state.noCompatMode) {
          if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
            return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
          }
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(
          string,
          singleLineOnly,
          state.indent,
          lineWidth,
          testAmbiguity,
          state.quotingType,
          state.forceQuotes && !iskey,
          inblock
        )) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ")
        return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char = 0;
      var escapeSeq;
      for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
        char = codePointAt(string, i);
        escapeSeq = ESCAPE_SEQUENCES[char];
        if (!escapeSeq && isPrintable(char)) {
          result += string[i];
          if (char >= 65536)
            result += string[i + 1];
        } else {
          result += escapeSeq || encodeHex(char);
        }
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
          if (_result !== "")
            _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
          if (!compact || _result !== "") {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (_result !== "")
          pairBuffer += ", ";
        if (state.condenseFlow)
          pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024)
          pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || _result !== "") {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          if (explicit) {
            if (type.multi && type.representName) {
              state.tag = type.representName(object);
            } else {
              state.tag = type.tag;
            }
          } else {
            state.tag = "?";
          }
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey, isblockseq) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      var inblock = block;
      var tagStr;
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          if (block && state.dump.length !== 0) {
            if (state.noArrayIndent && !isblockseq && level > 0) {
              writeBlockSequence(state, level - 1, state.dump, compact);
            } else {
              writeBlockSequence(state, level, state.dump, compact);
            }
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey, inblock);
          }
        } else if (type === "[object Undefined]") {
          return false;
        } else {
          if (state.skipInvalid)
            return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          tagStr = encodeURI(
            state.tag[0] === "!" ? state.tag.slice(1) : state.tag
          ).replace(/!/g, "%21");
          if (state.tag[0] === "!") {
            tagStr = "!" + tagStr;
          } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
            tagStr = "!!" + tagStr.slice(18);
          } else {
            tagStr = "!<" + tagStr + ">";
          }
          state.dump = tagStr + " " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs)
        getDuplicateReferences(input, state);
      var value = input;
      if (state.replacer) {
        value = state.replacer.call({ "": value }, "", value);
      }
      if (writeNode(state, 0, value, true, true))
        return state.dump + "\n";
      return "";
    }
    module2.exports.dump = dump;
  }
});

// node_modules/js-yaml/index.js
var require_js_yaml = __commonJS({
  "node_modules/js-yaml/index.js"(exports, module2) {
    "use strict";
    var loader = require_loader();
    var dumper = require_dumper();
    function renamed(from, to) {
      return function() {
        throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
      };
    }
    module2.exports.Type = require_type();
    module2.exports.Schema = require_schema();
    module2.exports.FAILSAFE_SCHEMA = require_failsafe();
    module2.exports.JSON_SCHEMA = require_json();
    module2.exports.CORE_SCHEMA = require_core();
    module2.exports.DEFAULT_SCHEMA = require_default();
    module2.exports.load = loader.load;
    module2.exports.loadAll = loader.loadAll;
    module2.exports.dump = dumper.dump;
    module2.exports.YAMLException = require_exception();
    module2.exports.types = {
      binary: require_binary(),
      float: require_float(),
      map: require_map(),
      null: require_null(),
      pairs: require_pairs(),
      set: require_set(),
      timestamp: require_timestamp(),
      bool: require_bool(),
      int: require_int(),
      merge: require_merge(),
      omap: require_omap(),
      seq: require_seq(),
      str: require_str()
    };
    module2.exports.safeLoad = renamed("safeLoad", "load");
    module2.exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
    module2.exports.safeDump = renamed("safeDump", "dump");
  }
});

// ../easyapi/node_modules/js-yaml/lib/common.js
var require_common2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/common.js"(exports, module2) {
    "use strict";
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence))
        return sequence;
      else if (isNothing(sequence))
        return [];
      return [sequence];
    }
    function extend(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    module2.exports.isNothing = isNothing;
    module2.exports.isObject = isObject;
    module2.exports.toArray = toArray;
    module2.exports.repeat = repeat;
    module2.exports.isNegativeZero = isNegativeZero;
    module2.exports.extend = extend;
  }
});

// ../easyapi/node_modules/js-yaml/lib/exception.js
var require_exception2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/exception.js"(exports, module2) {
    "use strict";
    function formatError(exception, compact) {
      var where = "", message = exception.reason || "(unknown reason)";
      if (!exception.mark)
        return message;
      if (exception.mark.name) {
        where += 'in "' + exception.mark.name + '" ';
      }
      where += "(" + (exception.mark.line + 1) + ":" + (exception.mark.column + 1) + ")";
      if (!compact && exception.mark.snippet) {
        where += "\n\n" + exception.mark.snippet;
      }
      return message + " " + where;
    }
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = formatError(this, false);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString(compact) {
      return this.name + ": " + formatError(this, compact);
    };
    module2.exports = YAMLException;
  }
});

// ../easyapi/node_modules/js-yaml/lib/snippet.js
var require_snippet2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/snippet.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
      var head = "";
      var tail = "";
      var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
      if (position - lineStart > maxHalfLength) {
        head = " ... ";
        lineStart = position - maxHalfLength + head.length;
      }
      if (lineEnd - position > maxHalfLength) {
        tail = " ...";
        lineEnd = position + maxHalfLength - tail.length;
      }
      return {
        str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
        pos: position - lineStart + head.length
        // relative position
      };
    }
    function padStart(string, max) {
      return common.repeat(" ", max - string.length) + string;
    }
    function makeSnippet(mark, options) {
      options = Object.create(options || null);
      if (!mark.buffer)
        return null;
      if (!options.maxLength)
        options.maxLength = 79;
      if (typeof options.indent !== "number")
        options.indent = 1;
      if (typeof options.linesBefore !== "number")
        options.linesBefore = 3;
      if (typeof options.linesAfter !== "number")
        options.linesAfter = 2;
      var re = /\r?\n|\r|\0/g;
      var lineStarts = [0];
      var lineEnds = [];
      var match;
      var foundLineNo = -1;
      while (match = re.exec(mark.buffer)) {
        lineEnds.push(match.index);
        lineStarts.push(match.index + match[0].length);
        if (mark.position <= match.index && foundLineNo < 0) {
          foundLineNo = lineStarts.length - 2;
        }
      }
      if (foundLineNo < 0)
        foundLineNo = lineStarts.length - 1;
      var result = "", i, line;
      var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
      var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
      for (i = 1; i <= options.linesBefore; i++) {
        if (foundLineNo - i < 0)
          break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo - i],
          lineEnds[foundLineNo - i],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
          maxLineLength
        );
        result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
      }
      line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
      result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
      for (i = 1; i <= options.linesAfter; i++) {
        if (foundLineNo + i >= lineEnds.length)
          break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo + i],
          lineEnds[foundLineNo + i],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
          maxLineLength
        );
        result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      }
      return result.replace(/\n$/, "");
    }
    module2.exports = makeSnippet;
  }
});

// ../easyapi/node_modules/js-yaml/lib/type.js
var require_type2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception2();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "multi",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "representName",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.options = options;
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.representName = options["representName"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.multi = options["multi"] || false;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    module2.exports = Type;
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema.js
var require_schema2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception2();
    var Type = require_type2();
    function compileList(schema, name) {
      var result = [];
      schema[name].forEach(function(currentType) {
        var newIndex = result.length;
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
            newIndex = previousIndex;
          }
        });
        result[newIndex] = currentType;
      });
      return result;
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;
      function collectType(type) {
        if (type.multi) {
          result.multi[type.kind].push(type);
          result.multi["fallback"].push(type);
        } else {
          result[type.kind][type.tag] = result["fallback"][type.tag] = type;
        }
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      return this.extend(definition);
    }
    Schema.prototype.extend = function extend(definition) {
      var implicit = [];
      var explicit = [];
      if (definition instanceof Type) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit)
          implicit = implicit.concat(definition.implicit);
        if (definition.explicit)
          explicit = explicit.concat(definition.explicit);
      } else {
        throw new YAMLException("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type.multi) {
          throw new YAMLException("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema.prototype);
      result.implicit = (this.implicit || []).concat(implicit);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    module2.exports = Schema;
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/str.js
var require_str2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/str.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    module2.exports = new Type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/seq.js
var require_seq2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/seq.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    module2.exports = new Type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/map.js
var require_map2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/map.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    module2.exports = new Type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema/failsafe.js
var require_failsafe2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema/failsafe.js"(exports, module2) {
    "use strict";
    var Schema = require_schema2();
    module2.exports = new Schema({
      explicit: [
        require_str2(),
        require_seq2(),
        require_map2()
      ]
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/null.js
var require_null2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/null.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    function resolveYamlNull(data) {
      if (data === null)
        return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/bool.js
var require_bool2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/bool.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    function resolveYamlBoolean(data) {
      if (data === null)
        return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    module2.exports = new Type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/int.js
var require_int2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/int.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    var Type = require_type2();
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null)
        return false;
      var max = data.length, index = 0, hasDigits = false, ch;
      if (!max)
        return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max)
          return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (ch !== "0" && ch !== "1")
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isHexCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "o") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isOctCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
      }
      if (ch === "_")
        return false;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_")
        return false;
      return true;
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch;
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-")
          sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0")
        return 0;
      if (ch === "0") {
        if (value[1] === "b")
          return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x")
          return sign * parseInt(value.slice(2), 16);
        if (value[1] === "o")
          return sign * parseInt(value.slice(2), 8);
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/float.js
var require_float2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/float.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    var Type = require_type2();
    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null)
        return false;
      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema/json.js
var require_json2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema/json.js"(exports, module2) {
    "use strict";
    module2.exports = require_failsafe2().extend({
      implicit: [
        require_null2(),
        require_bool2(),
        require_int2(),
        require_float2()
      ]
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema/core.js
var require_core2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema/core.js"(exports, module2) {
    "use strict";
    module2.exports = require_json2();
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/timestamp.js
var require_timestamp2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/timestamp.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    var YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    function resolveYamlTimestamp(data) {
      if (data === null)
        return false;
      if (YAML_DATE_REGEXP.exec(data) !== null)
        return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
        return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null)
        match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null)
        throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-")
          delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta)
        date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    module2.exports = new Type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/merge.js
var require_merge2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/merge.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/binary.js
var require_binary2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/binary.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null)
        return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64)
          continue;
        if (code < 0)
          return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      return new Uint8Array(result);
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(obj) {
      return Object.prototype.toString.call(obj) === "[object Uint8Array]";
    }
    module2.exports = new Type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/omap.js
var require_omap2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/omap.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null)
        return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]")
          return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey)
              pairHasKey = true;
            else
              return false;
          }
        }
        if (!pairHasKey)
          return false;
        if (objectKeys.indexOf(pairKey) === -1)
          objectKeys.push(pairKey);
        else
          return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    module2.exports = new Type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/pairs.js
var require_pairs2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/pairs.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var _toString = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null)
        return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== "[object Object]")
          return false;
        keys = Object.keys(pair);
        if (keys.length !== 1)
          return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null)
        return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    module2.exports = new Type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/set.js
var require_set2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/set.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null)
        return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null)
            return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    module2.exports = new Type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema/default.js
var require_default2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema/default.js"(exports, module2) {
    "use strict";
    module2.exports = require_core2().extend({
      implicit: [
        require_timestamp2(),
        require_merge2()
      ],
      explicit: [
        require_binary2(),
        require_omap2(),
        require_pairs2(),
        require_set2()
      ]
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/loader.js
var require_loader2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/loader.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    var YAMLException = require_exception2();
    var makeSnippet = require_snippet2();
    var DEFAULT_SCHEMA = require_default2();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode(
        (c - 65536 >> 10) + 55296,
        (c - 65536 & 1023) + 56320
      );
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    var i;
    function State(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.firstTabInLine = -1;
      this.documents = [];
    }
    function generateError(state, message) {
      var mark = {
        name: state.filename,
        buffer: state.input.slice(0, -1),
        // omit trailing \0
        position: state.position,
        line: state.line,
        column: state.position - state.lineStart
      };
      mark.snippet = makeSnippet(mark);
      return new YAMLException(message, mark);
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.lineStart = startLineStart || state.lineStart;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        if (keyNode === "__proto__") {
          Object.defineProperty(_result, keyNode, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: valueNode
          });
        } else {
          _result[keyNode] = valueNode;
        }
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
      state.firstTabInLine = -1;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          if (ch === 9 && state.firstTabInLine === -1) {
            state.firstTabInLine = state.position;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        } else if (ch === 44) {
          throwError(state, "expected the node content, but found ','");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        _lineStart = state.lineStart;
        _pos = state.position;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (!atExplicitKey && state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else {
          _keyLine = state.line;
          _keyLineStart = state.lineStart;
          _keyPos = state.position;
          if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            break;
          }
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (atExplicitKey) {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
          }
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33)
        return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      try {
        tagName = decodeURIComponent(tagName);
      } catch (err) {
        throwError(state, "tag name is malformed: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38)
        return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42)
        return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag === null) {
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      } else if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type = state.implicitTypes[typeIndex];
          if (type.resolve(state.result)) {
            state.result = type.construct(state.result);
            state.tag = type.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (state.tag !== "!") {
        if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
        } else {
          type = null;
          typeList = state.typeMap.multi[state.kind || "fallback"];
          for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
            if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
              type = typeList[typeIndex];
              break;
            }
          }
        }
        if (!type) {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
        if (state.result !== null && type.kind !== state.kind) {
          throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
        }
        if (!type.resolve(state.result, state.tag)) {
          throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type.construct(state.result, state.tag);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = /* @__PURE__ */ Object.create(null);
      state.anchorMap = /* @__PURE__ */ Object.create(null);
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch))
            break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0)
          readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    module2.exports.loadAll = loadAll;
    module2.exports.load = load;
  }
});

// ../easyapi/node_modules/js-yaml/lib/dumper.js
var require_dumper2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/dumper.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    var YAMLException = require_exception2();
    var DEFAULT_SCHEMA = require_default2();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_BOM = 65279;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null)
        return {};
      result = {};
      keys = Object.keys(map);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    var QUOTING_TYPE_SINGLE = 1;
    var QUOTING_TYPE_DOUBLE = 2;
    function State(options) {
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
      this.forceQuotes = options["forceQuotes"] || false;
      this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n")
          result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str) {
      var index, length, type;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
    }
    function isNsCharOrWhitespace(c) {
      return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev, inblock) {
      var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
      var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
      return (
        // ns-plain-safe
        (inblock ? (
          // c = flow-in
          cIsNsCharOrWhitespace
        ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
      );
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function isPlainSafeLast(c) {
      return !isWhitespace(c) && c !== CHAR_COLON;
    }
    function codePointAt(string, pos) {
      var first = string.charCodeAt(pos), second;
      if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
        second = string.charCodeAt(pos + 1);
        if (second >= 56320 && second <= 57343) {
          return (first - 55296) * 1024 + second - 56320 + 65536;
        }
      }
      return first;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
      var i;
      var char = 0;
      var prevChar = null;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
      if (singleLineOnly || forceQuotes) {
        for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
          char = codePointAt(string, i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
      } else {
        for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
          char = codePointAt(string, i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        if (plain && !forceQuotes && !testAmbiguousType(string)) {
          return STYLE_PLAIN;
        }
        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      if (!forceQuotes) {
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    function writeScalar(state, string, level, iskey, inblock) {
      state.dump = function() {
        if (string.length === 0) {
          return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
        }
        if (!state.noCompatMode) {
          if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
            return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
          }
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(
          string,
          singleLineOnly,
          state.indent,
          lineWidth,
          testAmbiguity,
          state.quotingType,
          state.forceQuotes && !iskey,
          inblock
        )) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ")
        return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char = 0;
      var escapeSeq;
      for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
        char = codePointAt(string, i);
        escapeSeq = ESCAPE_SEQUENCES[char];
        if (!escapeSeq && isPrintable(char)) {
          result += string[i];
          if (char >= 65536)
            result += string[i + 1];
        } else {
          result += escapeSeq || encodeHex(char);
        }
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
          if (_result !== "")
            _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
          if (!compact || _result !== "") {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (_result !== "")
          pairBuffer += ", ";
        if (state.condenseFlow)
          pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024)
          pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || _result !== "") {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          if (explicit) {
            if (type.multi && type.representName) {
              state.tag = type.representName(object);
            } else {
              state.tag = type.tag;
            }
          } else {
            state.tag = "?";
          }
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey, isblockseq) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      var inblock = block;
      var tagStr;
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          if (block && state.dump.length !== 0) {
            if (state.noArrayIndent && !isblockseq && level > 0) {
              writeBlockSequence(state, level - 1, state.dump, compact);
            } else {
              writeBlockSequence(state, level, state.dump, compact);
            }
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey, inblock);
          }
        } else if (type === "[object Undefined]") {
          return false;
        } else {
          if (state.skipInvalid)
            return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          tagStr = encodeURI(
            state.tag[0] === "!" ? state.tag.slice(1) : state.tag
          ).replace(/!/g, "%21");
          if (state.tag[0] === "!") {
            tagStr = "!" + tagStr;
          } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
            tagStr = "!!" + tagStr.slice(18);
          } else {
            tagStr = "!<" + tagStr + ">";
          }
          state.dump = tagStr + " " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs)
        getDuplicateReferences(input, state);
      var value = input;
      if (state.replacer) {
        value = state.replacer.call({ "": value }, "", value);
      }
      if (writeNode(state, 0, value, true, true))
        return state.dump + "\n";
      return "";
    }
    module2.exports.dump = dump;
  }
});

// ../easyapi/node_modules/js-yaml/index.js
var require_js_yaml2 = __commonJS({
  "../easyapi/node_modules/js-yaml/index.js"(exports, module2) {
    "use strict";
    var loader = require_loader2();
    var dumper = require_dumper2();
    function renamed(from, to) {
      return function() {
        throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
      };
    }
    module2.exports.Type = require_type2();
    module2.exports.Schema = require_schema2();
    module2.exports.FAILSAFE_SCHEMA = require_failsafe2();
    module2.exports.JSON_SCHEMA = require_json2();
    module2.exports.CORE_SCHEMA = require_core2();
    module2.exports.DEFAULT_SCHEMA = require_default2();
    module2.exports.load = loader.load;
    module2.exports.loadAll = loader.loadAll;
    module2.exports.dump = dumper.dump;
    module2.exports.YAMLException = require_exception2();
    module2.exports.types = {
      binary: require_binary2(),
      float: require_float2(),
      map: require_map2(),
      null: require_null2(),
      pairs: require_pairs2(),
      set: require_set2(),
      timestamp: require_timestamp2(),
      bool: require_bool2(),
      int: require_int2(),
      merge: require_merge2(),
      omap: require_omap2(),
      seq: require_seq2(),
      str: require_str2()
    };
    module2.exports.safeLoad = renamed("safeLoad", "load");
    module2.exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
    module2.exports.safeDump = renamed("safeDump", "dump");
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NoteChainPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian17 = require("obsidian");

// src/NCEditor.ts
var import_obsidian = require("obsidian");
var NCEditor = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = this.plugin.app;
    this.nretry = 10;
  }
  async set_frontmatter(tfile, key, value, nretry = this.nretry) {
    let kv = {};
    kv[key] = value;
    let flag = await this.set_multi_frontmatter(tfile, kv, nretry);
    return flag;
  }
  check_frontmatter(tfile, kv) {
    try {
      if (!tfile) {
        return false;
      }
      let meta = this.app.metadataCache.getFileCache(tfile);
      if (meta == null ? void 0 : meta.frontmatter) {
        for (let k in kv) {
          if (!(meta.frontmatter[k] == kv[k])) {
            return false;
          }
        }
        return true;
      }
      return false;
    } catch (error) {
      return false;
    }
  }
  async wait_frontmatter(tfile, kv, nretry = this.nretry) {
    let flag = this.check_frontmatter(tfile, kv);
    while (!flag && nretry > 0) {
      await sleep(50);
      nretry = nretry - 1;
      flag = this.check_frontmatter(tfile, kv);
    }
    return flag;
  }
  async set_multi_frontmatter(tfile, kv, nretry = this.nretry) {
    if (Array.isArray(tfile)) {
      for (let item of tfile) {
        this.set_multi_frontmatter(item, kv, nretry);
      }
      return true;
    }
    if (typeof tfile == "string") {
      tfile = this.plugin.chain.get_tfile(tfile);
    }
    if (!tfile || !(tfile instanceof import_obsidian.TFile)) {
      return false;
    }
    let flag = false;
    if (nretry > 1) {
      flag = this.check_frontmatter(tfile, kv);
    }
    while (!flag && nretry > 0) {
      await this.app.fileManager.processFrontMatter(tfile, (fm) => {
        for (let k in kv) {
          this.plugin.easyapi.editor.dict_set_value(fm, k, kv[k]);
        }
      });
      await sleep(100);
      nretry = nretry - 1;
      flag = this.check_frontmatter(tfile, kv);
    }
    return flag;
  }
  get_frontmatter(tfile, key) {
    try {
      if (!tfile) {
        return null;
      }
      let meta = this.app.metadataCache.getFileCache(tfile);
      if (meta == null ? void 0 : meta.frontmatter) {
        if (meta.frontmatter[key]) {
          return meta.frontmatter[key];
        }
        let keys = key.split(".");
        let cfm = meta.frontmatter;
        for (let k of keys) {
          let items = k.match(/^(.*?)(\[-?\d+\])?$/);
          if (!items) {
            return null;
          }
          if (items[1]) {
            cfm = cfm[items[1]];
          }
          if (!cfm) {
            return null;
          }
          if (Array.isArray(cfm) && items[2]) {
            let i = parseInt(items[2].slice(1, items[2].length - 1));
            if (i < 0) {
              i = i + cfm.length;
            }
            cfm = cfm[i];
          }
        }
        return cfm;
      }
    } catch (error) {
      return null;
    }
  }
  get_vault_name() {
    let items = this.plugin.app.vault.adapter.basePath.split("\\");
    items = items[items.length - 1].split("/");
    return items[items.length - 1];
  }
  get_frontmatter_config(tfile, key) {
    if (tfile instanceof import_obsidian.TFile) {
      if (tfile.extension == "md") {
        let config = this.get_frontmatter(tfile, key);
        if (config) {
          return config;
        }
      } else {
        let file = this.plugin.chain.get_tfile(
          tfile.path.slice(0, tfile.path.length - tfile.extension.length) + "md"
        );
        if (file) {
          let config = this.get_frontmatter(file, key);
          if (config) {
            return config;
          }
        }
      }
    } else {
      let file = this.plugin.chain.get_tfile(tfile.path + "/" + tfile.name + ".md");
      if (file) {
        let config = this.get_frontmatter(file, key + "_folder");
        if (config) {
          return config;
        }
        config = this.get_frontmatter(file, key);
        if (config) {
          return config;
        }
      }
    }
    let dir = tfile.parent;
    while (dir) {
      let cfile;
      if (dir.parent) {
        cfile = this.plugin.chain.get_tfile(
          dir.path + "/" + dir.name + ".md"
        );
      } else {
        cfile = this.plugin.chain.get_tfile(
          this.get_vault_name()
        );
      }
      let config = this.get_frontmatter(cfile, key);
      if (config) {
        return config;
      }
      dir = dir.parent;
    }
    return null;
  }
  regexp_link(tfile, mode) {
    if (mode === "link") {
      return new RegExp(`\\[\\[${tfile.basename}\\|?.*\\]\\]`, "g");
    }
    if (mode === "para") {
      return new RegExp(`.*\\[\\[${tfile.basename}\\|?.*\\]\\].*`, "g");
    }
  }
  async replace(tfile, regex, target) {
    if (typeof regex === "string") {
      await this.app.vault.process(tfile, (data) => {
        if (data.indexOf(regex) > -1) {
          return data.replace(regex, target);
        }
        return data;
      });
    } else if (regex instanceof RegExp) {
      await this.app.vault.process(tfile, (data) => {
        if (data.match(regex)) {
          return data.replace(regex, target);
        }
        return data;
      });
    }
  }
  async remove_metadata(tfile) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let headerRegex = /^---\s*([\s\S]*?)\s*---/;
    let match = headerRegex.exec(tfile);
    if (match) {
      tfile = tfile.slice(match[0].length).trim();
    }
    return tfile;
  }
  async extract_code_block(tfile, btype) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let cssCodeBlocks = [];
    let reg = new RegExp(`\`\`\`${btype}\\n([\\s\\S]*?)
\`\`\``, "g");
    ;
    let matches;
    while ((matches = reg.exec(tfile)) !== null) {
      cssCodeBlocks.push(matches[1].trim());
    }
    return cssCodeBlocks;
  }
  async extract_templater_block(tfile, reg = /<%\*\s*([\s\S]*?)\s*-?%>/g) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let cssCodeBlocks = [];
    let matches;
    while ((matches = reg.exec(tfile)) !== null) {
      cssCodeBlocks.push(matches[0].trim());
    }
    let tpls = await this.extract_code_block(tfile, "js //templater");
    for (let tpl of tpls) {
      cssCodeBlocks.push(`<%*
${tpl}
-%>`);
    }
    return cssCodeBlocks;
  }
  async extract_yaml_block(tfile) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let headerRegex = /^---\s*([\s\S]*?)\s*---/;
    let match = headerRegex.exec(tfile);
    if (match) {
      return match[0];
    }
    return "";
  }
  _extract_block_id_(para) {
    let reg = /\s+\^[a-zA-Z0-9]+\r?\n?$/;
    let match = reg.exec(para);
    if (match) {
      return match[0].trim();
    } else {
      return "";
    }
  }
  _generate_random_string_(length) {
    let characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let result = "";
    for (let i = 0; i < length; i++) {
      let randomIndex = Math.floor(Math.random() * characters.length);
      result += characters[randomIndex];
    }
    return result;
  }
  async extract_all_blocks(tfile) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let ctx = tfile;
    let blocks = [];
    let head = await this.plugin.editor.extract_yaml_block(ctx);
    if (head != "") {
      blocks.push(["YAML", head]);
      ctx = ctx.slice(head.length);
    }
    let kvgets = {
      "\u7A7A\u767D\u6BB5\u843D": /^(\s*\n)*/,
      "\u4EE3\u7801\u5757": /^[ \t]*```[\s\S]*?\n[ \t]*```[ \t]*\n(\s*\^[a-zA-Z0-9]+\r?[\n$])?/,
      "tpl\u4EE3\u7801\u5757": /^<%\*[\s\S]*?\n-?\*?%>[ \t]*\n(\s+\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u4EFB\u52A1": /^[ \t]*- \[.\].*\n?(\s+\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u65E0\u5E8F\u5217\u8868": /^[ \t]*- .*\n?(\s+\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u6709\u5E8F\u5217\u8868": /^[ \t]*\d\. .*\n?(\s+[ \t]*\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u5F15\u7528": /^(>.*\n)+(\s*\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u6807\u9898": /^#+ .*\n(\s*\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u6BB5\u843D": /^(.*\n?)(\s*\^[a-zA-Z0-9]+\r?[\n$])?/
    };
    while (ctx.length > 0) {
      let flag = true;
      for (let key of Object.keys(kvgets)) {
        let reg = kvgets[key];
        let match = reg.exec(ctx);
        if (match) {
          let curr = match[0];
          if (curr.length > 0) {
            let bid = this._extract_block_id_(curr);
            if (key == "\u6BB5\u843D" && blocks.length > 0 && blocks[blocks.length - 1][0] == "\u6BB5\u843D") {
              blocks[blocks.length - 1][1] = blocks[blocks.length - 1][1] + curr;
              blocks[blocks.length - 1][2] = bid;
            } else {
              blocks.push([key, curr, bid]);
            }
            flag = false;
            ctx = ctx.slice(curr.length);
            break;
          }
        }
      }
      if (flag) {
        break;
      }
    }
    if (ctx.length > 0) {
      let bid = this._extract_block_id_(ctx);
      blocks.push(["\u6BB5\u843D", ctx, bid]);
    }
    return blocks;
  }
  async append_block_ids(tfile) {
    let blocks = await this.extract_all_blocks(tfile);
    let items = [];
    for (let block of blocks) {
      if (["\u7A7A\u767D\u6BB5\u843D", "YAML"].contains(block[0])) {
        items.push(block[1]);
      } else if (!block[2]) {
        let bid = this._generate_random_string_(6);
        if (["\u4EFB\u52A1", "\u65E0\u5E8F\u5217\u8868", "\u6709\u5E8F\u5217\u8868"].contains(block[0])) {
          items.push(block[1].slice(0, -1) + " ^" + bid + "\n");
        } else {
          if (block[1].endsWith("\n")) {
            items.push(block[1] + "^" + bid + "\n");
          } else {
            items.push(block[1] + "\n^" + bid + "\n");
          }
        }
      } else {
        items.push(block[1]);
      }
    }
    let res = items.join("");
    await this.app.vault.modify(tfile, res);
    return res;
  }
  async remove_block_ids(tfile) {
    let blocks = await this.extract_all_blocks(tfile);
    let items = [];
    for (let block of blocks) {
      if (["\u7A7A\u767D\u6BB5\u843D", "YAML"].contains(block[0])) {
        items.push(block[1]);
      } else {
        let reg = /\s+\^[a-zA-Z0-9]+\r?\n?$/;
        let match = reg.exec(block[1]);
        if (match) {
          items.push(block[1].replace(reg, "\n"));
        } else {
          items.push(block[1]);
        }
      }
    }
    let res = items.join("");
    await this.app.vault.modify(tfile, res);
    return res;
  }
  async get_current_section() {
    var _a, _b;
    let view = this.app.workspace.getActiveFileView();
    let editor = view.editor;
    let tfile = view.file;
    if (!view || !editor || !tfile) {
      return null;
    }
    let cursor = editor.getCursor();
    let cache = this.app.metadataCache.getFileCache(tfile);
    if (!cache) {
      return;
    }
    if (!cursor) {
      let ctx = await this.app.vault.cachedRead(tfile);
      let items = (_a = cache == null ? void 0 : cache.sections) == null ? void 0 : _a.map(
        (section2) => ctx.slice(section2.position.start.offset, section2.position.end.offset)
      );
      if (!items) {
        return null;
      }
      let section = await this.plugin.dialog_suggest(items, cache.sections);
      return section;
    } else {
      let sections = (_b = cache == null ? void 0 : cache.sections) == null ? void 0 : _b.filter(
        (x) => {
          return x.position.start.line <= cursor.line && x.position.end.line >= cursor.line;
        }
      )[0];
      return sections;
    }
  }
  async set_frontmatter_align_file(src, dst, field) {
    if (field) {
      let value = this.get_frontmatter(src, field);
      if (value) {
        await this.set_frontmatter(dst, field, value, 1);
      }
    }
  }
};

// src/NoteChain.ts
var import_obsidian4 = require("obsidian");
init_utils();

// src/NCModal.ts
var import_obsidian3 = require("obsidian");
var NoteContentModal = class extends import_obsidian3.Modal {
  constructor(app, content, plugin, sourcePath) {
    super(app);
    this.content = content;
    this.plugin = plugin;
    this.sourcePath = sourcePath;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.modalEl.style.display = "flex";
    this.modalEl.style.overflow = "auto";
    const container = contentEl.createDiv({ cls: "note-content-container" });
    container.addClass("markdown-rendered");
    container.style.display = "table-cell";
    container.style.verticalAlign = "middle";
    container.style.padding = "20px";
    const component = new import_obsidian3.Component();
    import_obsidian3.MarkdownRenderer.render(this.app, this.content, container, this.sourcePath, component).then((x) => {
      this.addClickListener(container);
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  addClickListener(container) {
    container.addEventListener("click", (event) => {
      let target = event.target;
      if (target.tagName === "A" && target.hasClass("internal-link")) {
        event.preventDefault();
        let href = target.getAttribute("href");
        if (href) {
          this.openNoteInMainView(href);
        }
      }
    });
    container.querySelectorAll("a.internal-link").forEach((el) => {
      const href = el.getAttribute("href");
      if (href) {
        el.setAttribute("data-href", href);
        el.setAttr("aria-label", href);
        el.addClass("hover-link");
        el.addEventListener("mouseenter", (e) => {
          this.app.workspace.trigger("hover-link", {
            event: e,
            source: "markdown",
            hoverParent: el,
            targetEl: el,
            linktext: href,
            sourcePath: this.sourcePath
          });
        });
      }
    });
  }
  async openNoteInMainView(linkText) {
    try {
      await this.app.workspace.openLinkText(linkText, "", false, { active: true });
      this.close();
    } catch (error) {
      new import_obsidian3.Notice(`Error opening note: ${error.message}`);
    }
  }
};
var NoteEditorModal = class extends import_obsidian3.Modal {
  // 添加编辑模式属性
  constructor(app, filePath, isEditMode = false) {
    super(app);
    this.filePath = filePath;
    this.isEditMode = isEditMode;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.isEditMode) {
      let file = this.app.vault.getAbstractFileByPath(this.filePath);
      if (file) {
        const leaf = this.app.workspace.getLeaf(true);
        await leaf.openFile(file, { state: { mode: "source" } });
        this.close();
      } else {
        new import_obsidian3.Notice(`File not found: ${this.filePath}`);
      }
    } else {
      new import_obsidian3.Notice("Not in edit mode.");
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/NoteChain.ts
var NoteChain = class {
  constructor(plugin, editor, prev = "PrevNote", next = "NextNote") {
    this.plugin = plugin;
    this.app = plugin.app;
    if (editor) {
      this.editor = editor;
    } else {
      this.editor = new NCEditor(plugin);
    }
    this.NoteEditorModal = NoteEditorModal;
    this.prev = prev;
    this.next = next;
    this.init_children();
  }
  async open_note_in_modal(notePath) {
    try {
      let file = this.get_tfile(notePath);
      if (file instanceof import_obsidian4.TFile) {
        let content = await this.app.vault.read(file);
        let modal = new NoteContentModal(this.app, content, this.plugin, file.path);
        modal.open();
        return modal;
      } else {
        let modal = new NoteContentModal(this.app, notePath, this.plugin, "");
        modal.open();
        return modal;
      }
    } catch (error) {
      new import_obsidian4.Notice(`Error opening note in modal: ${error.message}`);
    }
  }
  async open_note_in_view(notePath) {
    try {
      let content = "";
      let sourcePath = "";
      let file = this.get_tfile(notePath);
      if (file instanceof import_obsidian4.TFile) {
        content = await this.app.vault.read(file);
        sourcePath = notePath;
      } else {
        content = notePath;
      }
      let leaf = this.app.workspace.getRightLeaf(false);
      if (!leaf) {
        return;
      }
      await leaf.setViewState({
        type: "note-content-view",
        active: true
      });
      const view = leaf.view;
      view.setContent(content, sourcePath);
    } catch (error) {
      new import_obsidian4.Notice(`Error opening note in modal: ${error.message}`);
    }
  }
  init_children() {
    var _a;
    this.children = {};
    for (let f of this.get_all_folders()) {
      let tfiles = f.children;
      if ((_a = this.plugin.explorer) == null ? void 0 : _a.file_explorer) {
        tfiles = this.sort_tfiles(
          tfiles,
          this.plugin.explorer.file_explorer.sortOrder
        );
      }
      this.children[f.path] = this.sort_tfiles_by_chain(tfiles);
    }
  }
  refresh_folder(tfolder) {
    if (tfolder == null ? void 0 : tfolder.children) {
      let tfiles = tfolder.children;
      if (this.plugin.explorer.file_explorer) {
        tfiles = this.sort_tfiles(
          tfiles,
          this.plugin.explorer.file_explorer.sortOrder
        );
      }
      this.children[tfolder.path] = this.sort_tfiles_by_chain(
        tfiles
      );
    }
  }
  refresh_tfile(tfile) {
    var _a;
    if ((_a = tfile.parent) == null ? void 0 : _a.children) {
      this.refresh_folder(tfile.parent);
    }
  }
  get tp_find_tfile() {
    return get_tp_func(this.app, "tp.file.find_tfile");
  }
  get tp_suggester() {
    return get_tp_func(this.app, "tp.system.suggester");
  }
  get tp_prompt() {
    return get_tp_func(this.app, "tp.system.prompt");
  }
  get_all_folders() {
    let folders = this.app.vault.getAllFolders();
    let folder = this.app.vault.getFolderByPath("/");
    if (folder && !folders.contains(folder)) {
      folders.push(folder);
    }
    return folders;
  }
  get_all_tfiles(sort_mode = "") {
    let files = this.app.vault.getMarkdownFiles();
    if (!(sort_mode === "")) {
      this.sort_tfiles(files, sort_mode = sort_mode);
    }
    return files;
  }
  get_all_tfiles_tags(tags, sort_mode = "") {
    if (!Array.isArray(tags)) {
      tags = [tags];
    }
    tags = tags.map((x) => {
      if (x.startsWith("#")) {
        return x;
      } else {
        return "#" + x;
      }
    });
    let tfiles = this.get_all_tfiles(sort_mode).filter((x) => {
      let ttags = this.get_tags(x);
      for (let tag of tags) {
        if (ttags.contains(tag)) {
          return true;
        }
      }
    });
    return tfiles;
  }
  sort_folders_by_mtime(folders, reverse = true) {
    function ufunc(f) {
      return Math.max(
        ...f.children.filter((f2) => f2.basename).map((f2) => f2.stat.mtime)
      );
    }
    let res = folders.sort((a, b) => ufunc(a) - ufunc(b));
    if (reverse) {
      res = res.reverse();
    }
    return res;
  }
  async cmd_move_file_to_another_folder(tfile = this.current_note) {
    if (tfile == null) {
      return;
    }
    let folders = this.get_all_folders();
    folders = this.sort_folders_by_mtime(
      folders
    ).filter((f) => f != tfile.parent);
    if (tfile.extension === "md") {
      folders = folders.filter((f) => this.filter_user_ignore(f));
    }
    try {
      let folder = await this.plugin.dialog_suggest(
        this.plugin.utils.array_prefix_id(
          folders.map((f) => f.path)
        ),
        folders
      );
      let dst = folder.path + "/" + tfile.basename + "." + tfile.extension;
      await this.app.fileManager.renameFile(tfile, dst);
    } catch (error) {
    }
  }
  filter_user_ignore(note) {
    if (!(this.app.vault.config.attachmentFolderPath === "./")) {
      if (note.path.startsWith(
        this.app.vault.config.attachmentFolderPath
      )) {
        return false;
      }
    }
    if (this.app.vault.userIgnoreFilters) {
      for (let x of this.app.vault.userIgnoreFilters) {
        if (note.path.startsWith(x)) {
          return false;
        }
      }
    }
    return true;
  }
  async sugguster_note(notes = null, slice = 0, onlyname = false) {
    if (notes == null) {
      notes = this.sort_tfiles(
        this.app.vault.getFiles(),
        ["mtime", "x"]
      ).filter((f) => this.filter_user_ignore(f));
    }
    try {
      let items;
      if (onlyname) {
        items = notes.map((f) => f.basename);
      } else {
        items = notes.map((f) => f.path.slice(slice));
      }
      let msg = this.plugin.utils.array_prefix_id(items);
      let note = await this.plugin.dialog_suggest(msg, notes);
      return note;
    } catch (error) {
      return null;
    }
  }
  open_note(tfile, new_tab = false, revealFolder = false, collapse = true) {
    if (tfile) {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
      if (new_tab || !view || !view.leaf) {
        this.app.workspace.getLeaf(true).openFile(tfile);
      } else if (view.leaf.pinned) {
        this.app.workspace.getLeaf(true).openFile(tfile);
      } else {
        view.leaf.openFile(tfile);
      }
      if (revealFolder) {
        if (collapse) {
          this.plugin.explorer.file_explorer.tree.setCollapseAll(true);
        }
        this.plugin.explorer.file_explorer.revealInFolder(tfile);
      }
    }
  }
  async sugguster_open_note() {
    try {
      let note = await this.sugguster_note();
      this.open_note(note);
    } catch (error) {
    }
  }
  get_tfile(path, only_first = true) {
    try {
      if (path instanceof import_obsidian4.TFile) {
        return path;
      }
      path = path.split("|")[0].replace("![[", "").replace("[[", "").replace("]]", "");
      let tfile = this.app.vault.getFileByPath(path);
      if (tfile) {
        return tfile;
      }
      let tfiles = this.app.metadataCache.uniqueFileLookup.get(path.toLowerCase());
      if (!tfiles) {
        tfiles = this.app.metadataCache.uniqueFileLookup.get(path.toLowerCase() + ".md");
        if (!tfiles) {
          return null;
        } else {
          path = path + ".md";
        }
      }
      let ctfiles = tfiles.filter((x) => x.name == path);
      if (ctfiles.length > 0) {
        if (only_first) {
          return ctfiles[0];
        } else {
          return ctfiles;
        }
      }
      if (tfiles.length > 0) {
        if (only_first) {
          return tfiles[0];
        } else {
          return tfiles;
        }
      }
      return null;
    } catch (e) {
      return null;
    }
  }
  get_tags(tfile = this.current_note) {
    var _a;
    if (!tfile) {
      return [];
    }
    let mcache = this.app.metadataCache.getFileCache(tfile);
    let tags = [];
    if (mcache == null ? void 0 : mcache.tags) {
      for (let curr of mcache.tags) {
        if (!tags.contains(curr.tag)) {
          tags.push(curr.tag);
        }
      }
    }
    if ((_a = mcache == null ? void 0 : mcache.frontmatter) == null ? void 0 : _a.tags) {
      if (Array.isArray(mcache.frontmatter.tags)) {
        for (let curr of mcache.frontmatter.tags) {
          let tag = "#" + curr;
          if (!tags.contains(tag)) {
            tags.push(tag);
          }
        }
      } else if (typeof mcache.frontmatter.tags === "string") {
        let tag = `#` + mcache.frontmatter.tags;
        if (!tags.contains(tag)) {
          tags.push(tag);
        }
      }
    }
    return tags;
  }
  get_recent_tfiles(only_md = true) {
    var _a;
    let recent = this.app.plugins.getPlugin("recent-files-obsidian");
    if (recent) {
      let files = recent.data.recentFiles.map(
        (x) => this.get_tfile(x.path)
      ).filter((x) => x);
      return files;
    } else {
      let recent2 = [];
      let files = (_a = this.app.workspace.recentFileTracker) == null ? void 0 : _a.lastOpenFiles;
      if (files && files.length > 0) {
        recent2 = files.map((x) => this.get_tfile(x)).filter((x) => x);
      }
      let tfile = this.app.workspace.getActiveFile();
      if (tfile) {
        recent2.unshift(tfile);
      }
      if (only_md) {
        recent2 = recent2.filter((x) => x.extension == "md");
      }
      return recent2;
    }
  }
  get_last_daily_note(recent_first = true) {
    let pattern = /^\d{4}-\d{2}-\d{2}$/;
    if (recent_first) {
      let recent = this.get_recent_tfiles();
      for (let tfile of recent) {
        if (tfile.basename.match(pattern)) {
          return tfile;
        }
      }
    }
    let t = (0, import_obsidian4.moment)();
    for (let i = 0; i < 20; i++) {
      let xt = t.clone().add(-i, "days");
      let fname = xt.format("YYYY-MM-DD");
      let tfile = this.get_tfile(fname);
      if (tfile) {
        return tfile;
      }
    }
    let files = this.app.vault.getMarkdownFiles().filter(
      (x) => x.basename.match(pattern)
    );
    files = this.sort_tfiles(files, "name");
    if (files.length > 0) {
      return files[files.length - 1];
    }
    return null;
  }
  get_neighbor_leaf(offset = 1) {
    let app = this.plugin.app;
    let leaves = app.workspace.getLeavesOfType("markdown");
    let activeLeaf = app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (activeLeaf) {
      let idx = leaves.map((x) => x.view == activeLeaf).indexOf(true);
      idx = idx + offset;
      if (idx < 0 || idx > leaves.length - 1) {
        return null;
      }
      return leaves[idx];
    }
  }
  get_last_activate_leaf(skip_conote = true) {
    let leaves = this.app.workspace.getLeavesOfType("markdown");
    leaves = leaves.filter((x) => x.getViewState().state.file);
    leaves = leaves.sort((a, b) => b.activeTime - a.activeTime);
    for (let leaf2 of leaves) {
      let file = leaf2.getViewState().state.file;
      if (skip_conote && this.get_tags(file).contains("#conote")) {
        continue;
      }
      return leaf2;
    }
    let leaf = null;
    for (let i of [1, -1, 0]) {
      leaf = this.plugin.chain.get_neighbor_leaf(i);
      if (leaf) {
        return leaf;
      }
    }
    return null;
  }
  get current_note() {
    return this.app.workspace.getActiveFile();
  }
  get_selected_files(current_if_no_selected = true) {
    let selector = document.querySelectorAll(
      ".tree-item-self.is-selected"
    );
    let items = Object.values(selector).map((x) => {
      var _a;
      return (_a = x.dataset) == null ? void 0 : _a.path;
    });
    let tfiles = items.map(
      (x) => this.get_tfile(x)
    ).filter(
      (x) => x.extension == "md"
    );
    if (tfiles.length > 0) {
      return tfiles;
    } else if (current_if_no_selected && this.current_note) {
      return [this.current_note];
    } else {
      return [];
    }
  }
  get_inlinks(tfile = this.current_note, only_md = true) {
    if (tfile == null) {
      return [];
    }
    let res = [];
    let inlinks = this.app.metadataCache.getBacklinksForFile(tfile);
    for (let [k, v] of inlinks.data) {
      let curr = this.app.vault.getFileByPath(k);
      if (curr) {
        res.push(curr);
      }
    }
    return res;
  }
  get_tfolders(name) {
    let folder = this.app.vault.getFolderByPath(name);
    if (folder) {
      return [folder];
    }
    return this.get_all_folders().filter((x) => x.name == name);
  }
  get_group(group) {
    let tfiles = [];
    let tags = this.get_all_tfiles_tags(group);
    for (let f of tags) {
      if (!tfiles.contains(f)) {
        tfiles.push(f);
      }
    }
    let folders = this.get_tfolders(group);
    for (let folder of folders) {
      let xfiles = this.get_tfiles_of_folder(folder, true);
      for (let f of xfiles) {
        if (!tfiles.contains(f)) {
          tfiles.push(f);
        }
      }
    }
    let tfile = this.get_tfile(group);
    if (tfile) {
      let xfiles = this.get_links(tfile, true);
      for (let f of xfiles) {
        if (!tfiles.contains(f)) {
          tfiles.push(f);
        }
      }
    }
    return tfiles;
  }
  get_outlinks(tfile = this.current_note, only_md = true) {
    if (tfile == null) {
      return [];
    }
    let mcache = this.app.metadataCache.getFileCache(tfile);
    if (!mcache) {
      return [];
    }
    let res = [];
    if (mcache.links) {
      for (let link of mcache.links) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2) && !(only_md && tfile2.extension != "md")) {
          res.push(tfile2);
        }
      }
    }
    if (mcache.frontmatterLinks) {
      for (let link of mcache.frontmatterLinks) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2) && !(only_md && tfile2.extension != "md")) {
          res.push(tfile2);
        }
      }
    }
    if (!only_md && mcache.embeds) {
      for (let link of mcache.embeds) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2)) {
          res.push(tfile2);
        }
      }
    }
    return res;
  }
  get_links(tfile = this.current_note, only_md = true) {
    let inlinks = this.get_inlinks(tfile, only_md);
    let outlinks = this.get_outlinks(tfile, only_md);
    for (let link of inlinks) {
      if (!outlinks.contains(link)) {
        outlinks.push(link);
      }
    }
    return outlinks;
  }
  get_group_inlinks(tfiles, level = 1) {
    let items = tfiles.map((x) => x);
    while (level != 0) {
      let curr = items.map((x) => x);
      for (let c of curr) {
        let links = this.get_inlinks(c, true);
        for (let link of links) {
          if (!items.contains(link)) {
            items.push(link);
          }
        }
      }
      if (curr.length == items.length) {
        break;
      }
      level = level - 1;
    }
    return items;
  }
  get_group_outlinks(tfiles, level = 1) {
    let items = tfiles.map((x) => x);
    while (level != 0) {
      let curr = items.map((x) => x);
      for (let c of curr) {
        let links = this.get_outlinks(c, true);
        for (let link of links) {
          if (!items.contains(link)) {
            items.push(link);
          }
        }
      }
      if (curr.length == items.length) {
        break;
      }
      level = level - 1;
    }
    return items;
  }
  get_group_links(tfiles, level = 1) {
    let items = tfiles.map((x) => x);
    while (level != 0) {
      let curr = items.map((x) => x);
      for (let c of curr) {
        let links = this.get_links(c, true);
        for (let link of links) {
          if (!items.contains(link)) {
            items.push(link);
          }
        }
      }
      if (curr.length == items.length) {
        break;
      }
      level = level - 1;
    }
    return items;
  }
  get_brothers(tfile = this.current_note) {
    if (tfile && tfile.parent) {
      return this.get_tfiles_of_folder(tfile.parent, false);
    } else {
      return [];
    }
  }
  get_uncles(tfile) {
    if (tfile && tfile.parent && tfile.parent.parent) {
      let folder = tfile.parent.parent;
      return folder.children.filter(
        (x) => x instanceof import_obsidian4.TFile
      );
    }
    return [];
  }
  get_tfiles_of_folder(tfolder, with_children = false) {
    if (tfolder == null) {
      return [];
    }
    let notes = [];
    for (let c of tfolder.children) {
      if (c instanceof import_obsidian4.TFile && c.extension === "md") {
        notes.push(c);
      } else if (c instanceof import_obsidian4.TFolder && with_children) {
        let tmp = this.get_tfiles_of_folder(c);
        for (let x of tmp) {
          notes.push(x);
        }
      }
    }
    return notes;
  }
  indexOfFolder(tfile, tfiles) {
    let info = this.get_folder_pre_info(tfile);
    let idx = -1;
    let anchor = this.get_tfile(info["prev"]);
    if (anchor) {
      idx = tfiles.indexOf(anchor);
    }
    let offset = info["offset"];
    if (typeof offset == "string") {
      idx = idx + parseFloat(offset);
    } else {
      idx = idx + offset;
    }
    return idx;
  }
  tfile_to_string(tfile) {
    let curr = this.current_note;
    let msg = "";
    if (tfile.parent == (curr == null ? void 0 : curr.parent)) {
      msg = tfile.basename;
    } else {
      msg = tfile.path;
    }
    if (tfile == this.current_note) {
      return `\u{1F3E0} ${msg}`;
    } else {
      return msg;
    }
  }
  async suggester_notes(tfile = this.current_note, curr_first = false, smode = "") {
    if (tfile) {
      tfile == this.current_note;
    }
    let kv = [
      this.plugin.strings.item_get_brothers,
      this.plugin.strings.item_notechain,
      this.plugin.strings.item_uncle_notes,
      this.plugin.strings.item_same_folder,
      this.plugin.strings.item_inlinks_outlinks,
      this.plugin.strings.item_inlins,
      this.plugin.strings.item_outlinks,
      this.plugin.strings.item_all_noes,
      this.plugin.strings.item_recent
    ];
    if (curr_first) {
      kv.unshift(this.plugin.strings.item_currentnote);
    } else {
      kv.push(this.plugin.strings.item_currentnote);
    }
    let mode = "";
    if (kv.contains(smode)) {
      mode = smode;
    } else {
      mode = await this.plugin.dialog_suggest(this.plugin.utils.array_prefix_id(kv), kv);
    }
    if (mode === this.plugin.strings.item_currentnote) {
      return [tfile];
    } else if (mode === this.plugin.strings.item_get_brothers) {
      return this.get_brothers(tfile);
    } else if (mode === this.plugin.strings.item_same_folder) {
      if (tfile == null ? void 0 : tfile.parent) {
        return this.get_tfiles_of_folder(tfile.parent, true);
      }
    } else if (mode === this.plugin.strings.item_inlinks_outlinks) {
      return this.get_links(tfile);
    } else if (mode === this.plugin.strings.item_inlins) {
      return this.get_inlinks(tfile);
    } else if (mode === this.plugin.strings.item_outlinks) {
      return this.get_outlinks(tfile);
    } else if (mode === this.plugin.strings.item_all_noes) {
      return this.get_all_tfiles();
    } else if (mode === this.plugin.strings.item_recent) {
      return this.get_recent_tfiles();
    } else if (mode === this.plugin.strings.item_uncle_notes) {
      if (tfile) {
        return this.get_uncles(tfile);
      }
    } else if (mode === this.plugin.strings.item_notechain) {
      return this.get_chain(
        tfile,
        Number(this.plugin.settings.PrevChain),
        Number(this.plugin.settings.NextChain)
      );
    } else {
      return [];
    }
  }
  // Chain
  get_prev_note(tfile = this.current_note) {
    if (!tfile) {
      return;
    }
    if (tfile.deleted) {
      let tfiles = this.app.vault.getMarkdownFiles();
      tfiles = tfiles.filter((f) => {
        if (!f) {
          return false;
        }
        let next = this.editor.get_frontmatter(f, this.next);
        if (typeof next != "string") {
          return false;
        }
        return `[[${tfile.basename}]]` == next;
      });
      if (tfiles.length > 0) {
        return tfiles[0];
      } else {
        return null;
      }
    } else {
      let name = this.editor.get_frontmatter(tfile, this.prev);
      if (!name || typeof name != "string") {
        return null;
      }
      let note = this.get_tfile(name);
      return note ? note : null;
    }
  }
  open_prev_notes(tfile = this.current_note) {
    let note = this.get_prev_note(tfile);
    this.open_note(note);
  }
  get_next_note(tfile = this.current_note) {
    if (!tfile) {
      return null;
    }
    if (tfile.deleted) {
      let tfiles = this.app.vault.getMarkdownFiles();
      let prev = tfiles = tfiles.filter((f) => {
        if (!f) {
          return false;
        }
        let prev2 = this.editor.get_frontmatter(f, this.prev);
        if (typeof prev2 != "string") {
          return false;
        }
        return `[[${tfile.basename}]]` == prev2;
      });
      if (tfiles.length > 0) {
        return tfiles[0];
      } else {
        return null;
      }
    } else {
      let name = this.editor.get_frontmatter(tfile, this.next);
      if (!name || typeof name != "string") {
        return null;
      }
      let note = this.get_tfile(name);
      return note ? note : null;
    }
  }
  open_next_notes(tfile = this.current_note) {
    let note = this.get_next_note(tfile);
    this.open_note(note);
  }
  get_chain(tfile = this.current_note, prev = 10, next = 10, with_self = true) {
    if (tfile == null) {
      return [];
    }
    let res = new Array();
    if (with_self) {
      res.push(tfile);
    }
    let tmp = tfile;
    for (let i = prev; i != 0; i--) {
      let note = this.get_prev_note(tmp);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = tfile;
    for (let i = next; i != 0; i--) {
      let note = this.get_next_note(tmp);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
    return res;
  }
  get_first_note(tfile = this.current_note) {
    let notes = this.get_chain(tfile, -1, 0, false);
    if (notes.length > 0) {
      return notes[0];
    } else {
      return null;
    }
  }
  get_last_note(tfile = this.current_note) {
    let notes = this.get_chain(tfile, 0, -1, false);
    if (notes.length > 0) {
      return notes[notes.length - 1];
    } else {
      return null;
    }
  }
  get_neighbors(tfile = this.current_note) {
    return [
      this.get_prev_note(tfile),
      this.get_next_note(tfile)
    ];
  }
  async chain_set_prev(tfile, prev) {
    if (tfile == null || tfile == prev) {
      return;
    }
    if (this.get_prev_note(tfile) == prev) {
      if (prev == null) {
        if (this.editor.get_frontmatter(tfile, this.prev) != null) {
          await this.editor.set_frontmatter(
            tfile,
            this.prev,
            null
          );
        }
      }
      return;
    }
    let msg = `Note Chain: ${prev == null ? void 0 : prev.basename} --> \u{1F3E0}${tfile.basename}`;
    if (prev == null) {
      await this.editor.set_frontmatter(
        tfile,
        this.prev,
        null
      );
    } else {
      await this.editor.set_frontmatter(
        tfile,
        this.prev,
        `[[${prev.basename}]]`
      );
    }
    if (this.plugin.settings.notice_while_modify_chain) {
      new import_obsidian4.Notice(msg, 5e3);
    }
  }
  async chain_set_next(tfile, next) {
    if (tfile == null || tfile == next) {
      return;
    }
    if (this.get_next_note(tfile) == next) {
      if (next == null) {
        if (this.editor.get_frontmatter(tfile, this.next) != null) {
          await this.editor.set_frontmatter(
            tfile,
            this.next,
            null
          );
        }
      }
      return;
    }
    let msg = `Note Chain: \u{1F3E0}${tfile == null ? void 0 : tfile.basename} <-- ${next == null ? void 0 : next.basename}`;
    if (next == null) {
      await this.editor.set_frontmatter(
        tfile,
        this.next,
        null
      );
    } else {
      await this.editor.set_frontmatter(
        tfile,
        this.next,
        `[[${next.basename}]]`
      );
    }
    if (this.plugin.settings.notice_while_modify_chain) {
      new import_obsidian4.Notice(msg, 5e3);
    }
  }
  // 将 tfiles 移动为 anchor 的后置笔记
  async chain_set_next_files(tfiles, anchor, same_folder = true) {
    var _a, _b;
    if (!tfiles) {
      return;
    }
    tfiles = tfiles.filter((x) => (x == null ? void 0 : x.extension) == "md");
    if (tfiles.length == 0) {
      return;
    }
    if (!anchor) {
      return;
    }
    ;
    if (tfiles.contains(anchor)) {
      return;
    }
    let xtfiles = this.sort_tfiles_by_chain(tfiles);
    for (let tfile of xtfiles) {
      if (anchor.parent) {
        if (same_folder && ((_a = tfile.parent) == null ? void 0 : _a.path) != ((_b = anchor.parent) == null ? void 0 : _b.path)) {
          let dst = anchor.parent.path + "/" + tfile.name;
          try {
            await this.app.fileManager.renameFile(tfile, dst);
          } catch (error) {
          }
        }
        await this.chain_pop_node(tfile);
      }
    }
    tfiles.unshift(anchor);
    let anchor_next = this.get_next_note(anchor);
    if (anchor_next) {
      tfiles.push(anchor_next);
    }
    await this.chain_concat_tfiles(tfiles);
    for (let dst of tfiles.slice(1, tfiles.length - 1)) {
      await this.editor.set_frontmatter_align_file(
        anchor,
        dst,
        this.plugin.settings.field_of_confluence_tab_format
      );
    }
  }
  async chain_set_prev_next(tfile, prev, next) {
    if (tfile == null || prev == next || tfile == prev || tfile == next) {
      return;
    }
    if (this.get_prev_note(tfile) == prev) {
      await this.chain_set_next(tfile, next);
      return;
    }
    if (this.get_next_note(tfile) == next) {
      await this.chain_set_prev(tfile, prev);
      return;
    }
    let msg = `Note Chain: ${prev == null ? void 0 : prev.basename} --> \u{1F3E0}${tfile == null ? void 0 : tfile.basename} <-- ${next == null ? void 0 : next.basename}`;
    let fm = {};
    fm[this.prev] = prev ? `[[${prev.basename}]]` : null;
    fm[this.next] = next ? `[[${next.basename}]]` : null;
    await this.plugin.editor.set_multi_frontmatter(tfile, fm);
    if (this.plugin.settings.notice_while_modify_chain) {
      new import_obsidian4.Notice(msg, 5e3);
    }
  }
  async chain_link_prev_next(prev, next) {
    await this.chain_set_prev(next, prev);
    await this.chain_set_next(prev, next);
  }
  async chain_concat_tfiles(tfiles) {
    let prev = this.get_prev_note(tfiles[0]);
    if (tfiles.contains(prev)) {
      await this.chain_set_prev(tfiles[0], null);
    }
    let next = this.get_next_note(tfiles[tfiles.length - 1]);
    if (tfiles.contains(next)) {
      await this.chain_set_next(tfiles[tfiles.length - 1], null);
    }
    if (tfiles.length <= 1) {
      return;
    }
    let N = tfiles.length;
    await this.chain_set_next(tfiles[0], tfiles[1]);
    await this.chain_set_prev(tfiles[N - 1], tfiles[N - 2]);
    for (let i = 1; i < tfiles.length - 1; i++) {
      await this.chain_set_prev_next(tfiles[i], tfiles[i - 1], tfiles[i + 1]);
    }
  }
  async chain_pop_node(tfile) {
    let notes = this.get_neighbors(tfile);
    await this.chain_link_prev_next(notes[0], notes[1]);
  }
  async chain_insert_node_as_head(tfile, anchor) {
    let head = this.get_first_note(anchor);
    await this.chain_link_prev_next(tfile, head);
  }
  async chain_insert_node_as_tail(tfile, anchor) {
    let tail = this.get_last_note(anchor);
    await this.chain_link_prev_next(tail, tfile);
  }
  async chain_insert_node_after(tfile, anchor) {
    let anchor_next = this.get_next_note(anchor);
    if (anchor_next == tfile) {
      return;
    }
    let tfile_neighbor = this.get_neighbors(tfile);
    if (tfile_neighbor[1] == anchor) {
      await this.chain_concat_tfiles(
        [tfile_neighbor[0], anchor, tfile, anchor_next]
      );
    } else {
      await this.chain_pop_node(tfile);
      await this.chain_concat_tfiles([anchor, tfile, anchor_next]);
    }
  }
  async chain_insert_node_before(tfile, anchor) {
    let anchor_prev = this.get_prev_note(anchor);
    if (anchor_prev == tfile) {
      return;
    }
    let tfile_neighbor = this.get_neighbors(tfile);
    if (tfile_neighbor[0] == anchor) {
      await this.chain_concat_tfiles(
        [anchor_prev, tfile, anchor, tfile_neighbor[1]]
      );
    } else {
      await this.chain_pop_node(tfile);
      await this.chain_concat_tfiles([anchor_prev, tfile, anchor]);
    }
  }
  async chain_insert_folder_after(tfile, anchor) {
    if (!tfile.parent || tfile.parent.parent != anchor.parent) {
      return;
    }
    let note = this.get_tfile(tfile.parent.name);
    if (!note) {
      return;
    }
    await this.plugin.editor.set_multi_frontmatter(
      note,
      {
        "FolderPrevNote": `[[${anchor.basename}]]`,
        "FolderPrevNoteOffset": 0.5
      }
    );
  }
  async chain_suggester_tfiles(tfile = this.current_note, mode = "suggester") {
    let notes = this.get_brothers(tfile);
    if (notes.length == 0) {
      return;
    }
    let files = await this.suggester_sort(notes);
    await this.chain_concat_tfiles(files);
  }
  sort_tfiles(files, field) {
    if (typeof field === "string") {
      if (field === "name" || field === "alphabetical") {
        return files.sort(
          (a, b) => a.name.localeCompare(b.name)
        );
      } else if (field === "mtime" || field === "byModifiedTime") {
        return files.sort(
          (a, b) => {
            var _a, _b;
            return ((_a = a.stat) == null ? void 0 : _a.mtime) - ((_b = b.stat) == null ? void 0 : _b.mtime);
          }
        );
      } else if (field === "ctime" || field === "byCreatedTime") {
        return files.sort(
          (a, b) => {
            var _a, _b;
            return ((_a = a.stat) == null ? void 0 : _a.ctime) - ((_b = b.stat) == null ? void 0 : _b.ctime);
          }
        );
      } else if (field === "alphabeticalReverse") {
        return files.sort(
          (b, a) => a.name.localeCompare(b.name)
        );
      } else if (field === "byModifiedTimeReverse") {
        return files.sort(
          (b, a) => {
            var _a, _b;
            return ((_a = a.stat) == null ? void 0 : _a.mtime) - ((_b = b.stat) == null ? void 0 : _b.mtime);
          }
        );
      } else if (field === "byCreatedTimeReverse") {
        return files.sort(
          (b, a) => {
            var _a, _b;
            return ((_a = a.stat) == null ? void 0 : _a.ctime) - ((_b = b.stat) == null ? void 0 : _b.ctime);
          }
        );
      } else if (field === "chain") {
        return this.sort_tfiles_by_chain(files);
      }
      return files;
    } else if (typeof field === "object") {
      if (field instanceof Array) {
        let nfiles = this.sort_tfiles(files, field[0]);
        if (field.length >= 2) {
          if (field[1] === "x") {
            return nfiles.reverse();
          }
        }
        return nfiles;
      }
    }
    return files;
  }
  sort_tfiles_by_chain(tfiles) {
    let notes = tfiles.filter((f) => f instanceof import_obsidian4.TFile);
    let res = [];
    let ctfiles = [];
    while (notes.length > 0) {
      let note = notes[0];
      if (note instanceof import_obsidian4.TFile) {
        let xchain = this.get_chain(note, -1, -1);
        for (let x of xchain) {
          if (notes.contains(x)) {
            ctfiles.push(x);
            notes.remove(x);
          }
        }
      }
    }
    res.push(...ctfiles);
    let canvas = res.filter((f) => f instanceof import_obsidian4.TFile && f.extension == "canvas");
    res = res.filter((f) => f instanceof import_obsidian4.TFile && f.extension != "canvas");
    let folders = tfiles.filter((f) => f instanceof import_obsidian4.TFolder);
    if (folders.length > 0) {
      let indexOf = function(f) {
        if (f instanceof import_obsidian4.TFile) {
          return res.indexOf(f);
        } else if (f instanceof import_obsidian4.TFolder) {
          return idxs[folders.indexOf(f)];
        } else {
          return -1;
        }
      };
      let idxs = folders.map(
        (f) => this.indexOfFolder(f, ctfiles)
      );
      res.push(...folders);
      res = res.sort((a, b) => indexOf(a) - indexOf(b));
    }
    for (let tfile of canvas) {
      let rname = res.map((x) => x instanceof import_obsidian4.TFolder ? x.name : x.basename);
      let cname = tfile.basename;
      let idx = rname.indexOf(cname);
      if (idx < 0) {
        idx = rname.indexOf(cname.split(".").slice(0, -1).join("."));
      }
      if (idx < 0) {
        res.push(tfile);
      } else {
        res.splice(idx + 1, 0, tfile);
      }
    }
    return res;
  }
  sort_tfiles_folder_first(tfiles) {
    let A = tfiles.filter((f) => f instanceof import_obsidian4.TFolder).sort((a, b) => a.name.localeCompare(b.name));
    let B = tfiles.filter((f) => f instanceof import_obsidian4.TFile);
    return this.plugin.utils.concat_array([A, B]);
  }
  sort_tfiles_by_field(tfiles, field) {
    let res = tfiles.sort(
      (a, b) => {
        let av = this.editor.get_frontmatter(a, field);
        let bv = this.editor.get_frontmatter(b, field);
        if (typeof av != typeof bv) {
          return 0;
        }
        if (typeof av == "number" && typeof bv == "number") {
          return av - bv;
        }
        if (typeof av == "string" && typeof bv == "string") {
          let v = av.localeCompare(bv);
          return v;
        }
        return 0;
      }
    );
    return res;
  }
  async suggester_sort(tfiles) {
    if (!tfiles) {
      return [];
    }
    if (tfiles.length == 0) {
      return [];
    }
    ;
    let kv = {
      "chain": "chain",
      "name (a to z)": "name",
      "ctime (old to new)": "ctime",
      "mtime (old to new)": "mtime",
      "name (z to a)": ["name", "x"],
      "ctime (new to old)": ["ctime", "x"],
      "mtime (new to old)": ["mtime", "x"]
    };
    let field = await this.plugin.dialog_suggest(
      Object.keys(kv),
      Object.values(kv)
    );
    if (field == null) {
      return [];
    }
    if (field == "chain") {
      tfiles = this.sort_tfiles(tfiles, "name");
    }
    return this.sort_tfiles(tfiles, field);
  }
  view_sort_by_chain() {
    var _a;
    let view = (_a = this.app.workspace.getLeavesOfType(
      "file-explorer"
    )[0]) == null ? void 0 : _a.view;
    if (!view) {
      return;
    }
    view.sort();
    if (view.ready) {
      for (let path in view.fileItems) {
        let item = view.fileItems[path];
        if (item.vChildren) {
          let files = item.vChildren._children.map((f) => f.file);
          files = this.sort_tfiles_by_chain(files);
          let children = item.vChildren._children.sort(
            (a, b) => files.indexOf(a.file) - files.indexOf(b.file)
          );
          item.vChildren.setChildren(children);
        }
      }
      view.tree.infinityScroll.compute();
    }
  }
  async get_file_links(tfile, xlinks = true, inlinks = true, outlinks = true, onlymd = false) {
    let items = {};
    if (!tfile) {
      return items;
    }
    items["\u{1F3E0} " + tfile.basename] = this.app.vault.adapter.getFullPath(tfile.path);
    if (xlinks) {
      let tmp;
      tmp = this.editor.get_frontmatter(tfile, "github");
      if (tmp) {
        if (tmp.contains("github.com")) {
          items["\u{1F310}github"] = tmp;
        } else {
          items["\u{1F310}github"] = `https://github.com/` + tmp;
        }
      }
      tmp = this.editor.get_frontmatter(tfile, "huggingface");
      if (tmp) {
        if (tmp.contains("huggingface.co")) {
          items["\u{1F310}huggingface\u{1F917}"] = tmp;
        } else {
          items["\u{1F310}huggingface\u{1F917}"] = `https://huggingface.co/` + tmp;
        }
      }
      tmp = this.editor.get_frontmatter(tfile, "arxiv");
      if (tmp == null ? void 0 : tmp.ID) {
        items["\u{1F310}arxiv"] = `https://arxiv.org/abs/` + (tmp == null ? void 0 : tmp.ID);
      }
      let text = await this.app.vault.cachedRead(tfile);
      const regex = /\[[^(\[\])]*?\]\(.*?\)/g;
      const matches = text.match(regex);
      if (matches) {
        for (const match of matches) {
          let key = match.slice(1, match.indexOf("]("));
          let value = match.slice(match.indexOf("](")).slice(2, -1);
          if (value === "") {
            continue;
          }
          if (key === "") {
            key = value;
          }
          if (value.startsWith("http")) {
            key = "\u{1F310} " + key;
          } else if (value.startsWith("file:///")) {
            value = value.slice(8);
            key = "\u{1F4C1} " + key;
          } else {
            key = "\u{1F517} " + key;
          }
          items[key] = value;
        }
      }
    }
    if (inlinks) {
      let links = this.get_inlinks(tfile, false);
      for (let i of links) {
        if (onlymd && !(i.extension === "md")) {
          continue;
        }
        if (i.extension === "md") {
          items["\u2139\uFE0F " + i.basename] = this.app.vault.adapter.getFullPath(i.path);
        } else {
          items["\u2139\uFE0F " + i.name] = this.app.vault.adapter.getFullPath(i.path);
        }
      }
    }
    if (outlinks) {
      let links = this.get_outlinks(tfile, false);
      for (let i of links) {
        if (onlymd && !(i.extension === "md")) {
          continue;
        }
        if (i.extension === "md") {
          items["\u{1F17E}\uFE0F " + i.basename] = this.app.vault.adapter.getFullPath(i.path);
        } else {
          items["\u{1F17E}\uFE0F " + i.name] = this.app.vault.adapter.getFullPath(i.path);
        }
      }
    }
    items["\u{1F492} vault"] = this.app.vault.adapter.getFullPath(".");
    return items;
  }
  get_folder_pre_info(tfolder) {
    let note = this.get_tfile(tfolder.path + "/" + tfolder.name + ".md");
    if (!note) {
      return {
        "prev": null,
        "offset": 0
      };
    }
    let info = {
      "prev": this.editor.get_frontmatter(note, "FolderPrevNote"),
      "offset": this.editor.get_frontmatter(note, "FolderPrevNoteOffset")
    };
    if (info["offset"] == null) {
      info["offset"] = 0;
    }
    return info;
  }
  async set_folder_pre_info(tfolder, prev, offset) {
    let tfile = await this.get_folder_note(tfolder);
    let anchor = prev instanceof import_obsidian4.TFile ? prev : this.get_tfile(prev);
    if (anchor) {
      await this.plugin.editor.set_multi_frontmatter(
        tfile,
        {
          "FolderPrevNote": `[[${anchor.basename}]]`,
          "FolderPrevNoteOffset": offset
        }
      );
    } else {
      await this.plugin.editor.set_multi_frontmatter(
        tfile,
        {
          "FolderPrevNote": null,
          "FolderPrevNoteOffset": offset
        }
      );
    }
  }
  async reset_offset_of_folder(tfolder) {
    var _a;
    let prev = this.get_folder_pre_info(tfolder);
    if (prev["offset"] == null) {
      return;
    }
    let tfolders = (_a = tfolder.parent) == null ? void 0 : _a.children.filter((x) => x instanceof import_obsidian4.TFolder);
    let folders = [];
    if (tfolders) {
      for (let x of tfolders) {
        let info = this.get_folder_pre_info(x);
        if (info["prev"] == prev["prev"]) {
          folders.push(x);
        }
      }
    }
    folders = folders.sort((a, b) => {
      let ainfo = this.get_folder_pre_info(a);
      let binfo = this.get_folder_pre_info(b);
      return ainfo["offset"] - binfo["offset"];
    });
    if (folders.length == 0) {
      return;
    }
    let base = Math.pow(0.1, Math.ceil(Math.log10(folders.length + 1)) + 1);
    let offset = 0.5 - base;
    for (let folder of folders) {
      offset = offset + base;
      await this.set_folder_pre_info(folder, prev["prev"], offset);
    }
  }
  async get_folder_note(tfolder, create = true) {
    let note = this.get_tfile(tfolder.path + "/" + tfolder.name + ".md");
    if (!note && create) {
      note = await this.app.vault.create(tfolder.path + "/" + tfolder.name + ".md", "");
    }
    return note;
  }
  async move_folder_as_next_note(tfolder, anchor) {
    var _a;
    if (anchor instanceof import_obsidian4.TFolder) {
      let prev = this.get_folder_pre_info(anchor);
      await this.set_folder_pre_info(tfolder, prev["prev"], prev["offset"] * 1.001);
    } else if (anchor instanceof import_obsidian4.TFile) {
      let prevs = [];
      let tfolders = (_a = tfolder.parent) == null ? void 0 : _a.children.filter((x) => x instanceof import_obsidian4.TFolder && x != tfolder);
      if (tfolders) {
        for (let x of tfolders) {
          let info = await this.get_folder_pre_info(x);
          prevs.push(info);
        }
      }
      prevs = prevs.filter((x) => x["prev"] && this.get_tfile(x["prev"]) == anchor).map((x) => x["offset"]);
      if (prevs.length == 0) {
        this.set_folder_pre_info(tfolder, anchor, 0.5);
      } else {
        this.set_folder_pre_info(tfolder, anchor, Math.min(...prevs) * 1.001);
      }
    }
    await this.reset_offset_of_folder(tfolder);
  }
  get_confluence_level(note) {
    let fm = this.editor.get_frontmatter(note, this.plugin.settings.field_of_confluence_tab_format);
    if (fm) {
      return (fm.match(/\t/g) || []).length;
    }
    return 0;
  }
};

// src/NCTextarea.ts
var NCTextarea = class {
  constructor(plugin) {
    this.yamljs = require_js_yaml();
    this.plugin = plugin;
    this.app = plugin.app;
    this.registerMarkdownCodeBlockProcessor();
  }
  arrayBufferToBase64(buffer) {
    let binary = "";
    let bytes = new Uint8Array(buffer);
    let len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
  }
  async registerMarkdownCodeBlockProcessor(field = "textarea") {
    let nc = this.plugin;
    nc.registerMarkdownCodeBlockProcessor(field, async (source, el, ctx) => {
      var _a, _b, _c;
      source = source.trim();
      let config;
      if (source == "") {
        config = {};
      } else {
        config = nc.textarea.yamljs.load(source);
      }
      let tfile = nc.chain.get_tfile(ctx.sourcePath);
      if (tfile) {
        let frontmatter = nc.app.metadataCache.getFileCache(tfile)["frontmatter"];
        if (frontmatter) {
          for (let key in frontmatter) {
            config[key] = frontmatter[key];
          }
        }
      }
      let container = el.createEl("div", { cls: "textarea-container" });
      let area = null;
      if (config["textarea"] != false) {
        let cls = "code_block_textarea";
        if ((_a = config.textarea) == null ? void 0 : _a.cls) {
          cls = config["textarea"]["cls"];
        }
        area = container.createEl("textarea", { cls });
        area.style.width = "100%";
        area.style.height = "200px";
        let style = (_b = config.textarea) == null ? void 0 : _b.style;
        if (style && typeof style == "object") {
          for (let name in style) {
            if (name == "backgroundImage") {
              let img = nc.chain.get_tfile(style[name]);
              if (img) {
                let data = await nc.app.vault.readBinary(img);
                let text = this.arrayBufferToBase64(data);
                let bs64 = `data:image/png;base64,${text}`;
                area.style[name] = `url('${bs64}')`;
                continue;
              }
            }
            area.style[name] = style[name];
          }
        }
      }
      for (let k in config) {
        if (k.startsWith("buttons")) {
          let btns = config[k];
          if (btns && Array.isArray(btns)) {
            let buttonContainer = container.createEl("div", { cls: "code_block_textarea_btn_container" });
            buttonContainer.style.display = "flex";
            buttonContainer.style.justifyContent = "flex-start";
            buttonContainer.style.marginTop = "10px";
            for (let btn of btns) {
              let name = btn[0];
              let fname = btn[1];
              if (!name || !fname) {
                continue;
              }
              let cls = "code_block_textarea_btn";
              if (btn[2]) {
                cls = btn[2];
              }
              let ufunc = nc.textarea[fname];
              if (!ufunc) {
                ufunc = await nc.utils.get_str_func(nc.app, fname);
              }
              if (ufunc) {
                let xbtn = buttonContainer.createEl("button", { text: name, cls });
                xbtn.addEventListener("click", () => {
                  ufunc(area, source, el, ctx);
                });
                continue;
              }
              let c = (_c = nc.app.commands) == null ? void 0 : _c.findCommand(fname);
              if (c) {
                let xbtn = buttonContainer.createEl("button", { text: name, cls });
                xbtn.addEventListener("click", () => {
                  nc.app.commands.executeCommandById(fname);
                });
                continue;
              }
              let tfile2 = nc.chain.get_tfile(fname);
              if (tfile2) {
                let xbtn = buttonContainer.createEl("button", { text: name, cls });
                xbtn.addEventListener("click", () => {
                  let tags = nc.chain.get_tags(tfile2).map((x) => x.slice(1)).filter(
                    (x) => nc.settings.tpl_tags_folder.contains(x)
                  );
                  if (tags.length > 0) {
                    nc.utils.parse_templater(
                      nc.app,
                      fname,
                      true,
                      {
                        area,
                        source,
                        el,
                        ctx
                      }
                    );
                  } else {
                    nc.chain.open_note_in_modal(tfile2.path);
                  }
                });
                continue;
              }
            }
            container.appendChild(buttonContainer);
          }
        }
      }
      if (area && config["focus"] != false) {
        area.focus();
      }
    });
  }
  clear_area(area) {
    area.value = "";
  }
  copy_area(area) {
    area.select();
    navigator.clipboard.writeText(area.value);
  }
  log_area(area) {
    console.log("\u5F53\u524DTextarea\u4E3A\uFF1A");
    console.log(area);
  }
};

// src/NCFileExplorer.ts
var import_obsidian5 = require("obsidian");

// node_modules/monkey-around/dist/index.mjs
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const inherited = obj[method], hadOwn = obj.hasOwnProperty(method), original = hadOwn ? inherited : function() {
    return Object.getPrototypeOf(obj)[method].apply(this, arguments);
  };
  let current = createWrapper(original);
  if (inherited)
    Object.setPrototypeOf(current, inherited);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, inherited || Function);
  }
}

// src/NCFileExplorer.ts
var NCFileExplorer = class {
  constructor(plugin) {
    this.explorerPatches = [];
    this.plugin = plugin;
    this.chain = plugin.chain;
    this.app = plugin.app;
    this.register();
  }
  async register() {
    await this.waitForFileExplorer();
    await this.patchFileExplorer();
    try {
      this.sort(0, true);
      this.set_display_text();
      this.set_fileitem_style();
    } catch (error) {
    }
  }
  async patchFileExplorer() {
    let explorerView = this.file_explorer;
    this.explorerPatches.push(
      around(Object.getPrototypeOf(this.plugin.app.dragManager), {
        onDragEnd: (original) => function(...args) {
          let dragManager = this;
          let nc = dragManager.app.plugins.plugins["note-chain"];
          async function move_file(dragManager2) {
            try {
              let hoverEl = dragManager2.hoverEl;
              if (hoverEl && (hoverEl.classList.contains("tree-item") && hoverEl.classList.contains("nav-folder") || hoverEl.classList.contains("nav-files-container"))) {
                let ghostEl = dragManager2.ghostEl;
                if (!ghostEl) {
                  return;
                }
                let x = parseInt(ghostEl.style.left, 10);
                let y = parseInt(ghostEl.style.top, 10);
                let element = document.elementFromPoint(x, y);
                if (!element) {
                  return;
                }
                let path;
                if (element.classList.contains("nav-file-title-content")) {
                  element = element.closest(".nav-file-title");
                  if (!element) {
                    return;
                  }
                }
                path = element.getAttribute("data-path");
                let target = dragManager2.app.vault.getAbstractFileByPath(path);
                if (target instanceof import_obsidian5.TFolder || target.extension != "md") {
                  return;
                }
                let sourceEls = dragManager2.sourceEls;
                if (!sourceEls || sourceEls.length == 0) {
                  return;
                }
                let tfiles;
                if (sourceEls.length == 1) {
                  tfiles = sourceEls.map((x2) => {
                    var _a;
                    return dragManager2.app.vault.getAbstractFileByPath((_a = x2 == null ? void 0 : x2.dataset) == null ? void 0 : _a.path);
                  });
                } else {
                  tfiles = nc.chain.get_selected_files(false);
                }
                setTimeout(() => {
                  nc.chain.chain_set_next_files(tfiles, target, true);
                  ;
                }, 100);
              }
            } catch (error) {
            }
          }
          if (nc.settings.isdraged) {
            move_file(dragManager);
          }
          original.call(this, ...args);
        }
      })
    );
    this.explorerPatches.push(
      around(Object.getPrototypeOf(explorerView), {
        getSortedFolderItems: (original) => function(e) {
          let plugin = this.app.plugins.getPlugin("note-chain");
          if (plugin) {
            try {
              let res = original.call(this, e);
              let tfiles = plugin.chain.children[e.path];
              if (tfiles) {
                res = res.sort((a, b) => tfiles.indexOf(a.file) - tfiles.indexOf(b.file));
              }
              return res;
            } catch (e2) {
              return original.call(this, e2);
            }
          } else {
            return original.call(this, e);
          }
        }
        // dragFiles:(original) => function(...args) {
        // 	let nc = this.app.plugins.plugins['note-chain'];
        // 	if(nc.settings.isdraged){
        // 	}else{
        // 		return original.call(this, ...args);
        // 	}
        // }
      })
    );
    let item = Object.values(this.file_explorer.fileItems)[0];
    if (item) {
      around(Object.getPrototypeOf(item), {
        getTtitle: (original) => function(e) {
          let plugin = this.app.plugins.getPlugin("note-chain");
          return function(e2) {
            if (plugin) {
              try {
                let res = plugin.explorer.get_display_text(this.file);
                return res;
              } catch (e3) {
                return original.call(this);
              }
            } else {
              return original.call(this);
            }
          };
        }
      });
    }
  }
  async unregister() {
    let items = this.file_explorer.fileItems;
    for (let key in items) {
      let item = items[key];
      await this._set_display_text_(item, this.get_origin_text(item.file));
      item.el.style.background = null;
      item.el.style.border = null;
    }
    this.explorerPatches.forEach((unpatch) => unpatch());
  }
  async waitForFileExplorer() {
    while (!this.file_explorer.fileItems) {
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
    return this.file_explorer.fileItems;
  }
  get file_explorer() {
    var _a;
    let a = this.app.workspace.getLeavesOfType(
      "file-explorer"
    );
    let view = (_a = a[0]) == null ? void 0 : _a.view;
    return view;
  }
  async sort(nsleep = 0, init = false) {
    var _a;
    if ((_a = this.file_explorer) == null ? void 0 : _a.sort) {
      if (nsleep > 0) {
        await sleep(nsleep);
      }
      if (init) {
        this.plugin.chain.init_children();
      }
      if (Object.keys(this.plugin.chain.children).length == 0) {
        setTimeout(() => {
          this.sort(nsleep, true);
        }, 3e3);
      } else {
        this.file_explorer.sort();
      }
    }
  }
  get_field_of_display_text(tfile) {
    if (this.plugin.settings.field_of_display_text) {
      let item = this.plugin.editor.get_frontmatter_config(tfile, this.plugin.settings.field_of_display_text);
      if (typeof item != "string") {
        return "";
      }
      return item;
    }
    return "";
  }
  get_origin_text(tfile) {
    if (tfile instanceof import_obsidian5.TFile) {
      if (tfile.extension == "md") {
        return tfile.basename;
      } else if (tfile.extension == "canvas") {
        return tfile.basename;
      } else {
        return tfile.name;
      }
    } else {
      return tfile.name;
    }
  }
  get_item(tfile, field) {
    var _a, _b;
    if (!field) {
      return "";
    }
    let fields = field.split("|");
    let item = "";
    for (let f of fields) {
      if (f == "$0") {
        return this.get_origin_text(tfile);
      }
      if (f.startsWith("?")) {
        break;
      }
      if (tfile instanceof import_obsidian5.TFile) {
        let s = this.plugin.editor.get_frontmatter(tfile, f);
        if (typeof s === "number") {
          item = `${s}`;
        } else if (typeof s != "string" || s == "") {
          continue;
        }
        item = s;
        break;
      }
    }
    if (((_a = fields.last()) == null ? void 0 : _a.startsWith("?")) && item) {
      return ((_b = fields.last()) == null ? void 0 : _b.slice(1).replace(/\$1/g, item)) || "";
    }
    return item;
  }
  get_display_text(tfile) {
    let str = this.get_field_of_display_text(tfile);
    if (!str && this.plugin.settings.field_of_confluence_tab_format) {
      str = `<${this.plugin.settings.field_of_confluence_tab_format}><$0>`;
    } else {
      str = `<${this.plugin.settings.field_of_confluence_tab_format}>${str}`;
    }
    if (!str || str == "$0" || str == "<$0>") {
      return this.get_origin_text(tfile);
    }
    let mstr = str.replace(/\<(.+?)?\>/g, (match, field) => {
      return this.get_item(tfile, field);
    });
    mstr = mstr;
    if (mstr == "") {
      return this.get_origin_text(tfile);
    } else {
      return mstr;
    }
  }
  _set_display_text_(item, txt) {
    if (item && txt) {
      if (typeof txt == "string") {
        item.innerEl.setText(txt);
      }
    }
  }
  set_display_text() {
    let items = this.file_explorer.fileItems;
    for (let key in items) {
      let item = items[key];
      let txt = this.get_display_text(item.file);
      this._set_display_text_(item, txt);
    }
  }
  async get_fileitem_style(tfile) {
    if (this.plugin.settings.field_of_background_color) {
      let style = this.plugin.editor.get_frontmatter_config(tfile, this.plugin.settings.field_of_background_color);
      if (typeof style == "string") {
        let func = await this.plugin.utils.get_str_func(this.app, style);
        if (func) {
          return func;
        }
      }
      return style;
    }
    return null;
  }
  async set_fileitem_style() {
    let items = this.file_explorer.fileItems;
    for (let key in items) {
      let item = items[key];
      let style = await this.get_fileitem_style(item.file);
      await this.set_fileitem_style_of_file(item.file, style);
    }
  }
  async set_fileitem_style_of_file(tfile, style = null) {
    if (!tfile) {
      return;
    }
    if (!style) {
      style = await this.get_fileitem_style(tfile);
    }
    let items = this.file_explorer.fileItems;
    let item = items[tfile.path];
    if (item) {
      if (typeof style == "function") {
        style = await style(tfile);
        if (!style) {
          return;
        }
      }
      if (style == null) {
        item.el.style.background = null;
        item.el.style.border = null;
      } else if (typeof style == "string") {
        item.el.style.background = style;
      } else if (typeof style == "object") {
        for (let k in style) {
          item.el.style[k] = style[k];
        }
      } else if (typeof style == "function") {
        await style(tfile);
      }
    }
  }
};

// src/strings.ts
var Strings = class {
  constructor() {
    let lang = window.localStorage.getItem("language");
    if (lang) {
      this.language = lang;
    } else {
      this.language = "en";
    }
  }
  get cmd_mermaid_flowchart_link() {
    if (this.language == "zh") {
      return "Mermaid\u94FE\u63A5\u5361\u7247";
    } else {
      return "Mermaid of linked notes";
    }
  }
  get cmd_mermaid_flowchart_folder() {
    if (this.language == "zh") {
      return "Mermaid\u76EE\u5F55\u5361\u7247";
    } else {
      return "Mermaid of folder notes";
    }
  }
  get cmd_mermaid_flowchart_auto() {
    if (this.language == "zh") {
      return "Mermaid\u5361\u7247";
    } else {
      return "Mermaid of notes";
    }
  }
  get cmd_file_open_with_system_app() {
    if (this.language == "zh") {
      return "\u6587\u4EF6 - \u4F7F\u7528\u7CFB\u7EDF\u7A0B\u5E8F\u6253\u5F00\uFF08\u4EC5\u684C\u9762\uFF09";
    } else {
      return "File - open with system app (desktop only)";
    }
  }
  get cmd_file_show_in_system_explorer() {
    if (this.language == "zh") {
      return "\u6587\u4EF6 - \u5728\u7CFB\u7EDF\u6D4F\u89C8\u7684\u67E5\u770B\uFF08\u4EC5\u684C\u9762\uFF09";
    } else {
      return "File - show in system explorer (desktop only)";
    }
  }
  get cmd_file_rename() {
    if (this.language == "zh") {
      return "\u6587\u4EF6 - \u91CD\u547D\u540D\u6587\u4EF6";
    } else {
      return "File - rename file";
    }
  }
  get cmd_longform2notechain() {
    if (this.language == "zh") {
      return "\u6839\u636ELongForm\u91CD\u7F6E\u7B14\u8BB0\u94FE\u6761";
    } else {
      return "Reset note chain by longform";
    }
  }
  get cmd_longform4notechain() {
    if (this.language == "zh") {
      return "\u6839\u636E\u7B14\u8BB0\u94FE\u6761\uFF0C\u91CD\u7F6ELongForm\u573A\u666F";
    } else {
      return "Reset longform scenes by note chain";
    }
  }
  get cmd_sort_file_explorer() {
    if (this.language == "zh") {
      return "\u6839\u636E\u7B14\u8BB0\u94FE\u6392\u5E8F";
    } else {
      return "Sort file explorer by note chain";
    }
  }
  get cmd_open_notes_smarter() {
    if (this.language == "zh") {
      return "\u667A\u80FD\u6253\u5F00\u6587\u4EF6";
    } else {
      return "Open note smarter";
    }
  }
  get cmd_open_note() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u6587\u4EF6";
    } else {
      return "Open note";
    }
  }
  get cmd_open_prev_note() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u524D\u7F6E\u7B14\u8BB0";
    } else {
      return "Open prev note";
    }
  }
  get chain_move_up_node() {
    if (this.language == "zh") {
      return "\u5411\u524D\u79FB\u52A8\u7B14\u8BB0\u8282\u70B9";
    } else {
      return "Move node up";
    }
  }
  get chain_move_down_node() {
    if (this.language == "zh") {
      return "\u5411\u540E\u79FB\u52A8\u7B14\u8BB0\u8282\u70B9";
    } else {
      return "Move node down";
    }
  }
  get cmd_open_next_note() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Open next note";
    }
  }
  get cmd_reveal_note() {
    if (this.language == "zh") {
      return "\u5B9A\u4F4D\u5F53\u524D\u7B14\u8BB0";
    } else {
      return "Reveal current file in navigation";
    }
  }
  get cmd_open_and_reveal_note() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u5E76\u5B9A\u4F4D\u7B14\u8BB0";
    } else {
      return "Open and reveal note";
    }
  }
  get cmd_open_prev_note_of_right_leaf() {
    if (this.language == "zh") {
      return "\u53F3\u4FA7\u9875\u9762\u6253\u5F00\u524D\u7F6E\u7B14\u8BB0";
    } else {
      return "Open prev note of right leaf";
    }
  }
  get cmd_open_next_note_of_right_leaf() {
    if (this.language == "zh") {
      return "\u53F3\u4FA7\u9875\u9762\u6253\u5F00\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Open next note of right leaf";
    }
  }
  get cmd_execute_template_modal() {
    if (this.language == "zh") {
      return "\u6267\u884C\u811A\u672C\u7B14\u8BB0";
    } else {
      return "Execute Templater modal";
    }
  }
  get cmd_toogle_css_block_in_note() {
    if (this.language == "zh") {
      return "\u542F\u7528/\u5173\u95ED css \u4EE3\u7801\u5757";
    } else {
      return "Toogle css block in note";
    }
  }
  get cmd_set_frontmatter() {
    if (this.language == "zh") {
      return "\u6240\u9009\u7B14\u8BB0\u8BBE\u7F6E\u5C5E\u6027";
    } else {
      return "Set fronmatter for selected notes";
    }
  }
  get cmd_move_next_level() {
    if (this.language == "zh") {
      return "\u63D0\u9AD8\u7F29\u8FDB\u5C42\u7EA7";
    } else {
      return "Increase the indentation level";
    }
  }
  get cmd_move_none_level() {
    if (this.language == "zh") {
      return "\u5220\u9664\u7F29\u8FDB\u5C42\u7EA7";
    } else {
      return "Remove the indentation level";
    }
  }
  get cmd_move_prev_level() {
    if (this.language == "zh") {
      return "\u964D\u4F4E\u7F29\u8FDB\u5C42\u7EA7";
    } else {
      return "Decrease the indentation level";
    }
  }
  get cmd_open_note_in_modal() {
    if (this.language == "zh") {
      return "\u5F39\u7A97\u4E2D\u6253\u5F00\u7B14\u8BB0";
    } else {
      return "Open note in modal";
    }
  }
  get cmd_open_note_in_view() {
    if (this.language == "zh") {
      return "\u9875\u9762\u4E2D\u6253\u5F00\u7B14\u8BB0";
    } else {
      return "Open note in view";
    }
  }
  get cmd_insert_command_id() {
    if (this.language == "zh") {
      return "\u63D2\u5165\u547D\u4EE4ID";
    } else {
      return "Insert command id";
    }
  }
  get filemenu_create_next_note() {
    if (this.language == "zh") {
      return "\u521B\u5EFA\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Create next note";
    }
  }
  get filemenu_move_as_next_note() {
    if (this.language == "zh") {
      return "\u79FB\u52A8\u4E3A\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Move as next note";
    }
  }
  get filemenu_move_as_next_notes() {
    if (this.language == "zh") {
      return "\u79FB\u52A8\u4E3A\u540E\u7F6E\u7B14\u8BB0\uFF08\u9009\u4E2D\u7B14\u8BB0\uFF09";
    } else {
      return "Move as next notes(selected)";
    }
  }
  get clear_inlinks() {
    if (this.language == "zh") {
      return "\u6E05\u7406\u7B14\u8BB0\u5165\u94FE";
    } else {
      return "Clear inlinks of current file";
    }
  }
  get move_file_to_another_folder() {
    if (this.language == "zh") {
      return "\u79FB\u52A8\u5F53\u524D\u6587\u4EF6";
    } else {
      return "Move current file to another folder";
    }
  }
  get replace_notes_with_regx() {
    if (this.language == "zh") {
      return "\u6B63\u5219\u8868\u8FBE\u5F0F\u66FF\u6362\u7B14\u8BB0\u5185\u5BB9";
    } else {
      return "Replace by regex";
    }
  }
  get chain_insert_node() {
    if (this.language == "zh") {
      return "\u63D2\u5165\u8282\u70B9";
    } else {
      return "Insert node of chain";
    }
  }
  get chain_set_seq_note() {
    if (this.language == "zh") {
      return "\u91CD\u5851\u5F53\u524D\u6587\u4EF6\u5939\u7B14\u8BB0\u94FE\u6761";
    } else {
      return "Rebuild the chain of current folder";
    }
  }
  get create_new_note() {
    if (this.language == "zh") {
      return "\u521B\u5EFA\u65B0\u7B14\u8BB0";
    } else {
      return "Create new note";
    }
  }
  get setting_isSortFileExplorer() {
    if (this.language == "zh") {
      return "\u6839\u636E\u7B14\u8BB0\u94FE\u6761\u6392\u5E8F\u76EE\u5F55";
    } else {
      return "Sort by chain in file explorer?";
    }
  }
  get setting_isFolderFirst() {
    if (this.language == "zh") {
      return "\u6392\u5E8F\u65F6\u76EE\u5F55\u65F6\u6587\u4EF6\u5939\u4F18\u5148\uFF1F";
    } else {
      return "Sort folder first in file explorer?";
    }
  }
  get setting_isdraged() {
    if (this.language == "zh") {
      return "\u62D6\u52A8\u6392\u5E8F";
    } else {
      return "Sort files by drag & drop?";
    }
  }
  get setting_PrevChain() {
    if (this.language == "zh") {
      return "\u524D\u7F6E\u7B14\u8BB0\u6570\u91CF\uFF1F";
    } else {
      return "Number of prev notes to show?";
    }
  }
  get setting_NextChain() {
    if (this.language == "zh") {
      return "\u540E\u7F6E\u7B14\u8BB0\u6570\u91CF\uFF1F";
    } else {
      return "Number of next notes to show?";
    }
  }
  get setting_suggesterNotesMode() {
    if (this.language == "zh") {
      return `${this.chain_insert_node}\uFF1A\u9ED8\u8BA4\u6A21\u5F0F`;
    } else {
      return `${this.chain_insert_node}:Default mode`;
    }
  }
  get setting_auto_notechain() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u6587\u4EF6\u65F6\uFF0C\u81EA\u52A8\u91CD\u5851\u6587\u4EF6\u5939\u7B14\u8BB0\u94FE\uFF1F";
    } else {
      return "Auto build notechain of folder while open new file?";
    }
  }
  get setting_refreshDataView() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u6587\u4EF6\u65F6\uFF0C\u5237\u65B0Dataview\u89C6\u56FE\uFF1F";
    } else {
      return "Refresh dataview while open new file?";
    }
  }
  get setting_refreshTasks() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u6587\u4EF6\u65F6\uFF0C\u5237\u65B0Tasks\u89C6\u56FE\uFF1F";
    } else {
      return "Refresh tasks while open new file?";
    }
  }
  get setting_wordcout() {
    if (this.language == "zh") {
      return "\u7EDF\u8BA1\u6BCF\u65E5\u5B57\u6570";
    } else {
      return "Register daily word count?";
    }
  }
  get setting_avata() {
    if (this.language == "zh") {
      return "\u5934\u50CF";
    } else {
      return "Avata";
    }
  }
  get setting_templater_tag() {
    if (this.language == "zh") {
      return "\u811A\u672C\u7B14\u8BB0\u6807\u7B7E\u6216\u76EE\u5F55";
    } else {
      return "Tags or folder of script note";
    }
  }
  get setting_wordcout_xfolder() {
    if (this.language == "zh") {
      return "\u8DF3\u8FC7\u4EE5\u4E0B\u76EE\u5F55";
    } else {
      return "Ignore these folders";
    }
  }
  get setting_notice_while_modify_chain() {
    if (this.language == "zh") {
      return "\u4FEE\u6539\u7B14\u8BB0\u94FE\u65F6\u663E\u793A\u901A\u77E5\uFF1F";
    } else {
      return "Notice while modify note chain?";
    }
  }
  get setting_field_of_display_text() {
    if (this.language == "zh") {
      return "\u6587\u4EF6\u5217\u8868\u663E\u793A\u6587\u4EF6\u540D";
    } else {
      return "Display text for notes in file-explorer?";
    }
  }
  get setting_confluence_tab_format() {
    if (this.language == "zh") {
      return "\u4F7F\u7528Confluence\u7F29\u8FDB\u683C\u5F0F";
    } else {
      return "Use confluence indentation format";
    }
  }
  get setting_field_of_background_color() {
    if (this.language == "zh") {
      return "\u6587\u4EF6\u5217\u8868\u5143\u7D20\u98CE\u683C";
    } else {
      return "File-item style for notes in file-explorer?";
    }
  }
  get item_insert_suggester() {
    if (this.language == "zh") {
      return "\u63D2\u5165\u6A21\u5F0F\uFF08\u76F8\u5BF9\u4E8E\u951A\u70B9\uFF09";
    } else {
      return "Insert mode(relate to anchor).";
    }
  }
  get item_insert_node_after() {
    if (this.language == "zh") {
      return "\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Next note";
    }
  }
  get item_insert_node_before() {
    if (this.language == "zh") {
      return "\u524D\u7F6E\u7B14\u8BB0";
    } else {
      return "Prev note";
    }
  }
  get item_insert_node_as_head() {
    if (this.language == "zh") {
      return "\u94FE\u5934";
    } else {
      return "Head of chain";
    }
  }
  get item_insert_node_as_tail() {
    if (this.language == "zh") {
      return "\u94FE\u5C3E";
    } else {
      return "Tail of thain";
    }
  }
  get item_insert_folder_after() {
    if (this.language == "zh") {
      return "\u6587\u4EF6\u5939\u540E\u7F6E";
    } else {
      return "Folder as next";
    }
  }
  get item_get_brothers() {
    if (this.language == "zh") {
      return "\u540C\u7EA7\u7B14\u8BB0";
    } else {
      return "Notes in same folder";
    }
  }
  get item_same_folder() {
    if (this.language == "zh") {
      return "\u540C\u7EA7\u7B14\u8BB0+\u5B50\u76EE\u5F55";
    } else {
      return "Notes in same folder(recursive)";
    }
  }
  get item_inlinks_outlinks() {
    if (this.language == "zh") {
      return "\u51FA\u94FE+\u5165\u94FE";
    } else {
      return "outLinks + inLinks";
    }
  }
  get item_inlins() {
    if (this.language == "zh") {
      return "\u5165\u94FE";
    } else {
      return "inlinks";
    }
  }
  get item_outlinks() {
    if (this.language == "zh") {
      return "\u51FA\u94FE";
    } else {
      return "outlinks";
    }
  }
  get item_all_noes() {
    if (this.language == "zh") {
      return "\u6240\u6709\u7B14\u8BB0";
    } else {
      return "All notes";
    }
  }
  get item_recent() {
    if (this.language == "zh") {
      return "\u8FD1\u671F\u7B14\u8BB0";
    } else {
      return "Recent";
    }
  }
  get item_uncle_notes() {
    if (this.language == "zh") {
      return "\u4E0A\u7EA7\u7B14\u8BB0";
    } else {
      return "Notes in grandpa folder";
    }
  }
  get item_notechain() {
    if (this.language == "zh") {
      return "\u7B14\u8BB0\u94FE\u6761";
    } else {
      return "Note chain";
    }
  }
  get item_currentnote() {
    if (this.language == "zh") {
      return "\u5F53\u524D\u7B14\u8BB0";
    } else {
      return "Current note";
    }
  }
  get item_chain_insert_node_after() {
    if (this.language == "zh") {
      return "\u6DFB\u52A0\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Create next note";
    }
  }
  get item_chain_insert_node_as_tail() {
    if (this.language == "zh") {
      return "\u94FE\u5C3E\u6DFB\u52A0\u7B14\u8BB0";
    } else {
      return "Create tail note";
    }
  }
  get item_chain_insert_node_before() {
    if (this.language == "zh") {
      return "\u6DFB\u52A0\u524D\u7F6E\u7B14\u8BB0";
    } else {
      return "Create prev note";
    }
  }
  get item_chain_insert_node_as_head() {
    if (this.language == "zh") {
      return "\u94FE\u5934\u6DFB\u52A0\u7B14\u8BB0";
    } else {
      return "Create head note";
    }
  }
  get item_item_chain_insert_null() {
    if (this.language == "zh") {
      return "\u65E0\u94FE\u63A5";
    } else {
      return "Create note not in chain";
    }
  }
  get prompt_notename() {
    if (this.language == "zh") {
      return "\u8F93\u5165\u7B14\u8BB0\u540D";
    } else {
      return "Input note name";
    }
  }
};
var strings = new Strings();

// src/WordCount.ts
var import_obsidian6 = require("obsidian");
var WordCount = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.nretry = 100;
    this.events = new Array();
    this.register();
  }
  filter(tfile) {
    var _a;
    if (!tfile) {
      return false;
    }
    if (tfile.deleted) {
      return false;
    }
    if (tfile.extension != "md") {
      return false;
    }
    let xfolders = this.plugin.settings.wordcountxfolder.split("\n").filter((x) => x != "");
    for (let item of xfolders) {
      if (tfile.path.startsWith(item)) {
        return false;
      } else if (item == "/") {
        if (((_a = tfile.parent) == null ? void 0 : _a.path) == "/") {
          return false;
        }
      }
    }
    return true;
  }
  // 统计字数
  count_words(ctx, ignore = /[\s!"#$%&'()*+,./:;<=>?@[\]^_`{|}，。！？【】、；：“”‘’《》（）［］—…￥]/g) {
    let N = ctx.replace(ignore, "").length;
    let enregex = /[a-zA-Z0-9-]+/g;
    let matches = ctx.match(enregex);
    if (matches) {
      let elen = 0;
      matches.forEach((x) => elen = elen + x.length);
      N = N - elen + matches.length;
    }
    return N;
  }
  async set_mtime_value(tfile, key, val) {
    var _a, _b;
    let activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
    let editorState = {};
    if (activeView && activeView.file === tfile) {
      let editor = activeView.editor;
      if (editor) {
        editorState.cursor = editor.getCursor();
        editorState.selection = editor.getSelection();
        editorState.sanchor = editor.getCursor("anchor");
        editorState.shead = editor.getCursor("head");
        editorState.scrollInfo = editor.getScrollInfo();
      }
    }
    let aline = ((_a = editorState == null ? void 0 : editorState.cursor) == null ? void 0 : _a.line) !== void 0 ? (_b = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _b.getLine(editorState.cursor.line) : void 0;
    if (aline && aline.startsWith("|") && aline.endsWith("|")) {
      return;
    }
    await this.app.fileManager.processFrontMatter(
      tfile,
      (fm) => {
        let t = import_obsidian6.moment.unix(tfile.stat.mtime / 1e3);
        let mtime = t.format("YYYY-MM-DD");
        if (fm[key] == null) {
          if (val > 0) {
            fm[key] = {};
            if (mtime == (0, import_obsidian6.moment)().format("YYYY-MM-DD") && mtime != import_obsidian6.moment.unix(tfile.stat.ctime / 1e3).format("YYYY-MM-DD")) {
              fm[key][t.add(-1, "days").format("YYYY-MM-DD")] = val;
            } else {
              fm[key][mtime] = val;
            }
          }
        } else {
          let ts = Object.keys(fm[key]).sort((b, a) => a.localeCompare(b)).filter((x) => !(x == mtime));
          if (ts.length == 0) {
            if (val > 0) {
              fm[key][mtime] = val;
            } else if (fm[key][mtime]) {
              fm[key][mtime] = val;
            }
          } else {
            if (val - fm[key][ts[0]] != 0) {
              fm[key][mtime] = val;
            } else if (fm[key][mtime]) {
              delete fm[key][mtime];
            }
          }
        }
      }
    );
    if (activeView && activeView.file === tfile) {
      let editor = activeView.editor;
      if (editor) {
        if (editorState.selection && editorState.sanchor && editorState.shead) {
          try {
            await editor.setSelection(editorState.sanchor, editorState.shead);
          } catch (error) {
            new import_obsidian6.Notice(`Error setting selection:${error}`, 3e3);
          }
        } else if (editorState.cursor) {
          await editor.setCursor(editorState.cursor);
        }
        if (editorState.scrollInfo) {
          await editor.scrollTo(editorState.scrollInfo.left, editorState.scrollInfo.top);
        }
      }
    }
  }
  get_new_words(tfile, day = (0, import_obsidian6.moment)().format("YYYY-MM-DD")) {
    var _a;
    let meta = this.app.metadataCache.getFileCache(tfile);
    let values = (_a = meta == null ? void 0 : meta.frontmatter) == null ? void 0 : _a.words;
    if (values) {
      let keys = Object.keys(values).sort((a, b) => a.localeCompare(b));
      let idx = keys.indexOf(day);
      if (idx < 0) {
        return 0;
      } else if (idx == 0) {
        return values[day];
      } else {
        return values[day] - values[keys[idx - 1]];
      }
    }
  }
  async update_word_count(tfile) {
    if (!this.filter(tfile)) {
      return;
    }
    let ctx = await this.app.vault.cachedRead(tfile);
    let mcache = this.app.metadataCache.getFileCache(tfile);
    if (mcache == null ? void 0 : mcache.frontmatterPosition) {
      ctx = ctx.slice(mcache.frontmatterPosition.end.offset);
    }
    let N = this.count_words(ctx);
    await this.set_mtime_value(tfile, "words", N);
  }
  check_frontmatter(tfile, kv) {
    try {
      if (!tfile) {
        return false;
      }
      let meta = this.app.metadataCache.getFileCache(tfile);
      if (meta == null ? void 0 : meta.frontmatter) {
        for (let k in kv) {
          if (!(meta.frontmatter[k] == kv[k])) {
            return false;
          }
        }
        return true;
      }
      return false;
    } catch (error) {
      return false;
    }
  }
  async wait_frontmatter(tfile, kv, nretry = this.nretry) {
    let flag = this.check_frontmatter(tfile, kv);
    while (!flag && nretry > 0) {
      await sleep(50);
      nretry = nretry - 1;
      flag = this.check_frontmatter(tfile, kv);
    }
    return flag;
  }
  async update_word_count_of_vault() {
    let tfiles = this.app.vault.getMarkdownFiles().filter((x) => this.filter(x));
    let i = 0;
    for (let tfile of tfiles) {
      new import_obsidian6.Notice(`${i}/${tfiles.length}:${tfile.name}`, 3e3);
      await this.update_word_count(tfile);
      i = i + 1;
    }
  }
  register() {
    if (this.plugin.settings.wordcout) {
      this.regeister_editor_change();
      this.regeister_active_leaf_change();
    } else {
      this.unregister();
    }
  }
  regeister_editor_change() {
    let e = this.app.workspace.on("editor-change", async (editor, info) => {
      var _a;
      if (((_a = info.file) == null ? void 0 : _a.extension) != "md") {
        return;
      }
      if (this.timerId !== null) {
        clearTimeout(this.timerId);
      }
      if (info.file) {
        this.timerId = setTimeout(() => {
          this.update_word_count(info.file);
        }, 3e3);
      }
    });
    this.plugin.registerEvent(e);
    this.events.push(e);
  }
  regeister_active_leaf_change() {
    let e = this.app.workspace.on("active-leaf-change", async (leaf) => {
      var _a, _b;
      let tfile = (leaf == null ? void 0 : leaf.view).file;
      if (!(leaf == null ? void 0 : leaf.view)) {
        return;
      }
      if (!(((_b = (_a = leaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.extension) == "md")) {
        return;
      }
      await this.update_word_count(tfile);
      if (this.curr_active_file == null) {
        this.curr_active_file = tfile;
        return;
      }
      if (this.curr_active_file != tfile) {
        await this.update_word_count(this.curr_active_file);
        this.curr_active_file = tfile;
      }
    });
    this.plugin.registerEvent(e);
    this.events.push(e);
  }
  unregister() {
    for (let e of this.events) {
      e.e.offref(e);
    }
    this.events = this.events.slice(-1, 0);
  }
  get_words_of_tfiles(files = null) {
    if (!files) {
      files = this.plugin.chain.get_all_tfiles();
    }
    return files.map(
      (x) => this.plugin.editor.get_frontmatter(x, "words")
    ).filter((x) => x);
  }
  sum_words_of_tifles(files = null, begt = 10, endt = 0) {
    files = this.get_words_of_tfiles(files);
    if (typeof begt == "number") {
      begt = (0, import_obsidian6.moment)().add(-begt, "days").format("YYYY-MM-DD");
    }
    if (typeof endt == "number") {
      endt = (0, import_obsidian6.moment)().add(-endt, "days").format("YYYY-MM-DD");
    }
    let startDate = new Date(begt);
    let endDate = new Date(endt);
    let dailyWordCounts = {};
    for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
      let dateStr = date.toISOString().split("T")[0];
      dailyWordCounts[dateStr] = 0;
    }
    files.forEach((file) => {
      let lastWordCount = 0;
      let earliestDate = new Date(Object.keys(file).sort()[0]);
      if (earliestDate < startDate) {
        lastWordCount = file[earliestDate.toISOString().split("T")[0]];
      }
      for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
        let dateStr = date.toISOString().split("T")[0];
        if (file.hasOwnProperty(dateStr)) {
          lastWordCount = file[dateStr];
        }
        dailyWordCounts[dateStr] += lastWordCount;
      }
    });
    return dailyWordCounts;
  }
  diff_words_of_tifles(dailyWordCounts, first_as_zero = true) {
    let dailyNewWordCounts = {};
    let previousTotal = 0;
    let first = "";
    for (let date in dailyWordCounts) {
      if (first === "") {
        first = date;
      }
      let currentTotal = dailyWordCounts[date];
      dailyNewWordCounts[date] = currentTotal - previousTotal;
      previousTotal = currentTotal;
    }
    if (first_as_zero && first !== "") {
      dailyNewWordCounts[first] = 0;
    }
    return dailyNewWordCounts;
  }
};

// src/graph.ts
var import_obsidian7 = require("obsidian");
var NoteNode = class {
  constructor(tfile, plugin) {
    this.tfile = tfile;
    this.note2id = {};
    this.id = 0;
    this.plugin = plugin;
  }
  // 返回 IDXXXX
  get_id(tfile) {
    if (tfile.basename in this.note2id) {
      return this.note2id[tfile.basename];
    }
    let newId = `ID${this.id.toString().padStart(4, "0")}`;
    this.note2id[tfile.basename] = newId;
    this.id = this.id + 1;
    return newId;
  }
  // 返回IDXXXX["tfile.basename"]
  get_node(tfile) {
    let id = this.get_id(tfile);
    return `${id}("${tfile.basename}")`;
  }
  get_mehrmaid_node(node, avata = "") {
    if (node in this.note2id) {
      return this.note2id[node];
    }
    if (node.startsWith("subgraph ")) {
      return node.slice("subgraph ".length);
    }
    let newId = `ID${this.id.toString().padStart(4, "0")}`;
    this.note2id[node] = newId;
    this.id = this.id + 1;
    let tfile = this.plugin.chain.get_tfile(node);
    if (tfile) {
      if (avata == "") {
        avata = this.plugin.settings.avata;
      }
      let meta = this.plugin.editor.get_frontmatter(tfile, avata);
      if (meta) {
        if (meta.startsWith("#")) {
          node = `![[${tfile.basename}${meta}|no-head]]`;
        } else {
          node = meta.replace("SELF", `[[${tfile.basename}]]`);
        }
      }
    }
    return `${newId}("${node}")`;
  }
  get_canvas_node(node) {
    if (node in this.note2id) {
      return this.note2id[node];
    }
    let newId = `ID${this.id.toString().padStart(4, "0")}`;
    this.note2id[node] = newId;
    this.id = this.id + 1;
    return newId;
  }
  notes2class() {
    let msg = "\n";
    for (let tfile in this.note2id) {
      msg = msg + `	class ${this.note2id[tfile]} internal-link;
`;
    }
    return msg;
  }
};
var MermaidGraph = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.editor = plugin.editor;
  }
  get_note_node(tfile) {
    let node = new NoteNode(tfile, this.plugin);
    return node;
  }
  subgraph_chain(node, tfiles, subgraph = "", line = "<-->") {
    let msg = "";
    let items = tfiles.map((x) => x);
    let stab = "	";
    if (subgraph != "") {
      msg = msg + `
	subgraph ${subgraph}
`;
      stab = "		";
    }
    let i = 0;
    while (i < items.length - 1) {
      let prev = node.get_node(items[i]);
      let next = node.get_node(items[i + 1]);
      msg = msg + `${stab}${prev}${line}${next}
`;
      i = i + 1;
    }
    if (subgraph != "") {
      msg = msg + "	end\n";
    }
    return msg;
  }
  subgraph_links(node, tfiles, subgraph = "", line = "-->", tfiles_first = false) {
    let msg = "";
    let items = tfiles.map((x) => x);
    let stab = "	";
    if (subgraph != "") {
      msg = msg + `
	subgraph ${subgraph}
`;
      stab = "		";
    }
    let i = 0;
    let sid = node.get_node(node.tfile);
    while (i < items.length) {
      let id = node.get_node(items[i]);
      if (tfiles_first) {
        msg = msg + `${stab}${id}${line}${sid}
`;
      } else {
        msg = msg + `${stab}${sid}${line}${id}
`;
      }
      i = i + 1;
    }
    if (subgraph != "") {
      msg = msg + "	end\n";
    }
    return msg;
  }
  // [src,dst,io]
  edges_of_tfiles(tfiles, merge_inout = true) {
    let inlinks = {};
    let outlinks = {};
    for (let tfile of tfiles) {
      outlinks[tfiles.indexOf(tfile)] = this.plugin.chain.get_outlinks(tfile, true);
      inlinks[tfiles.indexOf(tfile)] = this.plugin.chain.get_inlinks(tfile, true);
    }
    let edges = [];
    for (let tfile of tfiles) {
      let i = tfiles.indexOf(tfile);
      for (let outlink of outlinks[i]) {
        if (tfiles.contains(outlink)) {
          if (tfiles.indexOf(outlink) <= i) {
            continue;
          }
          if (merge_inout) {
            if (inlinks[i].contains(outlink)) {
              edges.push([tfile, outlink, true]);
            } else {
              edges.push([tfile, outlink, false]);
            }
          } else {
            edges.push([tfile, outlink, false]);
          }
        }
      }
      for (let inlink of inlinks[i]) {
        if (tfiles.contains(inlink)) {
          if (tfiles.indexOf(inlink) <= i) {
            continue;
          }
          if (merge_inout) {
            if (!outlinks[i].contains(inlink)) {
              edges.push([inlink, tfile, false]);
            }
          } else {
            edges.push([inlink, tfile, false]);
          }
        }
      }
    }
    return edges;
  }
  subgraph_cross(node, tfiles, subgraph = "", line = "-->", tfiles_first = false) {
    let msg = "";
    let items = tfiles.map((x) => x);
    let stab = "	";
    if (subgraph != "") {
      msg = msg + `
	subgraph ${subgraph}
`;
      stab = "		";
    }
    let edges = this.edges_of_tfiles(tfiles);
    for (let edge of edges) {
      let sid = node.get_node(edge[0]);
      let did = node.get_node(edge[1]);
      if (edge[2]) {
        msg = msg + `${stab}${sid}<-.->${did}
`;
      } else {
        msg = msg + `${stab}${sid}-.->${did}
`;
      }
    }
    if (subgraph != "") {
      msg = msg + "	end\n";
    }
    return msg;
  }
  get_flowchart(tfile, N = 2, c_chain = "#F05454", c_inlink = "#776B5D", c_outlink = "#222831", c_anchor = "#40A578") {
    if (!tfile) {
      let leaf = this.plugin.chain.get_last_activate_leaf();
      if (leaf) {
        tfile = leaf.view.file;
      }
    }
    if (!tfile) {
      return "No File.";
    }
    let node = new NoteNode(tfile, this.plugin);
    let nc = this.plugin;
    let msg = "```mermaid\nflowchart TD\n";
    let chain = nc.chain.get_chain(tfile, N, N);
    msg = msg + this.subgraph_chain(node, chain, "\u7B14\u8BB0\u94FE");
    let inlinks = nc.chain.get_inlinks(tfile, true).filter((x) => !chain.contains(x));
    let outlinks = nc.chain.get_outlinks(tfile, true).filter((x) => !chain.contains(x));
    msg = msg + this.subgraph_links(node, inlinks, "\u5165\u94FE", "-->", true);
    msg = msg + this.subgraph_links(node, outlinks, "\u51FA\u94FE", "-->");
    msg = msg + node.notes2class();
    msg = msg + [
      "classDef \u7B14\u8BB0\u94FEC fill:" + c_chain,
      "classDef \u5165\u94FEC fill:" + c_inlink,
      "classDef \u51FA\u94FEC fill:" + c_outlink,
      `classDef Anchor fill:${c_anchor},stoke:${c_anchor}`,
      "class \u7B14\u8BB0\u94FE \u7B14\u8BB0\u94FEC",
      "class \u5165\u94FE \u5165\u94FEC",
      "class \u51FA\u94FE \u51FA\u94FEC",
      ""
    ].join("\n");
    msg = msg + "```";
    msg = msg.replace(
      `class ${node.get_id(tfile)} internal-link;`,
      `class ${node.get_id(tfile)} Anchor;`
    );
    return msg;
  }
  flowchart_folder(tfile, subgraph = "Folder", color = "#F05454", c_anchor = "#40A578") {
    if (!tfile) {
      let leaf = this.plugin.chain.get_last_activate_leaf();
      if (leaf) {
        tfile = leaf.view.file;
      }
    }
    if (!tfile) {
      return "No File.";
    }
    let tfiles = this.plugin.chain.get_brothers(tfile);
    return this.flowchart_cross(tfile, tfiles, subgraph, color, c_anchor);
  }
  flowchart_notechain(tfile, N = 10, subgraph = "NoteChain", color = "#F05454", c_anchor = "#40A578") {
    if (!tfile) {
      let leaf = this.plugin.chain.get_last_activate_leaf();
      if (leaf) {
        tfile = leaf.view.file;
      }
    }
    if (!tfile) {
      return "No File.";
    }
    let tfiles = this.plugin.chain.get_chain(tfile, N, N);
    return this.flowchart_cross(tfile, tfiles, subgraph, color, c_anchor);
  }
  flowchart_cross(anchor, tfiles, subgraph = "", color = "#F05454", c_anchor = "#40A578") {
    let node = new NoteNode(tfiles[0], this.plugin);
    let msg = "```mermaid\nflowchart TD\n";
    msg = msg + this.subgraph_cross(node, tfiles, subgraph);
    msg = msg + node.notes2class();
    msg = msg + [
      `classDef ${subgraph}C fill:${color}`,
      `classDef Anchor fill:${c_anchor},stoke:${c_anchor}`,
      `class ${subgraph} ${subgraph}C`,
      ""
    ].join("\n");
    msg = msg + "```";
    msg = msg.replace(
      `class ${node.get_id(anchor)} internal-link;`,
      `class ${node.get_id(anchor)} Anchor;`
    );
    return msg;
  }
  get_subgrah_names(group_name, tfiles, name = "group") {
    let nc = this.plugin;
    let items = {};
    for (let cfile of tfiles) {
      let cgroup = nc.editor.get_frontmatter(cfile, name);
      if (cgroup && Array.isArray(cgroup)) {
        for (let cg of cgroup) {
          let tmp = cg.split("/");
          if (tmp[0] == group_name) {
            if (tmp.length == 1) {
              items[tfiles.indexOf(cfile)] = "";
            } else {
              items[tfiles.indexOf(cfile)] = tmp[1];
            }
            break;
          }
        }
      }
    }
    return items;
  }
  flowchart_groups(anchor, name = "group") {
    let nc = this.plugin;
    let tfiles = nc.chain.get_brothers(anchor);
    tfiles = nc.chain.get_group_links(tfiles, 1);
    let node = nc.mermaid.get_note_node(anchor);
    let group = nc.editor.get_frontmatter(anchor, name);
    if (!group || !Array.isArray(group)) {
      return [];
    }
    let res = [];
    for (let g of group) {
      g = g.split("/")[0];
      let items = this.get_subgrah_names(g, tfiles, name);
      let subs = new Set(Object.values(items));
      let msg = `\`\`\`mermaid
---
title: ${g}
---
flowchart TD
`;
      for (let sub of subs) {
        if (sub == "") {
          for (let idx in items) {
            if (items[idx] == sub) {
              msg = msg + "\n" + node.get_node(tfiles[idx]);
            }
          }
        } else {
          msg = msg + "\nsubgraph " + sub + "\n";
          for (let idx in items) {
            if (items[idx] == sub) {
              msg = msg + "\n	" + node.get_node(tfiles[idx]);
            }
          }
          msg = msg + "\nend";
        }
      }
      msg = msg + "\n" + this.subgraph_cross(node, Object.keys(items).map((x) => tfiles[x]));
      msg = msg + "\n" + node.notes2class();
      msg = msg + "\n```";
      res.push(msg);
    }
    return res;
  }
  get_relationship_graph(tfile, N = 1, key = "link", show_all_node = true) {
    let nc = this.plugin;
    let node = new NoteNode(tfile, this.plugin);
    let msg = "```mermaid\nflowchart TD\n";
    let tfiles = nc.chain.get_group_links([tfile], N);
    if (show_all_node) {
      for (let tfile2 of tfiles) {
        msg += `${node.get_node(tfile2)}
`;
      }
    }
    let processedFiles = /* @__PURE__ */ new Set();
    for (let currentFile of tfiles) {
      if (processedFiles.has(currentFile))
        continue;
      processedFiles.add(currentFile);
      let links = nc.editor.get_frontmatter(currentFile, key);
      if (links) {
        for (let [relation, linkedNote] of Object.entries(links)) {
          if (linkedNote instanceof Array) {
            for (let item of linkedNote) {
              let linkedTFile = nc.chain.get_tfile(item);
              if (linkedTFile instanceof import_obsidian7.TFile) {
                msg += `	${node.get_node(currentFile)} -->|${relation}| ${node.get_node(linkedTFile)}
`;
              }
            }
          } else {
            let linkedTFile = nc.chain.get_tfile(linkedNote);
            if (linkedTFile instanceof import_obsidian7.TFile) {
              msg += `	${node.get_node(currentFile)} -->|${relation}| ${node.get_node(linkedTFile)}
`;
            }
          }
        }
      }
    }
    msg = msg + node.notes2class();
    msg += "```";
    let c_anchor = "#40A578";
    msg = msg.replace(
      `class ${node.get_id(tfile)} internal-link;`,
      `classDef Anchor fill:${c_anchor},stoke:${c_anchor}
class ${node.get_id(tfile)} Anchor;`
    );
    return msg;
  }
  get_mehrmaid_graph(tfile, N = 1, key = "mermaid", c_anchor = "#d4c4b7", field = "avata") {
    if (!tfile) {
      let leaf = this.plugin.chain.get_last_activate_leaf();
      if (leaf) {
        tfile = leaf.view.file;
      }
    }
    if (!tfile) {
      return "No File.";
    }
    let nc = this.plugin;
    let node = new NoteNode(tfile, this.plugin);
    let msg = "```mehrmaid\nflowchart TD\n";
    let tfiles;
    if (N == -1) {
      tfiles = nc.chain.get_brothers(tfile);
    } else {
      tfiles = nc.chain.get_group_links([tfile], N);
    }
    tfiles = nc.chain.sort_tfiles_by_chain(tfiles);
    for (let currentFile of tfiles) {
      let src2 = `[[${currentFile.basename}]]`;
      let links = nc.editor.get_frontmatter(currentFile, key);
      if (links && Array.isArray(links)) {
        for (let link of links) {
          if (link["edge"] != null && link["node"] != null) {
            let cedge = link["edge"];
            let cnode = link["node"];
            if (cedge == "") {
              cedge = "";
            } else {
              cedge = `|"${cedge}"|`;
            }
            let line = "-->";
            if (link["line"]) {
              line = link["line"];
            }
            if (line[0] == "<" && line[line.length - 1] != ">") {
              line = line.slice(1) + ">";
              if (cnode instanceof Array) {
                for (let item of cnode) {
                  msg += `${node.get_mehrmaid_node(item, field)} ${line} ${cedge} ${node.get_mehrmaid_node(src2, field)}
`;
                }
              } else {
                msg += `${node.get_mehrmaid_node(cnode, field)} ${line} ${cedge} ${node.get_mehrmaid_node(src2, field)}
`;
              }
            } else {
              if (cnode instanceof Array) {
                for (let item of cnode) {
                  msg += `${node.get_mehrmaid_node(src2, field)} ${line} ${cedge} ${node.get_mehrmaid_node(item, field)}
`;
                }
              } else {
                msg += `${node.get_mehrmaid_node(src2, field)} ${line} ${cedge} ${node.get_mehrmaid_node(cnode, field)}
`;
              }
            }
          } else {
            if (link["group"]) {
              msg += `subgraph ${link["group"]}
	${node.get_mehrmaid_node(src2, field)}
end
`;
              if (link["color"]) {
                msg += `classDef ${link["group"]}Class fill:${link["color"]}
`;
                msg += `class ${link["group"]} ${link["group"]}Class
`;
              }
            }
          }
        }
      }
    }
    let src = `[[${tfile.basename}]]`;
    msg += `${node.get_mehrmaid_node(src)}
`;
    if (c_anchor) {
      msg += `classDef Anchor fill:${c_anchor},stoke:${c_anchor}
class ${node.get_mehrmaid_node(src)} Anchor;
`;
    }
    msg += "```";
    return msg;
  }
};
var CanvasGraph = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.editor = plugin.editor;
  }
  gen_random_string(length) {
    let characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let randomString = "";
    for (let i = 0; i < length; i++) {
      let randomIndex = Math.floor(Math.random() * characters.length);
      randomString += characters.charAt(randomIndex);
    }
    return randomString;
  }
  new_note_node(tfile) {
    let node = new NoteNode(tfile, this.plugin);
    return node;
  }
  gen_node(NN, tfile, x = 0, y = 0, width = 400, height = 400) {
    let rsp = {};
    if (typeof tfile == "string") {
      rsp["type"] = "text";
      rsp["text"] = tfile;
      rsp["id"] = NN.get_canvas_node(rsp["text"]);
    } else {
      rsp["type"] = "file";
      if (tfile instanceof import_obsidian7.TFolder) {
        rsp["file"] = tfile.path + "/" + tfile.name + ".md";
      } else {
        rsp["file"] = tfile.path;
      }
      rsp["id"] = NN.get_canvas_node(rsp["file"]);
    }
    rsp["x"] = x;
    rsp["y"] = y;
    rsp["height"] = height;
    rsp["width"] = width;
    return rsp;
  }
  rc_of_sequence(i, r, c) {
    let row = Math.floor((i - 1) / c) + 1;
    let col = row % 2 === 1 ? (i - 1) % c + 1 : c - (i - 1) % c;
    return [row, col];
  }
  async note_to_canvas(tfile, nrow = 1, ncol = 1, width = 400, height = 400, wmarin = 100, hmargin = 100, write = true) {
    let content = await this.plugin.app.vault.read(tfile);
    let titles = [...content.matchAll(/^(#+)\s+(.+)/gm)];
    if (nrow * ncol < titles.length) {
      ncol = Math.ceil(titles.length / nrow);
    }
    let nodes = [];
    let i = 0;
    let NN = this.new_note_node(tfile);
    for (let match of titles) {
      i = i + 1;
      let title = `![[${tfile.basename}#${match[2]}]]`;
      let pos = this.rc_of_sequence(i, nrow, ncol);
      let node = this.gen_node(
        NN = NN,
        title,
        pos[1] * (width + wmarin),
        pos[0] * (height + hmargin),
        width = width,
        height = height
      );
      nodes.push(node);
    }
    let res = {
      "nodes": nodes,
      "edges": []
    };
    if (write) {
      let path = this.path_md2canvas(tfile);
      await this.write_canvas_file(res, path);
    }
    return res;
  }
  async write_canvas_file(canvas, path) {
    let msg = JSON.stringify(canvas);
    let canvasFile = this.plugin.app.vault.getAbstractFileByPath(path);
    if (canvasFile) {
      await this.plugin.app.vault.modify(canvasFile, msg);
    } else {
      await this.plugin.app.vault.create(path, msg);
    }
  }
  path_md2canvas(tfile) {
    return tfile.path.replace(".md", ".canvas");
  }
};

// src/setting.ts
var import_obsidian8 = require("obsidian");
var DEFAULT_SETTINGS = {
  PrevChain: "10",
  NextChain: "10",
  field_of_display_text: "notechain.display",
  field_of_confluence_tab_format: "notechain.level",
  field_of_background_color: "notechain.style",
  auto_notechain: false,
  notice_while_modify_chain: false,
  refreshDataView: true,
  refreshTasks: true,
  isSortFileExplorer: true,
  isFolderFirst: true,
  isdraged: true,
  suggesterNotesMode: "",
  wordcout: true,
  wordcountxfolder: "",
  modal_default_width: 800,
  modal_default_height: 600,
  avata: "avata",
  tpl_tags_folder: "\u811A\u672C\u7B14\u8BB0\nScriptNote"
};
var NCSettingTab = class extends import_obsidian8.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_isSortFileExplorer).addToggle(
      (text) => text.setValue(this.plugin.settings.isSortFileExplorer).onChange(async (value) => {
        this.plugin.settings.isSortFileExplorer = value;
        await this.plugin.saveSettings();
        this.plugin.explorer.sort();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_isFolderFirst).addToggle(
      (text) => text.setValue(this.plugin.settings.isFolderFirst).onChange(async (value) => {
        this.plugin.settings.isFolderFirst = value;
        await this.plugin.saveSettings();
        this.plugin.explorer.sort();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_isdraged).addToggle(
      (text) => text.setValue(this.plugin.settings.isdraged).onChange(async (value) => {
        this.plugin.settings.isdraged = value;
        await this.plugin.saveSettings();
        this.plugin.explorer.sort();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_PrevChain).addText((text) => text.setValue(this.plugin.settings.PrevChain).onChange(async (value) => {
      this.plugin.settings.PrevChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_suggesterNotesMode).addDropdown((dropdown) => dropdown.addOption("item_get_brothers", this.plugin.strings.item_get_brothers).addOption("item_uncle_notes", this.plugin.strings.item_uncle_notes).addOption("item_notechain", this.plugin.strings.item_notechain).addOption("item_same_folder", this.plugin.strings.item_same_folder).addOption("item_inlinks_outlinks", this.plugin.strings.item_inlinks_outlinks).addOption("item_inlins", this.plugin.strings.item_inlins).addOption("item_outlinks", this.plugin.strings.item_outlinks).addOption("item_all_noes", this.plugin.strings.item_all_noes).addOption("item_recent", this.plugin.strings.item_recent).addOption("", "").setValue(this.plugin.settings.suggesterNotesMode).onChange(async (value) => {
      this.plugin.settings.suggesterNotesMode = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_NextChain).addText((text) => text.setValue(this.plugin.settings.NextChain).onChange(async (value) => {
      this.plugin.settings.NextChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_auto_notechain).addToggle(
      (text) => text.setValue(this.plugin.settings.auto_notechain).onChange(async (value) => {
        this.plugin.settings.auto_notechain = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_field_of_display_text).addText((text) => text.setValue(this.plugin.settings.field_of_display_text).onChange(async (value) => {
      this.plugin.settings.field_of_display_text = value;
      this.plugin.explorer.set_display_text();
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_confluence_tab_format).addText((text) => text.setValue(this.plugin.settings.field_of_confluence_tab_format).onChange(async (value) => {
      this.plugin.settings.field_of_confluence_tab_format = value;
      this.plugin.explorer.set_display_text();
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_field_of_background_color).addText((text) => text.setValue(this.plugin.settings.field_of_background_color).onChange(async (value) => {
      this.plugin.settings.field_of_background_color = value;
      this.plugin.explorer.set_fileitem_style();
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_notice_while_modify_chain).addToggle(
      (text) => text.setValue(this.plugin.settings.notice_while_modify_chain).onChange(async (value) => {
        this.plugin.settings.notice_while_modify_chain = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_refreshDataView).addToggle(
      (text) => text.setValue(this.plugin.settings.refreshDataView).onChange(async (value) => {
        this.plugin.settings.refreshDataView = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_refreshTasks).addToggle(
      (text) => text.setValue(this.plugin.settings.refreshTasks).onChange(async (value) => {
        this.plugin.settings.refreshTasks = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_wordcout).addToggle(
      (text) => text.setValue(this.plugin.settings.wordcout).onChange(async (value) => {
        this.plugin.settings.wordcout = value;
        await this.plugin.saveSettings();
        this.plugin.wordcout.register();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_wordcout_xfolder).addTextArea(
      (text) => text.setValue(this.plugin.settings.wordcountxfolder).onChange(async (value) => {
        this.plugin.settings.wordcountxfolder = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_avata).addTextArea(
      (text) => text.setValue(this.plugin.settings.avata).onChange(async (value) => {
        this.plugin.settings.avata = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_templater_tag).addTextArea(
      (text) => text.setValue(this.plugin.settings.tpl_tags_folder).onChange(async (value) => {
        this.plugin.settings.tpl_tags_folder = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/commands.ts
var import_obsidian9 = require("obsidian");
var cmd_longform2notechain = (plugin) => ({
  id: "longform2notechain",
  name: plugin.strings.cmd_longform2notechain,
  icon: "git-pull-request-create-arrow",
  callback: async () => {
    let curr = plugin.chain.current_note;
    if (curr == null || curr.parent == null) {
      return;
    }
    curr = await plugin.chain.get_folder_note(curr.parent, false);
    if (curr == null) {
      return;
    }
    plugin.app.fileManager.processFrontMatter(
      curr,
      async (fm) => {
        async function set_confluence_level(scenes2, level = 0) {
          if (Array.isArray(scenes2)) {
            for (let scene of scenes2) {
              if (Array.isArray(scene)) {
                set_confluence_level(scene, level + 1);
              } else {
                set_confluence_level(scene, level);
              }
            }
          } else if (typeof scenes2 === "string") {
            let note = plugin.chain.get_tfile(scenes2);
            if (note) {
              let slevel = "	".repeat(level);
              let prelevel = plugin.editor.get_frontmatter(note, plugin.settings.field_of_confluence_tab_format);
              if (prelevel == slevel || prelevel == null && slevel == "") {
                return;
              }
              await plugin.editor.set_frontmatter(
                note,
                plugin.settings.field_of_confluence_tab_format,
                slevel
              );
            }
          }
        }
        if (!curr) {
          return;
        }
        if (fm["longform"] == null) {
          return;
        }
        let scenes = plugin.utils.concat_array(fm.longform.scenes);
        await set_confluence_level(fm.longform.scenes);
        let ignoredFiles = plugin.utils.concat_array(fm.longform.ignoredFiles);
        await set_confluence_level(fm.longform.ignoredFiles);
        ignoredFiles = ignoredFiles.filter((f) => !scenes.contains(f));
        let notes = plugin.utils.concat_array([scenes, ignoredFiles]);
        if (!notes || notes.length == 0) {
          return;
        }
        if (!notes.contains(curr.basename)) {
          notes.unshift(curr.basename);
        }
        notes = notes.map((f) => plugin.chain.get_tfile(f));
        if (curr.parent == null) {
          return;
        }
        ;
        let tfiles = plugin.chain.get_tfiles_of_folder(curr.parent).filter((f) => !notes.contains(f));
        notes = plugin.utils.concat_array([tfiles, notes]);
        await plugin.chain.chain_concat_tfiles(notes);
        plugin.explorer.sort();
      }
    );
  }
});
var cmd_longform4notechain = (plugin) => ({
  id: "longform4notechain",
  name: plugin.strings.cmd_longform4notechain,
  icon: "git-pull-request-draft",
  callback: async () => {
    let nc = plugin;
    let curr = plugin.chain.current_note;
    if (curr == null || curr.parent == null) {
      return;
    }
    let path = curr.parent.path + "/" + curr.parent.name + ".md";
    let dst = await nc.chain.get_tfile(path);
    if (dst == null) {
      dst = await plugin.app.vault.create(
        curr.parent.path + "/" + curr.parent.name + ".md",
        ""
      );
    }
    await plugin.app.fileManager.processFrontMatter(
      dst,
      (fm) => {
        if (fm["longform"] == null) {
          fm["longform"] = {
            "format": "scenes",
            "title": dst.parent.name,
            "workflow": "Default Workflow",
            "sceneFolder": "/",
            "scenes": [],
            "ignoredFiles": []
          };
        }
        if (dst == null) {
          return;
        }
        if (dst.parent == null) {
          return;
        }
        ;
        if (fm["longform"] == null) {
          return;
        }
        let notes = plugin.chain.get_tfiles_of_folder(dst.parent);
        notes = plugin.chain.sort_tfiles_by_chain(notes);
        let levels = notes.map((f) => plugin.chain.get_confluence_level(f));
        notes = notes.map((x) => x.basename);
        if (notes.length > 0) {
          let source = `scenes:
`;
          for (let i in notes) {
            let note = notes[i];
            let level = levels[i];
            source += "  ";
            for (let j = -1; j < level; j++) {
              source += `- `;
            }
            source += `${note}
`;
          }
          let config = plugin.easyapi.editor.yamljs.load(source);
          notes = config["scenes"];
        }
        fm.longform.scenes = notes;
      }
    );
    await nc.chain.open_note(dst);
  }
});
var cmd_sort_file_explorer = (plugin) => ({
  id: "sort_file_explorer",
  name: plugin.strings.cmd_sort_file_explorer,
  icon: "lucide-refresh-cw",
  callback: async () => {
    await plugin.explorer.sort(0, true);
    await plugin.explorer.set_fileitem_style();
    await plugin.explorer.set_display_text();
  }
});
var cmd_open_notes_smarter = (plugin) => ({
  id: "open_notes_smarter",
  name: plugin.strings.cmd_open_notes_smarter,
  icon: "binoculars",
  callback: () => {
    plugin.open_note_smarter();
  }
});
var cmd_open_note = (plugin) => ({
  id: "suggestor_open_note",
  name: plugin.strings.cmd_open_note,
  icol: "square-arrow-out-up-right",
  callback: () => {
    plugin.chain.sugguster_open_note();
  }
});
var cmd_open_prev_note = (plugin) => ({
  id: "open_prev_notes",
  name: plugin.strings.cmd_open_prev_note,
  icon: "file-output",
  callback: () => {
    plugin.chain.open_prev_notes();
  }
});
var cmd_open_next_note = (plugin) => ({
  id: "open_next_notes",
  name: plugin.strings.cmd_open_next_note,
  icon: "file-input",
  callback: () => {
    plugin.chain.open_next_notes();
  }
});
var clear_inlinks = (plugin) => ({
  id: "clear_inlinks",
  name: plugin.strings.clear_inlinks,
  icon: "unlink",
  callback: () => {
    plugin.clear_inlinks();
  }
});
var move_file_to_another_folder = (plugin) => ({
  id: "move_file_to_another_folder",
  name: plugin.strings.move_file_to_another_folder,
  icon: "folder-tree",
  callback: () => {
    plugin.chain.cmd_move_file_to_another_folder();
  }
});
var replace_notes_with_regx = (plugin) => ({
  id: "replace_notes_with_regx",
  name: plugin.strings.replace_notes_with_regx,
  icon: "regex",
  callback: () => {
    plugin.replace_notes_with_regx();
  }
});
var chain_insert_node = (plugin) => ({
  id: "chain_insert_node",
  name: plugin.strings.chain_insert_node,
  icon: "git-branch-plus",
  callback: async () => {
    await plugin.cmd_chain_insert_node();
    await plugin.explorer.sort(500);
  }
});
var chain_set_seq_note = (plugin) => ({
  id: "chain_set_seq_note",
  name: plugin.strings.chain_set_seq_note,
  icon: "wind-arrow-down",
  callback: async () => {
    await plugin.chain.chain_suggester_tfiles();
    plugin.explorer.sort();
  }
});
var chain_move_up_node = (plugin) => ({
  id: "chain_move_up_node",
  name: plugin.strings.chain_move_up_node,
  icon: "arrow-up-from-line",
  callback: async () => {
    let tfile = plugin.chain.current_note;
    if (tfile) {
      let anchor = plugin.chain.get_prev_note(tfile);
      if (anchor) {
        await plugin.chain.chain_insert_node_before(
          tfile,
          anchor
        );
        await plugin.explorer.sort();
      }
    }
  }
});
var chain_move_down_node = (plugin) => ({
  id: "chain_move_donw_node",
  name: plugin.strings.chain_move_down_node,
  icon: "arrow-down-from-line",
  callback: async () => {
    let tfile = plugin.chain.current_note;
    if (tfile) {
      let anchor = plugin.chain.get_next_note(tfile);
      if (anchor) {
        await plugin.chain.chain_insert_node_after(
          tfile,
          anchor
        );
        await plugin.explorer.sort();
      }
    }
  }
});
var create_new_note = (plugin) => ({
  id: "create_new_note",
  name: plugin.strings.create_new_note,
  icon: "file-plus",
  callback: async () => {
    let targets = {};
    targets[plugin.strings.item_chain_insert_node_after] = "chain_insert_node_after";
    targets[plugin.strings.item_chain_insert_node_as_tail] = "chain_insert_node_as_tail";
    targets[plugin.strings.item_chain_insert_node_before] = "chain_insert_node_before";
    targets[plugin.strings.item_chain_insert_node_as_head] = "chain_insert_node_as_head";
    targets[plugin.strings.item_item_chain_insert_null] = "null";
    let target = await plugin.dialog_suggest(
      plugin.utils.array_prefix_id(Object.keys(targets)),
      Object.values(targets),
      true
    );
    if (!target) {
      return;
    }
    let name = await plugin.dialog_prompt(plugin.strings.prompt_notename);
    if (name) {
      let curr = plugin.chain.current_note;
      if (curr && curr.parent) {
        let path = curr.parent.path + "/" + name + ".md";
        let dst = await plugin.chain.get_tfile(path);
        if (dst == null) {
          dst = await plugin.app.vault.create(
            curr.parent.path + "/" + name + ".md",
            ""
          );
          if (!(target === "null")) {
            await plugin.chain[target](dst, curr);
            if (target == "chain_insert_node_after" || target == "chain_insert_node_before") {
              await plugin.editor.set_frontmatter_align_file(
                curr,
                dst,
                plugin.settings.field_of_confluence_tab_format
              );
            }
          }
          await plugin.chain.open_note(dst);
          await plugin.explorer.sort();
        }
      }
    }
  }
});
var cmd_reveal_note = (plugin) => ({
  id: "cmd_reveal_note",
  name: plugin.strings.cmd_reveal_note,
  icon: "locate",
  callback: async () => {
    let nc = plugin;
    let note = nc.chain.current_note;
    if (note) {
      await plugin.app.commands.executeCommandById("file-explorer:open");
      await nc.explorer.file_explorer.tree.setCollapseAll(true);
      await nc.explorer.file_explorer.revealInFolder(note);
      await sleep(100);
      let containerEl = nc.explorer.file_explorer.containerEl;
      let panel = containerEl.querySelector(".nav-files-container");
      let itemEl = containerEl.querySelector(`[data-path="${note.path}"]`);
      if (panel && itemEl && itemEl.offsetTop) {
        let xtop = panel.scrollTop + (itemEl.offsetTop - (panel.scrollTop + panel.clientHeight / 2));
        panel.scrollTo({ top: xtop, behavior: "smooth" });
      }
    }
  }
});
var cmd_open_and_reveal_note = (plugin) => ({
  id: "cmd_open_and_reveal_note",
  name: plugin.strings.cmd_open_and_reveal_note,
  icon: "map-pin-house",
  callback: async () => {
    let nc = plugin;
    let note = await nc.chain.sugguster_note();
    if (note) {
      await nc.chain.open_note(note);
      await nc.explorer.file_explorer.tree.setCollapseAll(true);
      await nc.explorer.file_explorer.revealInFolder(note);
      await sleep(100);
      let containerEl = nc.explorer.file_explorer.containerEl;
      let panel = containerEl.querySelector(".nav-files-container");
      let itemEl = containerEl.querySelector(`[data-path="${note.path}"]`);
      if (panel && itemEl && itemEl.offsetTop) {
        let xtop = panel.scrollTop + (itemEl.offsetTop - (panel.scrollTop + panel.clientHeight / 2));
        panel.scrollTo({ top: xtop, behavior: "smooth" });
      }
    }
  }
});
var cmd_open_prev_note_of_right_leaf = (plugin) => ({
  id: "cmd_open_prev_note_of_right_leaf",
  name: plugin.strings.cmd_open_prev_note_of_right_leaf,
  icon: "file-output",
  callback: async () => {
    let nc = plugin;
    let leaf = nc.chain.get_last_activate_leaf();
    if (leaf) {
      let prev = nc.chain.get_prev_note(leaf.view.file);
      if (prev) {
        await leaf.openFile(prev, { active: false });
        await nc.app.workspace.trigger("file-open", leaf);
      }
    }
  }
});
var cmd_open_next_note_of_right_leaf = (plugin) => ({
  id: "cmd_open_next_note_of_right_leaf",
  name: plugin.strings.cmd_open_next_note_of_right_leaf,
  icon: "file-input",
  callback: async () => {
    let nc = plugin;
    let leaf = nc.chain.get_last_activate_leaf();
    if (leaf) {
      let next = nc.chain.get_next_note(leaf.view.file);
      if (next) {
        await leaf.openFile(next, { active: false });
        await nc.app.workspace.trigger("file-open", leaf);
      }
    }
  }
});
var cmd_file_open_with_system_app = (plugin) => ({
  id: "cmd_file_open_with_system_app",
  name: plugin.strings.cmd_file_open_with_system_app,
  icon: "book-open",
  callback: async () => {
    let nc = plugin;
    if (nc.app.isMobile) {
      return;
    }
    let tfile = nc.chain.current_note;
    if (tfile) {
      let items = await nc.chain.get_file_links(tfile);
      let keys = Object.keys(items);
      let key = await nc.dialog_suggest(
        nc.utils.array_prefix_id(keys),
        keys
      );
      if (key) {
        let item = items[key];
        let electron = require("electron");
        electron.remote.shell.openPath(item);
      }
    }
  }
});
var cmd_file_show_in_system_explorer = (plugin) => ({
  id: "cmd_file_show_in_system_explorer",
  name: plugin.strings.cmd_file_show_in_system_explorer,
  icon: "book-open-text",
  callback: async () => {
    let nc = plugin;
    if (nc.app.isMobile) {
      return;
    }
    let tfile = nc.chain.current_note;
    if (tfile) {
      let items = await nc.chain.get_file_links(tfile);
      let keys = Object.keys(items);
      let key = await nc.dialog_suggest(
        nc.utils.array_prefix_id(keys),
        keys
      );
      if (key) {
        let item = items[key];
        let electron = require("electron");
        electron.remote.shell.showItemInFolder(item);
      }
    }
  }
});
var cmd_file_rename = (plugin) => ({
  id: "cmd_file_rename",
  name: plugin.strings.cmd_file_rename,
  icon: "pen-line",
  callback: async () => {
    let nc = plugin;
    if (nc.app.isMobile) {
      return;
    }
    let tfile = nc.chain.current_note;
    if (tfile) {
      let items = {};
      let links = nc.chain.get_inlinks(tfile, false);
      for (let i of links) {
        if (i.extension === "md") {
          items["\u2139\uFE0F " + i.basename] = i;
        } else {
          items["\u2139\uFE0F " + i.name] = i;
        }
      }
      links = nc.chain.get_outlinks(tfile, false);
      for (let i of links) {
        if (i.extension === "md") {
          items["\u{1F17E}\uFE0F " + i.basename] = i;
        } else {
          items["\u{1F17E}\uFE0F " + i.name] = i;
        }
      }
      let keys = Object.keys(items);
      let key = await nc.dialog_suggest(
        nc.utils.array_prefix_id(keys),
        keys
      );
      if (key) {
        let note = items[key];
        let res = await nc.dialog_prompt("New Name", "", note.basename);
        if (res && !(res === note.basename) && !(res === "")) {
          let npath = note.parent.path + "/" + res + "." + note.extension;
          let dst = nc.chain.get_tfile(res + "." + note.extension);
          if (dst) {
            new import_obsidian9.Notice("Exist:" + res + note.extension, 3e3);
          } else {
            nc.app.fileManager.renameFile(note, npath);
          }
        }
      }
    }
  }
});
var cmd_mermaid_flowchart_link = (plugin) => ({
  id: "cmd_mermaid_flowchart_link",
  name: plugin.strings.cmd_mermaid_flowchart_link,
  icon: "file-heart",
  callback: async () => {
    const content = "```dataviewjs\nlet nc=app.plugins.getPlugin('note-chain');\nlet msg =nc.mermaid.get_flowchart(null,2);\ndv.span(msg)\n```";
    await plugin.chain.open_note_in_modal(content);
  }
});
var cmd_mermaid_flowchart_folder = (plugin) => ({
  id: "cmd_mermaid_flowchart_folder",
  name: plugin.strings.cmd_mermaid_flowchart_folder,
  icon: "folder-heart",
  callback: async () => {
    const content = "```dataviewjs\nlet nc=app.plugins.getPlugin('note-chain');\nlet msg =nc.mermaid.flowchart_folder(null,'Folder');\ndv.span(msg)\n```";
    await plugin.chain.open_note_in_modal(content);
  }
});
var cmd_mermaid_flowchart_auto = (plugin) => ({
  id: "cmd_mermaid_flowchart_auto",
  name: plugin.strings.cmd_mermaid_flowchart_auto,
  icon: "heart",
  callback: async () => {
    const content = "```dataviewjs\nlet nc=app.plugins.getPlugin('note-chain');\nlet msg =nc.mermaid.get_mehrmaid_graph(null,4,'mermaid');\ndv.span(msg)\n```";
    await plugin.chain.open_note_in_modal(content);
  }
});
var cmd_execute_template_modal = (plugin) => ({
  id: "cmd_execute_template_modal",
  name: plugin.strings.cmd_execute_template_modal,
  icon: "file-terminal",
  callback: async () => {
    let tpl = plugin.app.plugins.plugins["templater-obsidian"];
    if (!tpl) {
      return;
    }
    let tfiles = [];
    let folder = plugin.app.vault.getFolderByPath(tpl.settings.templates_folder);
    if (folder) {
      let xfiles = plugin.chain.get_tfiles_of_folder(folder, true);
      let tfile2 = plugin.chain.get_tfile(folder.path + "/" + folder.name + ".md");
      let infiles = plugin.chain.get_links(tfile2);
      for (let f of infiles) {
        if (!xfiles.contains(f)) {
          xfiles.push(f);
        }
      }
      xfiles = plugin.chain.sort_tfiles_by_chain(xfiles);
      for (let f of xfiles) {
        tfiles.push(f);
      }
    }
    let items = plugin.settings.tpl_tags_folder.trim().split("\n");
    if (items.length > 0) {
      for (let item of items) {
        let xfiles = plugin.chain.get_group(item);
        for (let f of xfiles) {
          if (!tfiles.contains(f)) {
            tfiles.push(f);
          }
        }
      }
    }
    let tfile = await plugin.chain.sugguster_note(tfiles, 0, true);
    if (tfile) {
      let res = await plugin.utils.parse_templater(plugin.app, tfile.basename);
      let txt = res.join("\n").trim();
      let view = plugin.app.workspace.getActiveFileView();
      if (view) {
        view.editor.replaceSelection(txt);
      }
    }
  }
});
var cmd_toogle_css_block_in_note = (plugin) => ({
  id: "cmd_toogle_css_block_in_note",
  name: plugin.strings.cmd_toogle_css_block_in_note,
  icon: "atom",
  callback: async () => {
    await plugin.utils.toogle_note_css(plugin.app, document, "/");
  }
});
var cmd_set_frontmatter = (plugin) => ({
  id: "cmd_set_frontmatter",
  name: plugin.strings.cmd_set_frontmatter,
  icon: "database",
  callback: async () => {
    let files = plugin.chain.get_selected_files(true);
    if (files.length == 0) {
      return;
    }
    let field = await plugin.dialog_prompt("Frontmatter name");
    if (!field) {
      return;
    }
    let prev = plugin.editor.get_frontmatter(files[0], field);
    if (prev) {
      if (Array.isArray(prev)) {
        prev = prev.map((x) => x.toString()).join("\n");
      } else {
        prev = prev.toString();
      }
    } else {
      prev = "";
    }
    let value = await plugin.dialog_prompt("Frontmatter value", "", prev);
    value = value.trim();
    if (!value) {
      return;
    }
    value = value.replace(/\\n/g, "\n").replace(/\\t/g, "	");
    value = value.split("\n");
    value = value.map((x) => {
      if (x.match(/^-?\d+$/)) {
        return parseInt(x);
      } else if (x.match(/^-?\d+(\.\d*)?$/)) {
        return parseFloat(x);
      } else {
        return x;
      }
    });
    if (value.length == 1) {
      value = value[0];
    }
    for (let tfile of files) {
      await plugin.editor.set_frontmatter(tfile, field, value, 1);
    }
  }
});
var cmd_move_next_level = (plugin) => ({
  id: "move_next_level",
  name: plugin.strings.cmd_move_next_level,
  hotkeys: [{ modifiers: ["Mod", "Shift"], key: "L" }],
  icon: "arrow-right-from-line",
  callback: async () => {
    let key = plugin.settings.field_of_confluence_tab_format;
    if (!key) {
      return;
    }
    let tfiles = plugin.chain.get_selected_files();
    for (let tfile of tfiles) {
      let level = plugin.editor.get_frontmatter(tfile, key);
      if (!level) {
        await plugin.editor.set_frontmatter(tfile, key, "	", 1);
      } else {
        await plugin.editor.set_frontmatter(tfile, key, level + "	", 1);
      }
    }
  }
});
var cmd_move_none_level = (plugin) => ({
  id: "move_none_level",
  name: plugin.strings.cmd_move_none_level,
  hotkeys: [{ modifiers: ["Mod", "Shift"], key: "K" }],
  icon: "align-justify",
  callback: async () => {
    let key = plugin.settings.field_of_confluence_tab_format;
    if (!key) {
      return;
    }
    let tfiles = plugin.chain.get_selected_files();
    for (let tfile of tfiles) {
      let level = plugin.editor.get_frontmatter(tfile, key);
      if (level) {
        await plugin.editor.set_frontmatter(tfile, key, "", 1);
      }
    }
  }
});
var cmd_move_prev_level = (plugin) => ({
  id: "move_prev_level",
  name: plugin.strings.cmd_move_prev_level,
  hotkeys: [{ modifiers: ["Mod", "Shift"], key: "J" }],
  icon: "arrow-left-from-line",
  callback: async () => {
    let key = plugin.settings.field_of_confluence_tab_format;
    if (!key) {
      return;
    }
    let tfiles = plugin.chain.get_selected_files();
    for (let tfile of tfiles) {
      let level = plugin.editor.get_frontmatter(tfile, key);
      if (level) {
        await plugin.editor.set_frontmatter(tfile, key, level.slice(1), 1);
      }
    }
  }
});
var cmd_insert_command_id = (plugin) => ({
  id: "insert_command_id",
  name: plugin.strings.cmd_insert_command_id,
  icon: "terminal",
  callback: async () => {
    var _a;
    let editor = (_a = plugin.app.workspace.getActiveFileView()) == null ? void 0 : _a.editor;
    if (!editor) {
      return;
    }
    let ids = {};
    Object.keys(
      plugin.app.commands.commands
    ).forEach(
      (x) => {
        ids[plugin.app.commands.commands[x].name] = x;
      }
    );
    let names = Object.keys(ids);
    let msg = plugin.utils.array_prefix_id(names);
    let cmd = await plugin.dialog_suggest(msg, names);
    if (cmd) {
      editor.replaceSelection(ids[cmd]);
    }
  }
});
var cmd_open_note_in_modal = (plugin) => ({
  id: "cmd_open_note_in_modal",
  name: plugin.strings.cmd_open_note_in_modal,
  icon: "Laptop",
  callback: async () => {
    let note = await plugin.chain.sugguster_note();
    if (note) {
      plugin.chain.open_note_in_modal(note.path);
    }
  }
});
var cmd_open_note_in_view = (plugin) => ({
  id: "cmd_open_note_in_view",
  name: plugin.strings.cmd_open_note_in_view,
  icon: "Panels Top Left",
  callback: async () => {
    let note = await plugin.chain.sugguster_note();
    if (note) {
      plugin.chain.open_note_in_view(note.path);
    }
  }
});
var commandBuilders = [
  cmd_open_note,
  cmd_reveal_note,
  cmd_open_and_reveal_note,
  cmd_open_prev_note,
  cmd_open_next_note,
  cmd_open_prev_note_of_right_leaf,
  cmd_open_next_note_of_right_leaf,
  cmd_open_notes_smarter,
  cmd_longform2notechain,
  cmd_longform4notechain,
  cmd_sort_file_explorer,
  clear_inlinks,
  replace_notes_with_regx,
  move_file_to_another_folder,
  chain_insert_node,
  chain_set_seq_note,
  create_new_note,
  chain_move_up_node,
  chain_move_down_node,
  cmd_file_rename,
  cmd_mermaid_flowchart_link,
  cmd_mermaid_flowchart_folder,
  cmd_mermaid_flowchart_auto,
  cmd_execute_template_modal,
  cmd_toogle_css_block_in_note,
  cmd_set_frontmatter,
  cmd_move_next_level,
  cmd_move_none_level,
  cmd_move_prev_level,
  cmd_insert_command_id,
  cmd_open_note_in_modal,
  cmd_open_note_in_view
];
var commandBuildersDesktop = [
  cmd_file_open_with_system_app,
  cmd_file_show_in_system_explorer
];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
  if (plugin.app.isMobile == false) {
    commandBuildersDesktop.forEach((c) => {
      plugin.addCommand(c(plugin));
    });
  }
}

// src/gui/inputSuggester.ts
var import_obsidian10 = require("obsidian");
var InputSuggester = class extends import_obsidian10.FuzzySuggestModal {
  constructor(app, displayItems, items, options = {}, new_value = false) {
    super(app);
    this.displayItems = displayItems;
    this.items = items;
    this.new_value = new_value;
    this.promise = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.inputEl.addEventListener("keydown", (event) => {
      var _a;
      if (event.code !== "Tab") {
        return;
      }
      const self = this;
      const { values, selectedItem } = self.chooser;
      const { value } = this.inputEl;
      this.inputEl.value = (_a = values[selectedItem].item) != null ? _a : value;
    });
    if (options.placeholder)
      this.setPlaceholder(options.placeholder);
    if (options.limit)
      this.limit = options.limit;
    if (options.emptyStateText)
      this.emptyStateText = options.emptyStateText;
    this.open();
  }
  static Suggest(app, displayItems, items, options = {}, new_value = false) {
    const newSuggester = new InputSuggester(
      app,
      displayItems,
      items,
      options,
      new_value
    );
    return newSuggester.promise;
  }
  getItemText(item) {
    if (item === this.inputEl.value)
      return item;
    return this.displayItems[this.items.indexOf(item)];
  }
  getItems() {
    if (this.inputEl.value === "" || !this.new_value)
      return this.items;
    return [...this.items, this.inputEl.value];
  }
  selectSuggestion(value, evt) {
    this.resolved = true;
    super.selectSuggestion(value, evt);
  }
  onChooseItem(item, evt) {
    this.resolved = true;
    this.resolvePromise(item);
  }
  onClose() {
    super.onClose();
    if (!this.resolved)
      this.rejectPromise("no input given.");
  }
};
async function dialog_suggest(displayItems, items, placeholder = "", new_value = false) {
  try {
    return await InputSuggester.Suggest(
      this.app,
      displayItems,
      items,
      {
        placeholder
      },
      new_value
    );
  } catch (error) {
    return null;
  }
}

// src/gui/inputPrompt.ts
var import_obsidian11 = require("obsidian");
var InputPrompt = class extends import_obsidian11.Modal {
  constructor(app, header, placeholder, value) {
    super(app);
    this.header = header;
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (!evt.isComposing && evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.placeholder = placeholder != null ? placeholder : "";
    this.input = value != null ? value : "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app, header, placeholder, value) {
    const newPromptModal = new InputPrompt(
      app,
      header,
      placeholder,
      value
    );
    return newPromptModal.waitForClose;
  }
  display() {
    this.containerEl.addClass("quickAddModal", "qaInputPrompt");
    this.contentEl.empty();
    this.titleEl.textContent = this.header;
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(
      mainContentContainer,
      this.placeholder,
      this.input
    );
    this.createButtonBar(mainContentContainer);
  }
  createInputField(container, placeholder, value) {
    const textComponent = new import_obsidian11.TextComponent(container);
    textComponent.inputEl.style.width = "100%";
    textComponent.setPlaceholder(placeholder != null ? placeholder : "").setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  createButton(container, text, callback) {
    const btn = new import_obsidian11.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    this.createButton(
      buttonBarContainer,
      "Ok",
      this.submitClickCallback
    ).setCta().buttonEl.style.marginRight = "0";
    this.createButton(
      buttonBarContainer,
      "Cancel",
      this.cancelClickCallback
    );
    buttonBarContainer.style.display = "flex";
    buttonBarContainer.style.flexDirection = "row-reverse";
    buttonBarContainer.style.justifyContent = "flex-start";
    buttonBarContainer.style.marginTop = "1rem";
    buttonBarContainer.style.gap = "0.5rem";
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener(
      "keydown",
      this.submitEnterCallback
    );
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
async function dialog_prompt(header = "Input", placeholder = "", value = "") {
  try {
    return await InputPrompt.Prompt(
      this.app,
      header,
      placeholder,
      value
    );
  } catch (e) {
    return null;
  }
}

// ../easyapi/src/easyapi/gui/inputSuggester.ts
var import_obsidian12 = require("obsidian");
var InputSuggester2 = class extends import_obsidian12.FuzzySuggestModal {
  constructor(app, displayItems, items, options = {}) {
    super(app);
    this.displayItems = displayItems;
    this.items = items;
    this.promise = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.inputEl.addEventListener("keydown", (event) => {
      var _a;
      if (event.code !== "Tab") {
        return;
      }
      const self = this;
      const { values, selectedItem } = self.chooser;
      const { value } = this.inputEl;
      this.inputEl.value = (_a = values[selectedItem].item) != null ? _a : value;
    });
    if (options.placeholder)
      this.setPlaceholder(options.placeholder);
    if (options.limit)
      this.limit = options.limit;
    if (options.emptyStateText)
      this.emptyStateText = options.emptyStateText;
    this.open();
  }
  static Suggest(app, displayItems, items, options = {}) {
    const newSuggester = new InputSuggester2(
      app,
      displayItems,
      items,
      options
    );
    return newSuggester.promise;
  }
  getItemText(item) {
    if (item === this.inputEl.value)
      return item;
    return this.displayItems[this.items.indexOf(item)];
  }
  getItems() {
    if (this.inputEl.value === "")
      return this.items;
    return [this.inputEl.value, ...this.items];
  }
  selectSuggestion(value, evt) {
    this.resolved = true;
    super.selectSuggestion(value, evt);
  }
  onChooseItem(item, evt) {
    this.resolved = true;
    this.resolvePromise(item);
  }
  onClose() {
    super.onClose();
    if (!this.resolved)
      this.rejectPromise("no input given.");
  }
};
async function dialog_suggest2(displayItems, items, placeholder = "") {
  try {
    return await InputSuggester2.Suggest(
      this.app,
      displayItems,
      items,
      {
        placeholder
      }
    );
  } catch (error) {
    return null;
  }
}

// ../easyapi/src/easyapi/gui/inputPrompt.ts
var import_obsidian13 = require("obsidian");
var InputPrompt2 = class extends import_obsidian13.Modal {
  constructor(app, header, placeholder, value) {
    super(app);
    this.header = header;
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (!evt.isComposing && evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.placeholder = placeholder != null ? placeholder : "";
    this.input = value != null ? value : "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app, header, placeholder, value) {
    const newPromptModal = new InputPrompt2(
      app,
      header,
      placeholder,
      value
    );
    return newPromptModal.waitForClose;
  }
  display() {
    this.containerEl.addClass("quickAddModal", "qaInputPrompt");
    this.contentEl.empty();
    this.titleEl.textContent = this.header;
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(
      mainContentContainer,
      this.placeholder,
      this.input
    );
    this.createButtonBar(mainContentContainer);
  }
  createInputField(container, placeholder, value) {
    const textComponent = new import_obsidian13.TextComponent(container);
    textComponent.inputEl.classList.add("input-field");
    textComponent.setPlaceholder(placeholder != null ? placeholder : "").setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  createButton(container, text, callback) {
    const btn = new import_obsidian13.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    this.createButton(
      buttonBarContainer,
      "Ok",
      this.submitClickCallback
    ).setCta();
    this.createButton(
      buttonBarContainer,
      "Cancel",
      this.cancelClickCallback
    );
    buttonBarContainer.classList.add("button-bar");
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener(
      "keydown",
      this.submitEnterCallback
    );
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
async function dialog_prompt2(header = "Input", placeholder = "", value = "") {
  try {
    return await InputPrompt2.Prompt(
      this.app,
      header,
      placeholder,
      value
    );
  } catch (e) {
    return null;
  }
}

// ../easyapi/src/easyapi/editor.ts
var EasyEditor = class {
  constructor(app, api) {
    this.yamljs = require_js_yaml2();
    this.app = app;
    this.api = api;
  }
  async get_selection(cancel_selection = false) {
    var _a;
    let editor = (_a = this.app.workspace.getActiveFileView()) == null ? void 0 : _a.editor;
    if (editor) {
      let sel = editor.getSelection();
      if (cancel_selection) {
        let cursor = editor.getCursor();
        await editor.setSelection(cursor, cursor);
      }
      return sel;
    } else {
      return "";
    }
  }
  async get_code_section(tfile, ctype = "", idx = 0, as_simple = true) {
    var _a;
    let dvmeta = this.app.metadataCache.getFileCache(tfile);
    let ctx = await this.app.vault.cachedRead(tfile);
    let section = (_a = dvmeta == null ? void 0 : dvmeta.sections) == null ? void 0 : _a.filter((x) => x.type == "code").filter((x) => {
      let c = ctx.slice(x.position.start.offset, x.position.end.offset).trim();
      return c.startsWith("```" + ctype) || c.startsWith("~~~" + ctype);
    })[idx];
    if (section) {
      let c = ctx.slice(
        section.position.start.offset,
        section.position.end.offset
      );
      if (as_simple) {
        return c.slice(4 + ctype.length, c.length - 4);
      } else {
        let res = {
          code: c,
          section,
          ctx
        };
        return res;
      }
    }
  }
  async get_heading_section(tfile, heading, idx = 0, with_heading = true) {
    var _a;
    let dvmeta = this.app.metadataCache.getFileCache(tfile);
    let ctx = await this.app.vault.cachedRead(tfile);
    if (!(dvmeta == null ? void 0 : dvmeta.headings)) {
      return "";
    }
    let section = (_a = dvmeta == null ? void 0 : dvmeta.headings) == null ? void 0 : _a.filter((x) => x.heading == heading)[idx];
    if (section) {
      let idx2 = dvmeta.headings.indexOf(section) + 1;
      while (idx2 < dvmeta.headings.length) {
        let csec = dvmeta.headings[idx2];
        if (csec.level <= section.level) {
          break;
        }
        idx2 = idx2 + 1;
      }
      if (idx2 < dvmeta.headings.length) {
        let csec = dvmeta.headings[idx2];
        let c = ctx.slice(
          with_heading ? section.position.start.offset : section.position.end.offset,
          csec.position.start.offset
        );
        return c;
      } else {
        let c = ctx.slice(
          with_heading ? section.position.start.offset : section.position.end.offset
        );
        return c;
      }
    }
  }
  async get_current_section() {
    var _a;
    let editor = this.api.ceditor;
    let tfile = this.api.cfile;
    if (!editor || !tfile) {
      return null;
    }
    let cursor = editor.getCursor();
    let cache = this.app.metadataCache.getFileCache(tfile);
    if (!cache) {
      return null;
    }
    if (cursor) {
      let section = (_a = cache == null ? void 0 : cache.sections) == null ? void 0 : _a.filter(
        (x) => {
          return x.position.start.line <= cursor.line && x.position.end.line >= cursor.line;
        }
      )[0];
      let ctx = await this.app.vault.cachedRead(tfile);
      if (!section) {
        return "";
      }
      return ctx.slice(
        section.position.start.offset,
        section.position.end.offset
      );
    } else {
      return null;
    }
  }
  dict_set_value(data, key, value) {
    let items = key.trim().split(".");
    if (!items) {
      return;
    }
    let curr = data;
    for (let item of items.slice(0, items.length - 1)) {
      let kv2 = item.match(/^(.*?)(\[-?\d+\])?$/);
      if (!kv2) {
        return;
      }
      let k2 = kv2[1];
      if (kv2[2]) {
        let i = parseInt(kv2[2].slice(1, kv2[2].length - 1));
        if (!(k2 in curr)) {
          curr[k2] = [{}];
          curr = curr[k2][0];
        } else {
          if (Array.isArray(curr[k2])) {
            let tmp = {};
            if (i < 0) {
              curr[k2].splice(-i - 1, 0, tmp);
            } else if (i < curr[k2].length) {
              curr[k2][i] = tmp;
            } else {
              curr[k2].push(tmp);
            }
            curr = tmp;
          } else {
            curr[k2] = [{}];
            curr = curr[k2][0];
          }
        }
      } else {
        if (!(k2 in curr)) {
          curr[k2] = {};
          curr = curr[k2];
        } else {
          if (typeof curr[k2] != "object") {
            curr[k2] = {};
            curr = curr[k2];
          } else {
            curr = curr[k2];
          }
        }
      }
    }
    let kv = items[items.length - 1].match(/^(.*?)(\[-?\d+\])?$/);
    if (!kv) {
      return;
    }
    let k = kv[1];
    if (kv[2]) {
      let i = parseInt(kv[2].slice(1, kv[2].length - 1));
      if (k in curr) {
        if (Array.isArray(curr[k])) {
          if (i < 0) {
            curr[k].splice(-i - 1, 0, value);
          } else if (i < curr[k].length) {
            curr[k][i] = value;
          } else {
            curr[k].push(value);
          }
        } else {
          curr[k] = value;
        }
      } else {
        curr[k] = [value];
      }
    } else {
      curr[k] = value;
    }
  }
};

// ../easyapi/src/easyapi/file.ts
var import_obsidian14 = require("obsidian");
var File = class {
  constructor(app, api) {
    this.app = app;
    this.api = api;
  }
  generate_structure(tfolder, depth = 0, isRoot = true, only_folder = false, only_md = true) {
    let structure = "";
    const indentUnit = "    ";
    const verticalLine = "\u2502   ";
    const indent = verticalLine.repeat(Math.max(depth - 1, 0)) + indentUnit.repeat(depth > 0 ? 1 : 0);
    const children = tfolder.children || [];
    if (isRoot) {
      structure += `${tfolder.name}/
`;
      isRoot = false;
    }
    children.forEach((child, index) => {
      const isLast = index === children.length - 1;
      const prefix = isLast ? "\u2514\u2500\u2500 " : "\u251C\u2500\u2500 ";
      if (child instanceof import_obsidian14.TFolder) {
        structure += `${indent}${prefix}${child.name}/
`;
        structure += this.generate_structure(child, depth + 1, isRoot, only_folder, only_md);
      } else if (!only_folder) {
        if (only_md && child.extension != "md") {
          return;
        }
        structure += `${indent}${prefix}${child.name}
`;
      }
    });
    return structure;
  }
};

// ../easyapi/src/easyapi/random.ts
var import_obsidian15 = require("obsidian");
var Random = class {
  constructor(app, ea) {
    this.app = app;
    this.ea = ea;
  }
  /**
  * 随机获取 M 个值，位于 0～N 之间
  * @param {number} N - 最大值（不包含）
  * @param {number} M - 需要获取的随机数数量
  * @param {boolean} repeat - 是否允许重复值
  * @returns {number[]} - 包含 M 个随机数的数组
  */
  random_number(N, M, repeat = false) {
    if (M <= 0)
      return [];
    if (!repeat && M > N) {
      throw new Error("\u5F53\u4E0D\u5141\u8BB8\u91CD\u590D\u65F6\uFF0CM \u4E0D\u80FD\u5927\u4E8E N");
    }
    const result = [];
    if (repeat) {
      for (let i = 0; i < M; i++) {
        result.push(Math.floor(Math.random() * N));
      }
    } else {
      const numbers = Array.from({ length: N }, (_, i) => i);
      for (let i = numbers.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [numbers[i], numbers[j]] = [numbers[j], numbers[i]];
      }
      result.push(...numbers.slice(0, M));
    }
    return result;
  }
  // 线性同余生成器 (LCG)
  lcg(seed) {
    const a = 1664525;
    const c = 1013904223;
    const m = Math.pow(2, 32);
    return (a * seed + c) % m;
  }
  /**
   * 基于日期生成固定随机数序列
   * @param {moment} t - 时间对象（使用moment.js）
   * @param {number} N - 随机数范围上限（0到N-1）
   * @param {number} M - 需要的随机数数量
   * @returns {number[]} - 排序后的随机数数组
   */
  random_number_for_date(t, N, M) {
    if (M <= 0)
      return [];
    if (M >= N)
      return Array.from({ length: N }, (_, i) => i);
    const dateStr = t.format("YYYY-MM-DD");
    let seed = 0;
    for (let i = 0; i < dateStr.length; i++) {
      seed = (seed << 5) - seed + dateStr.charCodeAt(i);
      seed |= 0;
    }
    const numbers = Array.from({ length: N }, (_, i) => i);
    let currentSeed = seed;
    for (let i = N - 1; i > 0; i--) {
      currentSeed = this.lcg(currentSeed);
      const j = Math.abs(currentSeed) % (i + 1);
      [numbers[i], numbers[j]] = [numbers[j], numbers[i]];
    }
    return numbers.slice(0, M).sort((a, b) => a - b);
  }
  // 根据字符串返回 0~N 之间的整数
  string_to_random_number(str, N) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      hash = (hash << 5) - hash + str.charCodeAt(i);
      hash |= 0;
    }
    return Math.abs(hash) % N;
  }
  // 从数组中随机获取 N 个元素
  random_elements(arr, n) {
    const shuffled = [...arr];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled.slice(0, n);
  }
  _get_tfiles_(filter) {
    let tfiles = this.ea.nc.chain.get_all_tfiles();
    if (filter) {
      tfiles = tfiles.filter((x) => filter(x));
    }
    return tfiles;
  }
  random_notes(n = 3, filter = null) {
    let tfiles = this._get_tfiles_(filter);
    let idx = this.random_number(tfiles.length, n);
    tfiles = idx.map((i) => tfiles[i]);
    return tfiles;
  }
  random_daily_notes(n = 3, before_today = true, filter = null) {
    let t = (0, import_obsidian15.moment)((0, import_obsidian15.moment)().format("YYYY-MM-DD"));
    let dnote = this.ea.nc.chain.get_last_daily_note();
    if (dnote) {
      t = (0, import_obsidian15.moment)(dnote.basename);
    }
    let tfiles = this._get_tfiles_(filter);
    if (before_today) {
      tfiles = tfiles.filter(
        (f) => f.stat.ctime < t.unix() * 1e3
      );
    }
    let idx = this.random_number_for_date(t, tfiles.length, n);
    tfiles = idx.map((i) => tfiles[i]);
    return tfiles;
  }
};

// ../easyapi/src/easyapi/easyapi.ts
var EasyAPI = class {
  constructor(app) {
    this.app = app;
    this.dialog_suggest = dialog_suggest2;
    this.dialog_prompt = dialog_prompt2;
    this.editor = new EasyEditor(app, this);
    this.file = new File(app, this);
    this.random = new Random(app, this);
  }
  get_plugin(name) {
    var _a;
    return (_a = this.app.plugins) == null ? void 0 : _a.plugins[name];
  }
  get nc() {
    return this.get_plugin("note-chain");
  }
  get cfile() {
    return this.app.workspace.getActiveFile();
  }
  get cfolder() {
    var _a;
    return (_a = this.cfile) == null ? void 0 : _a.parent;
  }
  get cview() {
    let view = this.app.workspace.getActiveFileView();
    return view;
  }
  get ceditor() {
    var _a;
    let editor = (_a = this.cview) == null ? void 0 : _a.editor;
    return editor;
  }
};

// src/NCView.ts
var import_obsidian16 = require("obsidian");
var NoteContentView = class extends import_obsidian16.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.fileModifyHandler = null;
    this.debounceTimer = null;
    this.plugin = plugin;
    this.icon = "getIcon";
  }
  getViewType() {
    return "note-content-view";
  }
  getDisplayText() {
    return "Note Preview";
  }
  getState() {
    return {
      content: this.content,
      sourcePath: this.sourcePath
    };
  }
  async setState(state, result) {
    this.content = state.content;
    this.sourcePath = state.sourcePath;
    await this.setContent(this.content, this.sourcePath);
  }
  getIcon() {
    return "";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const div = container.createDiv();
    div.addClass("markdown-rendered");
    div.addEventListener("click", async (e) => {
      const target = e.target;
      if (target.tagName === "A" && target.hasClass("internal-link")) {
        e.preventDefault();
        const link = target.getAttr("href");
        if (link) {
          this.app.workspace.openLinkText(link, this.sourcePath, true);
        }
      }
    });
    import_obsidian16.MarkdownRenderer.render(this.app, "", div, "", this);
  }
  async setContent(content, sourcePath) {
    this.content = content;
    this.sourcePath = sourcePath;
    const container = this.containerEl.children[1];
    container.empty();
    const div = container.createDiv();
    div.addClass("markdown-rendered");
    await import_obsidian16.MarkdownRenderer.render(this.app, content, div, sourcePath, this);
    div.addEventListener("click", async (e) => {
      const target = e.target;
      if (target.tagName === "A" && target.hasClass("internal-link")) {
        e.preventDefault();
        const link = target.getAttr("href");
        if (link) {
          this.app.workspace.openLinkText(link, this.sourcePath, true);
        }
      }
    });
    div.querySelectorAll("a.internal-link").forEach((el) => {
      const href = el.getAttribute("href");
      if (href) {
        el.setAttribute("data-href", href);
        el.setAttr("aria-label", href);
        el.addClass("hover-link");
        el.addEventListener("mouseenter", (e) => {
          this.app.workspace.trigger("hover-link", {
            event: e,
            source: "markdown",
            hoverParent: el,
            targetEl: el,
            linktext: href,
            sourcePath: this.sourcePath
          });
        });
      }
    });
    if (this.fileModifyHandler) {
      this.app.vault.offref(this.fileModifyHandler);
      this.fileModifyHandler = null;
    }
    const file = this.app.vault.getAbstractFileByPath(sourcePath);
    if (file instanceof import_obsidian16.TFile) {
      this.registerEvent(
        this.app.vault.on("modify", (modifiedFile) => {
          if (modifiedFile.path === sourcePath) {
            if (this.debounceTimer) {
              window.clearTimeout(this.debounceTimer);
            }
            this.debounceTimer = window.setTimeout(() => {
              this.app.vault.read(modifiedFile).then((newContent) => {
                this.setContent(newContent, sourcePath);
              });
              this.debounceTimer = null;
            }, 5e3);
          }
        })
      );
    }
  }
  async onClose() {
    if (this.fileModifyHandler) {
      this.app.vault.offref(this.fileModifyHandler);
      this.fileModifyHandler = null;
    }
  }
};

// main.ts
var NoteChainPlugin = class extends import_obsidian17.Plugin {
  async onload() {
    this.dialog_suggest = dialog_suggest;
    this.dialog_prompt = dialog_prompt;
    this.status = "waiting";
    this.app.workspace.onLayoutReady(
      async () => {
        await this._onload_();
        this._after_loading_();
      }
    );
  }
  async _after_loading_() {
    var _a, _b;
    while (!((_a = this.app.plugins) == null ? void 0 : _a.plugins["note-chain"])) {
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
    this.app.commands.executeCommandById(
      "dataview:dataview-force-refresh-views"
    );
    let target = await this.app.plugins.getPlugin("obsidian-tasks-plugin");
    target && target.cache.notifySubscribers();
    return (_b = this.app.plugins) == null ? void 0 : _b.plugins["note-chain"];
  }
  async _onload_() {
    this.status = "loading";
    this.debug = true;
    await this.loadSettings();
    this.utils = (init_utils(), __toCommonJS(utils_exports));
    this.ob = require("obsidian");
    this.editor = new NCEditor(this);
    this.chain = new NoteChain(this, this.editor);
    this.explorer = new NCFileExplorer(this);
    this.mermaid = new MermaidGraph(this);
    this.canvas = new CanvasGraph(this);
    this.strings = new Strings();
    this.easyapi = new EasyAPI(this.app);
    addCommands(this);
    this.addSettingTab(new NCSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-open", this.ufunc_on_file_open.bind(this))
    );
    this.registerEvent(this.app.vault.on(
      "delete",
      async (file) => {
        await this.chain.chain_pop_node(file);
        await this.explorer.sort();
      }
    ));
    this.registerEvent(this.app.vault.on(
      "create",
      async () => {
        await sleep(500);
        this.explorer.sort(0, true);
      }
    ));
    this.registerEvent(this.app.vault.on(
      "rename",
      async (file, oldPath) => {
        let oldFolder = this.app.vault.getFolderByPath(
          oldPath.slice(0, oldPath.lastIndexOf("/"))
        );
        oldFolder && this.chain.refresh_folder(oldFolder);
        this.chain.refresh_tfile(file);
        this.explorer.sort();
        this.explorer.set_fileitem_style_of_file(file);
      }
    ));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian17.TFile) {
          menu.addItem((item) => {
            item.setTitle(this.strings.filemenu_create_next_note).setIcon("file-plus").onClick(async () => {
              let filename = await this.dialog_prompt("File name");
              if (!filename) {
                return;
              }
              let dst = file.parent ? file.parent.path + "/" + filename + ".md" : filename + ".md";
              if (this.chain.get_tfile(dst)) {
                new import_obsidian17.Notice("Exists:" + file.path, 3e3);
              } else {
                let tfile = await this.app.vault.create(dst, "");
                await this.chain.chain_insert_node_after(tfile, file);
                await this.editor.set_frontmatter_align_file(
                  file,
                  tfile,
                  this.settings.field_of_confluence_tab_format
                );
                await this.chain.open_note(tfile, false, false);
              }
            });
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian17.TFile && file.extension == "md") {
          menu.addItem((item) => {
            item.setTitle(this.strings.filemenu_move_as_next_note).setIcon("hand").onClick(async () => {
              let anchor = await this.chain.sugguster_note();
              if (anchor) {
                await this.chain.chain_insert_node_after(file, anchor);
                await this.editor.set_frontmatter_align_file(
                  anchor,
                  file,
                  this.settings.field_of_confluence_tab_format
                );
                if (file.parent != anchor.parent) {
                  let dst = anchor.parent.path + "/" + file.name;
                  await this.app.fileManager.renameFile(file, dst);
                }
                this.explorer.sort();
              }
            });
          });
        } else if (file instanceof import_obsidian17.TFolder) {
          menu.addItem((item) => {
            item.setTitle(this.strings.filemenu_move_as_next_note).setIcon("hand").onClick(async () => {
              var _a;
              let notes = (_a = file.parent) == null ? void 0 : _a.children;
              if (notes) {
                notes = this.chain.sort_tfiles_by_chain(notes);
                notes = notes.filter((x) => x != file);
                let anchor = await this.dialog_suggest(
                  notes.map((x) => x instanceof import_obsidian17.TFile ? "\u{1F4C3}" + x.basename : "\u{1F4C1}" + x.name),
                  notes
                );
                if (!anchor) {
                  return;
                }
                await this.chain.move_folder_as_next_note(file, anchor);
                new import_obsidian17.Notice(`${anchor instanceof import_obsidian17.TFile ? anchor.basename : anchor.name}-->${file.name}`);
                this.chain.refresh_tfile(file);
                await this.explorer.sort(0, true);
              }
            });
          });
        }
        let selector = document.querySelectorAll(
          ".tree-item-self.is-selected"
        );
        let items = Object.values(selector).map((x) => {
          var _a;
          return (_a = x.dataset) == null ? void 0 : _a.path;
        });
        let tfiles = items.map((x) => this.chain.get_tfile(x)).filter((x) => x.extension == "md");
        if (tfiles.length > 1) {
          menu.addItem((item) => {
            item.setTitle(this.strings.filemenu_move_as_next_notes).setIcon("hand").onClick(async () => {
              tfiles = this.chain.sort_tfiles_by_chain(tfiles);
              let notes = this.chain.get_all_tfiles();
              notes = notes.filter((x) => !tfiles.contains(x));
              let anchor = await this.chain.sugguster_note(notes);
              if (!anchor) {
                return;
              }
              for (let tfile of tfiles) {
                if (tfile.parent.path != anchor.parent.path) {
                  let dst = anchor.parent.path + "/" + tfile.name;
                  await this.app.fileManager.renameFile(tfile, dst);
                }
                await this.chain.chain_pop_node(tfile);
              }
              tfiles.unshift(anchor);
              let anchor_next = this.chain.get_next_note(anchor);
              if (anchor_next) {
                tfiles.push(anchor_next);
              }
              await this.chain.chain_concat_tfiles(tfiles);
              for (let dst of tfiles.slice(1, tfiles.length - 1)) {
                await this.editor.set_frontmatter_align_file(
                  anchor,
                  dst,
                  this.settings.field_of_confluence_tab_format
                );
              }
            });
          });
        }
      })
    );
    this.registerEvent(
      this.app.metadataCache.on(
        "changed",
        async (file, data, cache) => {
          if (file == this.chain.current_note) {
            clearTimeout(this.timerId);
          }
          let timerId = setTimeout(async () => {
            if (file.parent) {
              this.chain.children[file.parent.path] = this.chain.sort_tfiles_by_chain(
                file.parent.children
              );
            }
            this.explorer.sort(0, false);
            if (this.settings.field_of_display_text) {
              let txt = this.explorer.get_display_text(file);
              let items = this.explorer.file_explorer.fileItems;
              this.explorer._set_display_text_(items[file.path], txt);
              let canvas = items[file.path.slice(0, file.path.length - 2) + "canvas"];
              this.explorer._set_display_text_(canvas, txt);
              if (file.parent && file.basename == file.parent.name || file.parent && file.parent.path == "/") {
                let field = this.editor.get_frontmatter(file, this.settings.field_of_display_text);
                let prev = file.note_chain_display_field;
                if (!prev || prev != field) {
                  for (let key in items) {
                    let item = items[key];
                    let ppath = "";
                    if (file.parent.path == "/") {
                      ppath == "";
                    } else {
                      ppath = file.parent.path + "/";
                    }
                    if (item.file.path.startsWith(ppath) || item.file.path == file.parent.path) {
                      let txt2 = this.explorer.get_display_text(item.file);
                      this.explorer._set_display_text_(item, txt2);
                    }
                  }
                }
                file.note_chain_display_field = field;
              }
            }
            if (this.settings.field_of_background_color) {
              let style = await this.explorer.get_fileitem_style(file);
              await this.explorer.set_fileitem_style_of_file(file, style);
              let items = this.explorer.file_explorer.fileItems;
              let canvas = items[file.path.slice(0, file.path.length - 2) + "canvas"];
              if (canvas) {
                await this.explorer.set_fileitem_style_of_file(canvas.file, style);
              }
              if (file.parent && file.basename == file.parent.name || file.parent && file.parent.path == "/") {
                let field = this.editor.get_frontmatter(file, this.settings.field_of_background_color);
                let prev = file.note_chain_bgcolor;
                if (!prev || prev != field) {
                  for (let key in items) {
                    let item = items[key];
                    let ppath = "";
                    if (file.parent.path == "/") {
                      ppath == "";
                    } else {
                      ppath = file.parent.path + "/";
                    }
                    if (item.file.path.startsWith(ppath) || item.file.path == file.parent.path) {
                      let style2 = await this.explorer.get_fileitem_style(item.file);
                      await this.explorer.set_fileitem_style_of_file(item.file, style2);
                    }
                  }
                }
                file.note_chain_bgcolor = field;
              }
            }
          }, 500);
          if (file == this.chain.current_note) {
            this.timerId = this.timerId;
          }
        }
      )
    );
    this.registerView(
      "note-content-view",
      (leaf) => new NoteContentView(leaf, this)
    );
    this.wordcout = new WordCount(this, this.app);
    this.textarea = new NCTextarea(this);
    this.status = "loaded";
  }
  async onunload() {
    await this.explorer.unregister();
    await this.explorer.sort();
  }
  async ufunc_on_file_open(file) {
    var _a, _b;
    if (this.settings.refreshDataView) {
      this.app.commands.executeCommandById(
        "dataview:dataview-force-refresh-views"
      );
    }
    if (this.settings.refreshTasks) {
      let target = await this.app.plugins.getPlugin("obsidian-tasks-plugin");
      target && target.cache.notifySubscribers();
    }
    if (this.settings.auto_notechain) {
      let notes = this.chain.get_brothers(file);
      if (notes.length == 0) {
        return;
      }
      let xfolders = this.settings.wordcountxfolder.split("\n").filter((x) => x != "");
      for (let item of xfolders) {
        if (file.path.startsWith(item)) {
          return false;
        } else if (item == "/") {
          if (((_a = file.parent) == null ? void 0 : _a.path) == "/") {
            return false;
          }
        }
      }
      if ((_b = this.explorer) == null ? void 0 : _b.file_explorer) {
        notes = this.chain.sort_tfiles(notes, this.explorer.file_explorer.sortOrder);
        notes = this.chain.sort_tfiles(notes, "chain");
        await this.chain.chain_concat_tfiles(notes);
        this.explorer.sort();
      }
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async clear_inlinks(tfile = this.chain.current_note, mode = "suggester") {
    if (tfile == null) {
      return;
    }
    let notes = this.chain.get_inlinks(tfile);
    if (notes.length) {
      if (mode === "suggester") {
        mode = await this.dialog_suggest(
          ["delete links", "replace links", "delete paragraph with links"],
          [["link", "del"], ["link", "rep"], ["para", "del"]]
        );
      }
      let reg = this.editor.regexp_link(tfile, mode[0]);
      if (reg) {
        for (let note of notes) {
          let target;
          if (mode[1] === "rep") {
            target = tfile.basename;
          } else {
            target = "";
          }
          this.editor.replace(note, reg, target);
        }
      }
    }
  }
  async replace_notes_with_regx() {
    let notes = await this.chain.suggester_notes();
    if ((notes == null ? void 0 : notes.length) > 0) {
      try {
        let regs = await this.dialog_prompt("Enter the regular expression to replace.");
        if (regs == null) {
          return;
        }
        let reg = new RegExp(regs, "g");
        let target = await this.dialog_prompt("Enter the target string.");
        if (target == null) {
          return;
        }
        target = target.replace(
          /\\n/g,
          "\n"
        );
        for (let note of notes) {
          await this.editor.replace(note, reg, target);
        }
      } catch (error) {
      }
    }
  }
  async cmd_chain_insert_node() {
    let selector = document.querySelectorAll(
      ".tree-item-self.is-selected"
    );
    let items = Object.values(selector).map((x) => {
      var _a;
      return (_a = x.dataset) == null ? void 0 : _a.path;
    });
    let tfiles = items.map((x) => this.chain.get_tfile(x)).filter((x) => x.extension == "md");
    if (tfiles.length > 1) {
      tfiles = this.chain.sort_tfiles_by_chain(tfiles);
      let notes2 = this.chain.get_all_tfiles();
      notes2 = notes2.filter((x) => !tfiles.contains(x));
      let anchor = await this.chain.sugguster_note(notes2);
      if (!anchor) {
        return;
      }
      for (let tfile of tfiles) {
        if (tfile.parent.path != anchor.parent.path) {
          let dst = anchor.parent.path + "/" + tfile.name;
          await this.app.fileManager.renameFile(tfile, dst);
        }
        await this.chain.chain_pop_node(tfile);
      }
      tfiles.unshift(anchor);
      let anchor_next = this.chain.get_next_note(anchor);
      if (anchor_next) {
        tfiles.push(anchor_next);
      }
      await this.chain.chain_concat_tfiles(tfiles);
      return;
    }
    let curr = this.chain.current_note;
    if (curr == null) {
      return;
    }
    let smode = this.strings[this.settings.suggesterNotesMode];
    let notes = await this.chain.suggester_notes(curr, false, smode);
    if (!notes) {
      return;
    }
    notes = this.chain.sort_tfiles(notes, ["mtime", "x"]);
    notes = this.chain.sort_tfiles_by_chain(notes);
    const note = await this.dialog_suggest(
      this.utils.array_prefix_id(
        notes.map((file) => this.tfile_to_string(file, [], ""))
      ),
      notes
    );
    if (!note) {
      return;
    }
    let sitems = [
      this.strings.item_insert_node_after,
      this.strings.item_insert_node_before,
      this.strings.item_insert_node_as_head,
      this.strings.item_insert_node_as_tail,
      this.strings.item_insert_folder_after
    ];
    let mode = await this.dialog_suggest(
      this.utils.array_prefix_id(sitems),
      sitems,
      false,
      this.strings.item_insert_suggester
    );
    if (!mode) {
      return;
    }
    if (mode === this.strings.item_insert_node_as_head) {
      await this.chain.chain_insert_node_as_head(curr, note);
    } else if (mode === this.strings.item_insert_node_as_tail) {
      await this.chain.chain_insert_node_as_tail(curr, note);
    } else if (mode === this.strings.item_insert_node_before) {
      await this.chain.chain_insert_node_before(curr, note);
      await this.editor.set_frontmatter_align_file(
        note,
        curr,
        this.settings.field_of_confluence_tab_format
      );
    } else if (mode === this.strings.item_insert_node_after) {
      await this.chain.chain_insert_node_after(curr, note);
      await this.editor.set_frontmatter_align_file(
        note,
        curr,
        this.settings.field_of_confluence_tab_format
      );
    } else if (mode === this.strings.item_insert_folder_after) {
      await this.chain.chain_insert_folder_after(curr, note);
    } else {
      return;
    }
  }
  tfile_to_string(tfile, fields, seq) {
    let items = new Array();
    if (tfile == this.chain.current_note) {
      items.push("\u{1F3E0}" + tfile.basename);
    } else {
      items.push(tfile.basename);
    }
    for (let field of fields) {
      try {
        items.push(this.editor.get_frontmatter(tfile, field));
      } catch (error) {
        items.push("-");
      }
    }
    return items.join(seq);
  }
  async open_note_smarter() {
    let curr = this.chain.current_note;
    let notes = await this.chain.suggester_notes(curr, false);
    notes = this.chain.sort_tfiles(notes, ["mtime", "x"]);
    notes = this.chain.sort_tfiles_by_chain(notes);
    if (notes.length > 0) {
      let note = await this.dialog_suggest(
        this.utils.array_prefix_id(
          notes.map((file) => this.chain.tfile_to_string(file))
        ),
        notes
      );
      if (note) {
        await this.chain.open_note(note);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL3V0aWxzLnRzIiwgIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9jb21tb24uanMiLCAibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2V4Y2VwdGlvbi5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvc25pcHBldC5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvc2NoZW1hLmpzIiwgIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3N0ci5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9zZXEuanMiLCAibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvbWFwLmpzIiwgIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEvZmFpbHNhZmUuanMiLCAibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvbnVsbC5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9ib29sLmpzIiwgIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL2ludC5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9mbG9hdC5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvc2NoZW1hL2pzb24uanMiLCAibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3NjaGVtYS9jb3JlLmpzIiwgIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3RpbWVzdGFtcC5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9tZXJnZS5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9iaW5hcnkuanMiLCAibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvb21hcC5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9wYWlycy5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9zZXQuanMiLCAibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3NjaGVtYS9kZWZhdWx0LmpzIiwgIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9sb2FkZXIuanMiLCAibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2R1bXBlci5qcyIsICJub2RlX21vZHVsZXMvanMteWFtbC9pbmRleC5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9jb21tb24uanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvZXhjZXB0aW9uLmpzIiwgIi4uL2Vhc3lhcGkvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3NuaXBwZXQuanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEuanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9zdHIuanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9zZXEuanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9tYXAuanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvc2NoZW1hL2ZhaWxzYWZlLmpzIiwgIi4uL2Vhc3lhcGkvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvbnVsbC5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL2Jvb2wuanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9pbnQuanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9mbG9hdC5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEvanNvbi5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEvY29yZS5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3RpbWVzdGFtcC5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL21lcmdlLmpzIiwgIi4uL2Vhc3lhcGkvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvYmluYXJ5LmpzIiwgIi4uL2Vhc3lhcGkvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvb21hcC5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3BhaXJzLmpzIiwgIi4uL2Vhc3lhcGkvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvc2V0LmpzIiwgIi4uL2Vhc3lhcGkvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3NjaGVtYS9kZWZhdWx0LmpzIiwgIi4uL2Vhc3lhcGkvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2xvYWRlci5qcyIsICIuLi9lYXN5YXBpL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9kdW1wZXIuanMiLCAiLi4vZWFzeWFwaS9ub2RlX21vZHVsZXMvanMteWFtbC9pbmRleC5qcyIsICJtYWluLnRzIiwgInNyYy9OQ0VkaXRvci50cyIsICJzcmMvTm90ZUNoYWluLnRzIiwgInNyYy9OQ01vZGFsLnRzIiwgInNyYy9OQ1RleHRhcmVhLnRzIiwgInNyYy9OQ0ZpbGVFeHBsb3Jlci50cyIsICJub2RlX21vZHVsZXMvbW9ua2V5LWFyb3VuZC9kaXN0L2luZGV4Lm1qcyIsICJzcmMvc3RyaW5ncy50cyIsICJzcmMvV29yZENvdW50LnRzIiwgInNyYy9ncmFwaC50cyIsICJzcmMvc2V0dGluZy50cyIsICJzcmMvY29tbWFuZHMudHMiLCAic3JjL2d1aS9pbnB1dFN1Z2dlc3Rlci50cyIsICJzcmMvZ3VpL2lucHV0UHJvbXB0LnRzIiwgIi4uL2Vhc3lhcGkvc3JjL2Vhc3lhcGkvZ3VpL2lucHV0U3VnZ2VzdGVyLnRzIiwgIi4uL2Vhc3lhcGkvc3JjL2Vhc3lhcGkvZ3VpL2lucHV0UHJvbXB0LnRzIiwgIi4uL2Vhc3lhcGkvc3JjL2Vhc3lhcGkvZWRpdG9yLnRzIiwgIi4uL2Vhc3lhcGkvc3JjL2Vhc3lhcGkvZmlsZS50cyIsICIuLi9lYXN5YXBpL3NyYy9lYXN5YXBpL3JhbmRvbS50cyIsICIuLi9lYXN5YXBpL3NyYy9lYXN5YXBpL2Vhc3lhcGkudHMiLCAic3JjL05DVmlldy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgb24gfSBmcm9tICdldmVudHMnO1xyXG5pbXBvcnQgeyBnZXQgfSBmcm9tICdodHRwJztcclxuaW1wb3J0IHsgXHJcblx0QXBwLFxyXG4gICAgVEZpbGUsXHJcbiAgICBOb3RpY2UsXHJcbiAgICBURm9sZGVyLFxyXG4gICAgVEFic3RyYWN0RmlsZVxyXG59IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmltcG9ydCB7Tm90ZUNvbnRlbnRWaWV3fSBmcm9tICcuL05DVmlldydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfcGx1Z2lucyhhcHA6QXBwLG5hbWU6c3RyaW5nKXtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcnJheV9wcmVmaXhfaWQoaXRlbXM6QXJyYXk8YW55PixvZmZzZXQ9MSl7XHJcbiAgICBsZXQgcmVzID0gbmV3IEFycmF5KCk7XHJcbiAgICBsZXQgTiA9IGl0ZW1zLmxlbmd0aC50b1N0cmluZygpLmxlbmd0aDtcclxuICAgIGZvcihsZXQgaT0wO2k8aXRlbXMubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgbGV0IGlkID0gIChpICsgb2Zmc2V0KS50b1N0cmluZygpLnBhZFN0YXJ0KE4sICcwJyk7XHJcbiAgICAgICAgcmVzLnB1c2goYCR7aWR9IFx1RDgzRFx1REQyNSAke2l0ZW1zW2ldfWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdF9hcnJheShpdGVtczpBcnJheTxhbnk+KXtcclxuICAgIGlmKGl0ZW1zPT1udWxsKXtyZXR1cm4gW107fVxyXG4gICAgaWYodHlwZW9mIGl0ZW1zID09PSAnc3RyaW5nJyl7cmV0dXJuIFtpdGVtc107fVxyXG4gICAgaWYoIShpdGVtcyBpbnN0YW5jZW9mIEFycmF5KSl7cmV0dXJuIFtpdGVtc107fVxyXG5cclxuICAgIGxldCByZXMgPSBbXSBhcyBhbnkgW107XHJcbiAgICBmb3IobGV0IGl0ZW0gb2YgaXRlbXMpe1xyXG4gICAgICAgIGlmKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyl7XHJcbiAgICAgICAgICAgIHJlcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1lbHNlIGlmKGl0ZW0gaW5zdGFuY2VvZiBBcnJheSl7XHJcbiAgICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQodGhpcy5jb25jYXRfYXJyYXkoaXRlbSkpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXMucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59ICBcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja192YWx1ZSh0OmFueSxrOmFueSx2OmFueSxkdDpudW1iZXIsVDpudW1iZXIpe1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgd2hpbGUodFtrXT09bnVsbCB8fCAhKHRba109PT12KSl7XHJcbiAgICAgICAgYXdhaXQgc2xlZXAoZHQpO1xyXG4gICAgICAgIGkgPSBkdCtkdDtcclxuICAgICAgICBpZihpPlQpe2JyZWFrO31cclxuICAgIH1cclxuICAgIGlmKHRba10gJiYgdFtrXT09PXYpe1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3RwX2Z1bmMoYXBwOkFwcCx0YXJnZXQ6c3RyaW5nKSB7XHJcblx0Ly8gXHU4M0I3XHU1M0Q2ICB0ZW1wbGF0ZXIgXHU1MUZEXHU2NTcwXHJcblx0Ly8gZ2V0X3RwX2Z1bmMoXCJ0cC5zeXN0ZW0ucHJvbXB0XCIpXHJcblxyXG5cdGxldCB0ZW1wbGF0ZXIgPSAoYXBwIGFzIGFueSkucGx1Z2lucy5nZXRQbHVnaW4oXHJcblx0XHRcInRlbXBsYXRlci1vYnNpZGlhblwiXHJcblx0KTtcclxuICAgIGlmKCF0ZW1wbGF0ZXIpe3JldHVybiBudWxsfVxyXG5cdGxldCBpdGVtcyA9IHRhcmdldC5zcGxpdChcIi5cIik7XHJcblx0aWYoaXRlbXNbMF0ubG9jYWxlQ29tcGFyZShcInRwXCIpIT0wIHx8IGl0ZW1zLmxlbmd0aCE9Myl7cmV0dXJuIHVuZGVmaW5lZDt9XHJcblx0XHJcblx0bGV0IG1vZHVsZXMgPSB0ZW1wbGF0ZXIudGVtcGxhdGVyLmZ1bmN0aW9uc19nZW5lcmF0b3IuXHJcblx0XHRpbnRlcm5hbF9mdW5jdGlvbnMubW9kdWxlc19hcnJheS5maWx0ZXIoXHJcblx0XHRcdChpdGVtOmFueSk9PihpdGVtLm5hbWUubG9jYWxlQ29tcGFyZShpdGVtc1sxXSk9PTApXHJcblx0XHQpO1xyXG5cclxuXHRpZihtb2R1bGVzLmxlbmd0aD09MCl7cmV0dXJuIHVuZGVmaW5lZH1cclxuXHRcclxuXHRyZXR1cm4gbW9kdWxlc1swXS5zdGF0aWNfZnVuY3Rpb25zLmdldChpdGVtc1syXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRfdHBfdXNlcl9mdW5jKGFwcDpBcHAsdGFyZ2V0OnN0cmluZykge1xyXG5cdC8vIFx1ODNCN1x1NTNENiAgdGVtcGxhdGVyIFx1NTFGRFx1NjU3MFxyXG5cdC8vIGdldF90cF9mdW5jKFwidHAuc3lzdGVtLnByb21wdFwiKVxyXG4gICAgaWYoIXRhcmdldC5tYXRjaCgvXnRwXFwudXNlclxcLlxcdyskLykpe1xyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcblx0bGV0IHRlbXBsYXRlciA9IChhcHAgYXMgYW55KS5wbHVnaW5zLmdldFBsdWdpbihcclxuXHRcdFwidGVtcGxhdGVyLW9ic2lkaWFuXCJcclxuXHQpO1xyXG4gICAgaWYoIXRlbXBsYXRlcil7cmV0dXJuIG51bGx9XHJcblxyXG5cdGxldCBpdGVtcyA9IHRhcmdldC5zcGxpdChcIi5cIik7XHJcblx0aWYoaXRlbXNbMF0ubG9jYWxlQ29tcGFyZShcInRwXCIpIT0wIHx8IGl0ZW1zWzFdLmxvY2FsZUNvbXBhcmUoXCJ1c2VyXCIpIT0wIHx8IGl0ZW1zLmxlbmd0aCE9Myl7cmV0dXJuIHVuZGVmaW5lZDt9XHJcblx0XHJcbiAgICBsZXQgZnVuY3MgID0gYXdhaXQgdGVtcGxhdGVyLnRlbXBsYXRlci5cclxuICAgICAgICBmdW5jdGlvbnNfZ2VuZXJhdG9yLlxyXG4gICAgICAgIHVzZXJfZnVuY3Rpb25zLlxyXG4gICAgICAgIHVzZXJfc2NyaXB0X2Z1bmN0aW9ucy5cclxuICAgICAgICBnZW5lcmF0ZV91c2VyX3NjcmlwdF9mdW5jdGlvbnMoKTtcclxuICAgIHJldHVybiBmdW5jcy5nZXQoaXRlbXNbMl0pXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRfY3VzdG9tanNfZnVuYyh0YXJnZXQ6c3RyaW5nKSB7XHJcblx0Ly8gXHU4M0I3XHU1M0Q2ICB0ZW1wbGF0ZXIgXHU1MUZEXHU2NTcwXHJcblx0Ly8gZ2V0X3RwX2Z1bmMoXCJ0cC5zeXN0ZW0ucHJvbXB0XCIpXHJcbiAgICBpZighdGFyZ2V0Lm1hdGNoKC9eKGNKU3xjdXN0b21KU3xjdXN0b21qc3xjdXN0b21KcykoXFwuXFx3KykrJC8pKXtcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gICAgbGV0IGl0ZW1zID0gdGFyZ2V0LnNwbGl0KCcuJylcclxuICAgIGlmKHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnY0pTJykpe1xyXG4gICAgICAgIGxldCBjSlMgPSAod2luZG93IGFzIGFueSlbJ2NKUyddXHJcbiAgICAgICAgbGV0IHRtcCA9IGF3YWl0IGNKUygpXHJcbiAgICAgICAgZm9yKGxldCBmaWVsZCBvZiBpdGVtcy5zbGljZSgxKSl7XHJcbiAgICAgICAgICAgIHRtcCA9IHRtcFtmaWVsZF1cclxuICAgICAgICAgICAgaWYoIXRtcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0bXBcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldF9zdHJfZnVuYyhhcHA6QXBwLHRhcmdldDpzdHJpbmcpIHtcclxuXHJcbiAgICBsZXQgdWZ1bmMgPSBhd2FpdCBnZXRfdHBfZnVuYyhhcHAsdGFyZ2V0KVxyXG4gICAgaWYodWZ1bmMpe3JldHVybiB1ZnVuY31cclxuXHJcbiAgICB1ZnVuYyA9IGF3YWl0IGdldF90cF91c2VyX2Z1bmMoYXBwLHRhcmdldClcclxuICAgIGlmKHVmdW5jKXtyZXR1cm4gdWZ1bmN9XHJcblxyXG4gICAgdWZ1bmMgPSBhd2FpdCBnZXRfY3VzdG9tanNfZnVuYyh0YXJnZXQpXHJcbiAgICBpZih1ZnVuYyl7cmV0dXJuIHVmdW5jfVxyXG5cclxuICAgIHJldHVybiBudWxsXHJcbn1cclxuXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGVtcGxhdGVyJDEoYXBwOkFwcCx0ZW1wbGF0ZTpzdHJpbmd8VEZpbGUsIGFjdGl2ZV9maWxlOlRGaWxlfG51bGwsIHRhcmdldF9maWxlOlRGaWxlfG51bGwsZXh0cmE9bnVsbCkge1xyXG5cdGNvbnN0IGNvbmZpZyA9IHtcclxuXHRcdHRlbXBsYXRlX2ZpbGU6IHRlbXBsYXRlLFxyXG5cdFx0YWN0aXZlX2ZpbGU6IGFjdGl2ZV9maWxlLFxyXG5cdFx0dGFyZ2V0X2ZpbGU6IHRhcmdldF9maWxlLFxyXG4gICAgICAgIGV4dHJhOiBleHRyYSxcclxuXHRcdHJ1bl9tb2RlOiBcIkR5bmFtaWNQcm9jZXNzb3JcIixcclxuXHR9O1xyXG5cdGNvbnN0IHBsdWdpbnMgPSAoYXBwIGFzIGFueSkucGx1Z2lucy5wbHVnaW5zO1xyXG5cdGNvbnN0IGV4aXN0cyA9IHBsdWdpbnNbXCJ0ZW1wbGF0ZXItb2JzaWRpYW5cIl07XHJcblx0aWYgKCFleGlzdHMpIHtcclxuXHRcdG5ldyBOb3RpY2UoXCJUZW1wbGF0ZXIgaXMgbm90IGluc3RhbGxlZC4gUGxlYXNlIGluc3RhbGwgaXQuXCIpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuXHQvLyBAdHMtaWdub3JlXHJcblx0Y29uc3Qge3RlbXBsYXRlcn0gPSBwbHVnaW5zW1widGVtcGxhdGVyLW9ic2lkaWFuXCJdO1xyXG5cdGNvbnN0IGZ1bmN0aW9ucyA9IGF3YWl0IHRlbXBsYXRlci5mdW5jdGlvbnNfZ2VuZXJhdG9yLmludGVybmFsX2Z1bmN0aW9ucy5nZW5lcmF0ZV9vYmplY3QoY29uZmlnKTtcclxuXHRmdW5jdGlvbnMudXNlciA9IHt9O1xyXG5cdGNvbnN0IHVzZXJTY3JpcHRGdW5jdGlvbnMgPSBhd2FpdCB0ZW1wbGF0ZXIuZnVuY3Rpb25zX2dlbmVyYXRvci51c2VyX2Z1bmN0aW9ucy51c2VyX3NjcmlwdF9mdW5jdGlvbnMuZ2VuZXJhdGVfdXNlcl9zY3JpcHRfZnVuY3Rpb25zKGNvbmZpZyk7XHJcblx0dXNlclNjcmlwdEZ1bmN0aW9ucy5mb3JFYWNoKCh2YWx1ZTphbnksa2V5OmFueSk9PntcclxuXHRcdGZ1bmN0aW9ucy51c2VyW2tleV0gPSB2YWx1ZTtcclxuXHR9XHJcblx0KTtcclxuXHRpZiAodGVtcGxhdGUpIHtcclxuXHRcdGNvbnN0IHVzZXJTeXN0ZW1GdW5jdGlvbnMgPSBhd2FpdCB0ZW1wbGF0ZXIuZnVuY3Rpb25zX2dlbmVyYXRvci51c2VyX2Z1bmN0aW9ucy51c2VyX3N5c3RlbV9mdW5jdGlvbnMuZ2VuZXJhdGVfc3lzdGVtX2Z1bmN0aW9ucyhjb25maWcpO1xyXG5cdFx0dXNlclN5c3RlbUZ1bmN0aW9ucy5mb3JFYWNoKCh2YWx1ZTphbnksa2V5OmFueSk9PntcclxuXHRcdFx0ZnVuY3Rpb25zLnVzZXJba2V5XSA9IHZhbHVlO1xyXG5cdFx0fVxyXG5cdFx0KTtcclxuXHR9XHJcblx0cmV0dXJuIGFzeW5jKGNvbW1hbmQ6YW55KT0+e1xyXG5cdFx0cmV0dXJuIGF3YWl0IHRlbXBsYXRlci5wYXJzZXIucGFyc2VfY29tbWFuZHMoY29tbWFuZCwgZnVuY3Rpb25zKTtcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFyc2VfdGVtcGxhdGVyKGFwcDpBcHAsdGVtcGxhdGU6c3RyaW5nfFRGaWxlLGV4dHJhY3Q9dHJ1ZSxleHRyYT1udWxsKSB7XHJcbiAgICBsZXQgbmMgPShhcHAgYXMgYW55KS5wbHVnaW5zLmdldFBsdWdpbignbm90ZS1jaGFpbicpO1xyXG4gICAgaWYoIW5jKXtyZXR1cm47fVxyXG4gICAgXHJcbiAgICBsZXQgZmlsZSA9IG5jLmNoYWluLmdldF90ZmlsZSh0ZW1wbGF0ZSlcclxuICAgIGlmKGZpbGUpe1xyXG4gICAgICAgIHRlbXBsYXRlID0gZmlsZVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBibG9ja3M6QXJyYXk8c3RyaW5nPjtcclxuICAgIGxldCB0ZW1wbGF0ZV9maWxlID0gbnVsbDtcclxuICAgIGlmKHRlbXBsYXRlIGluc3RhbmNlb2YgVEZpbGUpe1xyXG4gICAgICAgIHRlbXBsYXRlX2ZpbGUgPSB0ZW1wbGF0ZVxyXG4gICAgICAgIGlmKGV4dHJhY3Qpe1xyXG4gICAgICAgICAgICBibG9ja3MgPSBhd2FpdCBuYy5lZGl0b3IuZXh0cmFjdF90ZW1wbGF0ZXJfYmxvY2sodGVtcGxhdGUpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBsZXQgaXRlbSA9IGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKHRlbXBsYXRlKVxyXG4gICAgICAgICAgICBibG9ja3MgPSBbaXRlbV1cclxuICAgICAgICB9XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBpZihleHRyYWN0KXtcclxuICAgICAgICAgICAgYmxvY2tzID0gYXdhaXQgbmMuZWRpdG9yLmV4dHJhY3RfdGVtcGxhdGVyX2Jsb2NrKHRlbXBsYXRlKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgYmxvY2tzID0gW3RlbXBsYXRlXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoIXRlbXBsYXRlX2ZpbGUpe1xyXG4gICAgICAgIHRlbXBsYXRlX2ZpbGUgPSAnJ1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsZXQgYWN0aXZlX2ZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgIFxyXG4gICAgbGV0IG5vdGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuICAgIGlmKG5vdGVzLmxlbmd0aD09MCl7cmV0dXJuO31cclxuICAgIGxldCB0YXJnZXRfZmlsZSA9ICBub3Rlc1swXTtcclxuICAgIGxldCB0ZW1wbGF0ZUZ1bmMgPSBhd2FpdCB0ZW1wbGF0ZXIkMShhcHAsdGVtcGxhdGVfZmlsZSxhY3RpdmVfZmlsZSx0YXJnZXRfZmlsZSxleHRyYT1leHRyYSk7XHJcbiAgICBpZih0ZW1wbGF0ZUZ1bmMpe1xyXG4gICAgICAgIGxldCByZXMgPSBbXVxyXG4gICAgICAgIGZvcihsZXQgYmxvY2sgb2YgYmxvY2tzKXtcclxuICAgICAgICAgICAgbGV0IGl0ZW0gPSBhd2FpdCB0ZW1wbGF0ZUZ1bmMoYmxvY2spO1xyXG4gICAgICAgICAgICByZXMucHVzaChpdGVtKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgcmV0dXJuIFtdXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0b29nbGVfbm90ZV9jc3MoYXBwOkFwcCxkb2N1bWVudDphbnksbmFtZTpzdHJpbmcscmVmcmVzaD1mYWxzZSkge1xyXG4gICAgbGV0IG5jID0gKGFwcCBhcyBhbnkpLnBsdWdpbnMuZ2V0UGx1Z2luKCdub3RlLWNoYWluJyk7XHJcbiAgICBsZXQgdGZpbGUgPSBuYy5jaGFpbi5nZXRfdGZpbGUobmFtZSk7XHJcbiAgICBpZighdGZpbGUpe1xyXG4gICAgICAgIGxldCB0ZmlsZXM7XHJcbiAgICAgICAgaWYobmFtZT09Jy8nKXtcclxuICAgICAgICAgICAgdGZpbGVzID0gbmMuY2hhaW4uZ2V0X2FsbF90ZmlsZXMoKVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBsZXQgZm9sZGVyID0gbmMuY2hhaW4uZ2V0X2FsbF9mb2xkZXJzKCkuZmlsdGVyKCh4OlRGb2xkZXIpPT54Lm5hbWU9PW5hbWUpXHJcbiAgICAgICAgICAgIGlmKGZvbGRlci5sZW5ndGg9PTApe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRmaWxlcyA9IG5jLnV0aWxzLmNvbmNhdF9hcnJheShcclxuICAgICAgICAgICAgICAgIGZvbGRlci5tYXAoKHg6VEZvbGRlcik9Pm5jLmNoYWluLmdldF90ZmlsZXNfb2ZfZm9sZGVyKHgpKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZih0ZmlsZXMubGVuZ3RoPT0wKXtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0ZmlsZSA9IGF3YWl0IG5jLmNoYWluLnN1Z2d1c3Rlcl9ub3RlKHRmaWxlcylcclxuICAgICAgICBpZighdGZpbGUpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBsaW5rID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGZpbGUuYmFzZW5hbWUpO1xyXG4gICAgaWYobGluayAmJiAhcmVmcmVzaCl7XHJcbiAgICAgICAgbGluay5yZW1vdmUoKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgbGV0IGNzcyA9IGF3YWl0IG5jLmVkaXRvci5leHRyYWN0X2NvZGVfYmxvY2sodGZpbGUsJ2NzcycpXHJcbiAgICAgICAgbGV0IGlubmVyID0gY3NzLmpvaW4oJ1xcbicpXHJcbiAgICAgICAgaWYobGluayl7XHJcbiAgICAgICAgICAgIGxpbmsuaW5uZXJIVE1MID0gaW5uZXJcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgaWYoaW5uZXIhPScnKXtcclxuICAgICAgICAgICAgICAgIGxldCBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXHJcbiAgICAgICAgICAgICAgICBzdHlsZUVsZW1lbnQuaW5uZXJIVE1MPWlubmVyO1xyXG4gICAgICAgICAgICAgICAgc3R5bGVFbGVtZW50LmlkID0gdGZpbGUuYmFzZW5hbWU7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCAiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIGlzTm90aGluZyhzdWJqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIHN1YmplY3QgPT09ICd1bmRlZmluZWQnKSB8fCAoc3ViamVjdCA9PT0gbnVsbCk7XG59XG5cblxuZnVuY3Rpb24gaXNPYmplY3Qoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JykgJiYgKHN1YmplY3QgIT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIHRvQXJyYXkoc2VxdWVuY2UpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc2VxdWVuY2UpKSByZXR1cm4gc2VxdWVuY2U7XG4gIGVsc2UgaWYgKGlzTm90aGluZyhzZXF1ZW5jZSkpIHJldHVybiBbXTtcblxuICByZXR1cm4gWyBzZXF1ZW5jZSBdO1xufVxuXG5cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgaW5kZXgsIGxlbmd0aCwga2V5LCBzb3VyY2VLZXlzO1xuXG4gIGlmIChzb3VyY2UpIHtcbiAgICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzb3VyY2VLZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgIGtleSA9IHNvdXJjZUtleXNbaW5kZXhdO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5cbmZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIGNvdW50KSB7XG4gIHZhciByZXN1bHQgPSAnJywgY3ljbGU7XG5cbiAgZm9yIChjeWNsZSA9IDA7IGN5Y2xlIDwgY291bnQ7IGN5Y2xlICs9IDEpIHtcbiAgICByZXN1bHQgKz0gc3RyaW5nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5mdW5jdGlvbiBpc05lZ2F0aXZlWmVybyhudW1iZXIpIHtcbiAgcmV0dXJuIChudW1iZXIgPT09IDApICYmIChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPT09IDEgLyBudW1iZXIpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzLmlzTm90aGluZyAgICAgID0gaXNOb3RoaW5nO1xubW9kdWxlLmV4cG9ydHMuaXNPYmplY3QgICAgICAgPSBpc09iamVjdDtcbm1vZHVsZS5leHBvcnRzLnRvQXJyYXkgICAgICAgID0gdG9BcnJheTtcbm1vZHVsZS5leHBvcnRzLnJlcGVhdCAgICAgICAgID0gcmVwZWF0O1xubW9kdWxlLmV4cG9ydHMuaXNOZWdhdGl2ZVplcm8gPSBpc05lZ2F0aXZlWmVybztcbm1vZHVsZS5leHBvcnRzLmV4dGVuZCAgICAgICAgID0gZXh0ZW5kO1xuIiwgIi8vIFlBTUwgZXJyb3IgY2xhc3MuIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODQ1ODk4NFxuLy9cbid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcihleGNlcHRpb24sIGNvbXBhY3QpIHtcbiAgdmFyIHdoZXJlID0gJycsIG1lc3NhZ2UgPSBleGNlcHRpb24ucmVhc29uIHx8ICcodW5rbm93biByZWFzb24pJztcblxuICBpZiAoIWV4Y2VwdGlvbi5tYXJrKSByZXR1cm4gbWVzc2FnZTtcblxuICBpZiAoZXhjZXB0aW9uLm1hcmsubmFtZSkge1xuICAgIHdoZXJlICs9ICdpbiBcIicgKyBleGNlcHRpb24ubWFyay5uYW1lICsgJ1wiICc7XG4gIH1cblxuICB3aGVyZSArPSAnKCcgKyAoZXhjZXB0aW9uLm1hcmsubGluZSArIDEpICsgJzonICsgKGV4Y2VwdGlvbi5tYXJrLmNvbHVtbiArIDEpICsgJyknO1xuXG4gIGlmICghY29tcGFjdCAmJiBleGNlcHRpb24ubWFyay5zbmlwcGV0KSB7XG4gICAgd2hlcmUgKz0gJ1xcblxcbicgKyBleGNlcHRpb24ubWFyay5zbmlwcGV0O1xuICB9XG5cbiAgcmV0dXJuIG1lc3NhZ2UgKyAnICcgKyB3aGVyZTtcbn1cblxuXG5mdW5jdGlvbiBZQU1MRXhjZXB0aW9uKHJlYXNvbiwgbWFyaykge1xuICAvLyBTdXBlciBjb25zdHJ1Y3RvclxuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubmFtZSA9ICdZQU1MRXhjZXB0aW9uJztcbiAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gIHRoaXMubWFyayA9IG1hcms7XG4gIHRoaXMubWVzc2FnZSA9IGZvcm1hdEVycm9yKHRoaXMsIGZhbHNlKTtcblxuICAvLyBJbmNsdWRlIHN0YWNrIHRyYWNlIGluIGVycm9yIG9iamVjdFxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAvLyBDaHJvbWUgYW5kIE5vZGVKU1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIEZGLCBJRSAxMCsgYW5kIFNhZmFyaSA2Ky4gRmFsbGJhY2sgZm9yIG90aGVyc1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrIHx8ICcnO1xuICB9XG59XG5cblxuLy8gSW5oZXJpdCBmcm9tIEVycm9yXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbllBTUxFeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gWUFNTEV4Y2VwdGlvbjtcblxuXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGNvbXBhY3QpIHtcbiAgcmV0dXJuIHRoaXMubmFtZSArICc6ICcgKyBmb3JtYXRFcnJvcih0aGlzLCBjb21wYWN0KTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBZQU1MRXhjZXB0aW9uO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuXG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxuXG4vLyBnZXQgc25pcHBldCBmb3IgYSBzaW5nbGUgbGluZSwgcmVzcGVjdGluZyBtYXhMZW5ndGhcbmZ1bmN0aW9uIGdldExpbmUoYnVmZmVyLCBsaW5lU3RhcnQsIGxpbmVFbmQsIHBvc2l0aW9uLCBtYXhMaW5lTGVuZ3RoKSB7XG4gIHZhciBoZWFkID0gJyc7XG4gIHZhciB0YWlsID0gJyc7XG4gIHZhciBtYXhIYWxmTGVuZ3RoID0gTWF0aC5mbG9vcihtYXhMaW5lTGVuZ3RoIC8gMikgLSAxO1xuXG4gIGlmIChwb3NpdGlvbiAtIGxpbmVTdGFydCA+IG1heEhhbGZMZW5ndGgpIHtcbiAgICBoZWFkID0gJyAuLi4gJztcbiAgICBsaW5lU3RhcnQgPSBwb3NpdGlvbiAtIG1heEhhbGZMZW5ndGggKyBoZWFkLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChsaW5lRW5kIC0gcG9zaXRpb24gPiBtYXhIYWxmTGVuZ3RoKSB7XG4gICAgdGFpbCA9ICcgLi4uJztcbiAgICBsaW5lRW5kID0gcG9zaXRpb24gKyBtYXhIYWxmTGVuZ3RoIC0gdGFpbC5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0cjogaGVhZCArIGJ1ZmZlci5zbGljZShsaW5lU3RhcnQsIGxpbmVFbmQpLnJlcGxhY2UoL1xcdC9nLCAnXHUyMTkyJykgKyB0YWlsLFxuICAgIHBvczogcG9zaXRpb24gLSBsaW5lU3RhcnQgKyBoZWFkLmxlbmd0aCAvLyByZWxhdGl2ZSBwb3NpdGlvblxuICB9O1xufVxuXG5cbmZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbWF4KSB7XG4gIHJldHVybiBjb21tb24ucmVwZWF0KCcgJywgbWF4IC0gc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59XG5cblxuZnVuY3Rpb24gbWFrZVNuaXBwZXQobWFyaywgb3B0aW9ucykge1xuICBvcHRpb25zID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zIHx8IG51bGwpO1xuXG4gIGlmICghbWFyay5idWZmZXIpIHJldHVybiBudWxsO1xuXG4gIGlmICghb3B0aW9ucy5tYXhMZW5ndGgpIG9wdGlvbnMubWF4TGVuZ3RoID0gNzk7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbmRlbnQgICAgICAhPT0gJ251bWJlcicpIG9wdGlvbnMuaW5kZW50ICAgICAgPSAxO1xuICBpZiAodHlwZW9mIG9wdGlvbnMubGluZXNCZWZvcmUgIT09ICdudW1iZXInKSBvcHRpb25zLmxpbmVzQmVmb3JlID0gMztcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbmVzQWZ0ZXIgICE9PSAnbnVtYmVyJykgb3B0aW9ucy5saW5lc0FmdGVyICA9IDI7XG5cbiAgdmFyIHJlID0gL1xccj9cXG58XFxyfFxcMC9nO1xuICB2YXIgbGluZVN0YXJ0cyA9IFsgMCBdO1xuICB2YXIgbGluZUVuZHMgPSBbXTtcbiAgdmFyIG1hdGNoO1xuICB2YXIgZm91bmRMaW5lTm8gPSAtMTtcblxuICB3aGlsZSAoKG1hdGNoID0gcmUuZXhlYyhtYXJrLmJ1ZmZlcikpKSB7XG4gICAgbGluZUVuZHMucHVzaChtYXRjaC5pbmRleCk7XG4gICAgbGluZVN0YXJ0cy5wdXNoKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcblxuICAgIGlmIChtYXJrLnBvc2l0aW9uIDw9IG1hdGNoLmluZGV4ICYmIGZvdW5kTGluZU5vIDwgMCkge1xuICAgICAgZm91bmRMaW5lTm8gPSBsaW5lU3RhcnRzLmxlbmd0aCAtIDI7XG4gICAgfVxuICB9XG5cbiAgaWYgKGZvdW5kTGluZU5vIDwgMCkgZm91bmRMaW5lTm8gPSBsaW5lU3RhcnRzLmxlbmd0aCAtIDE7XG5cbiAgdmFyIHJlc3VsdCA9ICcnLCBpLCBsaW5lO1xuICB2YXIgbGluZU5vTGVuZ3RoID0gTWF0aC5taW4obWFyay5saW5lICsgb3B0aW9ucy5saW5lc0FmdGVyLCBsaW5lRW5kcy5sZW5ndGgpLnRvU3RyaW5nKCkubGVuZ3RoO1xuICB2YXIgbWF4TGluZUxlbmd0aCA9IG9wdGlvbnMubWF4TGVuZ3RoIC0gKG9wdGlvbnMuaW5kZW50ICsgbGluZU5vTGVuZ3RoICsgMyk7XG5cbiAgZm9yIChpID0gMTsgaSA8PSBvcHRpb25zLmxpbmVzQmVmb3JlOyBpKyspIHtcbiAgICBpZiAoZm91bmRMaW5lTm8gLSBpIDwgMCkgYnJlYWs7XG4gICAgbGluZSA9IGdldExpbmUoXG4gICAgICBtYXJrLmJ1ZmZlcixcbiAgICAgIGxpbmVTdGFydHNbZm91bmRMaW5lTm8gLSBpXSxcbiAgICAgIGxpbmVFbmRzW2ZvdW5kTGluZU5vIC0gaV0sXG4gICAgICBtYXJrLnBvc2l0aW9uIC0gKGxpbmVTdGFydHNbZm91bmRMaW5lTm9dIC0gbGluZVN0YXJ0c1tmb3VuZExpbmVObyAtIGldKSxcbiAgICAgIG1heExpbmVMZW5ndGhcbiAgICApO1xuICAgIHJlc3VsdCA9IGNvbW1vbi5yZXBlYXQoJyAnLCBvcHRpb25zLmluZGVudCkgKyBwYWRTdGFydCgobWFyay5saW5lIC0gaSArIDEpLnRvU3RyaW5nKCksIGxpbmVOb0xlbmd0aCkgK1xuICAgICAgJyB8ICcgKyBsaW5lLnN0ciArICdcXG4nICsgcmVzdWx0O1xuICB9XG5cbiAgbGluZSA9IGdldExpbmUobWFyay5idWZmZXIsIGxpbmVTdGFydHNbZm91bmRMaW5lTm9dLCBsaW5lRW5kc1tmb3VuZExpbmVOb10sIG1hcmsucG9zaXRpb24sIG1heExpbmVMZW5ndGgpO1xuICByZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnICcsIG9wdGlvbnMuaW5kZW50KSArIHBhZFN0YXJ0KChtYXJrLmxpbmUgKyAxKS50b1N0cmluZygpLCBsaW5lTm9MZW5ndGgpICtcbiAgICAnIHwgJyArIGxpbmUuc3RyICsgJ1xcbic7XG4gIHJlc3VsdCArPSBjb21tb24ucmVwZWF0KCctJywgb3B0aW9ucy5pbmRlbnQgKyBsaW5lTm9MZW5ndGggKyAzICsgbGluZS5wb3MpICsgJ14nICsgJ1xcbic7XG5cbiAgZm9yIChpID0gMTsgaSA8PSBvcHRpb25zLmxpbmVzQWZ0ZXI7IGkrKykge1xuICAgIGlmIChmb3VuZExpbmVObyArIGkgPj0gbGluZUVuZHMubGVuZ3RoKSBicmVhaztcbiAgICBsaW5lID0gZ2V0TGluZShcbiAgICAgIG1hcmsuYnVmZmVyLFxuICAgICAgbGluZVN0YXJ0c1tmb3VuZExpbmVObyArIGldLFxuICAgICAgbGluZUVuZHNbZm91bmRMaW5lTm8gKyBpXSxcbiAgICAgIG1hcmsucG9zaXRpb24gLSAobGluZVN0YXJ0c1tmb3VuZExpbmVOb10gLSBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vICsgaV0pLFxuICAgICAgbWF4TGluZUxlbmd0aFxuICAgICk7XG4gICAgcmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJyAnLCBvcHRpb25zLmluZGVudCkgKyBwYWRTdGFydCgobWFyay5saW5lICsgaSArIDEpLnRvU3RyaW5nKCksIGxpbmVOb0xlbmd0aCkgK1xuICAgICAgJyB8ICcgKyBsaW5lLnN0ciArICdcXG4nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC9cXG4kLywgJycpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gbWFrZVNuaXBwZXQ7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgWUFNTEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG5cbnZhciBUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMgPSBbXG4gICdraW5kJyxcbiAgJ211bHRpJyxcbiAgJ3Jlc29sdmUnLFxuICAnY29uc3RydWN0JyxcbiAgJ2luc3RhbmNlT2YnLFxuICAncHJlZGljYXRlJyxcbiAgJ3JlcHJlc2VudCcsXG4gICdyZXByZXNlbnROYW1lJyxcbiAgJ2RlZmF1bHRTdHlsZScsXG4gICdzdHlsZUFsaWFzZXMnXG5dO1xuXG52YXIgWUFNTF9OT0RFX0tJTkRTID0gW1xuICAnc2NhbGFyJyxcbiAgJ3NlcXVlbmNlJyxcbiAgJ21hcHBpbmcnXG5dO1xuXG5mdW5jdGlvbiBjb21waWxlU3R5bGVBbGlhc2VzKG1hcCkge1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgaWYgKG1hcCAhPT0gbnVsbCkge1xuICAgIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIG1hcFtzdHlsZV0uZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgcmVzdWx0W1N0cmluZyhhbGlhcyldID0gc3R5bGU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIFR5cGUodGFnLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoVFlQRV9DT05TVFJVQ1RPUl9PUFRJT05TLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVW5rbm93biBvcHRpb24gXCInICsgbmFtZSArICdcIiBpcyBtZXQgaW4gZGVmaW5pdGlvbiBvZiBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVE9ETzogQWRkIHRhZyBmb3JtYXQgY2hlY2suXG4gIHRoaXMub3B0aW9ucyAgICAgICA9IG9wdGlvbnM7IC8vIGtlZXAgb3JpZ2luYWwgb3B0aW9ucyBpbiBjYXNlIHVzZXIgd2FudHMgdG8gZXh0ZW5kIHRoaXMgdHlwZSBsYXRlclxuICB0aGlzLnRhZyAgICAgICAgICAgPSB0YWc7XG4gIHRoaXMua2luZCAgICAgICAgICA9IG9wdGlvbnNbJ2tpbmQnXSAgICAgICAgICB8fCBudWxsO1xuICB0aGlzLnJlc29sdmUgICAgICAgPSBvcHRpb25zWydyZXNvbHZlJ10gICAgICAgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdGhpcy5jb25zdHJ1Y3QgICAgID0gb3B0aW9uc1snY29uc3RydWN0J10gICAgIHx8IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhOyB9O1xuICB0aGlzLmluc3RhbmNlT2YgICAgPSBvcHRpb25zWydpbnN0YW5jZU9mJ10gICAgfHwgbnVsbDtcbiAgdGhpcy5wcmVkaWNhdGUgICAgID0gb3B0aW9uc1sncHJlZGljYXRlJ10gICAgIHx8IG51bGw7XG4gIHRoaXMucmVwcmVzZW50ICAgICA9IG9wdGlvbnNbJ3JlcHJlc2VudCddICAgICB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudE5hbWUgPSBvcHRpb25zWydyZXByZXNlbnROYW1lJ10gfHwgbnVsbDtcbiAgdGhpcy5kZWZhdWx0U3R5bGUgID0gb3B0aW9uc1snZGVmYXVsdFN0eWxlJ10gIHx8IG51bGw7XG4gIHRoaXMubXVsdGkgICAgICAgICA9IG9wdGlvbnNbJ211bHRpJ10gICAgICAgICB8fCBmYWxzZTtcbiAgdGhpcy5zdHlsZUFsaWFzZXMgID0gY29tcGlsZVN0eWxlQWxpYXNlcyhvcHRpb25zWydzdHlsZUFsaWFzZXMnXSB8fCBudWxsKTtcblxuICBpZiAoWUFNTF9OT0RFX0tJTkRTLmluZGV4T2YodGhpcy5raW5kKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVW5rbm93biBraW5kIFwiJyArIHRoaXMua2luZCArICdcIiBpcyBzcGVjaWZpZWQgZm9yIFwiJyArIHRhZyArICdcIiBZQU1MIHR5cGUuJyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUeXBlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuKi9cblxudmFyIFlBTUxFeGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xudmFyIFR5cGUgICAgICAgICAgPSByZXF1aXJlKCcuL3R5cGUnKTtcblxuXG5mdW5jdGlvbiBjb21waWxlTGlzdChzY2hlbWEsIG5hbWUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIHNjaGVtYVtuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50VHlwZSkge1xuICAgIHZhciBuZXdJbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAocHJldmlvdXNUeXBlLCBwcmV2aW91c0luZGV4KSB7XG4gICAgICBpZiAocHJldmlvdXNUeXBlLnRhZyA9PT0gY3VycmVudFR5cGUudGFnICYmXG4gICAgICAgICAgcHJldmlvdXNUeXBlLmtpbmQgPT09IGN1cnJlbnRUeXBlLmtpbmQgJiZcbiAgICAgICAgICBwcmV2aW91c1R5cGUubXVsdGkgPT09IGN1cnJlbnRUeXBlLm11bHRpKSB7XG5cbiAgICAgICAgbmV3SW5kZXggPSBwcmV2aW91c0luZGV4O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVzdWx0W25ld0luZGV4XSA9IGN1cnJlbnRUeXBlO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIGNvbXBpbGVNYXAoLyogbGlzdHMuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2NhbGFyOiB7fSxcbiAgICAgICAgc2VxdWVuY2U6IHt9LFxuICAgICAgICBtYXBwaW5nOiB7fSxcbiAgICAgICAgZmFsbGJhY2s6IHt9LFxuICAgICAgICBtdWx0aToge1xuICAgICAgICAgIHNjYWxhcjogW10sXG4gICAgICAgICAgc2VxdWVuY2U6IFtdLFxuICAgICAgICAgIG1hcHBpbmc6IFtdLFxuICAgICAgICAgIGZhbGxiYWNrOiBbXVxuICAgICAgICB9XG4gICAgICB9LCBpbmRleCwgbGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIGNvbGxlY3RUeXBlKHR5cGUpIHtcbiAgICBpZiAodHlwZS5tdWx0aSkge1xuICAgICAgcmVzdWx0Lm11bHRpW3R5cGUua2luZF0ucHVzaCh0eXBlKTtcbiAgICAgIHJlc3VsdC5tdWx0aVsnZmFsbGJhY2snXS5wdXNoKHR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdHlwZS5raW5kXVt0eXBlLnRhZ10gPSByZXN1bHRbJ2ZhbGxiYWNrJ11bdHlwZS50YWddID0gdHlwZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBhcmd1bWVudHNbaW5kZXhdLmZvckVhY2goY29sbGVjdFR5cGUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gU2NoZW1hKGRlZmluaXRpb24pIHtcbiAgcmV0dXJuIHRoaXMuZXh0ZW5kKGRlZmluaXRpb24pO1xufVxuXG5cblNjaGVtYS5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKGRlZmluaXRpb24pIHtcbiAgdmFyIGltcGxpY2l0ID0gW107XG4gIHZhciBleHBsaWNpdCA9IFtdO1xuXG4gIGlmIChkZWZpbml0aW9uIGluc3RhbmNlb2YgVHlwZSkge1xuICAgIC8vIFNjaGVtYS5leHRlbmQodHlwZSlcbiAgICBleHBsaWNpdC5wdXNoKGRlZmluaXRpb24pO1xuXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgIC8vIFNjaGVtYS5leHRlbmQoWyB0eXBlMSwgdHlwZTIsIC4uLiBdKVxuICAgIGV4cGxpY2l0ID0gZXhwbGljaXQuY29uY2F0KGRlZmluaXRpb24pO1xuXG4gIH0gZWxzZSBpZiAoZGVmaW5pdGlvbiAmJiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uLmltcGxpY2l0KSB8fCBBcnJheS5pc0FycmF5KGRlZmluaXRpb24uZXhwbGljaXQpKSkge1xuICAgIC8vIFNjaGVtYS5leHRlbmQoeyBleHBsaWNpdDogWyB0eXBlMSwgdHlwZTIsIC4uLiBdLCBpbXBsaWNpdDogWyB0eXBlMSwgdHlwZTIsIC4uLiBdIH0pXG4gICAgaWYgKGRlZmluaXRpb24uaW1wbGljaXQpIGltcGxpY2l0ID0gaW1wbGljaXQuY29uY2F0KGRlZmluaXRpb24uaW1wbGljaXQpO1xuICAgIGlmIChkZWZpbml0aW9uLmV4cGxpY2l0KSBleHBsaWNpdCA9IGV4cGxpY2l0LmNvbmNhdChkZWZpbml0aW9uLmV4cGxpY2l0KTtcblxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdTY2hlbWEuZXh0ZW5kIGFyZ3VtZW50IHNob3VsZCBiZSBhIFR5cGUsIFsgVHlwZSBdLCAnICtcbiAgICAgICdvciBhIHNjaGVtYSBkZWZpbml0aW9uICh7IGltcGxpY2l0OiBbLi4uXSwgZXhwbGljaXQ6IFsuLi5dIH0pJyk7XG4gIH1cblxuICBpbXBsaWNpdC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgaWYgKCEodHlwZSBpbnN0YW5jZW9mIFR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignU3BlY2lmaWVkIGxpc3Qgb2YgWUFNTCB0eXBlcyAob3IgYSBzaW5nbGUgVHlwZSBvYmplY3QpIGNvbnRhaW5zIGEgbm9uLVR5cGUgb2JqZWN0LicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlLmxvYWRLaW5kICYmIHR5cGUubG9hZEtpbmQgIT09ICdzY2FsYXInKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVGhlcmUgaXMgYSBub24tc2NhbGFyIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIEltcGxpY2l0IHJlc29sdmluZyBvZiBzdWNoIHR5cGVzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUubXVsdGkpIHtcbiAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdUaGVyZSBpcyBhIG11bHRpIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIE11bHRpIHRhZ3MgY2FuIG9ubHkgYmUgbGlzdGVkIGFzIGV4cGxpY2l0LicpO1xuICAgIH1cbiAgfSk7XG5cbiAgZXhwbGljaXQuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICghKHR5cGUgaW5zdGFuY2VvZiBUeXBlKSkge1xuICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1NwZWNpZmllZCBsaXN0IG9mIFlBTUwgdHlwZXMgKG9yIGEgc2luZ2xlIFR5cGUgb2JqZWN0KSBjb250YWlucyBhIG5vbi1UeXBlIG9iamVjdC4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKFNjaGVtYS5wcm90b3R5cGUpO1xuXG4gIHJlc3VsdC5pbXBsaWNpdCA9ICh0aGlzLmltcGxpY2l0IHx8IFtdKS5jb25jYXQoaW1wbGljaXQpO1xuICByZXN1bHQuZXhwbGljaXQgPSAodGhpcy5leHBsaWNpdCB8fCBbXSkuY29uY2F0KGV4cGxpY2l0KTtcblxuICByZXN1bHQuY29tcGlsZWRJbXBsaWNpdCA9IGNvbXBpbGVMaXN0KHJlc3VsdCwgJ2ltcGxpY2l0Jyk7XG4gIHJlc3VsdC5jb21waWxlZEV4cGxpY2l0ID0gY29tcGlsZUxpc3QocmVzdWx0LCAnZXhwbGljaXQnKTtcbiAgcmVzdWx0LmNvbXBpbGVkVHlwZU1hcCAgPSBjb21waWxlTWFwKHJlc3VsdC5jb21waWxlZEltcGxpY2l0LCByZXN1bHQuY29tcGlsZWRFeHBsaWNpdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWE7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c3RyJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiAnJzsgfVxufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2VxJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdOyB9XG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjptYXAnLCB7XG4gIGtpbmQ6ICdtYXBwaW5nJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTsgfVxufSk7XG4iLCAiLy8gU3RhbmRhcmQgWUFNTCdzIEZhaWxzYWZlIHNjaGVtYS5cbi8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwMjM0NlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL3N0cicpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvc2VxJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9tYXAnKVxuICBdXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE51bGwoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoO1xuXG4gIHJldHVybiAobWF4ID09PSAxICYmIGRhdGEgPT09ICd+JykgfHxcbiAgICAgICAgIChtYXggPT09IDQgJiYgKGRhdGEgPT09ICdudWxsJyB8fCBkYXRhID09PSAnTnVsbCcgfHwgZGF0YSA9PT0gJ05VTEwnKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxOdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNOdWxsKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ID09PSBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpudWxsJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxOdWxsLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxOdWxsLFxuICBwcmVkaWNhdGU6IGlzTnVsbCxcbiAgcmVwcmVzZW50OiB7XG4gICAgY2Fub25pY2FsOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnfic7ICAgIH0sXG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnbnVsbCc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnTlVMTCc7IH0sXG4gICAgY2FtZWxjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnTnVsbCc7IH0sXG4gICAgZW1wdHk6ICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiAnJzsgICAgIH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCb29sZWFuKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDQgJiYgKGRhdGEgPT09ICd0cnVlJyB8fCBkYXRhID09PSAnVHJ1ZScgfHwgZGF0YSA9PT0gJ1RSVUUnKSkgfHxcbiAgICAgICAgIChtYXggPT09IDUgJiYgKGRhdGEgPT09ICdmYWxzZScgfHwgZGF0YSA9PT0gJ0ZhbHNlJyB8fCBkYXRhID09PSAnRkFMU0UnKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCb29sZWFuKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICd0cnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RydWUnIHx8XG4gICAgICAgICBkYXRhID09PSAnVFJVRSc7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJvb2xlYW4sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJvb2xlYW4sXG4gIHByZWRpY2F0ZTogaXNCb29sZWFuLFxuICByZXByZXNlbnQ6IHtcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICd0cnVlJyA6ICdmYWxzZSc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAnVFJVRScgOiAnRkFMU0UnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RydWUnIDogJ0ZhbHNlJzsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBUeXBlICAgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIGlzSGV4Q29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkgfHxcbiAgICAgICAgICgoMHg0MS8qIEEgKi8gPD0gYykgJiYgKGMgPD0gMHg0Ni8qIEYgKi8pKSB8fFxuICAgICAgICAgKCgweDYxLyogYSAqLyA8PSBjKSAmJiAoYyA8PSAweDY2LyogZiAqLykpO1xufVxuXG5mdW5jdGlvbiBpc09jdENvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM3LyogNyAqLykpO1xufVxuXG5mdW5jdGlvbiBpc0RlY0NvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEludGVnZXIoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGhhc0RpZ2l0cyA9IGZhbHNlLFxuICAgICAgY2g7XG5cbiAgaWYgKCFtYXgpIHJldHVybiBmYWxzZTtcblxuICBjaCA9IGRhdGFbaW5kZXhdO1xuXG4gIC8vIHNpZ25cbiAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcrJykge1xuICAgIGNoID0gZGF0YVsrK2luZGV4XTtcbiAgfVxuXG4gIGlmIChjaCA9PT0gJzAnKSB7XG4gICAgLy8gMFxuICAgIGlmIChpbmRleCArIDEgPT09IG1heCkgcmV0dXJuIHRydWU7XG4gICAgY2ggPSBkYXRhWysraW5kZXhdO1xuXG4gICAgLy8gYmFzZSAyLCBiYXNlIDgsIGJhc2UgMTZcblxuICAgIGlmIChjaCA9PT0gJ2InKSB7XG4gICAgICAvLyBiYXNlIDJcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgICAgIGlmIChjaCAhPT0gJzAnICYmIGNoICE9PSAnMScpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgICB9XG5cblxuICAgIGlmIChjaCA9PT0gJ3gnKSB7XG4gICAgICAvLyBiYXNlIDE2XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWlzSGV4Q29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cblxuXG4gICAgaWYgKGNoID09PSAnbycpIHtcbiAgICAgIC8vIGJhc2UgOFxuICAgICAgaW5kZXgrKztcblxuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFpc09jdENvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgICB9XG4gIH1cblxuICAvLyBiYXNlIDEwIChleGNlcHQgMClcblxuICAvLyB2YWx1ZSBzaG91bGQgbm90IHN0YXJ0IHdpdGggYF9gO1xuICBpZiAoY2ggPT09ICdfJykgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgIGlmICghaXNEZWNDb2RlKGRhdGEuY2hhckNvZGVBdChpbmRleCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gIH1cblxuICAvLyBTaG91bGQgaGF2ZSBkaWdpdHMgYW5kIHNob3VsZCBub3QgZW5kIHdpdGggYF9gXG4gIGlmICghaGFzRGlnaXRzIHx8IGNoID09PSAnXycpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbEludGVnZXIoZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLCBzaWduID0gMSwgY2g7XG5cbiAgaWYgKHZhbHVlLmluZGV4T2YoJ18nKSAhPT0gLTEpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL18vZywgJycpO1xuICB9XG5cbiAgY2ggPSB2YWx1ZVswXTtcblxuICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSB7XG4gICAgaWYgKGNoID09PSAnLScpIHNpZ24gPSAtMTtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICAgIGNoID0gdmFsdWVbMF07XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcwJykgcmV0dXJuIDA7XG5cbiAgaWYgKGNoID09PSAnMCcpIHtcbiAgICBpZiAodmFsdWVbMV0gPT09ICdiJykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgMik7XG4gICAgaWYgKHZhbHVlWzFdID09PSAneCcpIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIDE2KTtcbiAgICBpZiAodmFsdWVbMV0gPT09ICdvJykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgOCk7XG4gIH1cblxuICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZWdlcihvYmplY3QpIHtcbiAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmXG4gICAgICAgICAob2JqZWN0ICUgMSA9PT0gMCAmJiAhY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEludGVnZXIsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEludGVnZXIsXG4gIHByZWRpY2F0ZTogaXNJbnRlZ2VyLFxuICByZXByZXNlbnQ6IHtcbiAgICBiaW5hcnk6ICAgICAgZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqID49IDAgPyAnMGInICsgb2JqLnRvU3RyaW5nKDIpIDogJy0wYicgKyBvYmoudG9TdHJpbmcoMikuc2xpY2UoMSk7IH0sXG4gICAgb2N0YWw6ICAgICAgIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA+PSAwID8gJzBvJyAgKyBvYmoudG9TdHJpbmcoOCkgOiAnLTBvJyAgKyBvYmoudG9TdHJpbmcoOCkuc2xpY2UoMSk7IH0sXG4gICAgZGVjaW1hbDogICAgIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iai50b1N0cmluZygxMCk7IH0sXG4gICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgIGhleGFkZWNpbWFsOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogPj0gMCA/ICcweCcgKyBvYmoudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgOiAgJy0weCcgKyBvYmoudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkuc2xpY2UoMSk7IH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnZGVjaW1hbCcsXG4gIHN0eWxlQWxpYXNlczoge1xuICAgIGJpbmFyeTogICAgICBbIDIsICAnYmluJyBdLFxuICAgIG9jdGFsOiAgICAgICBbIDgsICAnb2N0JyBdLFxuICAgIGRlY2ltYWw6ICAgICBbIDEwLCAnZGVjJyBdLFxuICAgIGhleGFkZWNpbWFsOiBbIDE2LCAnaGV4JyBdXG4gIH1cbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIFR5cGUgICA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIFlBTUxfRkxPQVRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoXG4gIC8vIDIuNWU0LCAyLjUgYW5kIGludGVnZXJzXG4gICdeKD86Wy0rXT8oPzpbMC05XVswLTlfXSopKD86XFxcXC5bMC05X10qKT8oPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuMmU0LCAuMlxuICAvLyBzcGVjaWFsIGNhc2UsIHNlZW1zIG5vdCBmcm9tIHNwZWNcbiAgJ3xcXFxcLlswLTlfXSsoPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuaW5mXG4gICd8Wy0rXT9cXFxcLig/OmluZnxJbmZ8SU5GKScgK1xuICAvLyAubmFuXG4gICd8XFxcXC4oPzpuYW58TmFOfE5BTikpJCcpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEZsb2F0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoIVlBTUxfRkxPQVRfUEFUVEVSTi50ZXN0KGRhdGEpIHx8XG4gICAgICAvLyBRdWljayBoYWNrIHRvIG5vdCBhbGxvdyBpbnRlZ2VycyBlbmQgd2l0aCBgX2BcbiAgICAgIC8vIFByb2JhYmx5IHNob3VsZCB1cGRhdGUgcmVnZXhwICYgY2hlY2sgc3BlZWRcbiAgICAgIGRhdGFbZGF0YS5sZW5ndGggLSAxXSA9PT0gJ18nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxGbG9hdChkYXRhKSB7XG4gIHZhciB2YWx1ZSwgc2lnbjtcblxuICB2YWx1ZSAgPSBkYXRhLnJlcGxhY2UoL18vZywgJycpLnRvTG93ZXJDYXNlKCk7XG4gIHNpZ24gICA9IHZhbHVlWzBdID09PSAnLScgPyAtMSA6IDE7XG5cbiAgaWYgKCcrLScuaW5kZXhPZih2YWx1ZVswXSkgPj0gMCkge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcuaW5mJykge1xuICAgIHJldHVybiAoc2lnbiA9PT0gMSkgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJy5uYW4nKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICByZXR1cm4gc2lnbiAqIHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbn1cblxuXG52YXIgU0NJRU5USUZJQ19XSVRIT1VUX0RPVCA9IC9eWy0rXT9bMC05XStlLztcblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbEZsb2F0KG9iamVjdCwgc3R5bGUpIHtcbiAgdmFyIHJlcztcblxuICBpZiAoaXNOYU4ob2JqZWN0KSkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLm5hbic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy5OQU4nO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICcuTmFOJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZID09PSBvYmplY3QpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy5pbmYnO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICcuSU5GJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLkluZic7XG4gICAgfVxuICB9IGVsc2UgaWYgKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gb2JqZWN0KSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICctLmluZic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy0uSU5GJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLS5JbmYnO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSkge1xuICAgIHJldHVybiAnLTAuMCc7XG4gIH1cblxuICByZXMgPSBvYmplY3QudG9TdHJpbmcoMTApO1xuXG4gIC8vIEpTIHN0cmluZ2lmaWVyIGNhbiBidWlsZCBzY2llbnRpZmljIGZvcm1hdCB3aXRob3V0IGRvdHM6IDVlLTEwMCxcbiAgLy8gd2hpbGUgWUFNTCByZXF1cmVzIGRvdDogNS5lLTEwMC4gRml4IGl0IHdpdGggc2ltcGxlIGhhY2tcblxuICByZXR1cm4gU0NJRU5USUZJQ19XSVRIT1VUX0RPVC50ZXN0KHJlcykgPyByZXMucmVwbGFjZSgnZScsICcuZScpIDogcmVzO1xufVxuXG5mdW5jdGlvbiBpc0Zsb2F0KG9iamVjdCkge1xuICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBOdW1iZXJdJykgJiZcbiAgICAgICAgIChvYmplY3QgJSAxICE9PSAwIHx8IGNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEZsb2F0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxGbG9hdCxcbiAgcHJlZGljYXRlOiBpc0Zsb2F0LFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxGbG9hdCxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG4iLCAiLy8gU3RhbmRhcmQgWUFNTCdzIEpTT04gc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODAzMjMxXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgdGhpcyBzY2hlbWEgaXMgbm90IHN1Y2ggc3RyaWN0IGFzIGRlZmluZWQgaW4gdGhlIFlBTUwgc3BlY2lmaWNhdGlvbi5cbi8vIEl0IGFsbG93cyBudW1iZXJzIGluIGJpbmFyeSBub3RhaW9uLCB1c2UgYE51bGxgIGFuZCBgTlVMTGAgYXMgYG51bGxgLCBldGMuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWlsc2FmZScpLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9udWxsJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9ib29sJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9pbnQnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2Zsb2F0JylcbiAgXVxufSk7XG4iLCAiLy8gU3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODA0OTIzXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgQ29yZSBzY2hlbWEgaGFzIG5vIGRpc3RpbmN0aW9ucyBmcm9tIEpTT04gc2NoZW1hIGlzIEpTLVlBTUwuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9qc29uJyk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIFlBTUxfREFURV9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldKSQnKTsgICAgICAgICAgICAgICAgICAgLy8gWzNdIGRheVxuXG52YXIgWUFNTF9USU1FU1RBTVBfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ14oWzAtOV1bMC05XVswLTldWzAtOV0pJyAgICAgICAgICArIC8vIFsxXSB5ZWFyXG4gICctKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgKyAvLyBbMl0gbW9udGhcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFszXSBkYXlcbiAgJyg/OltUdF18WyBcXFxcdF0rKScgICAgICAgICAgICAgICAgICsgLy8gLi4uXG4gICcoWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNF0gaG91clxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzVdIG1pbnV0ZVxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzZdIHNlY29uZFxuICAnKD86XFxcXC4oWzAtOV0qKSk/JyAgICAgICAgICAgICAgICAgKyAvLyBbN10gZnJhY3Rpb25cbiAgJyg/OlsgXFxcXHRdKihafChbLStdKShbMC05XVswLTldPyknICsgLy8gWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91clxuICAnKD86OihbMC05XVswLTldKSk/KSk/JCcpOyAgICAgICAgICAgLy8gWzExXSB0el9taW51dGVcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoWUFNTF9EQVRFX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wKGRhdGEpIHtcbiAgdmFyIG1hdGNoLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24gPSAwLFxuICAgICAgZGVsdGEgPSBudWxsLCB0el9ob3VyLCB0el9taW51dGUsIGRhdGU7XG5cbiAgbWF0Y2ggPSBZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgbWF0Y2ggPSBZQU1MX1RJTUVTVEFNUF9SRUdFWFAuZXhlYyhkYXRhKTtcblxuICBpZiAobWF0Y2ggPT09IG51bGwpIHRocm93IG5ldyBFcnJvcignRGF0ZSByZXNvbHZlIGVycm9yJyk7XG5cbiAgLy8gbWF0Y2g6IFsxXSB5ZWFyIFsyXSBtb250aCBbM10gZGF5XG5cbiAgeWVhciA9ICsobWF0Y2hbMV0pO1xuICBtb250aCA9ICsobWF0Y2hbMl0pIC0gMTsgLy8gSlMgbW9udGggc3RhcnRzIHdpdGggMFxuICBkYXkgPSArKG1hdGNoWzNdKTtcblxuICBpZiAoIW1hdGNoWzRdKSB7IC8vIG5vIGhvdXJcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSkpO1xuICB9XG5cbiAgLy8gbWF0Y2g6IFs0XSBob3VyIFs1XSBtaW51dGUgWzZdIHNlY29uZCBbN10gZnJhY3Rpb25cblxuICBob3VyID0gKyhtYXRjaFs0XSk7XG4gIG1pbnV0ZSA9ICsobWF0Y2hbNV0pO1xuICBzZWNvbmQgPSArKG1hdGNoWzZdKTtcblxuICBpZiAobWF0Y2hbN10pIHtcbiAgICBmcmFjdGlvbiA9IG1hdGNoWzddLnNsaWNlKDAsIDMpO1xuICAgIHdoaWxlIChmcmFjdGlvbi5sZW5ndGggPCAzKSB7IC8vIG1pbGxpLXNlY29uZHNcbiAgICAgIGZyYWN0aW9uICs9ICcwJztcbiAgICB9XG4gICAgZnJhY3Rpb24gPSArZnJhY3Rpb247XG4gIH1cblxuICAvLyBtYXRjaDogWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91ciBbMTFdIHR6X21pbnV0ZVxuXG4gIGlmIChtYXRjaFs5XSkge1xuICAgIHR6X2hvdXIgPSArKG1hdGNoWzEwXSk7XG4gICAgdHpfbWludXRlID0gKyhtYXRjaFsxMV0gfHwgMCk7XG4gICAgZGVsdGEgPSAodHpfaG91ciAqIDYwICsgdHpfbWludXRlKSAqIDYwMDAwOyAvLyBkZWx0YSBpbiBtaWxpLXNlY29uZHNcbiAgICBpZiAobWF0Y2hbOV0gPT09ICctJykgZGVsdGEgPSAtZGVsdGE7XG4gIH1cblxuICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZyYWN0aW9uKSk7XG5cbiAgaWYgKGRlbHRhKSBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSBkZWx0YSk7XG5cbiAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudFlhbWxUaW1lc3RhbXAob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHJldHVybiBvYmplY3QudG9JU09TdHJpbmcoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxUaW1lc3RhbXAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFRpbWVzdGFtcCxcbiAgaW5zdGFuY2VPZjogRGF0ZSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sVGltZXN0YW1wXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE1lcmdlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICc8PCcgfHwgZGF0YSA9PT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE1lcmdlXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG5cblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cblxuLy8gWyA2NCwgNjUsIDY2IF0gLT4gWyBwYWRkaW5nLCBDUiwgTEYgXVxudmFyIEJBU0U2NF9NQVAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cXG5cXHInO1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQmluYXJ5KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgY29kZSwgaWR4LCBiaXRsZW4gPSAwLCBtYXggPSBkYXRhLmxlbmd0aCwgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IG9uZSBieSBvbmUuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGNvZGUgPSBtYXAuaW5kZXhPZihkYXRhLmNoYXJBdChpZHgpKTtcblxuICAgIC8vIFNraXAgQ1IvTEZcbiAgICBpZiAoY29kZSA+IDY0KSBjb250aW51ZTtcblxuICAgIC8vIEZhaWwgb24gaWxsZWdhbCBjaGFyYWN0ZXJzXG4gICAgaWYgKGNvZGUgPCAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICBiaXRsZW4gKz0gNjtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIGFyZSBhbnkgYml0cyBsZWZ0LCBzb3VyY2Ugd2FzIGNvcnJ1cHRlZFxuICByZXR1cm4gKGJpdGxlbiAlIDgpID09PSAwO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQmluYXJ5KGRhdGEpIHtcbiAgdmFyIGlkeCwgdGFpbGJpdHMsXG4gICAgICBpbnB1dCA9IGRhdGEucmVwbGFjZSgvW1xcclxcbj1dL2csICcnKSwgLy8gcmVtb3ZlIENSL0xGICYgcGFkZGluZyB0byBzaW1wbGlmeSBzY2FuXG4gICAgICBtYXggPSBpbnB1dC5sZW5ndGgsXG4gICAgICBtYXAgPSBCQVNFNjRfTUFQLFxuICAgICAgYml0cyA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICAvLyBDb2xsZWN0IGJ5IDYqNCBiaXRzICgzIGJ5dGVzKVxuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGlmICgoaWR4ICUgNCA9PT0gMCkgJiYgaWR4KSB7XG4gICAgICByZXN1bHQucHVzaCgoYml0cyA+PiAxNikgJiAweEZGKTtcbiAgICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgICByZXN1bHQucHVzaChiaXRzICYgMHhGRik7XG4gICAgfVxuXG4gICAgYml0cyA9IChiaXRzIDw8IDYpIHwgbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGlkeCkpO1xuICB9XG5cbiAgLy8gRHVtcCB0YWlsXG5cbiAgdGFpbGJpdHMgPSAobWF4ICUgNCkgKiA2O1xuXG4gIGlmICh0YWlsYml0cyA9PT0gMCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDE2KSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goYml0cyAmIDB4RkYpO1xuICB9IGVsc2UgaWYgKHRhaWxiaXRzID09PSAxOCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDEwKSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDIpICYgMHhGRik7XG4gIH0gZWxzZSBpZiAodGFpbGJpdHMgPT09IDEyKSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gNCkgJiAweEZGKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sQmluYXJ5KG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJycsIGJpdHMgPSAwLCBpZHgsIHRhaWwsXG4gICAgICBtYXggPSBvYmplY3QubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IGV2ZXJ5IHRocmVlIGJ5dGVzIHRvIDQgQVNDSUkgY2hhcmFjdGVycy5cblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDMgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTIpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgOCkgKyBvYmplY3RbaWR4XTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWwgPSBtYXggJSAzO1xuXG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gNikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAyKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDQpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDIpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gICdbb2JqZWN0IFVpbnQ4QXJyYXldJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCaW5hcnksXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJpbmFyeSxcbiAgcHJlZGljYXRlOiBpc0JpbmFyeSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sQmluYXJ5XG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfdG9TdHJpbmcgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE9tYXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIG9iamVjdEtleXMgPSBbXSwgaW5kZXgsIGxlbmd0aCwgcGFpciwgcGFpcktleSwgcGFpckhhc0tleSxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG4gICAgcGFpckhhc0tleSA9IGZhbHNlO1xuXG4gICAgaWYgKF90b1N0cmluZy5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChwYWlyLCBwYWlyS2V5KSkge1xuICAgICAgICBpZiAoIXBhaXJIYXNLZXkpIHBhaXJIYXNLZXkgPSB0cnVlO1xuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhaXJIYXNLZXkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvYmplY3RLZXlzLmluZGV4T2YocGFpcktleSkgPT09IC0xKSBvYmplY3RLZXlzLnB1c2gocGFpcktleSk7XG4gICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE9tYXAoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6b21hcCcsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxPbWFwLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxPbWFwXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoX3RvU3RyaW5nLmNhbGwocGFpcikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHJldHVybiBmYWxzZTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sUGFpcnMoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIFtdO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFBhaXJzLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxQYWlyc1xufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sU2V0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBrZXksIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgaWYgKG9iamVjdFtrZXldICE9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxTZXQoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2V0Jywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sU2V0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxTZXRcbn0pO1xuIiwgIi8vIEpTLVlBTUwncyBkZWZhdWx0IHNjaGVtYSBmb3IgYHNhZmVMb2FkYCBmdW5jdGlvbi5cbi8vIEl0IGlzIG5vdCBkZXNjcmliZWQgaW4gdGhlIFlBTUwgc3BlY2lmaWNhdGlvbi5cbi8vXG4vLyBUaGlzIHNjaGVtYSBpcyBiYXNlZCBvbiBzdGFuZGFyZCBZQU1MJ3MgQ29yZSBzY2hlbWEgYW5kIGluY2x1ZGVzIG1vc3Qgb2Zcbi8vIGV4dHJhIHR5cGVzIGRlc2NyaWJlZCBhdCBZQU1MIHRhZyByZXBvc2l0b3J5LiAoaHR0cDovL3lhbWwub3JnL3R5cGUvKVxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29yZScpLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS90aW1lc3RhbXAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL21lcmdlJylcbiAgXSxcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL2JpbmFyeScpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvb21hcCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvcGFpcnMnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL3NldCcpXG4gIF1cbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuLG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cblxudmFyIGNvbW1vbiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIFlBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xudmFyIG1ha2VTbmlwcGV0ICAgICAgICAgPSByZXF1aXJlKCcuL3NuaXBwZXQnKTtcbnZhciBERUZBVUxUX1NDSEVNQSAgICAgID0gcmVxdWlyZSgnLi9zY2hlbWEvZGVmYXVsdCcpO1xuXG5cbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5cbnZhciBDT05URVhUX0ZMT1dfSU4gICA9IDE7XG52YXIgQ09OVEVYVF9GTE9XX09VVCAgPSAyO1xudmFyIENPTlRFWFRfQkxPQ0tfSU4gID0gMztcbnZhciBDT05URVhUX0JMT0NLX09VVCA9IDQ7XG5cblxudmFyIENIT01QSU5HX0NMSVAgID0gMTtcbnZhciBDSE9NUElOR19TVFJJUCA9IDI7XG52YXIgQ0hPTVBJTkdfS0VFUCAgPSAzO1xuXG5cbnZhciBQQVRURVJOX05PTl9QUklOVEFCTEUgICAgICAgICA9IC9bXFx4MDAtXFx4MDhcXHgwQlxceDBDXFx4MEUtXFx4MUZcXHg3Ri1cXHg4NFxceDg2LVxceDlGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLztcbnZhciBQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUyA9IC9bXFx4ODVcXHUyMDI4XFx1MjAyOV0vO1xudmFyIFBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTICAgICAgID0gL1ssXFxbXFxdXFx7XFx9XS87XG52YXIgUEFUVEVSTl9UQUdfSEFORExFICAgICAgICAgICAgPSAvXig/OiF8ISF8IVthLXpcXC1dKyEpJC9pO1xudmFyIFBBVFRFUk5fVEFHX1VSSSAgICAgICAgICAgICAgID0gL14oPzohfFteLFxcW1xcXVxce1xcfV0pKD86JVswLTlhLWZdezJ9fFswLTlhLXpcXC0jO1xcL1xcPzpAJj1cXCtcXCQsX1xcLiF+XFwqJ1xcKFxcKVxcW1xcXV0pKiQvaTtcblxuXG5mdW5jdGlvbiBfY2xhc3Mob2JqKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTsgfVxuXG5mdW5jdGlvbiBpc19FT0woYykge1xuICByZXR1cm4gKGMgPT09IDB4MEEvKiBMRiAqLykgfHwgKGMgPT09IDB4MEQvKiBDUiAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX1dISVRFX1NQQUNFKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fCAoYyA9PT0gMHgyMC8qIFNwYWNlICovKTtcbn1cblxuZnVuY3Rpb24gaXNfV1NfT1JfRU9MKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fFxuICAgICAgICAgKGMgPT09IDB4MjAvKiBTcGFjZSAqLykgfHxcbiAgICAgICAgIChjID09PSAweDBBLyogTEYgKi8pIHx8XG4gICAgICAgICAoYyA9PT0gMHgwRC8qIENSICovKTtcbn1cblxuZnVuY3Rpb24gaXNfRkxPV19JTkRJQ0FUT1IoYykge1xuICByZXR1cm4gYyA9PT0gMHgyQy8qICwgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4NUIvKiBbICovIHx8XG4gICAgICAgICBjID09PSAweDVELyogXSAqLyB8fFxuICAgICAgICAgYyA9PT0gMHg3Qi8qIHsgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4N0QvKiB9ICovO1xufVxuXG5mdW5jdGlvbiBmcm9tSGV4Q29kZShjKSB7XG4gIHZhciBsYztcblxuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG4gIGxjID0gYyB8IDB4MjA7XG5cbiAgaWYgKCgweDYxLyogYSAqLyA8PSBsYykgJiYgKGxjIDw9IDB4NjYvKiBmICovKSkge1xuICAgIHJldHVybiBsYyAtIDB4NjEgKyAxMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlZEhleExlbihjKSB7XG4gIGlmIChjID09PSAweDc4LyogeCAqLykgeyByZXR1cm4gMjsgfVxuICBpZiAoYyA9PT0gMHg3NS8qIHUgKi8pIHsgcmV0dXJuIDQ7IH1cbiAgaWYgKGMgPT09IDB4NTUvKiBVICovKSB7IHJldHVybiA4OyB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBmcm9tRGVjaW1hbENvZGUoYykge1xuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRXNjYXBlU2VxdWVuY2UoYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBpbmRlbnQgKi9cbiAgcmV0dXJuIChjID09PSAweDMwLyogMCAqLykgPyAnXFx4MDAnIDpcbiAgICAgICAgKGMgPT09IDB4NjEvKiBhICovKSA/ICdcXHgwNycgOlxuICAgICAgICAoYyA9PT0gMHg2Mi8qIGIgKi8pID8gJ1xceDA4JyA6XG4gICAgICAgIChjID09PSAweDc0LyogdCAqLykgPyAnXFx4MDknIDpcbiAgICAgICAgKGMgPT09IDB4MDkvKiBUYWIgKi8pID8gJ1xceDA5JyA6XG4gICAgICAgIChjID09PSAweDZFLyogbiAqLykgPyAnXFx4MEEnIDpcbiAgICAgICAgKGMgPT09IDB4NzYvKiB2ICovKSA/ICdcXHgwQicgOlxuICAgICAgICAoYyA9PT0gMHg2Ni8qIGYgKi8pID8gJ1xceDBDJyA6XG4gICAgICAgIChjID09PSAweDcyLyogciAqLykgPyAnXFx4MEQnIDpcbiAgICAgICAgKGMgPT09IDB4NjUvKiBlICovKSA/ICdcXHgxQicgOlxuICAgICAgICAoYyA9PT0gMHgyMC8qIFNwYWNlICovKSA/ICcgJyA6XG4gICAgICAgIChjID09PSAweDIyLyogXCIgKi8pID8gJ1xceDIyJyA6XG4gICAgICAgIChjID09PSAweDJGLyogLyAqLykgPyAnLycgOlxuICAgICAgICAoYyA9PT0gMHg1Qy8qIFxcICovKSA/ICdcXHg1QycgOlxuICAgICAgICAoYyA9PT0gMHg0RS8qIE4gKi8pID8gJ1xceDg1JyA6XG4gICAgICAgIChjID09PSAweDVGLyogXyAqLykgPyAnXFx4QTAnIDpcbiAgICAgICAgKGMgPT09IDB4NEMvKiBMICovKSA/ICdcXHUyMDI4JyA6XG4gICAgICAgIChjID09PSAweDUwLyogUCAqLykgPyAnXFx1MjAyOScgOiAnJztcbn1cblxuZnVuY3Rpb24gY2hhckZyb21Db2RlcG9pbnQoYykge1xuICBpZiAoYyA8PSAweEZGRkYpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgfVxuICAvLyBFbmNvZGUgVVRGLTE2IHN1cnJvZ2F0ZSBwYWlyXG4gIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi0xNiNDb2RlX3BvaW50c19VLjJCMDEwMDAwX3RvX1UuMkIxMEZGRkZcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgKChjIC0gMHgwMTAwMDApID4+IDEwKSArIDB4RDgwMCxcbiAgICAoKGMgLSAweDAxMDAwMCkgJiAweDAzRkYpICsgMHhEQzAwXG4gICk7XG59XG5cbnZhciBzaW1wbGVFc2NhcGVDaGVjayA9IG5ldyBBcnJheSgyNTYpOyAvLyBpbnRlZ2VyLCBmb3IgZmFzdCBhY2Nlc3NcbnZhciBzaW1wbGVFc2NhcGVNYXAgPSBuZXcgQXJyYXkoMjU2KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgc2ltcGxlRXNjYXBlQ2hlY2tbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKSA/IDEgOiAwO1xuICBzaW1wbGVFc2NhcGVNYXBbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKTtcbn1cblxuXG5mdW5jdGlvbiBTdGF0ZShpbnB1dCwgb3B0aW9ucykge1xuICB0aGlzLmlucHV0ID0gaW5wdXQ7XG5cbiAgdGhpcy5maWxlbmFtZSAgPSBvcHRpb25zWydmaWxlbmFtZSddICB8fCBudWxsO1xuICB0aGlzLnNjaGVtYSAgICA9IG9wdGlvbnNbJ3NjaGVtYSddICAgIHx8IERFRkFVTFRfU0NIRU1BO1xuICB0aGlzLm9uV2FybmluZyA9IG9wdGlvbnNbJ29uV2FybmluZyddIHx8IG51bGw7XG4gIC8vIChIaWRkZW4pIFJlbW92ZT8gbWFrZXMgdGhlIGxvYWRlciB0byBleHBlY3QgWUFNTCAxLjEgZG9jdW1lbnRzXG4gIC8vIGlmIHN1Y2ggZG9jdW1lbnRzIGhhdmUgbm8gZXhwbGljaXQgJVlBTUwgZGlyZWN0aXZlXG4gIHRoaXMubGVnYWN5ICAgID0gb3B0aW9uc1snbGVnYWN5J10gICAgfHwgZmFsc2U7XG5cbiAgdGhpcy5qc29uICAgICAgPSBvcHRpb25zWydqc29uJ10gICAgICB8fCBmYWxzZTtcbiAgdGhpcy5saXN0ZW5lciAgPSBvcHRpb25zWydsaXN0ZW5lciddICB8fCBudWxsO1xuXG4gIHRoaXMuaW1wbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkSW1wbGljaXQ7XG4gIHRoaXMudHlwZU1hcCAgICAgICA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkVHlwZU1hcDtcblxuICB0aGlzLmxlbmd0aCAgICAgPSBpbnB1dC5sZW5ndGg7XG4gIHRoaXMucG9zaXRpb24gICA9IDA7XG4gIHRoaXMubGluZSAgICAgICA9IDA7XG4gIHRoaXMubGluZVN0YXJ0ICA9IDA7XG4gIHRoaXMubGluZUluZGVudCA9IDA7XG5cbiAgLy8gcG9zaXRpb24gb2YgZmlyc3QgbGVhZGluZyB0YWIgaW4gdGhlIGN1cnJlbnQgbGluZSxcbiAgLy8gdXNlZCB0byBtYWtlIHN1cmUgdGhlcmUgYXJlIG5vIHRhYnMgaW4gdGhlIGluZGVudGF0aW9uXG4gIHRoaXMuZmlyc3RUYWJJbkxpbmUgPSAtMTtcblxuICB0aGlzLmRvY3VtZW50cyA9IFtdO1xuXG4gIC8qXG4gIHRoaXMudmVyc2lvbjtcbiAgdGhpcy5jaGVja0xpbmVCcmVha3M7XG4gIHRoaXMudGFnTWFwO1xuICB0aGlzLmFuY2hvck1hcDtcbiAgdGhpcy50YWc7XG4gIHRoaXMuYW5jaG9yO1xuICB0aGlzLmtpbmQ7XG4gIHRoaXMucmVzdWx0OyovXG5cbn1cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVycm9yKHN0YXRlLCBtZXNzYWdlKSB7XG4gIHZhciBtYXJrID0ge1xuICAgIG5hbWU6ICAgICBzdGF0ZS5maWxlbmFtZSxcbiAgICBidWZmZXI6ICAgc3RhdGUuaW5wdXQuc2xpY2UoMCwgLTEpLCAvLyBvbWl0IHRyYWlsaW5nIFxcMFxuICAgIHBvc2l0aW9uOiBzdGF0ZS5wb3NpdGlvbixcbiAgICBsaW5lOiAgICAgc3RhdGUubGluZSxcbiAgICBjb2x1bW46ICAgc3RhdGUucG9zaXRpb24gLSBzdGF0ZS5saW5lU3RhcnRcbiAgfTtcblxuICBtYXJrLnNuaXBwZXQgPSBtYWtlU25pcHBldChtYXJrKTtcblxuICByZXR1cm4gbmV3IFlBTUxFeGNlcHRpb24obWVzc2FnZSwgbWFyayk7XG59XG5cbmZ1bmN0aW9uIHRocm93RXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgdGhyb3cgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIHRocm93V2FybmluZyhzdGF0ZSwgbWVzc2FnZSkge1xuICBpZiAoc3RhdGUub25XYXJuaW5nKSB7XG4gICAgc3RhdGUub25XYXJuaW5nLmNhbGwobnVsbCwgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSkpO1xuICB9XG59XG5cblxudmFyIGRpcmVjdGl2ZUhhbmRsZXJzID0ge1xuXG4gIFlBTUw6IGZ1bmN0aW9uIGhhbmRsZVlhbWxEaXJlY3RpdmUoc3RhdGUsIG5hbWUsIGFyZ3MpIHtcblxuICAgIHZhciBtYXRjaCwgbWFqb3IsIG1pbm9yO1xuXG4gICAgaWYgKHN0YXRlLnZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiAlWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdZQU1MIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgbWF0Y2ggPSAvXihbMC05XSspXFwuKFswLTldKykkLy5leGVjKGFyZ3NbMF0pO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCBhcmd1bWVudCBvZiB0aGUgWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBtYWpvciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgbWlub3IgPSBwYXJzZUludChtYXRjaFsyXSwgMTApO1xuXG4gICAgaWYgKG1ham9yICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnQnKTtcbiAgICB9XG5cbiAgICBzdGF0ZS52ZXJzaW9uID0gYXJnc1swXTtcbiAgICBzdGF0ZS5jaGVja0xpbmVCcmVha3MgPSAobWlub3IgPCAyKTtcblxuICAgIGlmIChtaW5vciAhPT0gMSAmJiBtaW5vciAhPT0gMikge1xuICAgICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAndW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudCcpO1xuICAgIH1cbiAgfSxcblxuICBUQUc6IGZ1bmN0aW9uIGhhbmRsZVRhZ0RpcmVjdGl2ZShzdGF0ZSwgbmFtZSwgYXJncykge1xuXG4gICAgdmFyIGhhbmRsZSwgcHJlZml4O1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnVEFHIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgdHdvIGFyZ3VtZW50cycpO1xuICAgIH1cblxuICAgIGhhbmRsZSA9IGFyZ3NbMF07XG4gICAgcHJlZml4ID0gYXJnc1sxXTtcblxuICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QoaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2lsbC1mb3JtZWQgdGFnIGhhbmRsZSAoZmlyc3QgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXRlLnRhZ01hcCwgaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RoZXJlIGlzIGEgcHJldmlvdXNseSBkZWNsYXJlZCBzdWZmaXggZm9yIFwiJyArIGhhbmRsZSArICdcIiB0YWcgaGFuZGxlJyk7XG4gICAgfVxuXG4gICAgaWYgKCFQQVRURVJOX1RBR19VUkkudGVzdChwcmVmaXgpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCB0YWcgcHJlZml4IChzZWNvbmQgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByZWZpeCA9IGRlY29kZVVSSUNvbXBvbmVudChwcmVmaXgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBwcmVmaXggaXMgbWFsZm9ybWVkOiAnICsgcHJlZml4KTtcbiAgICB9XG5cbiAgICBzdGF0ZS50YWdNYXBbaGFuZGxlXSA9IHByZWZpeDtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBjYXB0dXJlU2VnbWVudChzdGF0ZSwgc3RhcnQsIGVuZCwgY2hlY2tKc29uKSB7XG4gIHZhciBfcG9zaXRpb24sIF9sZW5ndGgsIF9jaGFyYWN0ZXIsIF9yZXN1bHQ7XG5cbiAgaWYgKHN0YXJ0IDwgZW5kKSB7XG4gICAgX3Jlc3VsdCA9IHN0YXRlLmlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gICAgaWYgKGNoZWNrSnNvbikge1xuICAgICAgZm9yIChfcG9zaXRpb24gPSAwLCBfbGVuZ3RoID0gX3Jlc3VsdC5sZW5ndGg7IF9wb3NpdGlvbiA8IF9sZW5ndGg7IF9wb3NpdGlvbiArPSAxKSB7XG4gICAgICAgIF9jaGFyYWN0ZXIgPSBfcmVzdWx0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcbiAgICAgICAgaWYgKCEoX2NoYXJhY3RlciA9PT0gMHgwOSB8fFxuICAgICAgICAgICAgICAoMHgyMCA8PSBfY2hhcmFjdGVyICYmIF9jaGFyYWN0ZXIgPD0gMHgxMEZGRkYpKSkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdleHBlY3RlZCB2YWxpZCBKU09OIGNoYXJhY3RlcicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChQQVRURVJOX05PTl9QUklOVEFCTEUudGVzdChfcmVzdWx0KSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RoZSBzdHJlYW0gY29udGFpbnMgbm9uLXByaW50YWJsZSBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuXG4gICAgc3RhdGUucmVzdWx0ICs9IF9yZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VNYXBwaW5ncyhzdGF0ZSwgZGVzdGluYXRpb24sIHNvdXJjZSwgb3ZlcnJpZGFibGVLZXlzKSB7XG4gIHZhciBzb3VyY2VLZXlzLCBrZXksIGluZGV4LCBxdWFudGl0eTtcblxuICBpZiAoIWNvbW1vbi5pc09iamVjdChzb3VyY2UpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2Nhbm5vdCBtZXJnZSBtYXBwaW5nczsgdGhlIHByb3ZpZGVkIHNvdXJjZSBvYmplY3QgaXMgdW5hY2NlcHRhYmxlJyk7XG4gIH1cblxuICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICBmb3IgKGluZGV4ID0gMCwgcXVhbnRpdHkgPSBzb3VyY2VLZXlzLmxlbmd0aDsgaW5kZXggPCBxdWFudGl0eTsgaW5kZXggKz0gMSkge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaW5kZXhdO1xuXG4gICAgaWYgKCFfaGFzT3duUHJvcGVydHkuY2FsbChkZXN0aW5hdGlvbiwga2V5KSkge1xuICAgICAgZGVzdGluYXRpb25ba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgb3ZlcnJpZGFibGVLZXlzW2tleV0gPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLFxuICBzdGFydExpbmUsIHN0YXJ0TGluZVN0YXJ0LCBzdGFydFBvcykge1xuXG4gIHZhciBpbmRleCwgcXVhbnRpdHk7XG5cbiAgLy8gVGhlIG91dHB1dCBpcyBhIHBsYWluIG9iamVjdCBoZXJlLCBzbyBrZXlzIGNhbiBvbmx5IGJlIHN0cmluZ3MuXG4gIC8vIFdlIG5lZWQgdG8gY29udmVydCBrZXlOb2RlIHRvIGEgc3RyaW5nLCBidXQgZG9pbmcgc28gY2FuIGhhbmcgdGhlIHByb2Nlc3NcbiAgLy8gKGRlZXBseSBuZXN0ZWQgYXJyYXlzIHRoYXQgZXhwbG9kZSBleHBvbmVudGlhbGx5IHVzaW5nIGFsaWFzZXMpLlxuICBpZiAoQXJyYXkuaXNBcnJheShrZXlOb2RlKSkge1xuICAgIGtleU5vZGUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChrZXlOb2RlKTtcblxuICAgIGZvciAoaW5kZXggPSAwLCBxdWFudGl0eSA9IGtleU5vZGUubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlOb2RlW2luZGV4XSkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ25lc3RlZCBhcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW5zaWRlIGtleXMnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBrZXlOb2RlID09PSAnb2JqZWN0JyAmJiBfY2xhc3Moa2V5Tm9kZVtpbmRleF0pID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICBrZXlOb2RlW2luZGV4XSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEF2b2lkIGNvZGUgZXhlY3V0aW9uIGluIGxvYWQoKSB2aWEgdG9TdHJpbmcgcHJvcGVydHlcbiAgLy8gKHN0aWxsIHVzZSBpdHMgb3duIHRvU3RyaW5nIGZvciBhcnJheXMsIHRpbWVzdGFtcHMsXG4gIC8vIGFuZCB3aGF0ZXZlciB1c2VyIHNjaGVtYSBleHRlbnNpb25zIGhhcHBlbiB0byBoYXZlIEBAdG9TdHJpbmdUYWcpXG4gIGlmICh0eXBlb2Yga2V5Tm9kZSA9PT0gJ29iamVjdCcgJiYgX2NsYXNzKGtleU5vZGUpID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIGtleU5vZGUgPSAnW29iamVjdCBPYmplY3RdJztcbiAgfVxuXG5cbiAga2V5Tm9kZSA9IFN0cmluZyhrZXlOb2RlKTtcblxuICBpZiAoX3Jlc3VsdCA9PT0gbnVsbCkge1xuICAgIF9yZXN1bHQgPSB7fTtcbiAgfVxuXG4gIGlmIChrZXlUYWcgPT09ICd0YWc6eWFtbC5vcmcsMjAwMjptZXJnZScpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZU5vZGUpKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgcXVhbnRpdHkgPSB2YWx1ZU5vZGUubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAgICAgIG1lcmdlTWFwcGluZ3Moc3RhdGUsIF9yZXN1bHQsIHZhbHVlTm9kZVtpbmRleF0sIG92ZXJyaWRhYmxlS2V5cyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lcmdlTWFwcGluZ3Moc3RhdGUsIF9yZXN1bHQsIHZhbHVlTm9kZSwgb3ZlcnJpZGFibGVLZXlzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFzdGF0ZS5qc29uICYmXG4gICAgICAgICFfaGFzT3duUHJvcGVydHkuY2FsbChvdmVycmlkYWJsZUtleXMsIGtleU5vZGUpICYmXG4gICAgICAgIF9oYXNPd25Qcm9wZXJ0eS5jYWxsKF9yZXN1bHQsIGtleU5vZGUpKSB7XG4gICAgICBzdGF0ZS5saW5lID0gc3RhcnRMaW5lIHx8IHN0YXRlLmxpbmU7XG4gICAgICBzdGF0ZS5saW5lU3RhcnQgPSBzdGFydExpbmVTdGFydCB8fCBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiA9IHN0YXJ0UG9zIHx8IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2R1cGxpY2F0ZWQgbWFwcGluZyBrZXknKTtcbiAgICB9XG5cbiAgICAvLyB1c2VkIGZvciB0aGlzIHNwZWNpZmljIGtleSBvbmx5IGJlY2F1c2UgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIHNsb3dcbiAgICBpZiAoa2V5Tm9kZSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfcmVzdWx0LCBrZXlOb2RlLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZU5vZGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcmVzdWx0W2tleU5vZGVdID0gdmFsdWVOb2RlO1xuICAgIH1cbiAgICBkZWxldGUgb3ZlcnJpZGFibGVLZXlzW2tleU5vZGVdO1xuICB9XG5cbiAgcmV0dXJuIF9yZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRMaW5lQnJlYWsoc3RhdGUpIHtcbiAgdmFyIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDBBLyogTEYgKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICB9IGVsc2UgaWYgKGNoID09PSAweDBELyogQ1IgKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgIGlmIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMHgwQS8qIExGICovKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYSBsaW5lIGJyZWFrIGlzIGV4cGVjdGVkJyk7XG4gIH1cblxuICBzdGF0ZS5saW5lICs9IDE7XG4gIHN0YXRlLmxpbmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuICBzdGF0ZS5maXJzdFRhYkluTGluZSA9IC0xO1xufVxuXG5mdW5jdGlvbiBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBhbGxvd0NvbW1lbnRzLCBjaGVja0luZGVudCkge1xuICB2YXIgbGluZUJyZWFrcyA9IDAsXG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgIGlmIChjaCA9PT0gMHgwOS8qIFRhYiAqLyAmJiBzdGF0ZS5maXJzdFRhYkluTGluZSA9PT0gLTEpIHtcbiAgICAgICAgc3RhdGUuZmlyc3RUYWJJbkxpbmUgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dDb21tZW50cyAmJiBjaCA9PT0gMHgyMy8qICMgKi8pIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfSB3aGlsZSAoY2ggIT09IDB4MEEvKiBMRiAqLyAmJiBjaCAhPT0gMHgwRC8qIENSICovICYmIGNoICE9PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG5cbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBsaW5lQnJlYWtzKys7XG4gICAgICBzdGF0ZS5saW5lSW5kZW50ID0gMDtcblxuICAgICAgd2hpbGUgKGNoID09PSAweDIwLyogU3BhY2UgKi8pIHtcbiAgICAgICAgc3RhdGUubGluZUluZGVudCsrO1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjaGVja0luZGVudCAhPT0gLTEgJiYgbGluZUJyZWFrcyAhPT0gMCAmJiBzdGF0ZS5saW5lSW5kZW50IDwgY2hlY2tJbmRlbnQpIHtcbiAgICB0aHJvd1dhcm5pbmcoc3RhdGUsICdkZWZpY2llbnQgaW5kZW50YXRpb24nKTtcbiAgfVxuXG4gIHJldHVybiBsaW5lQnJlYWtzO1xufVxuXG5mdW5jdGlvbiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbik7XG5cbiAgLy8gQ29uZGl0aW9uIHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgaXMgdGVzdGVkXG4gIC8vIGluIHBhcmVudCBvbiBlYWNoIGNhbGwsIGZvciBlZmZpY2llbmN5LiBObyBuZWVkcyB0byB0ZXN0IGhlcmUgYWdhaW4uXG4gIGlmICgoY2ggPT09IDB4MkQvKiAtICovIHx8IGNoID09PSAweDJFLyogLiAqLykgJiZcbiAgICAgIGNoID09PSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbiArIDEpICYmXG4gICAgICBjaCA9PT0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24gKyAyKSkge1xuXG4gICAgX3Bvc2l0aW9uICs9IDM7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcblxuICAgIGlmIChjaCA9PT0gMCB8fCBpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIGNvdW50KSB7XG4gIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHN0YXRlLnJlc3VsdCArPSAnICc7XG4gIH0gZWxzZSBpZiAoY291bnQgPiAxKSB7XG4gICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGNvdW50IC0gMSk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiByZWFkUGxhaW5TY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQsIHdpdGhpbkZsb3dDb2xsZWN0aW9uKSB7XG4gIHZhciBwcmVjZWRpbmcsXG4gICAgICBmb2xsb3dpbmcsXG4gICAgICBjYXB0dXJlU3RhcnQsXG4gICAgICBjYXB0dXJlRW5kLFxuICAgICAgaGFzUGVuZGluZ0NvbnRlbnQsXG4gICAgICBfbGluZSxcbiAgICAgIF9saW5lU3RhcnQsXG4gICAgICBfbGluZUluZGVudCxcbiAgICAgIF9raW5kID0gc3RhdGUua2luZCxcbiAgICAgIF9yZXN1bHQgPSBzdGF0ZS5yZXN1bHQsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChpc19XU19PUl9FT0woY2gpICAgICAgfHxcbiAgICAgIGlzX0ZMT1dfSU5ESUNBVE9SKGNoKSB8fFxuICAgICAgY2ggPT09IDB4MjMvKiAjICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNi8qICYgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDJBLyogKiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjEvKiAhICovICAgIHx8XG4gICAgICBjaCA9PT0gMHg3Qy8qIHwgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDNFLyogPiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjcvKiAnICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyMi8qIFwiICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNS8qICUgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDQwLyogQCAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4NjAvKiBgICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGNoID09PSAweDNGLyogPyAqLyB8fCBjaCA9PT0gMHgyRC8qIC0gKi8pIHtcbiAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAoaXNfV1NfT1JfRU9MKGZvbGxvd2luZykgfHxcbiAgICAgICAgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoZm9sbG93aW5nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSAnc2NhbGFyJztcbiAgc3RhdGUucmVzdWx0ID0gJyc7XG4gIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgaGFzUGVuZGluZ0NvbnRlbnQgPSBmYWxzZTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4M0EvKiA6ICovKSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSB8fFxuICAgICAgICAgIHdpdGhpbkZsb3dDb2xsZWN0aW9uICYmIGlzX0ZMT1dfSU5ESUNBVE9SKGZvbGxvd2luZykpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgcHJlY2VkaW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiAtIDEpO1xuXG4gICAgICBpZiAoaXNfV1NfT1JfRU9MKHByZWNlZGluZykpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHx8XG4gICAgICAgICAgICAgICB3aXRoaW5GbG93Q29sbGVjdGlvbiAmJiBpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICAgIGJyZWFrO1xuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBfbGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICBfbGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuICAgICAgX2xpbmVJbmRlbnQgPSBzdGF0ZS5saW5lSW5kZW50O1xuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIC0xKTtcblxuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPj0gbm9kZUluZGVudCkge1xuICAgICAgICBoYXNQZW5kaW5nQ29udGVudCA9IHRydWU7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucG9zaXRpb24gPSBjYXB0dXJlRW5kO1xuICAgICAgICBzdGF0ZS5saW5lID0gX2xpbmU7XG4gICAgICAgIHN0YXRlLmxpbmVTdGFydCA9IF9saW5lU3RhcnQ7XG4gICAgICAgIHN0YXRlLmxpbmVJbmRlbnQgPSBfbGluZUluZGVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc1BlbmRpbmdDb250ZW50KSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCBmYWxzZSk7XG4gICAgICB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBzdGF0ZS5saW5lIC0gX2xpbmUpO1xuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgaGFzUGVuZGluZ0NvbnRlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uICsgMTtcbiAgICB9XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCBmYWxzZSk7XG5cbiAgaWYgKHN0YXRlLnJlc3VsdCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9IF9raW5kO1xuICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHJlYWRTaW5nbGVRdW90ZWRTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNoLFxuICAgICAgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDI3LyogJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSAnc2NhbGFyJztcbiAgc3RhdGUucmVzdWx0ID0gJyc7XG4gIHN0YXRlLnBvc2l0aW9uKys7XG4gIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICB3aGlsZSAoKGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikpICE9PSAwKSB7XG4gICAgaWYgKGNoID09PSAweDI3LyogJyAqLykge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIHRydWUpO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICBpZiAoY2ggPT09IDB4MjcvKiAnICovKSB7XG4gICAgICAgIGNhcHR1cmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgY2FwdHVyZUVuZCwgdHJ1ZSk7XG4gICAgICB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBmYWxzZSwgbm9kZUluZGVudCkpO1xuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgfSBlbHNlIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgZG9jdW1lbnQgd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXInKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIHNpbmdsZSBxdW90ZWQgc2NhbGFyJyk7XG59XG5cbmZ1bmN0aW9uIHJlYWREb3VibGVRdW90ZWRTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNhcHR1cmVTdGFydCxcbiAgICAgIGNhcHR1cmVFbmQsXG4gICAgICBoZXhMZW5ndGgsXG4gICAgICBoZXhSZXN1bHQsXG4gICAgICB0bXAsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyMi8qIFwiICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgc3RhdGUucG9zaXRpb24rKztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4MjIvKiBcIiAqLykge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIHRydWUpO1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHg1Qy8qIFxcICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgIGlmIChpc19FT0woY2gpKSB7XG4gICAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KTtcblxuICAgICAgICAvLyBUT0RPOiByZXdvcmsgdG8gaW5saW5lIGZuIHdpdGggbm8gdHlwZSBjYXN0P1xuICAgICAgfSBlbHNlIGlmIChjaCA8IDI1NiAmJiBzaW1wbGVFc2NhcGVDaGVja1tjaF0pIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IHNpbXBsZUVzY2FwZU1hcFtjaF07XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG5cbiAgICAgIH0gZWxzZSBpZiAoKHRtcCA9IGVzY2FwZWRIZXhMZW4oY2gpKSA+IDApIHtcbiAgICAgICAgaGV4TGVuZ3RoID0gdG1wO1xuICAgICAgICBoZXhSZXN1bHQgPSAwO1xuXG4gICAgICAgIGZvciAoOyBoZXhMZW5ndGggPiAwOyBoZXhMZW5ndGgtLSkge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgICAgIGlmICgodG1wID0gZnJvbUhleENvZGUoY2gpKSA+PSAwKSB7XG4gICAgICAgICAgICBoZXhSZXN1bHQgPSAoaGV4UmVzdWx0IDw8IDQpICsgdG1wO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdleHBlY3RlZCBoZXhhZGVjaW1hbCBjaGFyYWN0ZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY2hhckZyb21Db2RlcG9pbnQoaGV4UmVzdWx0KTtcblxuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5rbm93biBlc2NhcGUgc2VxdWVuY2UnKTtcbiAgICAgIH1cblxuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCB0cnVlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBkb2N1bWVudCB3aXRoaW4gYSBkb3VibGUgcXVvdGVkIHNjYWxhcicpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgZG91YmxlIHF1b3RlZCBzY2FsYXInKTtcbn1cblxuZnVuY3Rpb24gcmVhZEZsb3dDb2xsZWN0aW9uKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciByZWFkTmV4dCA9IHRydWUsXG4gICAgICBfbGluZSxcbiAgICAgIF9saW5lU3RhcnQsXG4gICAgICBfcG9zLFxuICAgICAgX3RhZyAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfcmVzdWx0LFxuICAgICAgX2FuY2hvciAgPSBzdGF0ZS5hbmNob3IsXG4gICAgICBmb2xsb3dpbmcsXG4gICAgICB0ZXJtaW5hdG9yLFxuICAgICAgaXNQYWlyLFxuICAgICAgaXNFeHBsaWNpdFBhaXIsXG4gICAgICBpc01hcHBpbmcsXG4gICAgICBvdmVycmlkYWJsZUtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAga2V5Tm9kZSxcbiAgICAgIGtleVRhZyxcbiAgICAgIHZhbHVlTm9kZSxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDVCLyogWyAqLykge1xuICAgIHRlcm1pbmF0b3IgPSAweDVEOy8qIF0gKi9cbiAgICBpc01hcHBpbmcgPSBmYWxzZTtcbiAgICBfcmVzdWx0ID0gW107XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4N0IvKiB7ICovKSB7XG4gICAgdGVybWluYXRvciA9IDB4N0Q7LyogfSAqL1xuICAgIGlzTWFwcGluZyA9IHRydWU7XG4gICAgX3Jlc3VsdCA9IHt9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSB0ZXJtaW5hdG9yKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgICBzdGF0ZS5raW5kID0gaXNNYXBwaW5nID8gJ21hcHBpbmcnIDogJ3NlcXVlbmNlJztcbiAgICAgIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFyZWFkTmV4dCkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ21pc3NlZCBjb21tYSBiZXR3ZWVuIGZsb3cgY29sbGVjdGlvbiBlbnRyaWVzJyk7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHgyQy8qICwgKi8pIHtcbiAgICAgIC8vIFwiZmxvdyBjb2xsZWN0aW9uIGVudHJpZXMgY2FuIG5ldmVyIGJlIGNvbXBsZXRlbHkgZW1wdHlcIiwgYXMgcGVyIFlBTUwgMS4yLCBzZWN0aW9uIDcuNFxuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJleHBlY3RlZCB0aGUgbm9kZSBjb250ZW50LCBidXQgZm91bmQgJywnXCIpO1xuICAgIH1cblxuICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgIGlzUGFpciA9IGlzRXhwbGljaXRQYWlyID0gZmFsc2U7XG5cbiAgICBpZiAoY2ggPT09IDB4M0YvKiA/ICovKSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSkge1xuICAgICAgICBpc1BhaXIgPSBpc0V4cGxpY2l0UGFpciA9IHRydWU7XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9saW5lID0gc3RhdGUubGluZTsgLy8gU2F2ZSB0aGUgY3VycmVudCBsaW5lLlxuICAgIF9saW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgX3BvcyA9IHN0YXRlLnBvc2l0aW9uO1xuICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoKGlzRXhwbGljaXRQYWlyIHx8IHN0YXRlLmxpbmUgPT09IF9saW5lKSAmJiBjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgIGlzUGFpciA9IHRydWU7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcbiAgICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICAgIHZhbHVlTm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICB9XG5cbiAgICBpZiAoaXNNYXBwaW5nKSB7XG4gICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX2xpbmVTdGFydCwgX3Bvcyk7XG4gICAgfSBlbHNlIGlmIChpc1BhaXIpIHtcbiAgICAgIF9yZXN1bHQucHVzaChzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBudWxsLCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX2xpbmVTdGFydCwgX3BvcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcmVzdWx0LnB1c2goa2V5Tm9kZSk7XG4gICAgfVxuXG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSAweDJDLyogLCAqLykge1xuICAgICAgcmVhZE5leHQgPSB0cnVlO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFkTmV4dCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIGZsb3cgY29sbGVjdGlvbicpO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNhcHR1cmVTdGFydCxcbiAgICAgIGZvbGRpbmcsXG4gICAgICBjaG9tcGluZyAgICAgICA9IENIT01QSU5HX0NMSVAsXG4gICAgICBkaWRSZWFkQ29udGVudCA9IGZhbHNlLFxuICAgICAgZGV0ZWN0ZWRJbmRlbnQgPSBmYWxzZSxcbiAgICAgIHRleHRJbmRlbnQgICAgID0gbm9kZUluZGVudCxcbiAgICAgIGVtcHR5TGluZXMgICAgID0gMCxcbiAgICAgIGF0TW9yZUluZGVudGVkID0gZmFsc2UsXG4gICAgICB0bXAsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHg3Qy8qIHwgKi8pIHtcbiAgICBmb2xkaW5nID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4M0UvKiA+ICovKSB7XG4gICAgZm9sZGluZyA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IDB4MkIvKiArICovIHx8IGNoID09PSAweDJELyogLSAqLykge1xuICAgICAgaWYgKENIT01QSU5HX0NMSVAgPT09IGNob21waW5nKSB7XG4gICAgICAgIGNob21waW5nID0gKGNoID09PSAweDJCLyogKyAqLykgPyBDSE9NUElOR19LRUVQIDogQ0hPTVBJTkdfU1RSSVA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAncmVwZWF0IG9mIGEgY2hvbXBpbmcgbW9kZSBpZGVudGlmaWVyJyk7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKCh0bXAgPSBmcm9tRGVjaW1hbENvZGUoY2gpKSA+PSAwKSB7XG4gICAgICBpZiAodG1wID09PSAwKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdiYWQgZXhwbGljaXQgaW5kZW50YXRpb24gd2lkdGggb2YgYSBibG9jayBzY2FsYXI7IGl0IGNhbm5vdCBiZSBsZXNzIHRoYW4gb25lJyk7XG4gICAgICB9IGVsc2UgaWYgKCFkZXRlY3RlZEluZGVudCkge1xuICAgICAgICB0ZXh0SW5kZW50ID0gbm9kZUluZGVudCArIHRtcCAtIDE7XG4gICAgICAgIGRldGVjdGVkSW5kZW50ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdyZXBlYXQgb2YgYW4gaW5kZW50YXRpb24gd2lkdGggaWRlbnRpZmllcicpO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpO1xuXG4gICAgaWYgKGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICAgIHdoaWxlICghaXNfRU9MKGNoKSAmJiAoY2ggIT09IDApKTtcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICByZWFkTGluZUJyZWFrKHN0YXRlKTtcbiAgICBzdGF0ZS5saW5lSW5kZW50ID0gMDtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoKCFkZXRlY3RlZEluZGVudCB8fCBzdGF0ZS5saW5lSW5kZW50IDwgdGV4dEluZGVudCkgJiZcbiAgICAgICAgICAgKGNoID09PSAweDIwLyogU3BhY2UgKi8pKSB7XG4gICAgICBzdGF0ZS5saW5lSW5kZW50Kys7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKCFkZXRlY3RlZEluZGVudCAmJiBzdGF0ZS5saW5lSW5kZW50ID4gdGV4dEluZGVudCkge1xuICAgICAgdGV4dEluZGVudCA9IHN0YXRlLmxpbmVJbmRlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGVtcHR5TGluZXMrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEVuZCBvZiB0aGUgc2NhbGFyLlxuICAgIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgdGV4dEluZGVudCkge1xuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBjaG9tcGluZy5cbiAgICAgIGlmIChjaG9tcGluZyA9PT0gQ0hPTVBJTkdfS0VFUCkge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZGlkUmVhZENvbnRlbnQgPyAxICsgZW1wdHlMaW5lcyA6IGVtcHR5TGluZXMpO1xuICAgICAgfSBlbHNlIGlmIChjaG9tcGluZyA9PT0gQ0hPTVBJTkdfQ0xJUCkge1xuICAgICAgICBpZiAoZGlkUmVhZENvbnRlbnQpIHsgLy8gaS5lLiBvbmx5IGlmIHRoZSBzY2FsYXIgaXMgbm90IGVtcHR5LlxuICAgICAgICAgIHN0YXRlLnJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBCcmVhayB0aGlzIGB3aGlsZWAgY3ljbGUgYW5kIGdvIHRvIHRoZSBmdW5jaXRvbidzIGVwaWxvZ3VlLlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gRm9sZGVkIHN0eWxlOiB1c2UgZmFuY3kgcnVsZXMgdG8gaGFuZGxlIGxpbmUgYnJlYWtzLlxuICAgIGlmIChmb2xkaW5nKSB7XG5cbiAgICAgIC8vIExpbmVzIHN0YXJ0aW5nIHdpdGggd2hpdGUgc3BhY2UgY2hhcmFjdGVycyAobW9yZS1pbmRlbnRlZCBsaW5lcykgYXJlIG5vdCBmb2xkZWQuXG4gICAgICBpZiAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICAgIGF0TW9yZUluZGVudGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gZXhjZXB0IGZvciB0aGUgZmlyc3QgY29udGVudCBsaW5lIChjZi4gRXhhbXBsZSA4LjEpXG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG5cbiAgICAgIC8vIEVuZCBvZiBtb3JlLWluZGVudGVkIGJsb2NrLlxuICAgICAgfSBlbHNlIGlmIChhdE1vcmVJbmRlbnRlZCkge1xuICAgICAgICBhdE1vcmVJbmRlbnRlZCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZW1wdHlMaW5lcyArIDEpO1xuXG4gICAgICAvLyBKdXN0IG9uZSBsaW5lIGJyZWFrIC0gcGVyY2VpdmUgYXMgdGhlIHNhbWUgbGluZS5cbiAgICAgIH0gZWxzZSBpZiAoZW1wdHlMaW5lcyA9PT0gMCkge1xuICAgICAgICBpZiAoZGlkUmVhZENvbnRlbnQpIHsgLy8gaS5lLiBvbmx5IGlmIHdlIGhhdmUgYWxyZWFkeSByZWFkIHNvbWUgc2NhbGFyIGNvbnRlbnQuXG4gICAgICAgICAgc3RhdGUucmVzdWx0ICs9ICcgJztcbiAgICAgICAgfVxuXG4gICAgICAvLyBTZXZlcmFsIGxpbmUgYnJlYWtzIC0gcGVyY2VpdmUgYXMgZGlmZmVyZW50IGxpbmVzLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGVtcHR5TGluZXMpO1xuICAgICAgfVxuXG4gICAgLy8gTGl0ZXJhbCBzdHlsZToganVzdCBhZGQgZXhhY3QgbnVtYmVyIG9mIGxpbmUgYnJlYWtzIGJldHdlZW4gY29udGVudCBsaW5lcy5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gS2VlcCBhbGwgbGluZSBicmVha3MgZXhjZXB0IHRoZSBoZWFkZXIgbGluZSBicmVhay5cbiAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG4gICAgfVxuXG4gICAgZGlkUmVhZENvbnRlbnQgPSB0cnVlO1xuICAgIGRldGVjdGVkSW5kZW50ID0gdHJ1ZTtcbiAgICBlbXB0eUxpbmVzID0gMDtcbiAgICBjYXB0dXJlU3RhcnQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICAgIHdoaWxlICghaXNfRU9MKGNoKSAmJiAoY2ggIT09IDApKSB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgX2xpbmUsXG4gICAgICBfdGFnICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfYW5jaG9yICAgPSBzdGF0ZS5hbmNob3IsXG4gICAgICBfcmVzdWx0ICAgPSBbXSxcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIGRldGVjdGVkICA9IGZhbHNlLFxuICAgICAgY2g7XG5cbiAgLy8gdGhlcmUgaXMgYSBsZWFkaW5nIHRhYiBiZWZvcmUgdGhpcyB0b2tlbiwgc28gaXQgY2FuJ3QgYmUgYSBibG9jayBzZXF1ZW5jZS9tYXBwaW5nO1xuICAvLyBpdCBjYW4gc3RpbGwgYmUgZmxvdyBzZXF1ZW5jZS9tYXBwaW5nIG9yIGEgc2NhbGFyXG4gIGlmIChzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHJldHVybiBmYWxzZTtcblxuICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBfcmVzdWx0O1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBpZiAoc3RhdGUuZmlyc3RUYWJJbkxpbmUgIT09IC0xKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiA9IHN0YXRlLmZpcnN0VGFiSW5MaW5lO1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhYiBjaGFyYWN0ZXJzIG11c3Qgbm90IGJlIHVzZWQgaW4gaW5kZW50YXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoY2ggIT09IDB4MkQvKiAtICovKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAoIWlzX1dTX09SX0VPTChmb2xsb3dpbmcpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgc3RhdGUucG9zaXRpb24rKztcblxuICAgIGlmIChza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSkpIHtcbiAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50IDw9IG5vZGVJbmRlbnQpIHtcbiAgICAgICAgX3Jlc3VsdC5wdXNoKG51bGwpO1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfbGluZSA9IHN0YXRlLmxpbmU7XG4gICAgY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfQkxPQ0tfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICBfcmVzdWx0LnB1c2goc3RhdGUucmVzdWx0KTtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKChzdGF0ZS5saW5lID09PSBfbGluZSB8fCBzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCkgJiYgKGNoICE9PSAwKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2JhZCBpbmRlbnRhdGlvbiBvZiBhIHNlcXVlbmNlIGVudHJ5Jyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgbm9kZUluZGVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRldGVjdGVkKSB7XG4gICAgc3RhdGUudGFnID0gX3RhZztcbiAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgIHN0YXRlLmtpbmQgPSAnc2VxdWVuY2UnO1xuICAgIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tNYXBwaW5nKHN0YXRlLCBub2RlSW5kZW50LCBmbG93SW5kZW50KSB7XG4gIHZhciBmb2xsb3dpbmcsXG4gICAgICBhbGxvd0NvbXBhY3QsXG4gICAgICBfbGluZSxcbiAgICAgIF9rZXlMaW5lLFxuICAgICAgX2tleUxpbmVTdGFydCxcbiAgICAgIF9rZXlQb3MsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgX2FuY2hvciAgICAgICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIF9yZXN1bHQgICAgICAgPSB7fSxcbiAgICAgIG92ZXJyaWRhYmxlS2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBrZXlUYWcgICAgICAgID0gbnVsbCxcbiAgICAgIGtleU5vZGUgICAgICAgPSBudWxsLFxuICAgICAgdmFsdWVOb2RlICAgICA9IG51bGwsXG4gICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2UsXG4gICAgICBkZXRlY3RlZCAgICAgID0gZmFsc2UsXG4gICAgICBjaDtcblxuICAvLyB0aGVyZSBpcyBhIGxlYWRpbmcgdGFiIGJlZm9yZSB0aGlzIHRva2VuLCBzbyBpdCBjYW4ndCBiZSBhIGJsb2NrIHNlcXVlbmNlL21hcHBpbmc7XG4gIC8vIGl0IGNhbiBzdGlsbCBiZSBmbG93IHNlcXVlbmNlL21hcHBpbmcgb3IgYSBzY2FsYXJcbiAgaWYgKHN0YXRlLmZpcnN0VGFiSW5MaW5lICE9PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGlmICghYXRFeHBsaWNpdEtleSAmJiBzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gc3RhdGUuZmlyc3RUYWJJbkxpbmU7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFiIGNoYXJhY3RlcnMgbXVzdCBub3QgYmUgdXNlZCBpbiBpbmRlbnRhdGlvbicpO1xuICAgIH1cblxuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcbiAgICBfbGluZSA9IHN0YXRlLmxpbmU7IC8vIFNhdmUgdGhlIGN1cnJlbnQgbGluZS5cblxuICAgIC8vXG4gICAgLy8gRXhwbGljaXQgbm90YXRpb24gY2FzZS4gVGhlcmUgYXJlIHR3byBzZXBhcmF0ZSBibG9ja3M6XG4gICAgLy8gZmlyc3QgZm9yIHRoZSBrZXkgKGRlbm90ZWQgYnkgXCI/XCIpIGFuZCBzZWNvbmQgZm9yIHRoZSB2YWx1ZSAoZGVub3RlZCBieSBcIjpcIilcbiAgICAvL1xuICAgIGlmICgoY2ggPT09IDB4M0YvKiA/ICovIHx8IGNoID09PSAweDNBLyogOiAqLykgJiYgaXNfV1NfT1JfRU9MKGZvbGxvd2luZykpIHtcblxuICAgICAgaWYgKGNoID09PSAweDNGLyogPyAqLykge1xuICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCBudWxsLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gICAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSB0cnVlO1xuICAgICAgICBhbGxvd0NvbXBhY3QgPSB0cnVlO1xuXG4gICAgICB9IGVsc2UgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICAgICAgLy8gaS5lLiAweDNBLyogOiAqLyA9PT0gY2hhcmFjdGVyIGFmdGVyIHRoZSBleHBsaWNpdCBrZXkuXG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dDb21wYWN0ID0gdHJ1ZTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2luY29tcGxldGUgZXhwbGljaXQgbWFwcGluZyBwYWlyOyBhIGtleSBub2RlIGlzIG1pc3NlZDsgb3IgZm9sbG93ZWQgYnkgYSBub24tdGFidWxhdGVkIGVtcHR5IGxpbmUnKTtcbiAgICAgIH1cblxuICAgICAgc3RhdGUucG9zaXRpb24gKz0gMTtcbiAgICAgIGNoID0gZm9sbG93aW5nO1xuXG4gICAgLy9cbiAgICAvLyBJbXBsaWNpdCBub3RhdGlvbiBjYXNlLiBGbG93LXN0eWxlIG5vZGUgYXMgdGhlIGtleSBmaXJzdCwgdGhlbiBcIjpcIiwgYW5kIHRoZSB2YWx1ZS5cbiAgICAvL1xuICAgIH0gZWxzZSB7XG4gICAgICBfa2V5TGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICBfa2V5TGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuICAgICAgX2tleVBvcyA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgICBpZiAoIWNvbXBvc2VOb2RlKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfT1VULCBmYWxzZSwgdHJ1ZSkpIHtcbiAgICAgICAgLy8gTmVpdGhlciBpbXBsaWNpdCBub3IgZXhwbGljaXQgbm90YXRpb24uXG4gICAgICAgIC8vIFJlYWRpbmcgaXMgZG9uZS4gR28gdG8gdGhlIGVwaWxvZ3VlLlxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmxpbmUgPT09IF9saW5lKSB7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgICBpZiAoIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdhIHdoaXRlc3BhY2UgY2hhcmFjdGVyIGlzIGV4cGVjdGVkIGFmdGVyIHRoZSBrZXktdmFsdWUgc2VwYXJhdG9yIHdpdGhpbiBhIGJsb2NrIG1hcHBpbmcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwsIF9rZXlMaW5lLCBfa2V5TGluZVN0YXJ0LCBfa2V5UG9zKTtcbiAgICAgICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2U7XG4gICAgICAgICAgYWxsb3dDb21wYWN0ID0gZmFsc2U7XG4gICAgICAgICAga2V5VGFnID0gc3RhdGUudGFnO1xuICAgICAgICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG5cbiAgICAgICAgfSBlbHNlIGlmIChkZXRlY3RlZCkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW4gbm90IHJlYWQgYW4gaW1wbGljaXQgbWFwcGluZyBwYWlyOyBhIGNvbG9uIGlzIG1pc3NlZCcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBLZWVwIHRoZSByZXN1bHQgb2YgYGNvbXBvc2VOb2RlYC5cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKGRldGVjdGVkKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW4gbm90IHJlYWQgYSBibG9jayBtYXBwaW5nIGVudHJ5OyBhIG11bHRpbGluZSBrZXkgbWF5IG5vdCBiZSBhbiBpbXBsaWNpdCBrZXknKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIEtlZXAgdGhlIHJlc3VsdCBvZiBgY29tcG9zZU5vZGVgLlxuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gQ29tbW9uIHJlYWRpbmcgY29kZSBmb3IgYm90aCBleHBsaWNpdCBhbmQgaW1wbGljaXQgbm90YXRpb25zLlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLmxpbmUgPT09IF9saW5lIHx8IHN0YXRlLmxpbmVJbmRlbnQgPiBub2RlSW5kZW50KSB7XG4gICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICBfa2V5TGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICAgIF9rZXlMaW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICAgIF9rZXlQb3MgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0JMT0NLX09VVCwgdHJ1ZSwgYWxsb3dDb21wYWN0KSkge1xuICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYXRFeHBsaWNpdEtleSkge1xuICAgICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmICgoc3RhdGUubGluZSA9PT0gX2xpbmUgfHwgc3RhdGUubGluZUluZGVudCA+IG5vZGVJbmRlbnQpICYmIChjaCAhPT0gMCkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdiYWQgaW5kZW50YXRpb24gb2YgYSBtYXBwaW5nIGVudHJ5Jyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgbm9kZUluZGVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy9cbiAgLy8gRXBpbG9ndWUuXG4gIC8vXG5cbiAgLy8gU3BlY2lhbCBjYXNlOiBsYXN0IG1hcHBpbmcncyBub2RlIGNvbnRhaW5zIG9ubHkgdGhlIGtleSBpbiBleHBsaWNpdCBub3RhdGlvbi5cbiAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgbnVsbCwgX2tleUxpbmUsIF9rZXlMaW5lU3RhcnQsIF9rZXlQb3MpO1xuICB9XG5cbiAgLy8gRXhwb3NlIHRoZSByZXN1bHRpbmcgbWFwcGluZy5cbiAgaWYgKGRldGVjdGVkKSB7XG4gICAgc3RhdGUudGFnID0gX3RhZztcbiAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgIHN0YXRlLmtpbmQgPSAnbWFwcGluZyc7XG4gICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBkZXRlY3RlZDtcbn1cblxuZnVuY3Rpb24gcmVhZFRhZ1Byb3BlcnR5KHN0YXRlKSB7XG4gIHZhciBfcG9zaXRpb24sXG4gICAgICBpc1ZlcmJhdGltID0gZmFsc2UsXG4gICAgICBpc05hbWVkICAgID0gZmFsc2UsXG4gICAgICB0YWdIYW5kbGUsXG4gICAgICB0YWdOYW1lLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjEvKiAhICovKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiBhIHRhZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHgzQy8qIDwgKi8pIHtcbiAgICBpc1ZlcmJhdGltID0gdHJ1ZTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgfSBlbHNlIGlmIChjaCA9PT0gMHgyMS8qICEgKi8pIHtcbiAgICBpc05hbWVkID0gdHJ1ZTtcbiAgICB0YWdIYW5kbGUgPSAnISEnO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB9IGVsc2Uge1xuICAgIHRhZ0hhbmRsZSA9ICchJztcbiAgfVxuXG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIGlmIChpc1ZlcmJhdGltKSB7XG4gICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgY2ggIT09IDB4M0UvKiA+ICovKTtcblxuICAgIGlmIChzdGF0ZS5wb3NpdGlvbiA8IHN0YXRlLmxlbmd0aCkge1xuICAgICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSB2ZXJiYXRpbSB0YWcnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyMS8qICEgKi8pIHtcbiAgICAgICAgaWYgKCFpc05hbWVkKSB7XG4gICAgICAgICAgdGFnSGFuZGxlID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uIC0gMSwgc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QodGFnSGFuZGxlKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ25hbWVkIHRhZyBoYW5kbGUgY2Fubm90IGNvbnRhaW4gc3VjaCBjaGFyYWN0ZXJzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNOYW1lZCA9IHRydWU7XG4gICAgICAgICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb24gKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgc3VmZml4IGNhbm5vdCBjb250YWluIGV4Y2xhbWF0aW9uIG1hcmtzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIHRhZ05hbWUgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChQQVRURVJOX0ZMT1dfSU5ESUNBVE9SUy50ZXN0KHRhZ05hbWUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIHN1ZmZpeCBjYW5ub3QgY29udGFpbiBmbG93IGluZGljYXRvciBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRhZ05hbWUgJiYgIVBBVFRFUk5fVEFHX1VSSS50ZXN0KHRhZ05hbWUpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBuYW1lIGNhbm5vdCBjb250YWluIHN1Y2ggY2hhcmFjdGVyczogJyArIHRhZ05hbWUpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0YWdOYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KHRhZ05hbWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIG5hbWUgaXMgbWFsZm9ybWVkOiAnICsgdGFnTmFtZSk7XG4gIH1cblxuICBpZiAoaXNWZXJiYXRpbSkge1xuICAgIHN0YXRlLnRhZyA9IHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChzdGF0ZS50YWdNYXAsIHRhZ0hhbmRsZSkpIHtcbiAgICBzdGF0ZS50YWcgPSBzdGF0ZS50YWdNYXBbdGFnSGFuZGxlXSArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmICh0YWdIYW5kbGUgPT09ICchJykge1xuICAgIHN0YXRlLnRhZyA9ICchJyArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmICh0YWdIYW5kbGUgPT09ICchIScpIHtcbiAgICBzdGF0ZS50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6JyArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5kZWNsYXJlZCB0YWcgaGFuZGxlIFwiJyArIHRhZ0hhbmRsZSArICdcIicpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRBbmNob3JQcm9wZXJ0eShzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjYvKiAmICovKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiBhbiBhbmNob3IgcHJvcGVydHknKTtcbiAgfVxuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpICYmICFpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBpZiAoc3RhdGUucG9zaXRpb24gPT09IF9wb3NpdGlvbikge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICduYW1lIG9mIGFuIGFuY2hvciBub2RlIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyJyk7XG4gIH1cblxuICBzdGF0ZS5hbmNob3IgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRBbGlhcyhzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uLCBhbGlhcyxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDJBLyogKiAqLykgcmV0dXJuIGZhbHNlO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpICYmICFpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBpZiAoc3RhdGUucG9zaXRpb24gPT09IF9wb3NpdGlvbikge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICduYW1lIG9mIGFuIGFsaWFzIG5vZGUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXInKTtcbiAgfVxuXG4gIGFsaWFzID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKCFfaGFzT3duUHJvcGVydHkuY2FsbChzdGF0ZS5hbmNob3JNYXAsIGFsaWFzKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmlkZW50aWZpZWQgYWxpYXMgXCInICsgYWxpYXMgKyAnXCInKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VsdCA9IHN0YXRlLmFuY2hvck1hcFthbGlhc107XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VOb2RlKHN0YXRlLCBwYXJlbnRJbmRlbnQsIG5vZGVDb250ZXh0LCBhbGxvd1RvU2VlaywgYWxsb3dDb21wYWN0KSB7XG4gIHZhciBhbGxvd0Jsb2NrU3R5bGVzLFxuICAgICAgYWxsb3dCbG9ja1NjYWxhcnMsXG4gICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMsXG4gICAgICBpbmRlbnRTdGF0dXMgPSAxLCAvLyAxOiB0aGlzPnBhcmVudCwgMDogdGhpcz1wYXJlbnQsIC0xOiB0aGlzPHBhcmVudFxuICAgICAgYXROZXdMaW5lICA9IGZhbHNlLFxuICAgICAgaGFzQ29udGVudCA9IGZhbHNlLFxuICAgICAgdHlwZUluZGV4LFxuICAgICAgdHlwZVF1YW50aXR5LFxuICAgICAgdHlwZUxpc3QsXG4gICAgICB0eXBlLFxuICAgICAgZmxvd0luZGVudCxcbiAgICAgIGJsb2NrSW5kZW50O1xuXG4gIGlmIChzdGF0ZS5saXN0ZW5lciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmxpc3RlbmVyKCdvcGVuJywgc3RhdGUpO1xuICB9XG5cbiAgc3RhdGUudGFnICAgID0gbnVsbDtcbiAgc3RhdGUuYW5jaG9yID0gbnVsbDtcbiAgc3RhdGUua2luZCAgID0gbnVsbDtcbiAgc3RhdGUucmVzdWx0ID0gbnVsbDtcblxuICBhbGxvd0Jsb2NrU3R5bGVzID0gYWxsb3dCbG9ja1NjYWxhcnMgPSBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPVxuICAgIENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCB8fFxuICAgIENPTlRFWFRfQkxPQ0tfSU4gID09PSBub2RlQ29udGV4dDtcblxuICBpZiAoYWxsb3dUb1NlZWspIHtcbiAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuXG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA8IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxKSB7XG4gICAgd2hpbGUgKHJlYWRUYWdQcm9wZXJ0eShzdGF0ZSkgfHwgcmVhZEFuY2hvclByb3BlcnR5KHN0YXRlKSkge1xuICAgICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPSBhbGxvd0Jsb2NrU3R5bGVzO1xuXG4gICAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID4gcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucykge1xuICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyA9IGF0TmV3TGluZSB8fCBhbGxvd0NvbXBhY3Q7XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxIHx8IENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCkge1xuICAgIGlmIChDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0IHx8IENPTlRFWFRfRkxPV19PVVQgPT09IG5vZGVDb250ZXh0KSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50ICsgMTtcbiAgICB9XG5cbiAgICBibG9ja0luZGVudCA9IHN0YXRlLnBvc2l0aW9uIC0gc3RhdGUubGluZVN0YXJ0O1xuXG4gICAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSkge1xuICAgICAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJlxuICAgICAgICAgIChyZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpIHx8XG4gICAgICAgICAgIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIGJsb2NrSW5kZW50LCBmbG93SW5kZW50KSkgfHxcbiAgICAgICAgICByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChhbGxvd0Jsb2NrU2NhbGFycyAmJiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB8fFxuICAgICAgICAgICAgcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCkgfHxcbiAgICAgICAgICAgIHJlYWREb3VibGVRdW90ZWRTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWFkQWxpYXMoc3RhdGUpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc3RhdGUudGFnICE9PSBudWxsIHx8IHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2FsaWFzIG5vZGUgc2hvdWxkIG5vdCBoYXZlIGFueSBwcm9wZXJ0aWVzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVhZFBsYWluU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0KSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLnRhZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdGUudGFnID0gJz8nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5kZW50U3RhdHVzID09PSAwKSB7XG4gICAgICAvLyBTcGVjaWFsIGNhc2U6IGJsb2NrIHNlcXVlbmNlcyBhcmUgYWxsb3dlZCB0byBoYXZlIHNhbWUgaW5kZW50YXRpb24gbGV2ZWwgYXMgdGhlIHBhcmVudC5cbiAgICAgIC8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjc5OTc4NFxuICAgICAgaGFzQ29udGVudCA9IGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJiByZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS50YWcgPT09IG51bGwpIHtcbiAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChzdGF0ZS50YWcgPT09ICc/Jykge1xuICAgIC8vIEltcGxpY2l0IHJlc29sdmluZyBpcyBub3QgYWxsb3dlZCBmb3Igbm9uLXNjYWxhciB0eXBlcywgYW5kICc/J1xuICAgIC8vIG5vbi1zcGVjaWZpYyB0YWcgaXMgb25seSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvIHBsYWluIHNjYWxhcnMuXG4gICAgLy9cbiAgICAvLyBXZSBvbmx5IG5lZWQgdG8gY2hlY2sga2luZCBjb25mb3JtaXR5IGluIGNhc2UgdXNlciBleHBsaWNpdGx5IGFzc2lnbnMgJz8nXG4gICAgLy8gdGFnLCBmb3IgZXhhbXBsZSBsaWtlIHRoaXM6IFwiITw/PiBbMF1cIlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLnJlc3VsdCAhPT0gbnVsbCAmJiBzdGF0ZS5raW5kICE9PSAnc2NhbGFyJykge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuYWNjZXB0YWJsZSBub2RlIGtpbmQgZm9yICE8Pz4gdGFnOyBpdCBzaG91bGQgYmUgXCJzY2FsYXJcIiwgbm90IFwiJyArIHN0YXRlLmtpbmQgKyAnXCInKTtcbiAgICB9XG5cbiAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICB0eXBlID0gc3RhdGUuaW1wbGljaXRUeXBlc1t0eXBlSW5kZXhdO1xuXG4gICAgICBpZiAodHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCkpIHsgLy8gYHN0YXRlLnJlc3VsdGAgdXBkYXRlZCBpbiByZXNvbHZlciBpZiBtYXRjaGVkXG4gICAgICAgIHN0YXRlLnJlc3VsdCA9IHR5cGUuY29uc3RydWN0KHN0YXRlLnJlc3VsdCk7XG4gICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gJyEnKSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXRlLnR5cGVNYXBbc3RhdGUua2luZCB8fCAnZmFsbGJhY2snXSwgc3RhdGUudGFnKSkge1xuICAgICAgdHlwZSA9IHN0YXRlLnR5cGVNYXBbc3RhdGUua2luZCB8fCAnZmFsbGJhY2snXVtzdGF0ZS50YWddO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsb29raW5nIGZvciBtdWx0aSB0eXBlXG4gICAgICB0eXBlID0gbnVsbDtcbiAgICAgIHR5cGVMaXN0ID0gc3RhdGUudHlwZU1hcC5tdWx0aVtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddO1xuXG4gICAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHR5cGVMaXN0Lmxlbmd0aDsgdHlwZUluZGV4IDwgdHlwZVF1YW50aXR5OyB0eXBlSW5kZXggKz0gMSkge1xuICAgICAgICBpZiAoc3RhdGUudGFnLnNsaWNlKDAsIHR5cGVMaXN0W3R5cGVJbmRleF0udGFnLmxlbmd0aCkgPT09IHR5cGVMaXN0W3R5cGVJbmRleF0udGFnKSB7XG4gICAgICAgICAgdHlwZSA9IHR5cGVMaXN0W3R5cGVJbmRleF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmtub3duIHRhZyAhPCcgKyBzdGF0ZS50YWcgKyAnPicpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5yZXN1bHQgIT09IG51bGwgJiYgdHlwZS5raW5kICE9PSBzdGF0ZS5raW5kKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIG5vZGUga2luZCBmb3IgITwnICsgc3RhdGUudGFnICsgJz4gdGFnOyBpdCBzaG91bGQgYmUgXCInICsgdHlwZS5raW5kICsgJ1wiLCBub3QgXCInICsgc3RhdGUua2luZCArICdcIicpO1xuICAgIH1cblxuICAgIGlmICghdHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCwgc3RhdGUudGFnKSkgeyAvLyBgc3RhdGUucmVzdWx0YCB1cGRhdGVkIGluIHJlc29sdmVyIGlmIG1hdGNoZWRcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW5ub3QgcmVzb2x2ZSBhIG5vZGUgd2l0aCAhPCcgKyBzdGF0ZS50YWcgKyAnPiBleHBsaWNpdCB0YWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucmVzdWx0ID0gdHlwZS5jb25zdHJ1Y3Qoc3RhdGUucmVzdWx0LCBzdGF0ZS50YWcpO1xuICAgICAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUubGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5saXN0ZW5lcignY2xvc2UnLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLnRhZyAhPT0gbnVsbCB8fCAgc3RhdGUuYW5jaG9yICE9PSBudWxsIHx8IGhhc0NvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIHJlYWREb2N1bWVudChzdGF0ZSkge1xuICB2YXIgZG9jdW1lbnRTdGFydCA9IHN0YXRlLnBvc2l0aW9uLFxuICAgICAgX3Bvc2l0aW9uLFxuICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgIGRpcmVjdGl2ZUFyZ3MsXG4gICAgICBoYXNEaXJlY3RpdmVzID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBzdGF0ZS52ZXJzaW9uID0gbnVsbDtcbiAgc3RhdGUuY2hlY2tMaW5lQnJlYWtzID0gc3RhdGUubGVnYWN5O1xuICBzdGF0ZS50YWdNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdGF0ZS5hbmNob3JNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiAwIHx8IGNoICE9PSAweDI1LyogJSAqLykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgZGlyZWN0aXZlTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgIGRpcmVjdGl2ZUFyZ3MgPSBbXTtcblxuICAgIGlmIChkaXJlY3RpdmVOYW1lLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkaXJlY3RpdmUgbmFtZSBtdXN0IG5vdCBiZSBsZXNzIHRoYW4gb25lIGNoYXJhY3RlciBpbiBsZW5ndGgnKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICAgIGRvIHsgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pOyB9XG4gICAgICAgIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfRU9MKGNoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNfRU9MKGNoKSkgYnJlYWs7XG5cbiAgICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVBcmdzLnB1c2goc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbikpO1xuICAgIH1cblxuICAgIGlmIChjaCAhPT0gMCkgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG5cbiAgICBpZiAoX2hhc093blByb3BlcnR5LmNhbGwoZGlyZWN0aXZlSGFuZGxlcnMsIGRpcmVjdGl2ZU5hbWUpKSB7XG4gICAgICBkaXJlY3RpdmVIYW5kbGVyc1tkaXJlY3RpdmVOYW1lXShzdGF0ZSwgZGlyZWN0aXZlTmFtZSwgZGlyZWN0aXZlQXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ3Vua25vd24gZG9jdW1lbnQgZGlyZWN0aXZlIFwiJyArIGRpcmVjdGl2ZU5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH1cblxuICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPT09IDAgJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pICAgICA9PT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKSA9PT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAyKSA9PT0gMHgyRC8qIC0gKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbiArPSAzO1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICB9IGVsc2UgaWYgKGhhc0RpcmVjdGl2ZXMpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZGlyZWN0aXZlcyBlbmQgbWFyayBpcyBleHBlY3RlZCcpO1xuICB9XG5cbiAgY29tcG9zZU5vZGUoc3RhdGUsIHN0YXRlLmxpbmVJbmRlbnQgLSAxLCBDT05URVhUX0JMT0NLX09VVCwgZmFsc2UsIHRydWUpO1xuICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgaWYgKHN0YXRlLmNoZWNrTGluZUJyZWFrcyAmJlxuICAgICAgUEFUVEVSTl9OT05fQVNDSUlfTElORV9CUkVBS1MudGVzdChzdGF0ZS5pbnB1dC5zbGljZShkb2N1bWVudFN0YXJ0LCBzdGF0ZS5wb3NpdGlvbikpKSB7XG4gICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAnbm9uLUFTQ0lJIGxpbmUgYnJlYWtzIGFyZSBpbnRlcnByZXRlZCBhcyBjb250ZW50Jyk7XG4gIH1cblxuICBzdGF0ZS5kb2N1bWVudHMucHVzaChzdGF0ZS5yZXN1bHQpO1xuXG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHtcblxuICAgIGlmIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMHgyRS8qIC4gKi8pIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uICs9IDM7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA8IChzdGF0ZS5sZW5ndGggLSAxKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdlbmQgb2YgdGhlIHN0cmVhbSBvciBhIGRvY3VtZW50IHNlcGFyYXRvciBpcyBleHBlY3RlZCcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaW5wdXQgPSBTdHJpbmcoaW5wdXQpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAoaW5wdXQubGVuZ3RoICE9PSAwKSB7XG5cbiAgICAvLyBBZGQgdGFpbGluZyBgXFxuYCBpZiBub3QgZXhpc3RzXG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT09IDB4MEEvKiBMRiAqLyAmJlxuICAgICAgICBpbnB1dC5jaGFyQ29kZUF0KGlucHV0Lmxlbmd0aCAtIDEpICE9PSAweDBELyogQ1IgKi8pIHtcbiAgICAgIGlucHV0ICs9ICdcXG4nO1xuICAgIH1cblxuICAgIC8vIFN0cmlwIEJPTVxuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICAgIGlucHV0ID0gaW5wdXQuc2xpY2UoMSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKGlucHV0LCBvcHRpb25zKTtcblxuICB2YXIgbnVsbHBvcyA9IGlucHV0LmluZGV4T2YoJ1xcMCcpO1xuXG4gIGlmIChudWxscG9zICE9PSAtMSkge1xuICAgIHN0YXRlLnBvc2l0aW9uID0gbnVsbHBvcztcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbnVsbCBieXRlIGlzIG5vdCBhbGxvd2VkIGluIGlucHV0Jyk7XG4gIH1cblxuICAvLyBVc2UgMCBhcyBzdHJpbmcgdGVybWluYXRvci4gVGhhdCBzaWduaWZpY2FudGx5IHNpbXBsaWZpZXMgYm91bmRzIGNoZWNrLlxuICBzdGF0ZS5pbnB1dCArPSAnXFwwJztcblxuICB3aGlsZSAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDB4MjAvKiBTcGFjZSAqLykge1xuICAgIHN0YXRlLmxpbmVJbmRlbnQgKz0gMTtcbiAgICBzdGF0ZS5wb3NpdGlvbiArPSAxO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLnBvc2l0aW9uIDwgKHN0YXRlLmxlbmd0aCAtIDEpKSB7XG4gICAgcmVhZERvY3VtZW50KHN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5kb2N1bWVudHM7XG59XG5cblxuZnVuY3Rpb24gbG9hZEFsbChpbnB1dCwgaXRlcmF0b3IsIG9wdGlvbnMpIHtcbiAgaWYgKGl0ZXJhdG9yICE9PSBudWxsICYmIHR5cGVvZiBpdGVyYXRvciA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucyA9IGl0ZXJhdG9yO1xuICAgIGl0ZXJhdG9yID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkb2N1bWVudHMgPSBsb2FkRG9jdW1lbnRzKGlucHV0LCBvcHRpb25zKTtcblxuICBpZiAodHlwZW9mIGl0ZXJhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50cztcbiAgfVxuXG4gIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gZG9jdW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBpdGVyYXRvcihkb2N1bWVudHNbaW5kZXhdKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGxvYWQoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIGRvY3VtZW50cyA9IGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpO1xuXG4gIGlmIChkb2N1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgLyplc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQqL1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBkb2N1bWVudHNbMF07XG4gIH1cbiAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ2V4cGVjdGVkIGEgc2luZ2xlIGRvY3VtZW50IGluIHRoZSBzdHJlYW0sIGJ1dCBmb3VuZCBtb3JlJyk7XG59XG5cblxubW9kdWxlLmV4cG9ydHMubG9hZEFsbCA9IGxvYWRBbGw7XG5tb2R1bGUuZXhwb3J0cy5sb2FkICAgID0gbG9hZDtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuXG52YXIgY29tbW9uICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgWUFNTEV4Y2VwdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG52YXIgREVGQVVMVF9TQ0hFTUEgICAgICA9IHJlcXVpcmUoJy4vc2NoZW1hL2RlZmF1bHQnKTtcblxudmFyIF90b1N0cmluZyAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIENIQVJfQk9NICAgICAgICAgICAgICAgICAgPSAweEZFRkY7XG52YXIgQ0hBUl9UQUIgICAgICAgICAgICAgICAgICA9IDB4MDk7IC8qIFRhYiAqL1xudmFyIENIQVJfTElORV9GRUVEICAgICAgICAgICAgPSAweDBBOyAvKiBMRiAqL1xudmFyIENIQVJfQ0FSUklBR0VfUkVUVVJOICAgICAgPSAweDBEOyAvKiBDUiAqL1xudmFyIENIQVJfU1BBQ0UgICAgICAgICAgICAgICAgPSAweDIwOyAvKiBTcGFjZSAqL1xudmFyIENIQVJfRVhDTEFNQVRJT04gICAgICAgICAgPSAweDIxOyAvKiAhICovXG52YXIgQ0hBUl9ET1VCTEVfUVVPVEUgICAgICAgICA9IDB4MjI7IC8qIFwiICovXG52YXIgQ0hBUl9TSEFSUCAgICAgICAgICAgICAgICA9IDB4MjM7IC8qICMgKi9cbnZhciBDSEFSX1BFUkNFTlQgICAgICAgICAgICAgID0gMHgyNTsgLyogJSAqL1xudmFyIENIQVJfQU1QRVJTQU5EICAgICAgICAgICAgPSAweDI2OyAvKiAmICovXG52YXIgQ0hBUl9TSU5HTEVfUVVPVEUgICAgICAgICA9IDB4Mjc7IC8qICcgKi9cbnZhciBDSEFSX0FTVEVSSVNLICAgICAgICAgICAgID0gMHgyQTsgLyogKiAqL1xudmFyIENIQVJfQ09NTUEgICAgICAgICAgICAgICAgPSAweDJDOyAvKiAsICovXG52YXIgQ0hBUl9NSU5VUyAgICAgICAgICAgICAgICA9IDB4MkQ7IC8qIC0gKi9cbnZhciBDSEFSX0NPTE9OICAgICAgICAgICAgICAgID0gMHgzQTsgLyogOiAqL1xudmFyIENIQVJfRVFVQUxTICAgICAgICAgICAgICAgPSAweDNEOyAvKiA9ICovXG52YXIgQ0hBUl9HUkVBVEVSX1RIQU4gICAgICAgICA9IDB4M0U7IC8qID4gKi9cbnZhciBDSEFSX1FVRVNUSU9OICAgICAgICAgICAgID0gMHgzRjsgLyogPyAqL1xudmFyIENIQVJfQ09NTUVSQ0lBTF9BVCAgICAgICAgPSAweDQwOyAvKiBAICovXG52YXIgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUICA9IDB4NUI7IC8qIFsgKi9cbnZhciBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUID0gMHg1RDsgLyogXSAqL1xudmFyIENIQVJfR1JBVkVfQUNDRU5UICAgICAgICAgPSAweDYwOyAvKiBgICovXG52YXIgQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVQgICA9IDB4N0I7IC8qIHsgKi9cbnZhciBDSEFSX1ZFUlRJQ0FMX0xJTkUgICAgICAgID0gMHg3QzsgLyogfCAqL1xudmFyIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVCAgPSAweDdEOyAvKiB9ICovXG5cbnZhciBFU0NBUEVfU0VRVUVOQ0VTID0ge307XG5cbkVTQ0FQRV9TRVFVRU5DRVNbMHgwMF0gICA9ICdcXFxcMCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDddICAgPSAnXFxcXGEnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDA4XSAgID0gJ1xcXFxiJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwOV0gICA9ICdcXFxcdCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MEFdICAgPSAnXFxcXG4nO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBCXSAgID0gJ1xcXFx2JztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwQ10gICA9ICdcXFxcZic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MERdICAgPSAnXFxcXHInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDFCXSAgID0gJ1xcXFxlJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgyMl0gICA9ICdcXFxcXCInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDVDXSAgID0gJ1xcXFxcXFxcJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHg4NV0gICA9ICdcXFxcTic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4QTBdICAgPSAnXFxcXF8nO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIwMjhdID0gJ1xcXFxMJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgyMDI5XSA9ICdcXFxcUCc7XG5cbnZhciBERVBSRUNBVEVEX0JPT0xFQU5TX1NZTlRBWCA9IFtcbiAgJ3knLCAnWScsICd5ZXMnLCAnWWVzJywgJ1lFUycsICdvbicsICdPbicsICdPTicsXG4gICduJywgJ04nLCAnbm8nLCAnTm8nLCAnTk8nLCAnb2ZmJywgJ09mZicsICdPRkYnXG5dO1xuXG52YXIgREVQUkVDQVRFRF9CQVNFNjBfU1lOVEFYID0gL15bLStdP1swLTlfXSsoPzo6WzAtOV9dKykrKD86XFwuWzAtOV9dKik/JC87XG5cbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZU1hcChzY2hlbWEsIG1hcCkge1xuICB2YXIgcmVzdWx0LCBrZXlzLCBpbmRleCwgbGVuZ3RoLCB0YWcsIHN0eWxlLCB0eXBlO1xuXG4gIGlmIChtYXAgPT09IG51bGwpIHJldHVybiB7fTtcblxuICByZXN1bHQgPSB7fTtcbiAga2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHRhZyA9IGtleXNbaW5kZXhdO1xuICAgIHN0eWxlID0gU3RyaW5nKG1hcFt0YWddKTtcblxuICAgIGlmICh0YWcuc2xpY2UoMCwgMikgPT09ICchIScpIHtcbiAgICAgIHRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjonICsgdGFnLnNsaWNlKDIpO1xuICAgIH1cbiAgICB0eXBlID0gc2NoZW1hLmNvbXBpbGVkVHlwZU1hcFsnZmFsbGJhY2snXVt0YWddO1xuXG4gICAgaWYgKHR5cGUgJiYgX2hhc093blByb3BlcnR5LmNhbGwodHlwZS5zdHlsZUFsaWFzZXMsIHN0eWxlKSkge1xuICAgICAgc3R5bGUgPSB0eXBlLnN0eWxlQWxpYXNlc1tzdHlsZV07XG4gICAgfVxuXG4gICAgcmVzdWx0W3RhZ10gPSBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUhleChjaGFyYWN0ZXIpIHtcbiAgdmFyIHN0cmluZywgaGFuZGxlLCBsZW5ndGg7XG5cbiAgc3RyaW5nID0gY2hhcmFjdGVyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgPD0gMHhGRikge1xuICAgIGhhbmRsZSA9ICd4JztcbiAgICBsZW5ndGggPSAyO1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSAweEZGRkYpIHtcbiAgICBoYW5kbGUgPSAndSc7XG4gICAgbGVuZ3RoID0gNDtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPD0gMHhGRkZGRkZGRikge1xuICAgIGhhbmRsZSA9ICdVJztcbiAgICBsZW5ndGggPSA4O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdjb2RlIHBvaW50IHdpdGhpbiBhIHN0cmluZyBtYXkgbm90IGJlIGdyZWF0ZXIgdGhhbiAweEZGRkZGRkZGJyk7XG4gIH1cblxuICByZXR1cm4gJ1xcXFwnICsgaGFuZGxlICsgY29tbW9uLnJlcGVhdCgnMCcsIGxlbmd0aCAtIHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufVxuXG5cbnZhciBRVU9USU5HX1RZUEVfU0lOR0xFID0gMSxcbiAgICBRVU9USU5HX1RZUEVfRE9VQkxFID0gMjtcblxuZnVuY3Rpb24gU3RhdGUob3B0aW9ucykge1xuICB0aGlzLnNjaGVtYSAgICAgICAgPSBvcHRpb25zWydzY2hlbWEnXSB8fCBERUZBVUxUX1NDSEVNQTtcbiAgdGhpcy5pbmRlbnQgICAgICAgID0gTWF0aC5tYXgoMSwgKG9wdGlvbnNbJ2luZGVudCddIHx8IDIpKTtcbiAgdGhpcy5ub0FycmF5SW5kZW50ID0gb3B0aW9uc1snbm9BcnJheUluZGVudCddIHx8IGZhbHNlO1xuICB0aGlzLnNraXBJbnZhbGlkICAgPSBvcHRpb25zWydza2lwSW52YWxpZCddIHx8IGZhbHNlO1xuICB0aGlzLmZsb3dMZXZlbCAgICAgPSAoY29tbW9uLmlzTm90aGluZyhvcHRpb25zWydmbG93TGV2ZWwnXSkgPyAtMSA6IG9wdGlvbnNbJ2Zsb3dMZXZlbCddKTtcbiAgdGhpcy5zdHlsZU1hcCAgICAgID0gY29tcGlsZVN0eWxlTWFwKHRoaXMuc2NoZW1hLCBvcHRpb25zWydzdHlsZXMnXSB8fCBudWxsKTtcbiAgdGhpcy5zb3J0S2V5cyAgICAgID0gb3B0aW9uc1snc29ydEtleXMnXSB8fCBmYWxzZTtcbiAgdGhpcy5saW5lV2lkdGggICAgID0gb3B0aW9uc1snbGluZVdpZHRoJ10gfHwgODA7XG4gIHRoaXMubm9SZWZzICAgICAgICA9IG9wdGlvbnNbJ25vUmVmcyddIHx8IGZhbHNlO1xuICB0aGlzLm5vQ29tcGF0TW9kZSAgPSBvcHRpb25zWydub0NvbXBhdE1vZGUnXSB8fCBmYWxzZTtcbiAgdGhpcy5jb25kZW5zZUZsb3cgID0gb3B0aW9uc1snY29uZGVuc2VGbG93J10gfHwgZmFsc2U7XG4gIHRoaXMucXVvdGluZ1R5cGUgICA9IG9wdGlvbnNbJ3F1b3RpbmdUeXBlJ10gPT09ICdcIicgPyBRVU9USU5HX1RZUEVfRE9VQkxFIDogUVVPVElOR19UWVBFX1NJTkdMRTtcbiAgdGhpcy5mb3JjZVF1b3RlcyAgID0gb3B0aW9uc1snZm9yY2VRdW90ZXMnXSB8fCBmYWxzZTtcbiAgdGhpcy5yZXBsYWNlciAgICAgID0gdHlwZW9mIG9wdGlvbnNbJ3JlcGxhY2VyJ10gPT09ICdmdW5jdGlvbicgPyBvcHRpb25zWydyZXBsYWNlciddIDogbnVsbDtcblxuICB0aGlzLmltcGxpY2l0VHlwZXMgPSB0aGlzLnNjaGVtYS5jb21waWxlZEltcGxpY2l0O1xuICB0aGlzLmV4cGxpY2l0VHlwZXMgPSB0aGlzLnNjaGVtYS5jb21waWxlZEV4cGxpY2l0O1xuXG4gIHRoaXMudGFnID0gbnVsbDtcbiAgdGhpcy5yZXN1bHQgPSAnJztcblxuICB0aGlzLmR1cGxpY2F0ZXMgPSBbXTtcbiAgdGhpcy51c2VkRHVwbGljYXRlcyA9IG51bGw7XG59XG5cbi8vIEluZGVudHMgZXZlcnkgbGluZSBpbiBhIHN0cmluZy4gRW1wdHkgbGluZXMgKFxcbiBvbmx5KSBhcmUgbm90IGluZGVudGVkLlxuZnVuY3Rpb24gaW5kZW50U3RyaW5nKHN0cmluZywgc3BhY2VzKSB7XG4gIHZhciBpbmQgPSBjb21tb24ucmVwZWF0KCcgJywgc3BhY2VzKSxcbiAgICAgIHBvc2l0aW9uID0gMCxcbiAgICAgIG5leHQgPSAtMSxcbiAgICAgIHJlc3VsdCA9ICcnLFxuICAgICAgbGluZSxcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgbGVuZ3RoKSB7XG4gICAgbmV4dCA9IHN0cmluZy5pbmRleE9mKCdcXG4nLCBwb3NpdGlvbik7XG4gICAgaWYgKG5leHQgPT09IC0xKSB7XG4gICAgICBsaW5lID0gc3RyaW5nLnNsaWNlKHBvc2l0aW9uKTtcbiAgICAgIHBvc2l0aW9uID0gbGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lID0gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBuZXh0ICsgMSk7XG4gICAgICBwb3NpdGlvbiA9IG5leHQgKyAxO1xuICAgIH1cblxuICAgIGlmIChsaW5lLmxlbmd0aCAmJiBsaW5lICE9PSAnXFxuJykgcmVzdWx0ICs9IGluZDtcblxuICAgIHJlc3VsdCArPSBsaW5lO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpIHtcbiAgcmV0dXJuICdcXG4nICsgY29tbW9uLnJlcGVhdCgnICcsIHN0YXRlLmluZGVudCAqIGxldmVsKTtcbn1cblxuZnVuY3Rpb24gdGVzdEltcGxpY2l0UmVzb2x2aW5nKHN0YXRlLCBzdHIpIHtcbiAgdmFyIGluZGV4LCBsZW5ndGgsIHR5cGU7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHR5cGUgPSBzdGF0ZS5pbXBsaWNpdFR5cGVzW2luZGV4XTtcblxuICAgIGlmICh0eXBlLnJlc29sdmUoc3RyKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBbMzNdIHMtd2hpdGUgOjo9IHMtc3BhY2UgfCBzLXRhYlxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGMpIHtcbiAgcmV0dXJuIGMgPT09IENIQVJfU1BBQ0UgfHwgYyA9PT0gQ0hBUl9UQUI7XG59XG5cbi8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgY2hhcmFjdGVyIGNhbiBiZSBwcmludGVkIHdpdGhvdXQgZXNjYXBpbmcuXG4vLyBGcm9tIFlBTUwgMS4yOiBcImFueSBhbGxvd2VkIGNoYXJhY3RlcnMga25vd24gdG8gYmUgbm9uLXByaW50YWJsZVxuLy8gc2hvdWxkIGFsc28gYmUgZXNjYXBlZC4gW0hvd2V2ZXIsXSBUaGlzIGlzblx1MjAxOXQgbWFuZGF0b3J5XCJcbi8vIERlcml2ZWQgZnJvbSBuYi1jaGFyIC0gXFx0IC0gI3g4NSAtICN4QTAgLSAjeDIwMjggLSAjeDIwMjkuXG5mdW5jdGlvbiBpc1ByaW50YWJsZShjKSB7XG4gIHJldHVybiAgKDB4MDAwMjAgPD0gYyAmJiBjIDw9IDB4MDAwMDdFKVxuICAgICAgfHwgKCgweDAwMEExIDw9IGMgJiYgYyA8PSAweDAwRDdGRikgJiYgYyAhPT0gMHgyMDI4ICYmIGMgIT09IDB4MjAyOSlcbiAgICAgIHx8ICgoMHgwRTAwMCA8PSBjICYmIGMgPD0gMHgwMEZGRkQpICYmIGMgIT09IENIQVJfQk9NKVxuICAgICAgfHwgICgweDEwMDAwIDw9IGMgJiYgYyA8PSAweDEwRkZGRik7XG59XG5cbi8vIFszNF0gbnMtY2hhciA6Oj0gbmItY2hhciAtIHMtd2hpdGVcbi8vIFsyN10gbmItY2hhciA6Oj0gYy1wcmludGFibGUgLSBiLWNoYXIgLSBjLWJ5dGUtb3JkZXItbWFya1xuLy8gWzI2XSBiLWNoYXIgIDo6PSBiLWxpbmUtZmVlZCB8IGItY2FycmlhZ2UtcmV0dXJuXG4vLyBJbmNsdWRpbmcgcy13aGl0ZSAoZm9yIHNvbWUgcmVhc29uLCBleGFtcGxlcyBkb2Vzbid0IG1hdGNoIHNwZWNzIGluIHRoaXMgYXNwZWN0KVxuLy8gbnMtY2hhciA6Oj0gYy1wcmludGFibGUgLSBiLWxpbmUtZmVlZCAtIGItY2FycmlhZ2UtcmV0dXJuIC0gYy1ieXRlLW9yZGVyLW1hcmtcbmZ1bmN0aW9uIGlzTnNDaGFyT3JXaGl0ZXNwYWNlKGMpIHtcbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpXG4gICAgJiYgYyAhPT0gQ0hBUl9CT01cbiAgICAvLyAtIGItY2hhclxuICAgICYmIGMgIT09IENIQVJfQ0FSUklBR0VfUkVUVVJOXG4gICAgJiYgYyAhPT0gQ0hBUl9MSU5FX0ZFRUQ7XG59XG5cbi8vIFsxMjddICBucy1wbGFpbi1zYWZlKGMpIDo6PSBjID0gZmxvdy1vdXQgIFx1MjFEMiBucy1wbGFpbi1zYWZlLW91dFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBmbG93LWluICAgXHUyMUQyIG5zLXBsYWluLXNhZmUtaW5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gYmxvY2sta2V5IFx1MjFEMiBucy1wbGFpbi1zYWZlLW91dFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBmbG93LWtleSAgXHUyMUQyIG5zLXBsYWluLXNhZmUtaW5cbi8vIFsxMjhdIG5zLXBsYWluLXNhZmUtb3V0IDo6PSBucy1jaGFyXG4vLyBbMTI5XSAgbnMtcGxhaW4tc2FmZS1pbiA6Oj0gbnMtY2hhciAtIGMtZmxvdy1pbmRpY2F0b3Jcbi8vIFsxMzBdICBucy1wbGFpbi1jaGFyKGMpIDo6PSAgKCBucy1wbGFpbi1zYWZlKGMpIC0gXHUyMDFDOlx1MjAxRCAtIFx1MjAxQyNcdTIwMUQgKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAoIC8qIEFuIG5zLWNoYXIgcHJlY2VkaW5nICovIFx1MjAxQyNcdTIwMUQgKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAoIFx1MjAxQzpcdTIwMUQgLyogRm9sbG93ZWQgYnkgYW4gbnMtcGxhaW4tc2FmZShjKSAqLyApXG5mdW5jdGlvbiBpc1BsYWluU2FmZShjLCBwcmV2LCBpbmJsb2NrKSB7XG4gIHZhciBjSXNOc0NoYXJPcldoaXRlc3BhY2UgPSBpc05zQ2hhck9yV2hpdGVzcGFjZShjKTtcbiAgdmFyIGNJc05zQ2hhciA9IGNJc05zQ2hhck9yV2hpdGVzcGFjZSAmJiAhaXNXaGl0ZXNwYWNlKGMpO1xuICByZXR1cm4gKFxuICAgIC8vIG5zLXBsYWluLXNhZmVcbiAgICBpbmJsb2NrID8gLy8gYyA9IGZsb3ctaW5cbiAgICAgIGNJc05zQ2hhck9yV2hpdGVzcGFjZVxuICAgICAgOiBjSXNOc0NoYXJPcldoaXRlc3BhY2VcbiAgICAgICAgLy8gLSBjLWZsb3ctaW5kaWNhdG9yXG4gICAgICAgICYmIGMgIT09IENIQVJfQ09NTUFcbiAgICAgICAgJiYgYyAhPT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUXG4gICAgICAgICYmIGMgIT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVRcbiAgICAgICAgJiYgYyAhPT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVRcbiAgICAgICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUXG4gIClcbiAgICAvLyBucy1wbGFpbi1jaGFyXG4gICAgJiYgYyAhPT0gQ0hBUl9TSEFSUCAvLyBmYWxzZSBvbiAnIydcbiAgICAmJiAhKHByZXYgPT09IENIQVJfQ09MT04gJiYgIWNJc05zQ2hhcikgLy8gZmFsc2Ugb24gJzogJ1xuICAgIHx8IChpc05zQ2hhck9yV2hpdGVzcGFjZShwcmV2KSAmJiAhaXNXaGl0ZXNwYWNlKHByZXYpICYmIGMgPT09IENIQVJfU0hBUlApIC8vIGNoYW5nZSB0byB0cnVlIG9uICdbXiBdIydcbiAgICB8fCAocHJldiA9PT0gQ0hBUl9DT0xPTiAmJiBjSXNOc0NoYXIpOyAvLyBjaGFuZ2UgdG8gdHJ1ZSBvbiAnOlteIF0nXG59XG5cbi8vIFNpbXBsaWZpZWQgdGVzdCBmb3IgdmFsdWVzIGFsbG93ZWQgYXMgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiBwbGFpbiBzdHlsZS5cbmZ1bmN0aW9uIGlzUGxhaW5TYWZlRmlyc3QoYykge1xuICAvLyBVc2VzIGEgc3Vic2V0IG9mIG5zLWNoYXIgLSBjLWluZGljYXRvclxuICAvLyB3aGVyZSBucy1jaGFyID0gbmItY2hhciAtIHMtd2hpdGUuXG4gIC8vIE5vIHN1cHBvcnQgb2YgKCAoIFx1MjAxQz9cdTIwMUQgfCBcdTIwMUM6XHUyMDFEIHwgXHUyMDFDLVx1MjAxRCApIC8qIEZvbGxvd2VkIGJ5IGFuIG5zLXBsYWluLXNhZmUoYykpICovICkgcGFydFxuICByZXR1cm4gaXNQcmludGFibGUoYykgJiYgYyAhPT0gQ0hBUl9CT01cbiAgICAmJiAhaXNXaGl0ZXNwYWNlKGMpIC8vIC0gcy13aGl0ZVxuICAgIC8vIC0gKGMtaW5kaWNhdG9yIDo6PVxuICAgIC8vIFx1MjAxQy1cdTIwMUQgfCBcdTIwMUM/XHUyMDFEIHwgXHUyMDFDOlx1MjAxRCB8IFx1MjAxQyxcdTIwMUQgfCBcdTIwMUNbXHUyMDFEIHwgXHUyMDFDXVx1MjAxRCB8IFx1MjAxQ3tcdTIwMUQgfCBcdTIwMUN9XHUyMDFEXG4gICAgJiYgYyAhPT0gQ0hBUl9NSU5VU1xuICAgICYmIGMgIT09IENIQVJfUVVFU1RJT05cbiAgICAmJiBjICE9PSBDSEFSX0NPTE9OXG4gICAgJiYgYyAhPT0gQ0hBUl9DT01NQVxuICAgICYmIGMgIT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVFxuICAgIC8vIHwgXHUyMDFDI1x1MjAxRCB8IFx1MjAxQyZcdTIwMUQgfCBcdTIwMUMqXHUyMDFEIHwgXHUyMDFDIVx1MjAxRCB8IFx1MjAxQ3xcdTIwMUQgfCBcdTIwMUM9XHUyMDFEIHwgXHUyMDFDPlx1MjAxRCB8IFx1MjAxQydcdTIwMUQgfCBcdTIwMUNcIlx1MjAxRFxuICAgICYmIGMgIT09IENIQVJfU0hBUlBcbiAgICAmJiBjICE9PSBDSEFSX0FNUEVSU0FORFxuICAgICYmIGMgIT09IENIQVJfQVNURVJJU0tcbiAgICAmJiBjICE9PSBDSEFSX0VYQ0xBTUFUSU9OXG4gICAgJiYgYyAhPT0gQ0hBUl9WRVJUSUNBTF9MSU5FXG4gICAgJiYgYyAhPT0gQ0hBUl9FUVVBTFNcbiAgICAmJiBjICE9PSBDSEFSX0dSRUFURVJfVEhBTlxuICAgICYmIGMgIT09IENIQVJfU0lOR0xFX1FVT1RFXG4gICAgJiYgYyAhPT0gQ0hBUl9ET1VCTEVfUVVPVEVcbiAgICAvLyB8IFx1MjAxQyVcdTIwMUQgfCBcdTIwMUNAXHUyMDFEIHwgXHUyMDFDYFx1MjAxRClcbiAgICAmJiBjICE9PSBDSEFSX1BFUkNFTlRcbiAgICAmJiBjICE9PSBDSEFSX0NPTU1FUkNJQUxfQVRcbiAgICAmJiBjICE9PSBDSEFSX0dSQVZFX0FDQ0VOVDtcbn1cblxuLy8gU2ltcGxpZmllZCB0ZXN0IGZvciB2YWx1ZXMgYWxsb3dlZCBhcyB0aGUgbGFzdCBjaGFyYWN0ZXIgaW4gcGxhaW4gc3R5bGUuXG5mdW5jdGlvbiBpc1BsYWluU2FmZUxhc3QoYykge1xuICAvLyBqdXN0IG5vdCB3aGl0ZXNwYWNlIG9yIGNvbG9uLCBpdCB3aWxsIGJlIGNoZWNrZWQgdG8gYmUgcGxhaW4gY2hhcmFjdGVyIGxhdGVyXG4gIHJldHVybiAhaXNXaGl0ZXNwYWNlKGMpICYmIGMgIT09IENIQVJfQ09MT047XG59XG5cbi8vIFNhbWUgYXMgJ3N0cmluZycuY29kZVBvaW50QXQocG9zKSwgYnV0IHdvcmtzIGluIG9sZGVyIGJyb3dzZXJzLlxuZnVuY3Rpb24gY29kZVBvaW50QXQoc3RyaW5nLCBwb3MpIHtcbiAgdmFyIGZpcnN0ID0gc3RyaW5nLmNoYXJDb2RlQXQocG9zKSwgc2Vjb25kO1xuICBpZiAoZmlyc3QgPj0gMHhEODAwICYmIGZpcnN0IDw9IDB4REJGRiAmJiBwb3MgKyAxIDwgc3RyaW5nLmxlbmd0aCkge1xuICAgIHNlY29uZCA9IHN0cmluZy5jaGFyQ29kZUF0KHBvcyArIDEpO1xuICAgIGlmIChzZWNvbmQgPj0gMHhEQzAwICYmIHNlY29uZCA8PSAweERGRkYpIHtcbiAgICAgIC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgcmV0dXJuIChmaXJzdCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDA7XG4gICAgfVxuICB9XG4gIHJldHVybiBmaXJzdDtcbn1cblxuLy8gRGV0ZXJtaW5lcyB3aGV0aGVyIGJsb2NrIGluZGVudGF0aW9uIGluZGljYXRvciBpcyByZXF1aXJlZC5cbmZ1bmN0aW9uIG5lZWRJbmRlbnRJbmRpY2F0b3Ioc3RyaW5nKSB7XG4gIHZhciBsZWFkaW5nU3BhY2VSZSA9IC9eXFxuKiAvO1xuICByZXR1cm4gbGVhZGluZ1NwYWNlUmUudGVzdChzdHJpbmcpO1xufVxuXG52YXIgU1RZTEVfUExBSU4gICA9IDEsXG4gICAgU1RZTEVfU0lOR0xFICA9IDIsXG4gICAgU1RZTEVfTElURVJBTCA9IDMsXG4gICAgU1RZTEVfRk9MREVEICA9IDQsXG4gICAgU1RZTEVfRE9VQkxFICA9IDU7XG5cbi8vIERldGVybWluZXMgd2hpY2ggc2NhbGFyIHN0eWxlcyBhcmUgcG9zc2libGUgYW5kIHJldHVybnMgdGhlIHByZWZlcnJlZCBzdHlsZS5cbi8vIGxpbmVXaWR0aCA9IC0xID0+IG5vIGxpbWl0LlxuLy8gUHJlLWNvbmRpdGlvbnM6IHN0ci5sZW5ndGggPiAwLlxuLy8gUG9zdC1jb25kaXRpb25zOlxuLy8gICAgU1RZTEVfUExBSU4gb3IgU1RZTEVfU0lOR0xFID0+IG5vIFxcbiBhcmUgaW4gdGhlIHN0cmluZy5cbi8vICAgIFNUWUxFX0xJVEVSQUwgPT4gbm8gbGluZXMgYXJlIHN1aXRhYmxlIGZvciBmb2xkaW5nIChvciBsaW5lV2lkdGggaXMgLTEpLlxuLy8gICAgU1RZTEVfRk9MREVEID0+IGEgbGluZSA+IGxpbmVXaWR0aCBhbmQgY2FuIGJlIGZvbGRlZCAoYW5kIGxpbmVXaWR0aCAhPSAtMSkuXG5mdW5jdGlvbiBjaG9vc2VTY2FsYXJTdHlsZShzdHJpbmcsIHNpbmdsZUxpbmVPbmx5LCBpbmRlbnRQZXJMZXZlbCwgbGluZVdpZHRoLFxuICB0ZXN0QW1iaWd1b3VzVHlwZSwgcXVvdGluZ1R5cGUsIGZvcmNlUXVvdGVzLCBpbmJsb2NrKSB7XG5cbiAgdmFyIGk7XG4gIHZhciBjaGFyID0gMDtcbiAgdmFyIHByZXZDaGFyID0gbnVsbDtcbiAgdmFyIGhhc0xpbmVCcmVhayA9IGZhbHNlO1xuICB2YXIgaGFzRm9sZGFibGVMaW5lID0gZmFsc2U7IC8vIG9ubHkgY2hlY2tlZCBpZiBzaG91bGRUcmFja1dpZHRoXG4gIHZhciBzaG91bGRUcmFja1dpZHRoID0gbGluZVdpZHRoICE9PSAtMTtcbiAgdmFyIHByZXZpb3VzTGluZUJyZWFrID0gLTE7IC8vIGNvdW50IHRoZSBmaXJzdCBsaW5lIGNvcnJlY3RseVxuICB2YXIgcGxhaW4gPSBpc1BsYWluU2FmZUZpcnN0KGNvZGVQb2ludEF0KHN0cmluZywgMCkpXG4gICAgICAgICAgJiYgaXNQbGFpblNhZmVMYXN0KGNvZGVQb2ludEF0KHN0cmluZywgc3RyaW5nLmxlbmd0aCAtIDEpKTtcblxuICBpZiAoc2luZ2xlTGluZU9ubHkgfHwgZm9yY2VRdW90ZXMpIHtcbiAgICAvLyBDYXNlOiBubyBibG9jayBzdHlsZXMuXG4gICAgLy8gQ2hlY2sgZm9yIGRpc2FsbG93ZWQgY2hhcmFjdGVycyB0byBydWxlIG91dCBwbGFpbiBhbmQgc2luZ2xlLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBjaGFyID49IDB4MTAwMDAgPyBpICs9IDIgOiBpKyspIHtcbiAgICAgIGNoYXIgPSBjb2RlUG9pbnRBdChzdHJpbmcsIGkpO1xuICAgICAgaWYgKCFpc1ByaW50YWJsZShjaGFyKSkge1xuICAgICAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICAgICAgfVxuICAgICAgcGxhaW4gPSBwbGFpbiAmJiBpc1BsYWluU2FmZShjaGFyLCBwcmV2Q2hhciwgaW5ibG9jayk7XG4gICAgICBwcmV2Q2hhciA9IGNoYXI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIENhc2U6IGJsb2NrIHN0eWxlcyBwZXJtaXR0ZWQuXG4gICAgZm9yIChpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGNoYXIgPj0gMHgxMDAwMCA/IGkgKz0gMiA6IGkrKykge1xuICAgICAgY2hhciA9IGNvZGVQb2ludEF0KHN0cmluZywgaSk7XG4gICAgICBpZiAoY2hhciA9PT0gQ0hBUl9MSU5FX0ZFRUQpIHtcbiAgICAgICAgaGFzTGluZUJyZWFrID0gdHJ1ZTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGxpbmUgY2FuIGJlIGZvbGRlZC5cbiAgICAgICAgaWYgKHNob3VsZFRyYWNrV2lkdGgpIHtcbiAgICAgICAgICBoYXNGb2xkYWJsZUxpbmUgPSBoYXNGb2xkYWJsZUxpbmUgfHxcbiAgICAgICAgICAgIC8vIEZvbGRhYmxlIGxpbmUgPSB0b28gbG9uZywgYW5kIG5vdCBtb3JlLWluZGVudGVkLlxuICAgICAgICAgICAgKGkgLSBwcmV2aW91c0xpbmVCcmVhayAtIDEgPiBsaW5lV2lkdGggJiZcbiAgICAgICAgICAgICBzdHJpbmdbcHJldmlvdXNMaW5lQnJlYWsgKyAxXSAhPT0gJyAnKTtcbiAgICAgICAgICBwcmV2aW91c0xpbmVCcmVhayA9IGk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzUHJpbnRhYmxlKGNoYXIpKSB7XG4gICAgICAgIHJldHVybiBTVFlMRV9ET1VCTEU7XG4gICAgICB9XG4gICAgICBwbGFpbiA9IHBsYWluICYmIGlzUGxhaW5TYWZlKGNoYXIsIHByZXZDaGFyLCBpbmJsb2NrKTtcbiAgICAgIHByZXZDaGFyID0gY2hhcjtcbiAgICB9XG4gICAgLy8gaW4gY2FzZSB0aGUgZW5kIGlzIG1pc3NpbmcgYSBcXG5cbiAgICBoYXNGb2xkYWJsZUxpbmUgPSBoYXNGb2xkYWJsZUxpbmUgfHwgKHNob3VsZFRyYWNrV2lkdGggJiZcbiAgICAgIChpIC0gcHJldmlvdXNMaW5lQnJlYWsgLSAxID4gbGluZVdpZHRoICYmXG4gICAgICAgc3RyaW5nW3ByZXZpb3VzTGluZUJyZWFrICsgMV0gIT09ICcgJykpO1xuICB9XG4gIC8vIEFsdGhvdWdoIGV2ZXJ5IHN0eWxlIGNhbiByZXByZXNlbnQgXFxuIHdpdGhvdXQgZXNjYXBpbmcsIHByZWZlciBibG9jayBzdHlsZXNcbiAgLy8gZm9yIG11bHRpbGluZSwgc2luY2UgdGhleSdyZSBtb3JlIHJlYWRhYmxlIGFuZCB0aGV5IGRvbid0IGFkZCBlbXB0eSBsaW5lcy5cbiAgLy8gQWxzbyBwcmVmZXIgZm9sZGluZyBhIHN1cGVyLWxvbmcgbGluZS5cbiAgaWYgKCFoYXNMaW5lQnJlYWsgJiYgIWhhc0ZvbGRhYmxlTGluZSkge1xuICAgIC8vIFN0cmluZ3MgaW50ZXJwcmV0YWJsZSBhcyBhbm90aGVyIHR5cGUgaGF2ZSB0byBiZSBxdW90ZWQ7XG4gICAgLy8gZS5nLiB0aGUgc3RyaW5nICd0cnVlJyB2cy4gdGhlIGJvb2xlYW4gdHJ1ZS5cbiAgICBpZiAocGxhaW4gJiYgIWZvcmNlUXVvdGVzICYmICF0ZXN0QW1iaWd1b3VzVHlwZShzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gU1RZTEVfUExBSU47XG4gICAgfVxuICAgIHJldHVybiBxdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/IFNUWUxFX0RPVUJMRSA6IFNUWUxFX1NJTkdMRTtcbiAgfVxuICAvLyBFZGdlIGNhc2U6IGJsb2NrIGluZGVudGF0aW9uIGluZGljYXRvciBjYW4gb25seSBoYXZlIG9uZSBkaWdpdC5cbiAgaWYgKGluZGVudFBlckxldmVsID4gOSAmJiBuZWVkSW5kZW50SW5kaWNhdG9yKHN0cmluZykpIHtcbiAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICB9XG4gIC8vIEF0IHRoaXMgcG9pbnQgd2Uga25vdyBibG9jayBzdHlsZXMgYXJlIHZhbGlkLlxuICAvLyBQcmVmZXIgbGl0ZXJhbCBzdHlsZSB1bmxlc3Mgd2Ugd2FudCB0byBmb2xkLlxuICBpZiAoIWZvcmNlUXVvdGVzKSB7XG4gICAgcmV0dXJuIGhhc0ZvbGRhYmxlTGluZSA/IFNUWUxFX0ZPTERFRCA6IFNUWUxFX0xJVEVSQUw7XG4gIH1cbiAgcmV0dXJuIHF1b3RpbmdUeXBlID09PSBRVU9USU5HX1RZUEVfRE9VQkxFID8gU1RZTEVfRE9VQkxFIDogU1RZTEVfU0lOR0xFO1xufVxuXG4vLyBOb3RlOiBsaW5lIGJyZWFraW5nL2ZvbGRpbmcgaXMgaW1wbGVtZW50ZWQgZm9yIG9ubHkgdGhlIGZvbGRlZCBzdHlsZS5cbi8vIE5CLiBXZSBkcm9wIHRoZSBsYXN0IHRyYWlsaW5nIG5ld2xpbmUgKGlmIGFueSkgb2YgYSByZXR1cm5lZCBibG9jayBzY2FsYXJcbi8vICBzaW5jZSB0aGUgZHVtcGVyIGFkZHMgaXRzIG93biBuZXdsaW5lLiBUaGlzIGFsd2F5cyB3b3Jrczpcbi8vICAgIFx1MjAyMiBObyBlbmRpbmcgbmV3bGluZSA9PiB1bmFmZmVjdGVkOyBhbHJlYWR5IHVzaW5nIHN0cmlwIFwiLVwiIGNob21waW5nLlxuLy8gICAgXHUyMDIyIEVuZGluZyBuZXdsaW5lICAgID0+IHJlbW92ZWQgdGhlbiByZXN0b3JlZC5cbi8vICBJbXBvcnRhbnRseSwgdGhpcyBrZWVwcyB0aGUgXCIrXCIgY2hvbXAgaW5kaWNhdG9yIGZyb20gZ2FpbmluZyBhbiBleHRyYSBsaW5lLlxuZnVuY3Rpb24gd3JpdGVTY2FsYXIoc3RhdGUsIHN0cmluZywgbGV2ZWwsIGlza2V5LCBpbmJsb2NrKSB7XG4gIHN0YXRlLmR1bXAgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmIChzdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gc3RhdGUucXVvdGluZ1R5cGUgPT09IFFVT1RJTkdfVFlQRV9ET1VCTEUgPyAnXCJcIicgOiBcIicnXCI7XG4gICAgfVxuICAgIGlmICghc3RhdGUubm9Db21wYXRNb2RlKSB7XG4gICAgICBpZiAoREVQUkVDQVRFRF9CT09MRUFOU19TWU5UQVguaW5kZXhPZihzdHJpbmcpICE9PSAtMSB8fCBERVBSRUNBVEVEX0JBU0U2MF9TWU5UQVgudGVzdChzdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5xdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/ICgnXCInICsgc3RyaW5nICsgJ1wiJykgOiAoXCInXCIgKyBzdHJpbmcgKyBcIidcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGluZGVudCA9IHN0YXRlLmluZGVudCAqIE1hdGgubWF4KDEsIGxldmVsKTsgLy8gbm8gMC1pbmRlbnQgc2NhbGFyc1xuICAgIC8vIEFzIGluZGVudGF0aW9uIGdldHMgZGVlcGVyLCBsZXQgdGhlIHdpZHRoIGRlY3JlYXNlIG1vbm90b25pY2FsbHlcbiAgICAvLyB0byB0aGUgbG93ZXIgYm91bmQgbWluKHN0YXRlLmxpbmVXaWR0aCwgNDApLlxuICAgIC8vIE5vdGUgdGhhdCB0aGlzIGltcGxpZXNcbiAgICAvLyAgc3RhdGUubGluZVdpZHRoIFx1MjI2NCA0MCArIHN0YXRlLmluZGVudDogd2lkdGggaXMgZml4ZWQgYXQgdGhlIGxvd2VyIGJvdW5kLlxuICAgIC8vICBzdGF0ZS5saW5lV2lkdGggPiA0MCArIHN0YXRlLmluZGVudDogd2lkdGggZGVjcmVhc2VzIHVudGlsIHRoZSBsb3dlciBib3VuZC5cbiAgICAvLyBUaGlzIGJlaGF2ZXMgYmV0dGVyIHRoYW4gYSBjb25zdGFudCBtaW5pbXVtIHdpZHRoIHdoaWNoIGRpc2FsbG93cyBuYXJyb3dlciBvcHRpb25zLFxuICAgIC8vIG9yIGFuIGluZGVudCB0aHJlc2hvbGQgd2hpY2ggY2F1c2VzIHRoZSB3aWR0aCB0byBzdWRkZW5seSBpbmNyZWFzZS5cbiAgICB2YXIgbGluZVdpZHRoID0gc3RhdGUubGluZVdpZHRoID09PSAtMVxuICAgICAgPyAtMSA6IE1hdGgubWF4KE1hdGgubWluKHN0YXRlLmxpbmVXaWR0aCwgNDApLCBzdGF0ZS5saW5lV2lkdGggLSBpbmRlbnQpO1xuXG4gICAgLy8gV2l0aG91dCBrbm93aW5nIGlmIGtleXMgYXJlIGltcGxpY2l0L2V4cGxpY2l0LCBhc3N1bWUgaW1wbGljaXQgZm9yIHNhZmV0eS5cbiAgICB2YXIgc2luZ2xlTGluZU9ubHkgPSBpc2tleVxuICAgICAgLy8gTm8gYmxvY2sgc3R5bGVzIGluIGZsb3cgbW9kZS5cbiAgICAgIHx8IChzdGF0ZS5mbG93TGV2ZWwgPiAtMSAmJiBsZXZlbCA+PSBzdGF0ZS5mbG93TGV2ZWwpO1xuICAgIGZ1bmN0aW9uIHRlc3RBbWJpZ3VpdHkoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGVzdEltcGxpY2l0UmVzb2x2aW5nKHN0YXRlLCBzdHJpbmcpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoY2hvb3NlU2NhbGFyU3R5bGUoc3RyaW5nLCBzaW5nbGVMaW5lT25seSwgc3RhdGUuaW5kZW50LCBsaW5lV2lkdGgsXG4gICAgICB0ZXN0QW1iaWd1aXR5LCBzdGF0ZS5xdW90aW5nVHlwZSwgc3RhdGUuZm9yY2VRdW90ZXMgJiYgIWlza2V5LCBpbmJsb2NrKSkge1xuXG4gICAgICBjYXNlIFNUWUxFX1BMQUlOOlxuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgY2FzZSBTVFlMRV9TSU5HTEU6XG4gICAgICAgIHJldHVybiBcIidcIiArIHN0cmluZy5yZXBsYWNlKC8nL2csIFwiJydcIikgKyBcIidcIjtcbiAgICAgIGNhc2UgU1RZTEVfTElURVJBTDpcbiAgICAgICAgcmV0dXJuICd8JyArIGJsb2NrSGVhZGVyKHN0cmluZywgc3RhdGUuaW5kZW50KVxuICAgICAgICAgICsgZHJvcEVuZGluZ05ld2xpbmUoaW5kZW50U3RyaW5nKHN0cmluZywgaW5kZW50KSk7XG4gICAgICBjYXNlIFNUWUxFX0ZPTERFRDpcbiAgICAgICAgcmV0dXJuICc+JyArIGJsb2NrSGVhZGVyKHN0cmluZywgc3RhdGUuaW5kZW50KVxuICAgICAgICAgICsgZHJvcEVuZGluZ05ld2xpbmUoaW5kZW50U3RyaW5nKGZvbGRTdHJpbmcoc3RyaW5nLCBsaW5lV2lkdGgpLCBpbmRlbnQpKTtcbiAgICAgIGNhc2UgU1RZTEVfRE9VQkxFOlxuICAgICAgICByZXR1cm4gJ1wiJyArIGVzY2FwZVN0cmluZyhzdHJpbmcsIGxpbmVXaWR0aCkgKyAnXCInO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ2ltcG9zc2libGUgZXJyb3I6IGludmFsaWQgc2NhbGFyIHN0eWxlJyk7XG4gICAgfVxuICB9KCkpO1xufVxuXG4vLyBQcmUtY29uZGl0aW9uczogc3RyaW5nIGlzIHZhbGlkIGZvciBhIGJsb2NrIHNjYWxhciwgMSA8PSBpbmRlbnRQZXJMZXZlbCA8PSA5LlxuZnVuY3Rpb24gYmxvY2tIZWFkZXIoc3RyaW5nLCBpbmRlbnRQZXJMZXZlbCkge1xuICB2YXIgaW5kZW50SW5kaWNhdG9yID0gbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpID8gU3RyaW5nKGluZGVudFBlckxldmVsKSA6ICcnO1xuXG4gIC8vIG5vdGUgdGhlIHNwZWNpYWwgY2FzZTogdGhlIHN0cmluZyAnXFxuJyBjb3VudHMgYXMgYSBcInRyYWlsaW5nXCIgZW1wdHkgbGluZS5cbiAgdmFyIGNsaXAgPSAgICAgICAgICBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSAnXFxuJztcbiAgdmFyIGtlZXAgPSBjbGlwICYmIChzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDJdID09PSAnXFxuJyB8fCBzdHJpbmcgPT09ICdcXG4nKTtcbiAgdmFyIGNob21wID0ga2VlcCA/ICcrJyA6IChjbGlwID8gJycgOiAnLScpO1xuXG4gIHJldHVybiBpbmRlbnRJbmRpY2F0b3IgKyBjaG9tcCArICdcXG4nO1xufVxuXG4vLyAoU2VlIHRoZSBub3RlIGZvciB3cml0ZVNjYWxhci4pXG5mdW5jdGlvbiBkcm9wRW5kaW5nTmV3bGluZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1tzdHJpbmcubGVuZ3RoIC0gMV0gPT09ICdcXG4nID8gc3RyaW5nLnNsaWNlKDAsIC0xKSA6IHN0cmluZztcbn1cblxuLy8gTm90ZTogYSBsb25nIGxpbmUgd2l0aG91dCBhIHN1aXRhYmxlIGJyZWFrIHBvaW50IHdpbGwgZXhjZWVkIHRoZSB3aWR0aCBsaW1pdC5cbi8vIFByZS1jb25kaXRpb25zOiBldmVyeSBjaGFyIGluIHN0ciBpc1ByaW50YWJsZSwgc3RyLmxlbmd0aCA+IDAsIHdpZHRoID4gMC5cbmZ1bmN0aW9uIGZvbGRTdHJpbmcoc3RyaW5nLCB3aWR0aCkge1xuICAvLyBJbiBmb2xkZWQgc3R5bGUsICRrJCBjb25zZWN1dGl2ZSBuZXdsaW5lcyBvdXRwdXQgYXMgJGsrMSQgbmV3bGluZXNcdTIwMTRcbiAgLy8gdW5sZXNzIHRoZXkncmUgYmVmb3JlIG9yIGFmdGVyIGEgbW9yZS1pbmRlbnRlZCBsaW5lLCBvciBhdCB0aGUgdmVyeVxuICAvLyBiZWdpbm5pbmcgb3IgZW5kLCBpbiB3aGljaCBjYXNlICRrJCBtYXBzIHRvICRrJC5cbiAgLy8gVGhlcmVmb3JlLCBwYXJzZSBlYWNoIGNodW5rIGFzIG5ld2xpbmUocykgZm9sbG93ZWQgYnkgYSBjb250ZW50IGxpbmUuXG4gIHZhciBsaW5lUmUgPSAvKFxcbispKFteXFxuXSopL2c7XG5cbiAgLy8gZmlyc3QgbGluZSAocG9zc2libHkgYW4gZW1wdHkgbGluZSlcbiAgdmFyIHJlc3VsdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5leHRMRiA9IHN0cmluZy5pbmRleE9mKCdcXG4nKTtcbiAgICBuZXh0TEYgPSBuZXh0TEYgIT09IC0xID8gbmV4dExGIDogc3RyaW5nLmxlbmd0aDtcbiAgICBsaW5lUmUubGFzdEluZGV4ID0gbmV4dExGO1xuICAgIHJldHVybiBmb2xkTGluZShzdHJpbmcuc2xpY2UoMCwgbmV4dExGKSwgd2lkdGgpO1xuICB9KCkpO1xuICAvLyBJZiB3ZSBoYXZlbid0IHJlYWNoZWQgdGhlIGZpcnN0IGNvbnRlbnQgbGluZSB5ZXQsIGRvbid0IGFkZCBhbiBleHRyYSBcXG4uXG4gIHZhciBwcmV2TW9yZUluZGVudGVkID0gc3RyaW5nWzBdID09PSAnXFxuJyB8fCBzdHJpbmdbMF0gPT09ICcgJztcbiAgdmFyIG1vcmVJbmRlbnRlZDtcblxuICAvLyByZXN0IG9mIHRoZSBsaW5lc1xuICB2YXIgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSBsaW5lUmUuZXhlYyhzdHJpbmcpKSkge1xuICAgIHZhciBwcmVmaXggPSBtYXRjaFsxXSwgbGluZSA9IG1hdGNoWzJdO1xuICAgIG1vcmVJbmRlbnRlZCA9IChsaW5lWzBdID09PSAnICcpO1xuICAgIHJlc3VsdCArPSBwcmVmaXhcbiAgICAgICsgKCFwcmV2TW9yZUluZGVudGVkICYmICFtb3JlSW5kZW50ZWQgJiYgbGluZSAhPT0gJydcbiAgICAgICAgPyAnXFxuJyA6ICcnKVxuICAgICAgKyBmb2xkTGluZShsaW5lLCB3aWR0aCk7XG4gICAgcHJldk1vcmVJbmRlbnRlZCA9IG1vcmVJbmRlbnRlZDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIEdyZWVkeSBsaW5lIGJyZWFraW5nLlxuLy8gUGlja3MgdGhlIGxvbmdlc3QgbGluZSB1bmRlciB0aGUgbGltaXQgZWFjaCB0aW1lLFxuLy8gb3RoZXJ3aXNlIHNldHRsZXMgZm9yIHRoZSBzaG9ydGVzdCBsaW5lIG92ZXIgdGhlIGxpbWl0LlxuLy8gTkIuIE1vcmUtaW5kZW50ZWQgbGluZXMgKmNhbm5vdCogYmUgZm9sZGVkLCBhcyB0aGF0IHdvdWxkIGFkZCBhbiBleHRyYSBcXG4uXG5mdW5jdGlvbiBmb2xkTGluZShsaW5lLCB3aWR0aCkge1xuICBpZiAobGluZSA9PT0gJycgfHwgbGluZVswXSA9PT0gJyAnKSByZXR1cm4gbGluZTtcblxuICAvLyBTaW5jZSBhIG1vcmUtaW5kZW50ZWQgbGluZSBhZGRzIGEgXFxuLCBicmVha3MgY2FuJ3QgYmUgZm9sbG93ZWQgYnkgYSBzcGFjZS5cbiAgdmFyIGJyZWFrUmUgPSAvIFteIF0vZzsgLy8gbm90ZTogdGhlIG1hdGNoIGluZGV4IHdpbGwgYWx3YXlzIGJlIDw9IGxlbmd0aC0yLlxuICB2YXIgbWF0Y2g7XG4gIC8vIHN0YXJ0IGlzIGFuIGluY2x1c2l2ZSBpbmRleC4gZW5kLCBjdXJyLCBhbmQgbmV4dCBhcmUgZXhjbHVzaXZlLlxuICB2YXIgc3RhcnQgPSAwLCBlbmQsIGN1cnIgPSAwLCBuZXh0ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIC8vIEludmFyaWFudHM6IDAgPD0gc3RhcnQgPD0gbGVuZ3RoLTEuXG4gIC8vICAgMCA8PSBjdXJyIDw9IG5leHQgPD0gbWF4KDAsIGxlbmd0aC0yKS4gY3VyciAtIHN0YXJ0IDw9IHdpZHRoLlxuICAvLyBJbnNpZGUgdGhlIGxvb3A6XG4gIC8vICAgQSBtYXRjaCBpbXBsaWVzIGxlbmd0aCA+PSAyLCBzbyBjdXJyIGFuZCBuZXh0IGFyZSA8PSBsZW5ndGgtMi5cbiAgd2hpbGUgKChtYXRjaCA9IGJyZWFrUmUuZXhlYyhsaW5lKSkpIHtcbiAgICBuZXh0ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gbWFpbnRhaW4gaW52YXJpYW50OiBjdXJyIC0gc3RhcnQgPD0gd2lkdGhcbiAgICBpZiAobmV4dCAtIHN0YXJ0ID4gd2lkdGgpIHtcbiAgICAgIGVuZCA9IChjdXJyID4gc3RhcnQpID8gY3VyciA6IG5leHQ7IC8vIGRlcml2ZSBlbmQgPD0gbGVuZ3RoLTJcbiAgICAgIHJlc3VsdCArPSAnXFxuJyArIGxpbmUuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAvLyBza2lwIHRoZSBzcGFjZSB0aGF0IHdhcyBvdXRwdXQgYXMgXFxuXG4gICAgICBzdGFydCA9IGVuZCArIDE7ICAgICAgICAgICAgICAgICAgICAvLyBkZXJpdmUgc3RhcnQgPD0gbGVuZ3RoLTFcbiAgICB9XG4gICAgY3VyciA9IG5leHQ7XG4gIH1cblxuICAvLyBCeSB0aGUgaW52YXJpYW50cywgc3RhcnQgPD0gbGVuZ3RoLTEsIHNvIHRoZXJlIGlzIHNvbWV0aGluZyBsZWZ0IG92ZXIuXG4gIC8vIEl0IGlzIGVpdGhlciB0aGUgd2hvbGUgc3RyaW5nIG9yIGEgcGFydCBzdGFydGluZyBmcm9tIG5vbi13aGl0ZXNwYWNlLlxuICByZXN1bHQgKz0gJ1xcbic7XG4gIC8vIEluc2VydCBhIGJyZWFrIGlmIHRoZSByZW1haW5kZXIgaXMgdG9vIGxvbmcgYW5kIHRoZXJlIGlzIGEgYnJlYWsgYXZhaWxhYmxlLlxuICBpZiAobGluZS5sZW5ndGggLSBzdGFydCA+IHdpZHRoICYmIGN1cnIgPiBzdGFydCkge1xuICAgIHJlc3VsdCArPSBsaW5lLnNsaWNlKHN0YXJ0LCBjdXJyKSArICdcXG4nICsgbGluZS5zbGljZShjdXJyICsgMSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ICs9IGxpbmUuc2xpY2Uoc3RhcnQpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5zbGljZSgxKTsgLy8gZHJvcCBleHRyYSBcXG4gam9pbmVyXG59XG5cbi8vIEVzY2FwZXMgYSBkb3VibGUtcXVvdGVkIHN0cmluZy5cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyhzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgY2hhciA9IDA7XG4gIHZhciBlc2NhcGVTZXE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBjaGFyID49IDB4MTAwMDAgPyBpICs9IDIgOiBpKyspIHtcbiAgICBjaGFyID0gY29kZVBvaW50QXQoc3RyaW5nLCBpKTtcbiAgICBlc2NhcGVTZXEgPSBFU0NBUEVfU0VRVUVOQ0VTW2NoYXJdO1xuXG4gICAgaWYgKCFlc2NhcGVTZXEgJiYgaXNQcmludGFibGUoY2hhcikpIHtcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdbaV07XG4gICAgICBpZiAoY2hhciA+PSAweDEwMDAwKSByZXN1bHQgKz0gc3RyaW5nW2kgKyAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IGVzY2FwZVNlcSB8fCBlbmNvZGVIZXgoY2hhcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBvYmplY3QpIHtcbiAgdmFyIF9yZXN1bHQgPSAnJyxcbiAgICAgIF90YWcgICAgPSBzdGF0ZS50YWcsXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIHZhbHVlO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHZhbHVlID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgdmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgU3RyaW5nKGluZGV4KSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8vIFdyaXRlIG9ubHkgdmFsaWQgZWxlbWVudHMsIHB1dCBudWxsIGluc3RlYWQgb2YgaW52YWxpZCBlbGVtZW50cy5cbiAgICBpZiAod3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgdmFsdWUsIGZhbHNlLCBmYWxzZSkgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgIHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG51bGwsIGZhbHNlLCBmYWxzZSkpKSB7XG5cbiAgICAgIGlmIChfcmVzdWx0ICE9PSAnJykgX3Jlc3VsdCArPSAnLCcgKyAoIXN0YXRlLmNvbmRlbnNlRmxvdyA/ICcgJyA6ICcnKTtcbiAgICAgIF9yZXN1bHQgKz0gc3RhdGUuZHVtcDtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS50YWcgPSBfdGFnO1xuICBzdGF0ZS5kdW1wID0gJ1snICsgX3Jlc3VsdCArICddJztcbn1cblxuZnVuY3Rpb24gd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCwgb2JqZWN0LCBjb21wYWN0KSB7XG4gIHZhciBfcmVzdWx0ID0gJycsXG4gICAgICBfdGFnICAgID0gc3RhdGUudGFnLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGgsXG4gICAgICB2YWx1ZTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB2YWx1ZSA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICAgIHZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbChvYmplY3QsIFN0cmluZyhpbmRleCksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBXcml0ZSBvbmx5IHZhbGlkIGVsZW1lbnRzLCBwdXQgbnVsbCBpbnN0ZWFkIG9mIGludmFsaWQgZWxlbWVudHMuXG4gICAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIHRydWUpIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICB3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgbnVsbCwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIHRydWUpKSkge1xuXG4gICAgICBpZiAoIWNvbXBhY3QgfHwgX3Jlc3VsdCAhPT0gJycpIHtcbiAgICAgICAgX3Jlc3VsdCArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5kdW1wICYmIENIQVJfTElORV9GRUVEID09PSBzdGF0ZS5kdW1wLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgX3Jlc3VsdCArPSAnLSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcmVzdWx0ICs9ICctICc7XG4gICAgICB9XG5cbiAgICAgIF9yZXN1bHQgKz0gc3RhdGUuZHVtcDtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS50YWcgPSBfdGFnO1xuICBzdGF0ZS5kdW1wID0gX3Jlc3VsdCB8fCAnW10nOyAvLyBFbXB0eSBzZXF1ZW5jZSBpZiBubyB2YWxpZCB2YWx1ZXMuXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvd01hcHBpbmcoc3RhdGUsIGxldmVsLCBvYmplY3QpIHtcbiAgdmFyIF9yZXN1bHQgICAgICAgPSAnJyxcbiAgICAgIF90YWcgICAgICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBvYmplY3RLZXlMaXN0ID0gT2JqZWN0LmtleXMob2JqZWN0KSxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoLFxuICAgICAgb2JqZWN0S2V5LFxuICAgICAgb2JqZWN0VmFsdWUsXG4gICAgICBwYWlyQnVmZmVyO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3RLZXlMaXN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcblxuICAgIHBhaXJCdWZmZXIgPSAnJztcbiAgICBpZiAoX3Jlc3VsdCAhPT0gJycpIHBhaXJCdWZmZXIgKz0gJywgJztcblxuICAgIGlmIChzdGF0ZS5jb25kZW5zZUZsb3cpIHBhaXJCdWZmZXIgKz0gJ1wiJztcblxuICAgIG9iamVjdEtleSA9IG9iamVjdEtleUxpc3RbaW5kZXhdO1xuICAgIG9iamVjdFZhbHVlID0gb2JqZWN0W29iamVjdEtleV07XG5cbiAgICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICAgIG9iamVjdFZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbChvYmplY3QsIG9iamVjdEtleSwgb2JqZWN0VmFsdWUpO1xuICAgIH1cblxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgb2JqZWN0S2V5LCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTsgLy8gU2tpcCB0aGlzIHBhaXIgYmVjYXVzZSBvZiBpbnZhbGlkIGtleTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuZHVtcC5sZW5ndGggPiAxMDI0KSBwYWlyQnVmZmVyICs9ICc/ICc7XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXAgKyAoc3RhdGUuY29uZGVuc2VGbG93ID8gJ1wiJyA6ICcnKSArICc6JyArIChzdGF0ZS5jb25kZW5zZUZsb3cgPyAnJyA6ICcgJyk7XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdFZhbHVlLCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTsgLy8gU2tpcCB0aGlzIHBhaXIgYmVjYXVzZSBvZiBpbnZhbGlkIHZhbHVlLlxuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICd7JyArIF9yZXN1bHQgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0LCBjb21wYWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgZXhwbGljaXRQYWlyLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICAvLyBBbGxvdyBzb3J0aW5nIGtleXMgc28gdGhhdCB0aGUgb3V0cHV0IGZpbGUgaXMgZGV0ZXJtaW5pc3RpY1xuICBpZiAoc3RhdGUuc29ydEtleXMgPT09IHRydWUpIHtcbiAgICAvLyBEZWZhdWx0IHNvcnRpbmdcbiAgICBvYmplY3RLZXlMaXN0LnNvcnQoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3RhdGUuc29ydEtleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBDdXN0b20gc29ydCBmdW5jdGlvblxuICAgIG9iamVjdEtleUxpc3Quc29ydChzdGF0ZS5zb3J0S2V5cyk7XG4gIH0gZWxzZSBpZiAoc3RhdGUuc29ydEtleXMpIHtcbiAgICAvLyBTb21ldGhpbmcgaXMgd3JvbmdcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignc29ydEtleXMgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXJCdWZmZXIgPSAnJztcblxuICAgIGlmICghY29tcGFjdCB8fCBfcmVzdWx0ICE9PSAnJykge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcblxuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgb2JqZWN0VmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgb2JqZWN0S2V5LCBvYmplY3RWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0S2V5LCB0cnVlLCB0cnVlLCB0cnVlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCBrZXkuXG4gICAgfVxuXG4gICAgZXhwbGljaXRQYWlyID0gKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHxcbiAgICAgICAgICAgICAgICAgICAoc3RhdGUuZHVtcCAmJiBzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQpO1xuXG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBwYWlyQnVmZmVyICs9ICc/JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhaXJCdWZmZXIgKz0gJz8gJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICBpZiAoZXhwbGljaXRQYWlyKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICB9XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RWYWx1ZSwgdHJ1ZSwgZXhwbGljaXRQYWlyKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCB2YWx1ZS5cbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICBwYWlyQnVmZmVyICs9ICc6JztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFpckJ1ZmZlciArPSAnOiAnO1xuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ3t9JzsgLy8gRW1wdHkgbWFwcGluZyBpZiBubyB2YWxpZCBwYWlycy5cbn1cblxuZnVuY3Rpb24gZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBleHBsaWNpdCkge1xuICB2YXIgX3Jlc3VsdCwgdHlwZUxpc3QsIGluZGV4LCBsZW5ndGgsIHR5cGUsIHN0eWxlO1xuXG4gIHR5cGVMaXN0ID0gZXhwbGljaXQgPyBzdGF0ZS5leHBsaWNpdFR5cGVzIDogc3RhdGUuaW1wbGljaXRUeXBlcztcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdHlwZUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHR5cGUgPSB0eXBlTGlzdFtpbmRleF07XG5cbiAgICBpZiAoKHR5cGUuaW5zdGFuY2VPZiAgfHwgdHlwZS5wcmVkaWNhdGUpICYmXG4gICAgICAgICghdHlwZS5pbnN0YW5jZU9mIHx8ICgodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpICYmIChvYmplY3QgaW5zdGFuY2VvZiB0eXBlLmluc3RhbmNlT2YpKSkgJiZcbiAgICAgICAgKCF0eXBlLnByZWRpY2F0ZSAgfHwgdHlwZS5wcmVkaWNhdGUob2JqZWN0KSkpIHtcblxuICAgICAgaWYgKGV4cGxpY2l0KSB7XG4gICAgICAgIGlmICh0eXBlLm11bHRpICYmIHR5cGUucmVwcmVzZW50TmFtZSkge1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUucmVwcmVzZW50TmFtZShvYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50YWcgPSAnPyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlLnJlcHJlc2VudCkge1xuICAgICAgICBzdHlsZSA9IHN0YXRlLnN0eWxlTWFwW3R5cGUudGFnXSB8fCB0eXBlLmRlZmF1bHRTdHlsZTtcblxuICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwodHlwZS5yZXByZXNlbnQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgICAgX3Jlc3VsdCA9IHR5cGUucmVwcmVzZW50KG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHR5cGUucmVwcmVzZW50LCBzdHlsZSkpIHtcbiAgICAgICAgICBfcmVzdWx0ID0gdHlwZS5yZXByZXNlbnRbc3R5bGVdKG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCchPCcgKyB0eXBlLnRhZyArICc+IHRhZyByZXNvbHZlciBhY2NlcHRzIG5vdCBcIicgKyBzdHlsZSArICdcIiBzdHlsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuZHVtcCA9IF9yZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gU2VyaWFsaXplcyBgb2JqZWN0YCBhbmQgd3JpdGVzIGl0IHRvIGdsb2JhbCBgcmVzdWx0YC5cbi8vIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBvciBmYWxzZSBvbiBpbnZhbGlkIG9iamVjdC5cbi8vXG5mdW5jdGlvbiB3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3QsIGJsb2NrLCBjb21wYWN0LCBpc2tleSwgaXNibG9ja3NlcSkge1xuICBzdGF0ZS50YWcgPSBudWxsO1xuICBzdGF0ZS5kdW1wID0gb2JqZWN0O1xuXG4gIGlmICghZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBmYWxzZSkpIHtcbiAgICBkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIHRydWUpO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBfdG9TdHJpbmcuY2FsbChzdGF0ZS5kdW1wKTtcbiAgdmFyIGluYmxvY2sgPSBibG9jaztcbiAgdmFyIHRhZ1N0cjtcblxuICBpZiAoYmxvY2spIHtcbiAgICBibG9jayA9IChzdGF0ZS5mbG93TGV2ZWwgPCAwIHx8IHN0YXRlLmZsb3dMZXZlbCA+IGxldmVsKTtcbiAgfVxuXG4gIHZhciBvYmplY3RPckFycmF5ID0gdHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGR1cGxpY2F0ZUluZGV4LFxuICAgICAgZHVwbGljYXRlO1xuXG4gIGlmIChvYmplY3RPckFycmF5KSB7XG4gICAgZHVwbGljYXRlSW5kZXggPSBzdGF0ZS5kdXBsaWNhdGVzLmluZGV4T2Yob2JqZWN0KTtcbiAgICBkdXBsaWNhdGUgPSBkdXBsaWNhdGVJbmRleCAhPT0gLTE7XG4gIH1cblxuICBpZiAoKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHwgZHVwbGljYXRlIHx8IChzdGF0ZS5pbmRlbnQgIT09IDIgJiYgbGV2ZWwgPiAwKSkge1xuICAgIGNvbXBhY3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChkdXBsaWNhdGUgJiYgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdKSB7XG4gICAgc3RhdGUuZHVtcCA9ICcqcmVmXycgKyBkdXBsaWNhdGVJbmRleDtcbiAgfSBlbHNlIHtcbiAgICBpZiAob2JqZWN0T3JBcnJheSAmJiBkdXBsaWNhdGUgJiYgIXN0YXRlLnVzZWREdXBsaWNhdGVzW2R1cGxpY2F0ZUluZGV4XSkge1xuICAgICAgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBpZiAoYmxvY2sgJiYgKE9iamVjdC5rZXlzKHN0YXRlLmR1bXApLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgd3JpdGVCbG9ja01hcHBpbmcoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wLCBjb21wYWN0KTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCk7XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgJyAnICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgaWYgKGJsb2NrICYmIChzdGF0ZS5kdW1wLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgaWYgKHN0YXRlLm5vQXJyYXlJbmRlbnQgJiYgIWlzYmxvY2tzZXEgJiYgbGV2ZWwgPiAwKSB7XG4gICAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCAtIDEsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBTdHJpbmddJykge1xuICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gJz8nKSB7XG4gICAgICAgIHdyaXRlU2NhbGFyKHN0YXRlLCBzdGF0ZS5kdW1wLCBsZXZlbCwgaXNrZXksIGluYmxvY2spO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgVW5kZWZpbmVkXScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnNraXBJbnZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbigndW5hY2NlcHRhYmxlIGtpbmQgb2YgYW4gb2JqZWN0IHRvIGR1bXAgJyArIHR5cGUpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS50YWcgIT09IG51bGwgJiYgc3RhdGUudGFnICE9PSAnPycpIHtcbiAgICAgIC8vIE5lZWQgdG8gZW5jb2RlIGFsbCBjaGFyYWN0ZXJzIGV4Y2VwdCB0aG9zZSBhbGxvd2VkIGJ5IHRoZSBzcGVjOlxuICAgICAgLy9cbiAgICAgIC8vIFszNV0gbnMtZGVjLWRpZ2l0ICAgIDo6PSAgWyN4MzAtI3gzOV0gLyogMC05ICovXG4gICAgICAvLyBbMzZdIG5zLWhleC1kaWdpdCAgICA6Oj0gIG5zLWRlYy1kaWdpdFxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfCBbI3g0MS0jeDQ2XSAvKiBBLUYgKi8gfCBbI3g2MS0jeDY2XSAvKiBhLWYgKi9cbiAgICAgIC8vIFszN10gbnMtYXNjaWktbGV0dGVyIDo6PSAgWyN4NDEtI3g1QV0gLyogQS1aICovIHwgWyN4NjEtI3g3QV0gLyogYS16ICovXG4gICAgICAvLyBbMzhdIG5zLXdvcmQtY2hhciAgICA6Oj0gIG5zLWRlYy1kaWdpdCB8IG5zLWFzY2lpLWxldHRlciB8IFx1MjAxQy1cdTIwMURcbiAgICAgIC8vIFszOV0gbnMtdXJpLWNoYXIgICAgIDo6PSAgXHUyMDFDJVx1MjAxRCBucy1oZXgtZGlnaXQgbnMtaGV4LWRpZ2l0IHwgbnMtd29yZC1jaGFyIHwgXHUyMDFDI1x1MjAxRFxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfCBcdTIwMUM7XHUyMDFEIHwgXHUyMDFDL1x1MjAxRCB8IFx1MjAxQz9cdTIwMUQgfCBcdTIwMUM6XHUyMDFEIHwgXHUyMDFDQFx1MjAxRCB8IFx1MjAxQyZcdTIwMUQgfCBcdTIwMUM9XHUyMDFEIHwgXHUyMDFDK1x1MjAxRCB8IFx1MjAxQyRcdTIwMUQgfCBcdTIwMUMsXHUyMDFEXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB8IFx1MjAxQ19cdTIwMUQgfCBcdTIwMUMuXHUyMDFEIHwgXHUyMDFDIVx1MjAxRCB8IFx1MjAxQ35cdTIwMUQgfCBcdTIwMUMqXHUyMDFEIHwgXHUyMDFDJ1x1MjAxRCB8IFx1MjAxQyhcdTIwMUQgfCBcdTIwMUMpXHUyMDFEIHwgXHUyMDFDW1x1MjAxRCB8IFx1MjAxQ11cdTIwMURcbiAgICAgIC8vXG4gICAgICAvLyBBbHNvIG5lZWQgdG8gZW5jb2RlICchJyBiZWNhdXNlIGl0IGhhcyBzcGVjaWFsIG1lYW5pbmcgKGVuZCBvZiB0YWcgcHJlZml4KS5cbiAgICAgIC8vXG4gICAgICB0YWdTdHIgPSBlbmNvZGVVUkkoXG4gICAgICAgIHN0YXRlLnRhZ1swXSA9PT0gJyEnID8gc3RhdGUudGFnLnNsaWNlKDEpIDogc3RhdGUudGFnXG4gICAgICApLnJlcGxhY2UoLyEvZywgJyUyMScpO1xuXG4gICAgICBpZiAoc3RhdGUudGFnWzBdID09PSAnIScpIHtcbiAgICAgICAgdGFnU3RyID0gJyEnICsgdGFnU3RyO1xuICAgICAgfSBlbHNlIGlmICh0YWdTdHIuc2xpY2UoMCwgMTgpID09PSAndGFnOnlhbWwub3JnLDIwMDI6Jykge1xuICAgICAgICB0YWdTdHIgPSAnISEnICsgdGFnU3RyLnNsaWNlKDE4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhZ1N0ciA9ICchPCcgKyB0YWdTdHIgKyAnPic7XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmR1bXAgPSB0YWdTdHIgKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZXREdXBsaWNhdGVSZWZlcmVuY2VzKG9iamVjdCwgc3RhdGUpIHtcbiAgdmFyIG9iamVjdHMgPSBbXSxcbiAgICAgIGR1cGxpY2F0ZXNJbmRleGVzID0gW10sXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aDtcblxuICBpbnNwZWN0Tm9kZShvYmplY3QsIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZHVwbGljYXRlc0luZGV4ZXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHN0YXRlLmR1cGxpY2F0ZXMucHVzaChvYmplY3RzW2R1cGxpY2F0ZXNJbmRleGVzW2luZGV4XV0pO1xuICB9XG4gIHN0YXRlLnVzZWREdXBsaWNhdGVzID0gbmV3IEFycmF5KGxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3ROb2RlKG9iamVjdCwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpIHtcbiAgdmFyIG9iamVjdEtleUxpc3QsXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aDtcblxuICBpZiAob2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgaW5kZXggPSBvYmplY3RzLmluZGV4T2Yob2JqZWN0KTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoZHVwbGljYXRlc0luZGV4ZXMuaW5kZXhPZihpbmRleCkgPT09IC0xKSB7XG4gICAgICAgIGR1cGxpY2F0ZXNJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvYmplY3RzLnB1c2gob2JqZWN0KTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgICBpbnNwZWN0Tm9kZShvYmplY3RbaW5kZXhdLCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdEtleUxpc3QgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3RLZXlMaXN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgICBpbnNwZWN0Tm9kZShvYmplY3Rbb2JqZWN0S2V5TGlzdFtpbmRleF1dLCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZHVtcChpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUob3B0aW9ucyk7XG5cbiAgaWYgKCFzdGF0ZS5ub1JlZnMpIGdldER1cGxpY2F0ZVJlZmVyZW5jZXMoaW5wdXQsIHN0YXRlKTtcblxuICB2YXIgdmFsdWUgPSBpbnB1dDtcblxuICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICB2YWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwoeyAnJzogdmFsdWUgfSwgJycsIHZhbHVlKTtcbiAgfVxuXG4gIGlmICh3cml0ZU5vZGUoc3RhdGUsIDAsIHZhbHVlLCB0cnVlLCB0cnVlKSkgcmV0dXJuIHN0YXRlLmR1bXAgKyAnXFxuJztcblxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzLmR1bXAgPSBkdW1wO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuXG52YXIgbG9hZGVyID0gcmVxdWlyZSgnLi9saWIvbG9hZGVyJyk7XG52YXIgZHVtcGVyID0gcmVxdWlyZSgnLi9saWIvZHVtcGVyJyk7XG5cblxuZnVuY3Rpb24gcmVuYW1lZChmcm9tLCB0bykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24geWFtbC4nICsgZnJvbSArICcgaXMgcmVtb3ZlZCBpbiBqcy15YW1sIDQuICcgK1xuICAgICAgJ1VzZSB5YW1sLicgKyB0byArICcgaW5zdGVhZCwgd2hpY2ggaXMgbm93IHNhZmUgYnkgZGVmYXVsdC4nKTtcbiAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5UeXBlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9saWIvdHlwZScpO1xubW9kdWxlLmV4cG9ydHMuU2NoZW1hICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vbGliL3NjaGVtYScpO1xubW9kdWxlLmV4cG9ydHMuRkFJTFNBRkVfU0NIRU1BICAgICA9IHJlcXVpcmUoJy4vbGliL3NjaGVtYS9mYWlsc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuSlNPTl9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vbGliL3NjaGVtYS9qc29uJyk7XG5tb2R1bGUuZXhwb3J0cy5DT1JFX1NDSEVNQSAgICAgICAgID0gcmVxdWlyZSgnLi9saWIvc2NoZW1hL2NvcmUnKTtcbm1vZHVsZS5leHBvcnRzLkRFRkFVTFRfU0NIRU1BICAgICAgPSByZXF1aXJlKCcuL2xpYi9zY2hlbWEvZGVmYXVsdCcpO1xubW9kdWxlLmV4cG9ydHMubG9hZCAgICAgICAgICAgICAgICA9IGxvYWRlci5sb2FkO1xubW9kdWxlLmV4cG9ydHMubG9hZEFsbCAgICAgICAgICAgICA9IGxvYWRlci5sb2FkQWxsO1xubW9kdWxlLmV4cG9ydHMuZHVtcCAgICAgICAgICAgICAgICA9IGR1bXBlci5kdW1wO1xubW9kdWxlLmV4cG9ydHMuWUFNTEV4Y2VwdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vbGliL2V4Y2VwdGlvbicpO1xuXG4vLyBSZS1leHBvcnQgYWxsIHR5cGVzIGluIGNhc2UgdXNlciB3YW50cyB0byBjcmVhdGUgY3VzdG9tIHNjaGVtYVxubW9kdWxlLmV4cG9ydHMudHlwZXMgPSB7XG4gIGJpbmFyeTogICAgcmVxdWlyZSgnLi9saWIvdHlwZS9iaW5hcnknKSxcbiAgZmxvYXQ6ICAgICByZXF1aXJlKCcuL2xpYi90eXBlL2Zsb2F0JyksXG4gIG1hcDogICAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9tYXAnKSxcbiAgbnVsbDogICAgICByZXF1aXJlKCcuL2xpYi90eXBlL251bGwnKSxcbiAgcGFpcnM6ICAgICByZXF1aXJlKCcuL2xpYi90eXBlL3BhaXJzJyksXG4gIHNldDogICAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9zZXQnKSxcbiAgdGltZXN0YW1wOiByZXF1aXJlKCcuL2xpYi90eXBlL3RpbWVzdGFtcCcpLFxuICBib29sOiAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvYm9vbCcpLFxuICBpbnQ6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvaW50JyksXG4gIG1lcmdlOiAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9tZXJnZScpLFxuICBvbWFwOiAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvb21hcCcpLFxuICBzZXE6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvc2VxJyksXG4gIHN0cjogICAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9zdHInKVxufTtcblxuLy8gUmVtb3ZlZCBmdW5jdGlvbnMgZnJvbSBKUy1ZQU1MIDMuMC54XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZCAgICAgICAgICAgID0gcmVuYW1lZCgnc2FmZUxvYWQnLCAnbG9hZCcpO1xubW9kdWxlLmV4cG9ydHMuc2FmZUxvYWRBbGwgICAgICAgICA9IHJlbmFtZWQoJ3NhZmVMb2FkQWxsJywgJ2xvYWRBbGwnKTtcbm1vZHVsZS5leHBvcnRzLnNhZmVEdW1wICAgICAgICAgICAgPSByZW5hbWVkKCdzYWZlRHVtcCcsICdkdW1wJyk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIGlzTm90aGluZyhzdWJqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIHN1YmplY3QgPT09ICd1bmRlZmluZWQnKSB8fCAoc3ViamVjdCA9PT0gbnVsbCk7XG59XG5cblxuZnVuY3Rpb24gaXNPYmplY3Qoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JykgJiYgKHN1YmplY3QgIT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIHRvQXJyYXkoc2VxdWVuY2UpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc2VxdWVuY2UpKSByZXR1cm4gc2VxdWVuY2U7XG4gIGVsc2UgaWYgKGlzTm90aGluZyhzZXF1ZW5jZSkpIHJldHVybiBbXTtcblxuICByZXR1cm4gWyBzZXF1ZW5jZSBdO1xufVxuXG5cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgaW5kZXgsIGxlbmd0aCwga2V5LCBzb3VyY2VLZXlzO1xuXG4gIGlmIChzb3VyY2UpIHtcbiAgICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzb3VyY2VLZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgIGtleSA9IHNvdXJjZUtleXNbaW5kZXhdO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5cbmZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIGNvdW50KSB7XG4gIHZhciByZXN1bHQgPSAnJywgY3ljbGU7XG5cbiAgZm9yIChjeWNsZSA9IDA7IGN5Y2xlIDwgY291bnQ7IGN5Y2xlICs9IDEpIHtcbiAgICByZXN1bHQgKz0gc3RyaW5nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5mdW5jdGlvbiBpc05lZ2F0aXZlWmVybyhudW1iZXIpIHtcbiAgcmV0dXJuIChudW1iZXIgPT09IDApICYmIChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPT09IDEgLyBudW1iZXIpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzLmlzTm90aGluZyAgICAgID0gaXNOb3RoaW5nO1xubW9kdWxlLmV4cG9ydHMuaXNPYmplY3QgICAgICAgPSBpc09iamVjdDtcbm1vZHVsZS5leHBvcnRzLnRvQXJyYXkgICAgICAgID0gdG9BcnJheTtcbm1vZHVsZS5leHBvcnRzLnJlcGVhdCAgICAgICAgID0gcmVwZWF0O1xubW9kdWxlLmV4cG9ydHMuaXNOZWdhdGl2ZVplcm8gPSBpc05lZ2F0aXZlWmVybztcbm1vZHVsZS5leHBvcnRzLmV4dGVuZCAgICAgICAgID0gZXh0ZW5kO1xuIiwgIi8vIFlBTUwgZXJyb3IgY2xhc3MuIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODQ1ODk4NFxuLy9cbid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcihleGNlcHRpb24sIGNvbXBhY3QpIHtcbiAgdmFyIHdoZXJlID0gJycsIG1lc3NhZ2UgPSBleGNlcHRpb24ucmVhc29uIHx8ICcodW5rbm93biByZWFzb24pJztcblxuICBpZiAoIWV4Y2VwdGlvbi5tYXJrKSByZXR1cm4gbWVzc2FnZTtcblxuICBpZiAoZXhjZXB0aW9uLm1hcmsubmFtZSkge1xuICAgIHdoZXJlICs9ICdpbiBcIicgKyBleGNlcHRpb24ubWFyay5uYW1lICsgJ1wiICc7XG4gIH1cblxuICB3aGVyZSArPSAnKCcgKyAoZXhjZXB0aW9uLm1hcmsubGluZSArIDEpICsgJzonICsgKGV4Y2VwdGlvbi5tYXJrLmNvbHVtbiArIDEpICsgJyknO1xuXG4gIGlmICghY29tcGFjdCAmJiBleGNlcHRpb24ubWFyay5zbmlwcGV0KSB7XG4gICAgd2hlcmUgKz0gJ1xcblxcbicgKyBleGNlcHRpb24ubWFyay5zbmlwcGV0O1xuICB9XG5cbiAgcmV0dXJuIG1lc3NhZ2UgKyAnICcgKyB3aGVyZTtcbn1cblxuXG5mdW5jdGlvbiBZQU1MRXhjZXB0aW9uKHJlYXNvbiwgbWFyaykge1xuICAvLyBTdXBlciBjb25zdHJ1Y3RvclxuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubmFtZSA9ICdZQU1MRXhjZXB0aW9uJztcbiAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gIHRoaXMubWFyayA9IG1hcms7XG4gIHRoaXMubWVzc2FnZSA9IGZvcm1hdEVycm9yKHRoaXMsIGZhbHNlKTtcblxuICAvLyBJbmNsdWRlIHN0YWNrIHRyYWNlIGluIGVycm9yIG9iamVjdFxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAvLyBDaHJvbWUgYW5kIE5vZGVKU1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIEZGLCBJRSAxMCsgYW5kIFNhZmFyaSA2Ky4gRmFsbGJhY2sgZm9yIG90aGVyc1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrIHx8ICcnO1xuICB9XG59XG5cblxuLy8gSW5oZXJpdCBmcm9tIEVycm9yXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbllBTUxFeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gWUFNTEV4Y2VwdGlvbjtcblxuXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGNvbXBhY3QpIHtcbiAgcmV0dXJuIHRoaXMubmFtZSArICc6ICcgKyBmb3JtYXRFcnJvcih0aGlzLCBjb21wYWN0KTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBZQU1MRXhjZXB0aW9uO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuXG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxuXG4vLyBnZXQgc25pcHBldCBmb3IgYSBzaW5nbGUgbGluZSwgcmVzcGVjdGluZyBtYXhMZW5ndGhcbmZ1bmN0aW9uIGdldExpbmUoYnVmZmVyLCBsaW5lU3RhcnQsIGxpbmVFbmQsIHBvc2l0aW9uLCBtYXhMaW5lTGVuZ3RoKSB7XG4gIHZhciBoZWFkID0gJyc7XG4gIHZhciB0YWlsID0gJyc7XG4gIHZhciBtYXhIYWxmTGVuZ3RoID0gTWF0aC5mbG9vcihtYXhMaW5lTGVuZ3RoIC8gMikgLSAxO1xuXG4gIGlmIChwb3NpdGlvbiAtIGxpbmVTdGFydCA+IG1heEhhbGZMZW5ndGgpIHtcbiAgICBoZWFkID0gJyAuLi4gJztcbiAgICBsaW5lU3RhcnQgPSBwb3NpdGlvbiAtIG1heEhhbGZMZW5ndGggKyBoZWFkLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChsaW5lRW5kIC0gcG9zaXRpb24gPiBtYXhIYWxmTGVuZ3RoKSB7XG4gICAgdGFpbCA9ICcgLi4uJztcbiAgICBsaW5lRW5kID0gcG9zaXRpb24gKyBtYXhIYWxmTGVuZ3RoIC0gdGFpbC5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0cjogaGVhZCArIGJ1ZmZlci5zbGljZShsaW5lU3RhcnQsIGxpbmVFbmQpLnJlcGxhY2UoL1xcdC9nLCAnXHUyMTkyJykgKyB0YWlsLFxuICAgIHBvczogcG9zaXRpb24gLSBsaW5lU3RhcnQgKyBoZWFkLmxlbmd0aCAvLyByZWxhdGl2ZSBwb3NpdGlvblxuICB9O1xufVxuXG5cbmZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbWF4KSB7XG4gIHJldHVybiBjb21tb24ucmVwZWF0KCcgJywgbWF4IC0gc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59XG5cblxuZnVuY3Rpb24gbWFrZVNuaXBwZXQobWFyaywgb3B0aW9ucykge1xuICBvcHRpb25zID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zIHx8IG51bGwpO1xuXG4gIGlmICghbWFyay5idWZmZXIpIHJldHVybiBudWxsO1xuXG4gIGlmICghb3B0aW9ucy5tYXhMZW5ndGgpIG9wdGlvbnMubWF4TGVuZ3RoID0gNzk7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbmRlbnQgICAgICAhPT0gJ251bWJlcicpIG9wdGlvbnMuaW5kZW50ICAgICAgPSAxO1xuICBpZiAodHlwZW9mIG9wdGlvbnMubGluZXNCZWZvcmUgIT09ICdudW1iZXInKSBvcHRpb25zLmxpbmVzQmVmb3JlID0gMztcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbmVzQWZ0ZXIgICE9PSAnbnVtYmVyJykgb3B0aW9ucy5saW5lc0FmdGVyICA9IDI7XG5cbiAgdmFyIHJlID0gL1xccj9cXG58XFxyfFxcMC9nO1xuICB2YXIgbGluZVN0YXJ0cyA9IFsgMCBdO1xuICB2YXIgbGluZUVuZHMgPSBbXTtcbiAgdmFyIG1hdGNoO1xuICB2YXIgZm91bmRMaW5lTm8gPSAtMTtcblxuICB3aGlsZSAoKG1hdGNoID0gcmUuZXhlYyhtYXJrLmJ1ZmZlcikpKSB7XG4gICAgbGluZUVuZHMucHVzaChtYXRjaC5pbmRleCk7XG4gICAgbGluZVN0YXJ0cy5wdXNoKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcblxuICAgIGlmIChtYXJrLnBvc2l0aW9uIDw9IG1hdGNoLmluZGV4ICYmIGZvdW5kTGluZU5vIDwgMCkge1xuICAgICAgZm91bmRMaW5lTm8gPSBsaW5lU3RhcnRzLmxlbmd0aCAtIDI7XG4gICAgfVxuICB9XG5cbiAgaWYgKGZvdW5kTGluZU5vIDwgMCkgZm91bmRMaW5lTm8gPSBsaW5lU3RhcnRzLmxlbmd0aCAtIDE7XG5cbiAgdmFyIHJlc3VsdCA9ICcnLCBpLCBsaW5lO1xuICB2YXIgbGluZU5vTGVuZ3RoID0gTWF0aC5taW4obWFyay5saW5lICsgb3B0aW9ucy5saW5lc0FmdGVyLCBsaW5lRW5kcy5sZW5ndGgpLnRvU3RyaW5nKCkubGVuZ3RoO1xuICB2YXIgbWF4TGluZUxlbmd0aCA9IG9wdGlvbnMubWF4TGVuZ3RoIC0gKG9wdGlvbnMuaW5kZW50ICsgbGluZU5vTGVuZ3RoICsgMyk7XG5cbiAgZm9yIChpID0gMTsgaSA8PSBvcHRpb25zLmxpbmVzQmVmb3JlOyBpKyspIHtcbiAgICBpZiAoZm91bmRMaW5lTm8gLSBpIDwgMCkgYnJlYWs7XG4gICAgbGluZSA9IGdldExpbmUoXG4gICAgICBtYXJrLmJ1ZmZlcixcbiAgICAgIGxpbmVTdGFydHNbZm91bmRMaW5lTm8gLSBpXSxcbiAgICAgIGxpbmVFbmRzW2ZvdW5kTGluZU5vIC0gaV0sXG4gICAgICBtYXJrLnBvc2l0aW9uIC0gKGxpbmVTdGFydHNbZm91bmRMaW5lTm9dIC0gbGluZVN0YXJ0c1tmb3VuZExpbmVObyAtIGldKSxcbiAgICAgIG1heExpbmVMZW5ndGhcbiAgICApO1xuICAgIHJlc3VsdCA9IGNvbW1vbi5yZXBlYXQoJyAnLCBvcHRpb25zLmluZGVudCkgKyBwYWRTdGFydCgobWFyay5saW5lIC0gaSArIDEpLnRvU3RyaW5nKCksIGxpbmVOb0xlbmd0aCkgK1xuICAgICAgJyB8ICcgKyBsaW5lLnN0ciArICdcXG4nICsgcmVzdWx0O1xuICB9XG5cbiAgbGluZSA9IGdldExpbmUobWFyay5idWZmZXIsIGxpbmVTdGFydHNbZm91bmRMaW5lTm9dLCBsaW5lRW5kc1tmb3VuZExpbmVOb10sIG1hcmsucG9zaXRpb24sIG1heExpbmVMZW5ndGgpO1xuICByZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnICcsIG9wdGlvbnMuaW5kZW50KSArIHBhZFN0YXJ0KChtYXJrLmxpbmUgKyAxKS50b1N0cmluZygpLCBsaW5lTm9MZW5ndGgpICtcbiAgICAnIHwgJyArIGxpbmUuc3RyICsgJ1xcbic7XG4gIHJlc3VsdCArPSBjb21tb24ucmVwZWF0KCctJywgb3B0aW9ucy5pbmRlbnQgKyBsaW5lTm9MZW5ndGggKyAzICsgbGluZS5wb3MpICsgJ14nICsgJ1xcbic7XG5cbiAgZm9yIChpID0gMTsgaSA8PSBvcHRpb25zLmxpbmVzQWZ0ZXI7IGkrKykge1xuICAgIGlmIChmb3VuZExpbmVObyArIGkgPj0gbGluZUVuZHMubGVuZ3RoKSBicmVhaztcbiAgICBsaW5lID0gZ2V0TGluZShcbiAgICAgIG1hcmsuYnVmZmVyLFxuICAgICAgbGluZVN0YXJ0c1tmb3VuZExpbmVObyArIGldLFxuICAgICAgbGluZUVuZHNbZm91bmRMaW5lTm8gKyBpXSxcbiAgICAgIG1hcmsucG9zaXRpb24gLSAobGluZVN0YXJ0c1tmb3VuZExpbmVOb10gLSBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vICsgaV0pLFxuICAgICAgbWF4TGluZUxlbmd0aFxuICAgICk7XG4gICAgcmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJyAnLCBvcHRpb25zLmluZGVudCkgKyBwYWRTdGFydCgobWFyay5saW5lICsgaSArIDEpLnRvU3RyaW5nKCksIGxpbmVOb0xlbmd0aCkgK1xuICAgICAgJyB8ICcgKyBsaW5lLnN0ciArICdcXG4nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC9cXG4kLywgJycpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gbWFrZVNuaXBwZXQ7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgWUFNTEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG5cbnZhciBUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMgPSBbXG4gICdraW5kJyxcbiAgJ211bHRpJyxcbiAgJ3Jlc29sdmUnLFxuICAnY29uc3RydWN0JyxcbiAgJ2luc3RhbmNlT2YnLFxuICAncHJlZGljYXRlJyxcbiAgJ3JlcHJlc2VudCcsXG4gICdyZXByZXNlbnROYW1lJyxcbiAgJ2RlZmF1bHRTdHlsZScsXG4gICdzdHlsZUFsaWFzZXMnXG5dO1xuXG52YXIgWUFNTF9OT0RFX0tJTkRTID0gW1xuICAnc2NhbGFyJyxcbiAgJ3NlcXVlbmNlJyxcbiAgJ21hcHBpbmcnXG5dO1xuXG5mdW5jdGlvbiBjb21waWxlU3R5bGVBbGlhc2VzKG1hcCkge1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgaWYgKG1hcCAhPT0gbnVsbCkge1xuICAgIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIG1hcFtzdHlsZV0uZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgcmVzdWx0W1N0cmluZyhhbGlhcyldID0gc3R5bGU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIFR5cGUodGFnLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoVFlQRV9DT05TVFJVQ1RPUl9PUFRJT05TLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVW5rbm93biBvcHRpb24gXCInICsgbmFtZSArICdcIiBpcyBtZXQgaW4gZGVmaW5pdGlvbiBvZiBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVE9ETzogQWRkIHRhZyBmb3JtYXQgY2hlY2suXG4gIHRoaXMub3B0aW9ucyAgICAgICA9IG9wdGlvbnM7IC8vIGtlZXAgb3JpZ2luYWwgb3B0aW9ucyBpbiBjYXNlIHVzZXIgd2FudHMgdG8gZXh0ZW5kIHRoaXMgdHlwZSBsYXRlclxuICB0aGlzLnRhZyAgICAgICAgICAgPSB0YWc7XG4gIHRoaXMua2luZCAgICAgICAgICA9IG9wdGlvbnNbJ2tpbmQnXSAgICAgICAgICB8fCBudWxsO1xuICB0aGlzLnJlc29sdmUgICAgICAgPSBvcHRpb25zWydyZXNvbHZlJ10gICAgICAgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdGhpcy5jb25zdHJ1Y3QgICAgID0gb3B0aW9uc1snY29uc3RydWN0J10gICAgIHx8IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhOyB9O1xuICB0aGlzLmluc3RhbmNlT2YgICAgPSBvcHRpb25zWydpbnN0YW5jZU9mJ10gICAgfHwgbnVsbDtcbiAgdGhpcy5wcmVkaWNhdGUgICAgID0gb3B0aW9uc1sncHJlZGljYXRlJ10gICAgIHx8IG51bGw7XG4gIHRoaXMucmVwcmVzZW50ICAgICA9IG9wdGlvbnNbJ3JlcHJlc2VudCddICAgICB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudE5hbWUgPSBvcHRpb25zWydyZXByZXNlbnROYW1lJ10gfHwgbnVsbDtcbiAgdGhpcy5kZWZhdWx0U3R5bGUgID0gb3B0aW9uc1snZGVmYXVsdFN0eWxlJ10gIHx8IG51bGw7XG4gIHRoaXMubXVsdGkgICAgICAgICA9IG9wdGlvbnNbJ211bHRpJ10gICAgICAgICB8fCBmYWxzZTtcbiAgdGhpcy5zdHlsZUFsaWFzZXMgID0gY29tcGlsZVN0eWxlQWxpYXNlcyhvcHRpb25zWydzdHlsZUFsaWFzZXMnXSB8fCBudWxsKTtcblxuICBpZiAoWUFNTF9OT0RFX0tJTkRTLmluZGV4T2YodGhpcy5raW5kKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVW5rbm93biBraW5kIFwiJyArIHRoaXMua2luZCArICdcIiBpcyBzcGVjaWZpZWQgZm9yIFwiJyArIHRhZyArICdcIiBZQU1MIHR5cGUuJyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUeXBlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuKi9cblxudmFyIFlBTUxFeGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xudmFyIFR5cGUgICAgICAgICAgPSByZXF1aXJlKCcuL3R5cGUnKTtcblxuXG5mdW5jdGlvbiBjb21waWxlTGlzdChzY2hlbWEsIG5hbWUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIHNjaGVtYVtuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50VHlwZSkge1xuICAgIHZhciBuZXdJbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAocHJldmlvdXNUeXBlLCBwcmV2aW91c0luZGV4KSB7XG4gICAgICBpZiAocHJldmlvdXNUeXBlLnRhZyA9PT0gY3VycmVudFR5cGUudGFnICYmXG4gICAgICAgICAgcHJldmlvdXNUeXBlLmtpbmQgPT09IGN1cnJlbnRUeXBlLmtpbmQgJiZcbiAgICAgICAgICBwcmV2aW91c1R5cGUubXVsdGkgPT09IGN1cnJlbnRUeXBlLm11bHRpKSB7XG5cbiAgICAgICAgbmV3SW5kZXggPSBwcmV2aW91c0luZGV4O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVzdWx0W25ld0luZGV4XSA9IGN1cnJlbnRUeXBlO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIGNvbXBpbGVNYXAoLyogbGlzdHMuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2NhbGFyOiB7fSxcbiAgICAgICAgc2VxdWVuY2U6IHt9LFxuICAgICAgICBtYXBwaW5nOiB7fSxcbiAgICAgICAgZmFsbGJhY2s6IHt9LFxuICAgICAgICBtdWx0aToge1xuICAgICAgICAgIHNjYWxhcjogW10sXG4gICAgICAgICAgc2VxdWVuY2U6IFtdLFxuICAgICAgICAgIG1hcHBpbmc6IFtdLFxuICAgICAgICAgIGZhbGxiYWNrOiBbXVxuICAgICAgICB9XG4gICAgICB9LCBpbmRleCwgbGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIGNvbGxlY3RUeXBlKHR5cGUpIHtcbiAgICBpZiAodHlwZS5tdWx0aSkge1xuICAgICAgcmVzdWx0Lm11bHRpW3R5cGUua2luZF0ucHVzaCh0eXBlKTtcbiAgICAgIHJlc3VsdC5tdWx0aVsnZmFsbGJhY2snXS5wdXNoKHR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdHlwZS5raW5kXVt0eXBlLnRhZ10gPSByZXN1bHRbJ2ZhbGxiYWNrJ11bdHlwZS50YWddID0gdHlwZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBhcmd1bWVudHNbaW5kZXhdLmZvckVhY2goY29sbGVjdFR5cGUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gU2NoZW1hKGRlZmluaXRpb24pIHtcbiAgcmV0dXJuIHRoaXMuZXh0ZW5kKGRlZmluaXRpb24pO1xufVxuXG5cblNjaGVtYS5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKGRlZmluaXRpb24pIHtcbiAgdmFyIGltcGxpY2l0ID0gW107XG4gIHZhciBleHBsaWNpdCA9IFtdO1xuXG4gIGlmIChkZWZpbml0aW9uIGluc3RhbmNlb2YgVHlwZSkge1xuICAgIC8vIFNjaGVtYS5leHRlbmQodHlwZSlcbiAgICBleHBsaWNpdC5wdXNoKGRlZmluaXRpb24pO1xuXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgIC8vIFNjaGVtYS5leHRlbmQoWyB0eXBlMSwgdHlwZTIsIC4uLiBdKVxuICAgIGV4cGxpY2l0ID0gZXhwbGljaXQuY29uY2F0KGRlZmluaXRpb24pO1xuXG4gIH0gZWxzZSBpZiAoZGVmaW5pdGlvbiAmJiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uLmltcGxpY2l0KSB8fCBBcnJheS5pc0FycmF5KGRlZmluaXRpb24uZXhwbGljaXQpKSkge1xuICAgIC8vIFNjaGVtYS5leHRlbmQoeyBleHBsaWNpdDogWyB0eXBlMSwgdHlwZTIsIC4uLiBdLCBpbXBsaWNpdDogWyB0eXBlMSwgdHlwZTIsIC4uLiBdIH0pXG4gICAgaWYgKGRlZmluaXRpb24uaW1wbGljaXQpIGltcGxpY2l0ID0gaW1wbGljaXQuY29uY2F0KGRlZmluaXRpb24uaW1wbGljaXQpO1xuICAgIGlmIChkZWZpbml0aW9uLmV4cGxpY2l0KSBleHBsaWNpdCA9IGV4cGxpY2l0LmNvbmNhdChkZWZpbml0aW9uLmV4cGxpY2l0KTtcblxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdTY2hlbWEuZXh0ZW5kIGFyZ3VtZW50IHNob3VsZCBiZSBhIFR5cGUsIFsgVHlwZSBdLCAnICtcbiAgICAgICdvciBhIHNjaGVtYSBkZWZpbml0aW9uICh7IGltcGxpY2l0OiBbLi4uXSwgZXhwbGljaXQ6IFsuLi5dIH0pJyk7XG4gIH1cblxuICBpbXBsaWNpdC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgaWYgKCEodHlwZSBpbnN0YW5jZW9mIFR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignU3BlY2lmaWVkIGxpc3Qgb2YgWUFNTCB0eXBlcyAob3IgYSBzaW5nbGUgVHlwZSBvYmplY3QpIGNvbnRhaW5zIGEgbm9uLVR5cGUgb2JqZWN0LicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlLmxvYWRLaW5kICYmIHR5cGUubG9hZEtpbmQgIT09ICdzY2FsYXInKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVGhlcmUgaXMgYSBub24tc2NhbGFyIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIEltcGxpY2l0IHJlc29sdmluZyBvZiBzdWNoIHR5cGVzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUubXVsdGkpIHtcbiAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdUaGVyZSBpcyBhIG11bHRpIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIE11bHRpIHRhZ3MgY2FuIG9ubHkgYmUgbGlzdGVkIGFzIGV4cGxpY2l0LicpO1xuICAgIH1cbiAgfSk7XG5cbiAgZXhwbGljaXQuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICghKHR5cGUgaW5zdGFuY2VvZiBUeXBlKSkge1xuICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1NwZWNpZmllZCBsaXN0IG9mIFlBTUwgdHlwZXMgKG9yIGEgc2luZ2xlIFR5cGUgb2JqZWN0KSBjb250YWlucyBhIG5vbi1UeXBlIG9iamVjdC4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKFNjaGVtYS5wcm90b3R5cGUpO1xuXG4gIHJlc3VsdC5pbXBsaWNpdCA9ICh0aGlzLmltcGxpY2l0IHx8IFtdKS5jb25jYXQoaW1wbGljaXQpO1xuICByZXN1bHQuZXhwbGljaXQgPSAodGhpcy5leHBsaWNpdCB8fCBbXSkuY29uY2F0KGV4cGxpY2l0KTtcblxuICByZXN1bHQuY29tcGlsZWRJbXBsaWNpdCA9IGNvbXBpbGVMaXN0KHJlc3VsdCwgJ2ltcGxpY2l0Jyk7XG4gIHJlc3VsdC5jb21waWxlZEV4cGxpY2l0ID0gY29tcGlsZUxpc3QocmVzdWx0LCAnZXhwbGljaXQnKTtcbiAgcmVzdWx0LmNvbXBpbGVkVHlwZU1hcCAgPSBjb21waWxlTWFwKHJlc3VsdC5jb21waWxlZEltcGxpY2l0LCByZXN1bHQuY29tcGlsZWRFeHBsaWNpdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWE7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c3RyJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiAnJzsgfVxufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2VxJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdOyB9XG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjptYXAnLCB7XG4gIGtpbmQ6ICdtYXBwaW5nJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTsgfVxufSk7XG4iLCAiLy8gU3RhbmRhcmQgWUFNTCdzIEZhaWxzYWZlIHNjaGVtYS5cbi8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwMjM0NlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL3N0cicpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvc2VxJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9tYXAnKVxuICBdXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE51bGwoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoO1xuXG4gIHJldHVybiAobWF4ID09PSAxICYmIGRhdGEgPT09ICd+JykgfHxcbiAgICAgICAgIChtYXggPT09IDQgJiYgKGRhdGEgPT09ICdudWxsJyB8fCBkYXRhID09PSAnTnVsbCcgfHwgZGF0YSA9PT0gJ05VTEwnKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxOdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNOdWxsKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ID09PSBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpudWxsJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxOdWxsLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxOdWxsLFxuICBwcmVkaWNhdGU6IGlzTnVsbCxcbiAgcmVwcmVzZW50OiB7XG4gICAgY2Fub25pY2FsOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnfic7ICAgIH0sXG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnbnVsbCc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnTlVMTCc7IH0sXG4gICAgY2FtZWxjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnTnVsbCc7IH0sXG4gICAgZW1wdHk6ICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiAnJzsgICAgIH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCb29sZWFuKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDQgJiYgKGRhdGEgPT09ICd0cnVlJyB8fCBkYXRhID09PSAnVHJ1ZScgfHwgZGF0YSA9PT0gJ1RSVUUnKSkgfHxcbiAgICAgICAgIChtYXggPT09IDUgJiYgKGRhdGEgPT09ICdmYWxzZScgfHwgZGF0YSA9PT0gJ0ZhbHNlJyB8fCBkYXRhID09PSAnRkFMU0UnKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCb29sZWFuKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICd0cnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RydWUnIHx8XG4gICAgICAgICBkYXRhID09PSAnVFJVRSc7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJvb2xlYW4sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJvb2xlYW4sXG4gIHByZWRpY2F0ZTogaXNCb29sZWFuLFxuICByZXByZXNlbnQ6IHtcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICd0cnVlJyA6ICdmYWxzZSc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAnVFJVRScgOiAnRkFMU0UnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RydWUnIDogJ0ZhbHNlJzsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBUeXBlICAgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIGlzSGV4Q29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkgfHxcbiAgICAgICAgICgoMHg0MS8qIEEgKi8gPD0gYykgJiYgKGMgPD0gMHg0Ni8qIEYgKi8pKSB8fFxuICAgICAgICAgKCgweDYxLyogYSAqLyA8PSBjKSAmJiAoYyA8PSAweDY2LyogZiAqLykpO1xufVxuXG5mdW5jdGlvbiBpc09jdENvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM3LyogNyAqLykpO1xufVxuXG5mdW5jdGlvbiBpc0RlY0NvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEludGVnZXIoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGhhc0RpZ2l0cyA9IGZhbHNlLFxuICAgICAgY2g7XG5cbiAgaWYgKCFtYXgpIHJldHVybiBmYWxzZTtcblxuICBjaCA9IGRhdGFbaW5kZXhdO1xuXG4gIC8vIHNpZ25cbiAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcrJykge1xuICAgIGNoID0gZGF0YVsrK2luZGV4XTtcbiAgfVxuXG4gIGlmIChjaCA9PT0gJzAnKSB7XG4gICAgLy8gMFxuICAgIGlmIChpbmRleCArIDEgPT09IG1heCkgcmV0dXJuIHRydWU7XG4gICAgY2ggPSBkYXRhWysraW5kZXhdO1xuXG4gICAgLy8gYmFzZSAyLCBiYXNlIDgsIGJhc2UgMTZcblxuICAgIGlmIChjaCA9PT0gJ2InKSB7XG4gICAgICAvLyBiYXNlIDJcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgICAgIGlmIChjaCAhPT0gJzAnICYmIGNoICE9PSAnMScpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgICB9XG5cblxuICAgIGlmIChjaCA9PT0gJ3gnKSB7XG4gICAgICAvLyBiYXNlIDE2XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWlzSGV4Q29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cblxuXG4gICAgaWYgKGNoID09PSAnbycpIHtcbiAgICAgIC8vIGJhc2UgOFxuICAgICAgaW5kZXgrKztcblxuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFpc09jdENvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgICB9XG4gIH1cblxuICAvLyBiYXNlIDEwIChleGNlcHQgMClcblxuICAvLyB2YWx1ZSBzaG91bGQgbm90IHN0YXJ0IHdpdGggYF9gO1xuICBpZiAoY2ggPT09ICdfJykgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgIGlmICghaXNEZWNDb2RlKGRhdGEuY2hhckNvZGVBdChpbmRleCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gIH1cblxuICAvLyBTaG91bGQgaGF2ZSBkaWdpdHMgYW5kIHNob3VsZCBub3QgZW5kIHdpdGggYF9gXG4gIGlmICghaGFzRGlnaXRzIHx8IGNoID09PSAnXycpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbEludGVnZXIoZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLCBzaWduID0gMSwgY2g7XG5cbiAgaWYgKHZhbHVlLmluZGV4T2YoJ18nKSAhPT0gLTEpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL18vZywgJycpO1xuICB9XG5cbiAgY2ggPSB2YWx1ZVswXTtcblxuICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSB7XG4gICAgaWYgKGNoID09PSAnLScpIHNpZ24gPSAtMTtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICAgIGNoID0gdmFsdWVbMF07XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcwJykgcmV0dXJuIDA7XG5cbiAgaWYgKGNoID09PSAnMCcpIHtcbiAgICBpZiAodmFsdWVbMV0gPT09ICdiJykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgMik7XG4gICAgaWYgKHZhbHVlWzFdID09PSAneCcpIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIDE2KTtcbiAgICBpZiAodmFsdWVbMV0gPT09ICdvJykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgOCk7XG4gIH1cblxuICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZWdlcihvYmplY3QpIHtcbiAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmXG4gICAgICAgICAob2JqZWN0ICUgMSA9PT0gMCAmJiAhY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEludGVnZXIsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEludGVnZXIsXG4gIHByZWRpY2F0ZTogaXNJbnRlZ2VyLFxuICByZXByZXNlbnQ6IHtcbiAgICBiaW5hcnk6ICAgICAgZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqID49IDAgPyAnMGInICsgb2JqLnRvU3RyaW5nKDIpIDogJy0wYicgKyBvYmoudG9TdHJpbmcoMikuc2xpY2UoMSk7IH0sXG4gICAgb2N0YWw6ICAgICAgIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA+PSAwID8gJzBvJyAgKyBvYmoudG9TdHJpbmcoOCkgOiAnLTBvJyAgKyBvYmoudG9TdHJpbmcoOCkuc2xpY2UoMSk7IH0sXG4gICAgZGVjaW1hbDogICAgIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iai50b1N0cmluZygxMCk7IH0sXG4gICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgIGhleGFkZWNpbWFsOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogPj0gMCA/ICcweCcgKyBvYmoudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgOiAgJy0weCcgKyBvYmoudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkuc2xpY2UoMSk7IH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnZGVjaW1hbCcsXG4gIHN0eWxlQWxpYXNlczoge1xuICAgIGJpbmFyeTogICAgICBbIDIsICAnYmluJyBdLFxuICAgIG9jdGFsOiAgICAgICBbIDgsICAnb2N0JyBdLFxuICAgIGRlY2ltYWw6ICAgICBbIDEwLCAnZGVjJyBdLFxuICAgIGhleGFkZWNpbWFsOiBbIDE2LCAnaGV4JyBdXG4gIH1cbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIFR5cGUgICA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIFlBTUxfRkxPQVRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoXG4gIC8vIDIuNWU0LCAyLjUgYW5kIGludGVnZXJzXG4gICdeKD86Wy0rXT8oPzpbMC05XVswLTlfXSopKD86XFxcXC5bMC05X10qKT8oPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuMmU0LCAuMlxuICAvLyBzcGVjaWFsIGNhc2UsIHNlZW1zIG5vdCBmcm9tIHNwZWNcbiAgJ3xcXFxcLlswLTlfXSsoPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuaW5mXG4gICd8Wy0rXT9cXFxcLig/OmluZnxJbmZ8SU5GKScgK1xuICAvLyAubmFuXG4gICd8XFxcXC4oPzpuYW58TmFOfE5BTikpJCcpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEZsb2F0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoIVlBTUxfRkxPQVRfUEFUVEVSTi50ZXN0KGRhdGEpIHx8XG4gICAgICAvLyBRdWljayBoYWNrIHRvIG5vdCBhbGxvdyBpbnRlZ2VycyBlbmQgd2l0aCBgX2BcbiAgICAgIC8vIFByb2JhYmx5IHNob3VsZCB1cGRhdGUgcmVnZXhwICYgY2hlY2sgc3BlZWRcbiAgICAgIGRhdGFbZGF0YS5sZW5ndGggLSAxXSA9PT0gJ18nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxGbG9hdChkYXRhKSB7XG4gIHZhciB2YWx1ZSwgc2lnbjtcblxuICB2YWx1ZSAgPSBkYXRhLnJlcGxhY2UoL18vZywgJycpLnRvTG93ZXJDYXNlKCk7XG4gIHNpZ24gICA9IHZhbHVlWzBdID09PSAnLScgPyAtMSA6IDE7XG5cbiAgaWYgKCcrLScuaW5kZXhPZih2YWx1ZVswXSkgPj0gMCkge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcuaW5mJykge1xuICAgIHJldHVybiAoc2lnbiA9PT0gMSkgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJy5uYW4nKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICByZXR1cm4gc2lnbiAqIHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbn1cblxuXG52YXIgU0NJRU5USUZJQ19XSVRIT1VUX0RPVCA9IC9eWy0rXT9bMC05XStlLztcblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbEZsb2F0KG9iamVjdCwgc3R5bGUpIHtcbiAgdmFyIHJlcztcblxuICBpZiAoaXNOYU4ob2JqZWN0KSkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLm5hbic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy5OQU4nO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICcuTmFOJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZID09PSBvYmplY3QpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy5pbmYnO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICcuSU5GJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLkluZic7XG4gICAgfVxuICB9IGVsc2UgaWYgKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gb2JqZWN0KSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICctLmluZic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy0uSU5GJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLS5JbmYnO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSkge1xuICAgIHJldHVybiAnLTAuMCc7XG4gIH1cblxuICByZXMgPSBvYmplY3QudG9TdHJpbmcoMTApO1xuXG4gIC8vIEpTIHN0cmluZ2lmaWVyIGNhbiBidWlsZCBzY2llbnRpZmljIGZvcm1hdCB3aXRob3V0IGRvdHM6IDVlLTEwMCxcbiAgLy8gd2hpbGUgWUFNTCByZXF1cmVzIGRvdDogNS5lLTEwMC4gRml4IGl0IHdpdGggc2ltcGxlIGhhY2tcblxuICByZXR1cm4gU0NJRU5USUZJQ19XSVRIT1VUX0RPVC50ZXN0KHJlcykgPyByZXMucmVwbGFjZSgnZScsICcuZScpIDogcmVzO1xufVxuXG5mdW5jdGlvbiBpc0Zsb2F0KG9iamVjdCkge1xuICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBOdW1iZXJdJykgJiZcbiAgICAgICAgIChvYmplY3QgJSAxICE9PSAwIHx8IGNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEZsb2F0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxGbG9hdCxcbiAgcHJlZGljYXRlOiBpc0Zsb2F0LFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxGbG9hdCxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG4iLCAiLy8gU3RhbmRhcmQgWUFNTCdzIEpTT04gc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODAzMjMxXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgdGhpcyBzY2hlbWEgaXMgbm90IHN1Y2ggc3RyaWN0IGFzIGRlZmluZWQgaW4gdGhlIFlBTUwgc3BlY2lmaWNhdGlvbi5cbi8vIEl0IGFsbG93cyBudW1iZXJzIGluIGJpbmFyeSBub3RhaW9uLCB1c2UgYE51bGxgIGFuZCBgTlVMTGAgYXMgYG51bGxgLCBldGMuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWlsc2FmZScpLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9udWxsJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9ib29sJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9pbnQnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2Zsb2F0JylcbiAgXVxufSk7XG4iLCAiLy8gU3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODA0OTIzXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgQ29yZSBzY2hlbWEgaGFzIG5vIGRpc3RpbmN0aW9ucyBmcm9tIEpTT04gc2NoZW1hIGlzIEpTLVlBTUwuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9qc29uJyk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIFlBTUxfREFURV9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldKSQnKTsgICAgICAgICAgICAgICAgICAgLy8gWzNdIGRheVxuXG52YXIgWUFNTF9USU1FU1RBTVBfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ14oWzAtOV1bMC05XVswLTldWzAtOV0pJyAgICAgICAgICArIC8vIFsxXSB5ZWFyXG4gICctKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgKyAvLyBbMl0gbW9udGhcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFszXSBkYXlcbiAgJyg/OltUdF18WyBcXFxcdF0rKScgICAgICAgICAgICAgICAgICsgLy8gLi4uXG4gICcoWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNF0gaG91clxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzVdIG1pbnV0ZVxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzZdIHNlY29uZFxuICAnKD86XFxcXC4oWzAtOV0qKSk/JyAgICAgICAgICAgICAgICAgKyAvLyBbN10gZnJhY3Rpb25cbiAgJyg/OlsgXFxcXHRdKihafChbLStdKShbMC05XVswLTldPyknICsgLy8gWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91clxuICAnKD86OihbMC05XVswLTldKSk/KSk/JCcpOyAgICAgICAgICAgLy8gWzExXSB0el9taW51dGVcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoWUFNTF9EQVRFX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wKGRhdGEpIHtcbiAgdmFyIG1hdGNoLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24gPSAwLFxuICAgICAgZGVsdGEgPSBudWxsLCB0el9ob3VyLCB0el9taW51dGUsIGRhdGU7XG5cbiAgbWF0Y2ggPSBZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgbWF0Y2ggPSBZQU1MX1RJTUVTVEFNUF9SRUdFWFAuZXhlYyhkYXRhKTtcblxuICBpZiAobWF0Y2ggPT09IG51bGwpIHRocm93IG5ldyBFcnJvcignRGF0ZSByZXNvbHZlIGVycm9yJyk7XG5cbiAgLy8gbWF0Y2g6IFsxXSB5ZWFyIFsyXSBtb250aCBbM10gZGF5XG5cbiAgeWVhciA9ICsobWF0Y2hbMV0pO1xuICBtb250aCA9ICsobWF0Y2hbMl0pIC0gMTsgLy8gSlMgbW9udGggc3RhcnRzIHdpdGggMFxuICBkYXkgPSArKG1hdGNoWzNdKTtcblxuICBpZiAoIW1hdGNoWzRdKSB7IC8vIG5vIGhvdXJcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSkpO1xuICB9XG5cbiAgLy8gbWF0Y2g6IFs0XSBob3VyIFs1XSBtaW51dGUgWzZdIHNlY29uZCBbN10gZnJhY3Rpb25cblxuICBob3VyID0gKyhtYXRjaFs0XSk7XG4gIG1pbnV0ZSA9ICsobWF0Y2hbNV0pO1xuICBzZWNvbmQgPSArKG1hdGNoWzZdKTtcblxuICBpZiAobWF0Y2hbN10pIHtcbiAgICBmcmFjdGlvbiA9IG1hdGNoWzddLnNsaWNlKDAsIDMpO1xuICAgIHdoaWxlIChmcmFjdGlvbi5sZW5ndGggPCAzKSB7IC8vIG1pbGxpLXNlY29uZHNcbiAgICAgIGZyYWN0aW9uICs9ICcwJztcbiAgICB9XG4gICAgZnJhY3Rpb24gPSArZnJhY3Rpb247XG4gIH1cblxuICAvLyBtYXRjaDogWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91ciBbMTFdIHR6X21pbnV0ZVxuXG4gIGlmIChtYXRjaFs5XSkge1xuICAgIHR6X2hvdXIgPSArKG1hdGNoWzEwXSk7XG4gICAgdHpfbWludXRlID0gKyhtYXRjaFsxMV0gfHwgMCk7XG4gICAgZGVsdGEgPSAodHpfaG91ciAqIDYwICsgdHpfbWludXRlKSAqIDYwMDAwOyAvLyBkZWx0YSBpbiBtaWxpLXNlY29uZHNcbiAgICBpZiAobWF0Y2hbOV0gPT09ICctJykgZGVsdGEgPSAtZGVsdGE7XG4gIH1cblxuICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZyYWN0aW9uKSk7XG5cbiAgaWYgKGRlbHRhKSBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSBkZWx0YSk7XG5cbiAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudFlhbWxUaW1lc3RhbXAob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHJldHVybiBvYmplY3QudG9JU09TdHJpbmcoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxUaW1lc3RhbXAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFRpbWVzdGFtcCxcbiAgaW5zdGFuY2VPZjogRGF0ZSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sVGltZXN0YW1wXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE1lcmdlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICc8PCcgfHwgZGF0YSA9PT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE1lcmdlXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG5cblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cblxuLy8gWyA2NCwgNjUsIDY2IF0gLT4gWyBwYWRkaW5nLCBDUiwgTEYgXVxudmFyIEJBU0U2NF9NQVAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cXG5cXHInO1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQmluYXJ5KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgY29kZSwgaWR4LCBiaXRsZW4gPSAwLCBtYXggPSBkYXRhLmxlbmd0aCwgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IG9uZSBieSBvbmUuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGNvZGUgPSBtYXAuaW5kZXhPZihkYXRhLmNoYXJBdChpZHgpKTtcblxuICAgIC8vIFNraXAgQ1IvTEZcbiAgICBpZiAoY29kZSA+IDY0KSBjb250aW51ZTtcblxuICAgIC8vIEZhaWwgb24gaWxsZWdhbCBjaGFyYWN0ZXJzXG4gICAgaWYgKGNvZGUgPCAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICBiaXRsZW4gKz0gNjtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIGFyZSBhbnkgYml0cyBsZWZ0LCBzb3VyY2Ugd2FzIGNvcnJ1cHRlZFxuICByZXR1cm4gKGJpdGxlbiAlIDgpID09PSAwO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQmluYXJ5KGRhdGEpIHtcbiAgdmFyIGlkeCwgdGFpbGJpdHMsXG4gICAgICBpbnB1dCA9IGRhdGEucmVwbGFjZSgvW1xcclxcbj1dL2csICcnKSwgLy8gcmVtb3ZlIENSL0xGICYgcGFkZGluZyB0byBzaW1wbGlmeSBzY2FuXG4gICAgICBtYXggPSBpbnB1dC5sZW5ndGgsXG4gICAgICBtYXAgPSBCQVNFNjRfTUFQLFxuICAgICAgYml0cyA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICAvLyBDb2xsZWN0IGJ5IDYqNCBiaXRzICgzIGJ5dGVzKVxuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGlmICgoaWR4ICUgNCA9PT0gMCkgJiYgaWR4KSB7XG4gICAgICByZXN1bHQucHVzaCgoYml0cyA+PiAxNikgJiAweEZGKTtcbiAgICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgICByZXN1bHQucHVzaChiaXRzICYgMHhGRik7XG4gICAgfVxuXG4gICAgYml0cyA9IChiaXRzIDw8IDYpIHwgbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGlkeCkpO1xuICB9XG5cbiAgLy8gRHVtcCB0YWlsXG5cbiAgdGFpbGJpdHMgPSAobWF4ICUgNCkgKiA2O1xuXG4gIGlmICh0YWlsYml0cyA9PT0gMCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDE2KSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goYml0cyAmIDB4RkYpO1xuICB9IGVsc2UgaWYgKHRhaWxiaXRzID09PSAxOCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDEwKSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDIpICYgMHhGRik7XG4gIH0gZWxzZSBpZiAodGFpbGJpdHMgPT09IDEyKSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gNCkgJiAweEZGKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sQmluYXJ5KG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJycsIGJpdHMgPSAwLCBpZHgsIHRhaWwsXG4gICAgICBtYXggPSBvYmplY3QubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IGV2ZXJ5IHRocmVlIGJ5dGVzIHRvIDQgQVNDSUkgY2hhcmFjdGVycy5cblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDMgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTIpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgOCkgKyBvYmplY3RbaWR4XTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWwgPSBtYXggJSAzO1xuXG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gNikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAyKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDQpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDIpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gICdbb2JqZWN0IFVpbnQ4QXJyYXldJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCaW5hcnksXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJpbmFyeSxcbiAgcHJlZGljYXRlOiBpc0JpbmFyeSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sQmluYXJ5XG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfdG9TdHJpbmcgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE9tYXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIG9iamVjdEtleXMgPSBbXSwgaW5kZXgsIGxlbmd0aCwgcGFpciwgcGFpcktleSwgcGFpckhhc0tleSxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG4gICAgcGFpckhhc0tleSA9IGZhbHNlO1xuXG4gICAgaWYgKF90b1N0cmluZy5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChwYWlyLCBwYWlyS2V5KSkge1xuICAgICAgICBpZiAoIXBhaXJIYXNLZXkpIHBhaXJIYXNLZXkgPSB0cnVlO1xuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhaXJIYXNLZXkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvYmplY3RLZXlzLmluZGV4T2YocGFpcktleSkgPT09IC0xKSBvYmplY3RLZXlzLnB1c2gocGFpcktleSk7XG4gICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE9tYXAoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6b21hcCcsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxPbWFwLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxPbWFwXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoX3RvU3RyaW5nLmNhbGwocGFpcikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHJldHVybiBmYWxzZTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sUGFpcnMoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIFtdO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFBhaXJzLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxQYWlyc1xufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sU2V0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBrZXksIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgaWYgKG9iamVjdFtrZXldICE9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxTZXQoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2V0Jywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sU2V0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxTZXRcbn0pO1xuIiwgIi8vIEpTLVlBTUwncyBkZWZhdWx0IHNjaGVtYSBmb3IgYHNhZmVMb2FkYCBmdW5jdGlvbi5cbi8vIEl0IGlzIG5vdCBkZXNjcmliZWQgaW4gdGhlIFlBTUwgc3BlY2lmaWNhdGlvbi5cbi8vXG4vLyBUaGlzIHNjaGVtYSBpcyBiYXNlZCBvbiBzdGFuZGFyZCBZQU1MJ3MgQ29yZSBzY2hlbWEgYW5kIGluY2x1ZGVzIG1vc3Qgb2Zcbi8vIGV4dHJhIHR5cGVzIGRlc2NyaWJlZCBhdCBZQU1MIHRhZyByZXBvc2l0b3J5LiAoaHR0cDovL3lhbWwub3JnL3R5cGUvKVxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29yZScpLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS90aW1lc3RhbXAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL21lcmdlJylcbiAgXSxcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL2JpbmFyeScpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvb21hcCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvcGFpcnMnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL3NldCcpXG4gIF1cbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuLG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cblxudmFyIGNvbW1vbiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIFlBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xudmFyIG1ha2VTbmlwcGV0ICAgICAgICAgPSByZXF1aXJlKCcuL3NuaXBwZXQnKTtcbnZhciBERUZBVUxUX1NDSEVNQSAgICAgID0gcmVxdWlyZSgnLi9zY2hlbWEvZGVmYXVsdCcpO1xuXG5cbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5cbnZhciBDT05URVhUX0ZMT1dfSU4gICA9IDE7XG52YXIgQ09OVEVYVF9GTE9XX09VVCAgPSAyO1xudmFyIENPTlRFWFRfQkxPQ0tfSU4gID0gMztcbnZhciBDT05URVhUX0JMT0NLX09VVCA9IDQ7XG5cblxudmFyIENIT01QSU5HX0NMSVAgID0gMTtcbnZhciBDSE9NUElOR19TVFJJUCA9IDI7XG52YXIgQ0hPTVBJTkdfS0VFUCAgPSAzO1xuXG5cbnZhciBQQVRURVJOX05PTl9QUklOVEFCTEUgICAgICAgICA9IC9bXFx4MDAtXFx4MDhcXHgwQlxceDBDXFx4MEUtXFx4MUZcXHg3Ri1cXHg4NFxceDg2LVxceDlGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLztcbnZhciBQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUyA9IC9bXFx4ODVcXHUyMDI4XFx1MjAyOV0vO1xudmFyIFBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTICAgICAgID0gL1ssXFxbXFxdXFx7XFx9XS87XG52YXIgUEFUVEVSTl9UQUdfSEFORExFICAgICAgICAgICAgPSAvXig/OiF8ISF8IVthLXpcXC1dKyEpJC9pO1xudmFyIFBBVFRFUk5fVEFHX1VSSSAgICAgICAgICAgICAgID0gL14oPzohfFteLFxcW1xcXVxce1xcfV0pKD86JVswLTlhLWZdezJ9fFswLTlhLXpcXC0jO1xcL1xcPzpAJj1cXCtcXCQsX1xcLiF+XFwqJ1xcKFxcKVxcW1xcXV0pKiQvaTtcblxuXG5mdW5jdGlvbiBfY2xhc3Mob2JqKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTsgfVxuXG5mdW5jdGlvbiBpc19FT0woYykge1xuICByZXR1cm4gKGMgPT09IDB4MEEvKiBMRiAqLykgfHwgKGMgPT09IDB4MEQvKiBDUiAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX1dISVRFX1NQQUNFKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fCAoYyA9PT0gMHgyMC8qIFNwYWNlICovKTtcbn1cblxuZnVuY3Rpb24gaXNfV1NfT1JfRU9MKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fFxuICAgICAgICAgKGMgPT09IDB4MjAvKiBTcGFjZSAqLykgfHxcbiAgICAgICAgIChjID09PSAweDBBLyogTEYgKi8pIHx8XG4gICAgICAgICAoYyA9PT0gMHgwRC8qIENSICovKTtcbn1cblxuZnVuY3Rpb24gaXNfRkxPV19JTkRJQ0FUT1IoYykge1xuICByZXR1cm4gYyA9PT0gMHgyQy8qICwgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4NUIvKiBbICovIHx8XG4gICAgICAgICBjID09PSAweDVELyogXSAqLyB8fFxuICAgICAgICAgYyA9PT0gMHg3Qi8qIHsgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4N0QvKiB9ICovO1xufVxuXG5mdW5jdGlvbiBmcm9tSGV4Q29kZShjKSB7XG4gIHZhciBsYztcblxuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG4gIGxjID0gYyB8IDB4MjA7XG5cbiAgaWYgKCgweDYxLyogYSAqLyA8PSBsYykgJiYgKGxjIDw9IDB4NjYvKiBmICovKSkge1xuICAgIHJldHVybiBsYyAtIDB4NjEgKyAxMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlZEhleExlbihjKSB7XG4gIGlmIChjID09PSAweDc4LyogeCAqLykgeyByZXR1cm4gMjsgfVxuICBpZiAoYyA9PT0gMHg3NS8qIHUgKi8pIHsgcmV0dXJuIDQ7IH1cbiAgaWYgKGMgPT09IDB4NTUvKiBVICovKSB7IHJldHVybiA4OyB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBmcm9tRGVjaW1hbENvZGUoYykge1xuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRXNjYXBlU2VxdWVuY2UoYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBpbmRlbnQgKi9cbiAgcmV0dXJuIChjID09PSAweDMwLyogMCAqLykgPyAnXFx4MDAnIDpcbiAgICAgICAgKGMgPT09IDB4NjEvKiBhICovKSA/ICdcXHgwNycgOlxuICAgICAgICAoYyA9PT0gMHg2Mi8qIGIgKi8pID8gJ1xceDA4JyA6XG4gICAgICAgIChjID09PSAweDc0LyogdCAqLykgPyAnXFx4MDknIDpcbiAgICAgICAgKGMgPT09IDB4MDkvKiBUYWIgKi8pID8gJ1xceDA5JyA6XG4gICAgICAgIChjID09PSAweDZFLyogbiAqLykgPyAnXFx4MEEnIDpcbiAgICAgICAgKGMgPT09IDB4NzYvKiB2ICovKSA/ICdcXHgwQicgOlxuICAgICAgICAoYyA9PT0gMHg2Ni8qIGYgKi8pID8gJ1xceDBDJyA6XG4gICAgICAgIChjID09PSAweDcyLyogciAqLykgPyAnXFx4MEQnIDpcbiAgICAgICAgKGMgPT09IDB4NjUvKiBlICovKSA/ICdcXHgxQicgOlxuICAgICAgICAoYyA9PT0gMHgyMC8qIFNwYWNlICovKSA/ICcgJyA6XG4gICAgICAgIChjID09PSAweDIyLyogXCIgKi8pID8gJ1xceDIyJyA6XG4gICAgICAgIChjID09PSAweDJGLyogLyAqLykgPyAnLycgOlxuICAgICAgICAoYyA9PT0gMHg1Qy8qIFxcICovKSA/ICdcXHg1QycgOlxuICAgICAgICAoYyA9PT0gMHg0RS8qIE4gKi8pID8gJ1xceDg1JyA6XG4gICAgICAgIChjID09PSAweDVGLyogXyAqLykgPyAnXFx4QTAnIDpcbiAgICAgICAgKGMgPT09IDB4NEMvKiBMICovKSA/ICdcXHUyMDI4JyA6XG4gICAgICAgIChjID09PSAweDUwLyogUCAqLykgPyAnXFx1MjAyOScgOiAnJztcbn1cblxuZnVuY3Rpb24gY2hhckZyb21Db2RlcG9pbnQoYykge1xuICBpZiAoYyA8PSAweEZGRkYpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgfVxuICAvLyBFbmNvZGUgVVRGLTE2IHN1cnJvZ2F0ZSBwYWlyXG4gIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi0xNiNDb2RlX3BvaW50c19VLjJCMDEwMDAwX3RvX1UuMkIxMEZGRkZcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgKChjIC0gMHgwMTAwMDApID4+IDEwKSArIDB4RDgwMCxcbiAgICAoKGMgLSAweDAxMDAwMCkgJiAweDAzRkYpICsgMHhEQzAwXG4gICk7XG59XG5cbnZhciBzaW1wbGVFc2NhcGVDaGVjayA9IG5ldyBBcnJheSgyNTYpOyAvLyBpbnRlZ2VyLCBmb3IgZmFzdCBhY2Nlc3NcbnZhciBzaW1wbGVFc2NhcGVNYXAgPSBuZXcgQXJyYXkoMjU2KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgc2ltcGxlRXNjYXBlQ2hlY2tbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKSA/IDEgOiAwO1xuICBzaW1wbGVFc2NhcGVNYXBbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKTtcbn1cblxuXG5mdW5jdGlvbiBTdGF0ZShpbnB1dCwgb3B0aW9ucykge1xuICB0aGlzLmlucHV0ID0gaW5wdXQ7XG5cbiAgdGhpcy5maWxlbmFtZSAgPSBvcHRpb25zWydmaWxlbmFtZSddICB8fCBudWxsO1xuICB0aGlzLnNjaGVtYSAgICA9IG9wdGlvbnNbJ3NjaGVtYSddICAgIHx8IERFRkFVTFRfU0NIRU1BO1xuICB0aGlzLm9uV2FybmluZyA9IG9wdGlvbnNbJ29uV2FybmluZyddIHx8IG51bGw7XG4gIC8vIChIaWRkZW4pIFJlbW92ZT8gbWFrZXMgdGhlIGxvYWRlciB0byBleHBlY3QgWUFNTCAxLjEgZG9jdW1lbnRzXG4gIC8vIGlmIHN1Y2ggZG9jdW1lbnRzIGhhdmUgbm8gZXhwbGljaXQgJVlBTUwgZGlyZWN0aXZlXG4gIHRoaXMubGVnYWN5ICAgID0gb3B0aW9uc1snbGVnYWN5J10gICAgfHwgZmFsc2U7XG5cbiAgdGhpcy5qc29uICAgICAgPSBvcHRpb25zWydqc29uJ10gICAgICB8fCBmYWxzZTtcbiAgdGhpcy5saXN0ZW5lciAgPSBvcHRpb25zWydsaXN0ZW5lciddICB8fCBudWxsO1xuXG4gIHRoaXMuaW1wbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkSW1wbGljaXQ7XG4gIHRoaXMudHlwZU1hcCAgICAgICA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkVHlwZU1hcDtcblxuICB0aGlzLmxlbmd0aCAgICAgPSBpbnB1dC5sZW5ndGg7XG4gIHRoaXMucG9zaXRpb24gICA9IDA7XG4gIHRoaXMubGluZSAgICAgICA9IDA7XG4gIHRoaXMubGluZVN0YXJ0ICA9IDA7XG4gIHRoaXMubGluZUluZGVudCA9IDA7XG5cbiAgLy8gcG9zaXRpb24gb2YgZmlyc3QgbGVhZGluZyB0YWIgaW4gdGhlIGN1cnJlbnQgbGluZSxcbiAgLy8gdXNlZCB0byBtYWtlIHN1cmUgdGhlcmUgYXJlIG5vIHRhYnMgaW4gdGhlIGluZGVudGF0aW9uXG4gIHRoaXMuZmlyc3RUYWJJbkxpbmUgPSAtMTtcblxuICB0aGlzLmRvY3VtZW50cyA9IFtdO1xuXG4gIC8qXG4gIHRoaXMudmVyc2lvbjtcbiAgdGhpcy5jaGVja0xpbmVCcmVha3M7XG4gIHRoaXMudGFnTWFwO1xuICB0aGlzLmFuY2hvck1hcDtcbiAgdGhpcy50YWc7XG4gIHRoaXMuYW5jaG9yO1xuICB0aGlzLmtpbmQ7XG4gIHRoaXMucmVzdWx0OyovXG5cbn1cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVycm9yKHN0YXRlLCBtZXNzYWdlKSB7XG4gIHZhciBtYXJrID0ge1xuICAgIG5hbWU6ICAgICBzdGF0ZS5maWxlbmFtZSxcbiAgICBidWZmZXI6ICAgc3RhdGUuaW5wdXQuc2xpY2UoMCwgLTEpLCAvLyBvbWl0IHRyYWlsaW5nIFxcMFxuICAgIHBvc2l0aW9uOiBzdGF0ZS5wb3NpdGlvbixcbiAgICBsaW5lOiAgICAgc3RhdGUubGluZSxcbiAgICBjb2x1bW46ICAgc3RhdGUucG9zaXRpb24gLSBzdGF0ZS5saW5lU3RhcnRcbiAgfTtcblxuICBtYXJrLnNuaXBwZXQgPSBtYWtlU25pcHBldChtYXJrKTtcblxuICByZXR1cm4gbmV3IFlBTUxFeGNlcHRpb24obWVzc2FnZSwgbWFyayk7XG59XG5cbmZ1bmN0aW9uIHRocm93RXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgdGhyb3cgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIHRocm93V2FybmluZyhzdGF0ZSwgbWVzc2FnZSkge1xuICBpZiAoc3RhdGUub25XYXJuaW5nKSB7XG4gICAgc3RhdGUub25XYXJuaW5nLmNhbGwobnVsbCwgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSkpO1xuICB9XG59XG5cblxudmFyIGRpcmVjdGl2ZUhhbmRsZXJzID0ge1xuXG4gIFlBTUw6IGZ1bmN0aW9uIGhhbmRsZVlhbWxEaXJlY3RpdmUoc3RhdGUsIG5hbWUsIGFyZ3MpIHtcblxuICAgIHZhciBtYXRjaCwgbWFqb3IsIG1pbm9yO1xuXG4gICAgaWYgKHN0YXRlLnZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiAlWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdZQU1MIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgbWF0Y2ggPSAvXihbMC05XSspXFwuKFswLTldKykkLy5leGVjKGFyZ3NbMF0pO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCBhcmd1bWVudCBvZiB0aGUgWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBtYWpvciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgbWlub3IgPSBwYXJzZUludChtYXRjaFsyXSwgMTApO1xuXG4gICAgaWYgKG1ham9yICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnQnKTtcbiAgICB9XG5cbiAgICBzdGF0ZS52ZXJzaW9uID0gYXJnc1swXTtcbiAgICBzdGF0ZS5jaGVja0xpbmVCcmVha3MgPSAobWlub3IgPCAyKTtcblxuICAgIGlmIChtaW5vciAhPT0gMSAmJiBtaW5vciAhPT0gMikge1xuICAgICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAndW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudCcpO1xuICAgIH1cbiAgfSxcblxuICBUQUc6IGZ1bmN0aW9uIGhhbmRsZVRhZ0RpcmVjdGl2ZShzdGF0ZSwgbmFtZSwgYXJncykge1xuXG4gICAgdmFyIGhhbmRsZSwgcHJlZml4O1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnVEFHIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgdHdvIGFyZ3VtZW50cycpO1xuICAgIH1cblxuICAgIGhhbmRsZSA9IGFyZ3NbMF07XG4gICAgcHJlZml4ID0gYXJnc1sxXTtcblxuICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QoaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2lsbC1mb3JtZWQgdGFnIGhhbmRsZSAoZmlyc3QgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXRlLnRhZ01hcCwgaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RoZXJlIGlzIGEgcHJldmlvdXNseSBkZWNsYXJlZCBzdWZmaXggZm9yIFwiJyArIGhhbmRsZSArICdcIiB0YWcgaGFuZGxlJyk7XG4gICAgfVxuXG4gICAgaWYgKCFQQVRURVJOX1RBR19VUkkudGVzdChwcmVmaXgpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCB0YWcgcHJlZml4IChzZWNvbmQgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByZWZpeCA9IGRlY29kZVVSSUNvbXBvbmVudChwcmVmaXgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBwcmVmaXggaXMgbWFsZm9ybWVkOiAnICsgcHJlZml4KTtcbiAgICB9XG5cbiAgICBzdGF0ZS50YWdNYXBbaGFuZGxlXSA9IHByZWZpeDtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBjYXB0dXJlU2VnbWVudChzdGF0ZSwgc3RhcnQsIGVuZCwgY2hlY2tKc29uKSB7XG4gIHZhciBfcG9zaXRpb24sIF9sZW5ndGgsIF9jaGFyYWN0ZXIsIF9yZXN1bHQ7XG5cbiAgaWYgKHN0YXJ0IDwgZW5kKSB7XG4gICAgX3Jlc3VsdCA9IHN0YXRlLmlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gICAgaWYgKGNoZWNrSnNvbikge1xuICAgICAgZm9yIChfcG9zaXRpb24gPSAwLCBfbGVuZ3RoID0gX3Jlc3VsdC5sZW5ndGg7IF9wb3NpdGlvbiA8IF9sZW5ndGg7IF9wb3NpdGlvbiArPSAxKSB7XG4gICAgICAgIF9jaGFyYWN0ZXIgPSBfcmVzdWx0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcbiAgICAgICAgaWYgKCEoX2NoYXJhY3RlciA9PT0gMHgwOSB8fFxuICAgICAgICAgICAgICAoMHgyMCA8PSBfY2hhcmFjdGVyICYmIF9jaGFyYWN0ZXIgPD0gMHgxMEZGRkYpKSkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdleHBlY3RlZCB2YWxpZCBKU09OIGNoYXJhY3RlcicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChQQVRURVJOX05PTl9QUklOVEFCTEUudGVzdChfcmVzdWx0KSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RoZSBzdHJlYW0gY29udGFpbnMgbm9uLXByaW50YWJsZSBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuXG4gICAgc3RhdGUucmVzdWx0ICs9IF9yZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VNYXBwaW5ncyhzdGF0ZSwgZGVzdGluYXRpb24sIHNvdXJjZSwgb3ZlcnJpZGFibGVLZXlzKSB7XG4gIHZhciBzb3VyY2VLZXlzLCBrZXksIGluZGV4LCBxdWFudGl0eTtcblxuICBpZiAoIWNvbW1vbi5pc09iamVjdChzb3VyY2UpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2Nhbm5vdCBtZXJnZSBtYXBwaW5nczsgdGhlIHByb3ZpZGVkIHNvdXJjZSBvYmplY3QgaXMgdW5hY2NlcHRhYmxlJyk7XG4gIH1cblxuICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICBmb3IgKGluZGV4ID0gMCwgcXVhbnRpdHkgPSBzb3VyY2VLZXlzLmxlbmd0aDsgaW5kZXggPCBxdWFudGl0eTsgaW5kZXggKz0gMSkge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaW5kZXhdO1xuXG4gICAgaWYgKCFfaGFzT3duUHJvcGVydHkuY2FsbChkZXN0aW5hdGlvbiwga2V5KSkge1xuICAgICAgZGVzdGluYXRpb25ba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgb3ZlcnJpZGFibGVLZXlzW2tleV0gPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLFxuICBzdGFydExpbmUsIHN0YXJ0TGluZVN0YXJ0LCBzdGFydFBvcykge1xuXG4gIHZhciBpbmRleCwgcXVhbnRpdHk7XG5cbiAgLy8gVGhlIG91dHB1dCBpcyBhIHBsYWluIG9iamVjdCBoZXJlLCBzbyBrZXlzIGNhbiBvbmx5IGJlIHN0cmluZ3MuXG4gIC8vIFdlIG5lZWQgdG8gY29udmVydCBrZXlOb2RlIHRvIGEgc3RyaW5nLCBidXQgZG9pbmcgc28gY2FuIGhhbmcgdGhlIHByb2Nlc3NcbiAgLy8gKGRlZXBseSBuZXN0ZWQgYXJyYXlzIHRoYXQgZXhwbG9kZSBleHBvbmVudGlhbGx5IHVzaW5nIGFsaWFzZXMpLlxuICBpZiAoQXJyYXkuaXNBcnJheShrZXlOb2RlKSkge1xuICAgIGtleU5vZGUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChrZXlOb2RlKTtcblxuICAgIGZvciAoaW5kZXggPSAwLCBxdWFudGl0eSA9IGtleU5vZGUubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlOb2RlW2luZGV4XSkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ25lc3RlZCBhcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW5zaWRlIGtleXMnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBrZXlOb2RlID09PSAnb2JqZWN0JyAmJiBfY2xhc3Moa2V5Tm9kZVtpbmRleF0pID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICBrZXlOb2RlW2luZGV4XSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEF2b2lkIGNvZGUgZXhlY3V0aW9uIGluIGxvYWQoKSB2aWEgdG9TdHJpbmcgcHJvcGVydHlcbiAgLy8gKHN0aWxsIHVzZSBpdHMgb3duIHRvU3RyaW5nIGZvciBhcnJheXMsIHRpbWVzdGFtcHMsXG4gIC8vIGFuZCB3aGF0ZXZlciB1c2VyIHNjaGVtYSBleHRlbnNpb25zIGhhcHBlbiB0byBoYXZlIEBAdG9TdHJpbmdUYWcpXG4gIGlmICh0eXBlb2Yga2V5Tm9kZSA9PT0gJ29iamVjdCcgJiYgX2NsYXNzKGtleU5vZGUpID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIGtleU5vZGUgPSAnW29iamVjdCBPYmplY3RdJztcbiAgfVxuXG5cbiAga2V5Tm9kZSA9IFN0cmluZyhrZXlOb2RlKTtcblxuICBpZiAoX3Jlc3VsdCA9PT0gbnVsbCkge1xuICAgIF9yZXN1bHQgPSB7fTtcbiAgfVxuXG4gIGlmIChrZXlUYWcgPT09ICd0YWc6eWFtbC5vcmcsMjAwMjptZXJnZScpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZU5vZGUpKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgcXVhbnRpdHkgPSB2YWx1ZU5vZGUubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAgICAgIG1lcmdlTWFwcGluZ3Moc3RhdGUsIF9yZXN1bHQsIHZhbHVlTm9kZVtpbmRleF0sIG92ZXJyaWRhYmxlS2V5cyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lcmdlTWFwcGluZ3Moc3RhdGUsIF9yZXN1bHQsIHZhbHVlTm9kZSwgb3ZlcnJpZGFibGVLZXlzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFzdGF0ZS5qc29uICYmXG4gICAgICAgICFfaGFzT3duUHJvcGVydHkuY2FsbChvdmVycmlkYWJsZUtleXMsIGtleU5vZGUpICYmXG4gICAgICAgIF9oYXNPd25Qcm9wZXJ0eS5jYWxsKF9yZXN1bHQsIGtleU5vZGUpKSB7XG4gICAgICBzdGF0ZS5saW5lID0gc3RhcnRMaW5lIHx8IHN0YXRlLmxpbmU7XG4gICAgICBzdGF0ZS5saW5lU3RhcnQgPSBzdGFydExpbmVTdGFydCB8fCBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiA9IHN0YXJ0UG9zIHx8IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2R1cGxpY2F0ZWQgbWFwcGluZyBrZXknKTtcbiAgICB9XG5cbiAgICAvLyB1c2VkIGZvciB0aGlzIHNwZWNpZmljIGtleSBvbmx5IGJlY2F1c2UgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIHNsb3dcbiAgICBpZiAoa2V5Tm9kZSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfcmVzdWx0LCBrZXlOb2RlLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZU5vZGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcmVzdWx0W2tleU5vZGVdID0gdmFsdWVOb2RlO1xuICAgIH1cbiAgICBkZWxldGUgb3ZlcnJpZGFibGVLZXlzW2tleU5vZGVdO1xuICB9XG5cbiAgcmV0dXJuIF9yZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRMaW5lQnJlYWsoc3RhdGUpIHtcbiAgdmFyIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDBBLyogTEYgKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICB9IGVsc2UgaWYgKGNoID09PSAweDBELyogQ1IgKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgIGlmIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMHgwQS8qIExGICovKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYSBsaW5lIGJyZWFrIGlzIGV4cGVjdGVkJyk7XG4gIH1cblxuICBzdGF0ZS5saW5lICs9IDE7XG4gIHN0YXRlLmxpbmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuICBzdGF0ZS5maXJzdFRhYkluTGluZSA9IC0xO1xufVxuXG5mdW5jdGlvbiBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBhbGxvd0NvbW1lbnRzLCBjaGVja0luZGVudCkge1xuICB2YXIgbGluZUJyZWFrcyA9IDAsXG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgIGlmIChjaCA9PT0gMHgwOS8qIFRhYiAqLyAmJiBzdGF0ZS5maXJzdFRhYkluTGluZSA9PT0gLTEpIHtcbiAgICAgICAgc3RhdGUuZmlyc3RUYWJJbkxpbmUgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dDb21tZW50cyAmJiBjaCA9PT0gMHgyMy8qICMgKi8pIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfSB3aGlsZSAoY2ggIT09IDB4MEEvKiBMRiAqLyAmJiBjaCAhPT0gMHgwRC8qIENSICovICYmIGNoICE9PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG5cbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBsaW5lQnJlYWtzKys7XG4gICAgICBzdGF0ZS5saW5lSW5kZW50ID0gMDtcblxuICAgICAgd2hpbGUgKGNoID09PSAweDIwLyogU3BhY2UgKi8pIHtcbiAgICAgICAgc3RhdGUubGluZUluZGVudCsrO1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjaGVja0luZGVudCAhPT0gLTEgJiYgbGluZUJyZWFrcyAhPT0gMCAmJiBzdGF0ZS5saW5lSW5kZW50IDwgY2hlY2tJbmRlbnQpIHtcbiAgICB0aHJvd1dhcm5pbmcoc3RhdGUsICdkZWZpY2llbnQgaW5kZW50YXRpb24nKTtcbiAgfVxuXG4gIHJldHVybiBsaW5lQnJlYWtzO1xufVxuXG5mdW5jdGlvbiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbik7XG5cbiAgLy8gQ29uZGl0aW9uIHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgaXMgdGVzdGVkXG4gIC8vIGluIHBhcmVudCBvbiBlYWNoIGNhbGwsIGZvciBlZmZpY2llbmN5LiBObyBuZWVkcyB0byB0ZXN0IGhlcmUgYWdhaW4uXG4gIGlmICgoY2ggPT09IDB4MkQvKiAtICovIHx8IGNoID09PSAweDJFLyogLiAqLykgJiZcbiAgICAgIGNoID09PSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbiArIDEpICYmXG4gICAgICBjaCA9PT0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24gKyAyKSkge1xuXG4gICAgX3Bvc2l0aW9uICs9IDM7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcblxuICAgIGlmIChjaCA9PT0gMCB8fCBpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIGNvdW50KSB7XG4gIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHN0YXRlLnJlc3VsdCArPSAnICc7XG4gIH0gZWxzZSBpZiAoY291bnQgPiAxKSB7XG4gICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGNvdW50IC0gMSk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiByZWFkUGxhaW5TY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQsIHdpdGhpbkZsb3dDb2xsZWN0aW9uKSB7XG4gIHZhciBwcmVjZWRpbmcsXG4gICAgICBmb2xsb3dpbmcsXG4gICAgICBjYXB0dXJlU3RhcnQsXG4gICAgICBjYXB0dXJlRW5kLFxuICAgICAgaGFzUGVuZGluZ0NvbnRlbnQsXG4gICAgICBfbGluZSxcbiAgICAgIF9saW5lU3RhcnQsXG4gICAgICBfbGluZUluZGVudCxcbiAgICAgIF9raW5kID0gc3RhdGUua2luZCxcbiAgICAgIF9yZXN1bHQgPSBzdGF0ZS5yZXN1bHQsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChpc19XU19PUl9FT0woY2gpICAgICAgfHxcbiAgICAgIGlzX0ZMT1dfSU5ESUNBVE9SKGNoKSB8fFxuICAgICAgY2ggPT09IDB4MjMvKiAjICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNi8qICYgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDJBLyogKiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjEvKiAhICovICAgIHx8XG4gICAgICBjaCA9PT0gMHg3Qy8qIHwgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDNFLyogPiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjcvKiAnICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyMi8qIFwiICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNS8qICUgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDQwLyogQCAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4NjAvKiBgICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGNoID09PSAweDNGLyogPyAqLyB8fCBjaCA9PT0gMHgyRC8qIC0gKi8pIHtcbiAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAoaXNfV1NfT1JfRU9MKGZvbGxvd2luZykgfHxcbiAgICAgICAgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoZm9sbG93aW5nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSAnc2NhbGFyJztcbiAgc3RhdGUucmVzdWx0ID0gJyc7XG4gIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgaGFzUGVuZGluZ0NvbnRlbnQgPSBmYWxzZTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4M0EvKiA6ICovKSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSB8fFxuICAgICAgICAgIHdpdGhpbkZsb3dDb2xsZWN0aW9uICYmIGlzX0ZMT1dfSU5ESUNBVE9SKGZvbGxvd2luZykpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgcHJlY2VkaW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiAtIDEpO1xuXG4gICAgICBpZiAoaXNfV1NfT1JfRU9MKHByZWNlZGluZykpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHx8XG4gICAgICAgICAgICAgICB3aXRoaW5GbG93Q29sbGVjdGlvbiAmJiBpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICAgIGJyZWFrO1xuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBfbGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICBfbGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuICAgICAgX2xpbmVJbmRlbnQgPSBzdGF0ZS5saW5lSW5kZW50O1xuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIC0xKTtcblxuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPj0gbm9kZUluZGVudCkge1xuICAgICAgICBoYXNQZW5kaW5nQ29udGVudCA9IHRydWU7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucG9zaXRpb24gPSBjYXB0dXJlRW5kO1xuICAgICAgICBzdGF0ZS5saW5lID0gX2xpbmU7XG4gICAgICAgIHN0YXRlLmxpbmVTdGFydCA9IF9saW5lU3RhcnQ7XG4gICAgICAgIHN0YXRlLmxpbmVJbmRlbnQgPSBfbGluZUluZGVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc1BlbmRpbmdDb250ZW50KSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCBmYWxzZSk7XG4gICAgICB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBzdGF0ZS5saW5lIC0gX2xpbmUpO1xuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgaGFzUGVuZGluZ0NvbnRlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uICsgMTtcbiAgICB9XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCBmYWxzZSk7XG5cbiAgaWYgKHN0YXRlLnJlc3VsdCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9IF9raW5kO1xuICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHJlYWRTaW5nbGVRdW90ZWRTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNoLFxuICAgICAgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDI3LyogJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSAnc2NhbGFyJztcbiAgc3RhdGUucmVzdWx0ID0gJyc7XG4gIHN0YXRlLnBvc2l0aW9uKys7XG4gIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICB3aGlsZSAoKGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikpICE9PSAwKSB7XG4gICAgaWYgKGNoID09PSAweDI3LyogJyAqLykge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIHRydWUpO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICBpZiAoY2ggPT09IDB4MjcvKiAnICovKSB7XG4gICAgICAgIGNhcHR1cmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgY2FwdHVyZUVuZCwgdHJ1ZSk7XG4gICAgICB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBmYWxzZSwgbm9kZUluZGVudCkpO1xuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgfSBlbHNlIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgZG9jdW1lbnQgd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXInKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIHNpbmdsZSBxdW90ZWQgc2NhbGFyJyk7XG59XG5cbmZ1bmN0aW9uIHJlYWREb3VibGVRdW90ZWRTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNhcHR1cmVTdGFydCxcbiAgICAgIGNhcHR1cmVFbmQsXG4gICAgICBoZXhMZW5ndGgsXG4gICAgICBoZXhSZXN1bHQsXG4gICAgICB0bXAsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyMi8qIFwiICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgc3RhdGUucG9zaXRpb24rKztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4MjIvKiBcIiAqLykge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIHRydWUpO1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHg1Qy8qIFxcICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgIGlmIChpc19FT0woY2gpKSB7XG4gICAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KTtcblxuICAgICAgICAvLyBUT0RPOiByZXdvcmsgdG8gaW5saW5lIGZuIHdpdGggbm8gdHlwZSBjYXN0P1xuICAgICAgfSBlbHNlIGlmIChjaCA8IDI1NiAmJiBzaW1wbGVFc2NhcGVDaGVja1tjaF0pIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IHNpbXBsZUVzY2FwZU1hcFtjaF07XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG5cbiAgICAgIH0gZWxzZSBpZiAoKHRtcCA9IGVzY2FwZWRIZXhMZW4oY2gpKSA+IDApIHtcbiAgICAgICAgaGV4TGVuZ3RoID0gdG1wO1xuICAgICAgICBoZXhSZXN1bHQgPSAwO1xuXG4gICAgICAgIGZvciAoOyBoZXhMZW5ndGggPiAwOyBoZXhMZW5ndGgtLSkge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgICAgIGlmICgodG1wID0gZnJvbUhleENvZGUoY2gpKSA+PSAwKSB7XG4gICAgICAgICAgICBoZXhSZXN1bHQgPSAoaGV4UmVzdWx0IDw8IDQpICsgdG1wO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdleHBlY3RlZCBoZXhhZGVjaW1hbCBjaGFyYWN0ZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY2hhckZyb21Db2RlcG9pbnQoaGV4UmVzdWx0KTtcblxuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5rbm93biBlc2NhcGUgc2VxdWVuY2UnKTtcbiAgICAgIH1cblxuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCB0cnVlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBkb2N1bWVudCB3aXRoaW4gYSBkb3VibGUgcXVvdGVkIHNjYWxhcicpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgZG91YmxlIHF1b3RlZCBzY2FsYXInKTtcbn1cblxuZnVuY3Rpb24gcmVhZEZsb3dDb2xsZWN0aW9uKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciByZWFkTmV4dCA9IHRydWUsXG4gICAgICBfbGluZSxcbiAgICAgIF9saW5lU3RhcnQsXG4gICAgICBfcG9zLFxuICAgICAgX3RhZyAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfcmVzdWx0LFxuICAgICAgX2FuY2hvciAgPSBzdGF0ZS5hbmNob3IsXG4gICAgICBmb2xsb3dpbmcsXG4gICAgICB0ZXJtaW5hdG9yLFxuICAgICAgaXNQYWlyLFxuICAgICAgaXNFeHBsaWNpdFBhaXIsXG4gICAgICBpc01hcHBpbmcsXG4gICAgICBvdmVycmlkYWJsZUtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAga2V5Tm9kZSxcbiAgICAgIGtleVRhZyxcbiAgICAgIHZhbHVlTm9kZSxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDVCLyogWyAqLykge1xuICAgIHRlcm1pbmF0b3IgPSAweDVEOy8qIF0gKi9cbiAgICBpc01hcHBpbmcgPSBmYWxzZTtcbiAgICBfcmVzdWx0ID0gW107XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4N0IvKiB7ICovKSB7XG4gICAgdGVybWluYXRvciA9IDB4N0Q7LyogfSAqL1xuICAgIGlzTWFwcGluZyA9IHRydWU7XG4gICAgX3Jlc3VsdCA9IHt9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSB0ZXJtaW5hdG9yKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgICBzdGF0ZS5raW5kID0gaXNNYXBwaW5nID8gJ21hcHBpbmcnIDogJ3NlcXVlbmNlJztcbiAgICAgIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFyZWFkTmV4dCkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ21pc3NlZCBjb21tYSBiZXR3ZWVuIGZsb3cgY29sbGVjdGlvbiBlbnRyaWVzJyk7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHgyQy8qICwgKi8pIHtcbiAgICAgIC8vIFwiZmxvdyBjb2xsZWN0aW9uIGVudHJpZXMgY2FuIG5ldmVyIGJlIGNvbXBsZXRlbHkgZW1wdHlcIiwgYXMgcGVyIFlBTUwgMS4yLCBzZWN0aW9uIDcuNFxuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJleHBlY3RlZCB0aGUgbm9kZSBjb250ZW50LCBidXQgZm91bmQgJywnXCIpO1xuICAgIH1cblxuICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgIGlzUGFpciA9IGlzRXhwbGljaXRQYWlyID0gZmFsc2U7XG5cbiAgICBpZiAoY2ggPT09IDB4M0YvKiA/ICovKSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSkge1xuICAgICAgICBpc1BhaXIgPSBpc0V4cGxpY2l0UGFpciA9IHRydWU7XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9saW5lID0gc3RhdGUubGluZTsgLy8gU2F2ZSB0aGUgY3VycmVudCBsaW5lLlxuICAgIF9saW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgX3BvcyA9IHN0YXRlLnBvc2l0aW9uO1xuICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoKGlzRXhwbGljaXRQYWlyIHx8IHN0YXRlLmxpbmUgPT09IF9saW5lKSAmJiBjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgIGlzUGFpciA9IHRydWU7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcbiAgICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICAgIHZhbHVlTm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICB9XG5cbiAgICBpZiAoaXNNYXBwaW5nKSB7XG4gICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX2xpbmVTdGFydCwgX3Bvcyk7XG4gICAgfSBlbHNlIGlmIChpc1BhaXIpIHtcbiAgICAgIF9yZXN1bHQucHVzaChzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBudWxsLCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX2xpbmVTdGFydCwgX3BvcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcmVzdWx0LnB1c2goa2V5Tm9kZSk7XG4gICAgfVxuXG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSAweDJDLyogLCAqLykge1xuICAgICAgcmVhZE5leHQgPSB0cnVlO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFkTmV4dCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIGZsb3cgY29sbGVjdGlvbicpO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNhcHR1cmVTdGFydCxcbiAgICAgIGZvbGRpbmcsXG4gICAgICBjaG9tcGluZyAgICAgICA9IENIT01QSU5HX0NMSVAsXG4gICAgICBkaWRSZWFkQ29udGVudCA9IGZhbHNlLFxuICAgICAgZGV0ZWN0ZWRJbmRlbnQgPSBmYWxzZSxcbiAgICAgIHRleHRJbmRlbnQgICAgID0gbm9kZUluZGVudCxcbiAgICAgIGVtcHR5TGluZXMgICAgID0gMCxcbiAgICAgIGF0TW9yZUluZGVudGVkID0gZmFsc2UsXG4gICAgICB0bXAsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHg3Qy8qIHwgKi8pIHtcbiAgICBmb2xkaW5nID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4M0UvKiA+ICovKSB7XG4gICAgZm9sZGluZyA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IDB4MkIvKiArICovIHx8IGNoID09PSAweDJELyogLSAqLykge1xuICAgICAgaWYgKENIT01QSU5HX0NMSVAgPT09IGNob21waW5nKSB7XG4gICAgICAgIGNob21waW5nID0gKGNoID09PSAweDJCLyogKyAqLykgPyBDSE9NUElOR19LRUVQIDogQ0hPTVBJTkdfU1RSSVA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAncmVwZWF0IG9mIGEgY2hvbXBpbmcgbW9kZSBpZGVudGlmaWVyJyk7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKCh0bXAgPSBmcm9tRGVjaW1hbENvZGUoY2gpKSA+PSAwKSB7XG4gICAgICBpZiAodG1wID09PSAwKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdiYWQgZXhwbGljaXQgaW5kZW50YXRpb24gd2lkdGggb2YgYSBibG9jayBzY2FsYXI7IGl0IGNhbm5vdCBiZSBsZXNzIHRoYW4gb25lJyk7XG4gICAgICB9IGVsc2UgaWYgKCFkZXRlY3RlZEluZGVudCkge1xuICAgICAgICB0ZXh0SW5kZW50ID0gbm9kZUluZGVudCArIHRtcCAtIDE7XG4gICAgICAgIGRldGVjdGVkSW5kZW50ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdyZXBlYXQgb2YgYW4gaW5kZW50YXRpb24gd2lkdGggaWRlbnRpZmllcicpO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpO1xuXG4gICAgaWYgKGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICAgIHdoaWxlICghaXNfRU9MKGNoKSAmJiAoY2ggIT09IDApKTtcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICByZWFkTGluZUJyZWFrKHN0YXRlKTtcbiAgICBzdGF0ZS5saW5lSW5kZW50ID0gMDtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoKCFkZXRlY3RlZEluZGVudCB8fCBzdGF0ZS5saW5lSW5kZW50IDwgdGV4dEluZGVudCkgJiZcbiAgICAgICAgICAgKGNoID09PSAweDIwLyogU3BhY2UgKi8pKSB7XG4gICAgICBzdGF0ZS5saW5lSW5kZW50Kys7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKCFkZXRlY3RlZEluZGVudCAmJiBzdGF0ZS5saW5lSW5kZW50ID4gdGV4dEluZGVudCkge1xuICAgICAgdGV4dEluZGVudCA9IHN0YXRlLmxpbmVJbmRlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGVtcHR5TGluZXMrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEVuZCBvZiB0aGUgc2NhbGFyLlxuICAgIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgdGV4dEluZGVudCkge1xuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBjaG9tcGluZy5cbiAgICAgIGlmIChjaG9tcGluZyA9PT0gQ0hPTVBJTkdfS0VFUCkge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZGlkUmVhZENvbnRlbnQgPyAxICsgZW1wdHlMaW5lcyA6IGVtcHR5TGluZXMpO1xuICAgICAgfSBlbHNlIGlmIChjaG9tcGluZyA9PT0gQ0hPTVBJTkdfQ0xJUCkge1xuICAgICAgICBpZiAoZGlkUmVhZENvbnRlbnQpIHsgLy8gaS5lLiBvbmx5IGlmIHRoZSBzY2FsYXIgaXMgbm90IGVtcHR5LlxuICAgICAgICAgIHN0YXRlLnJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBCcmVhayB0aGlzIGB3aGlsZWAgY3ljbGUgYW5kIGdvIHRvIHRoZSBmdW5jaXRvbidzIGVwaWxvZ3VlLlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gRm9sZGVkIHN0eWxlOiB1c2UgZmFuY3kgcnVsZXMgdG8gaGFuZGxlIGxpbmUgYnJlYWtzLlxuICAgIGlmIChmb2xkaW5nKSB7XG5cbiAgICAgIC8vIExpbmVzIHN0YXJ0aW5nIHdpdGggd2hpdGUgc3BhY2UgY2hhcmFjdGVycyAobW9yZS1pbmRlbnRlZCBsaW5lcykgYXJlIG5vdCBmb2xkZWQuXG4gICAgICBpZiAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICAgIGF0TW9yZUluZGVudGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gZXhjZXB0IGZvciB0aGUgZmlyc3QgY29udGVudCBsaW5lIChjZi4gRXhhbXBsZSA4LjEpXG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG5cbiAgICAgIC8vIEVuZCBvZiBtb3JlLWluZGVudGVkIGJsb2NrLlxuICAgICAgfSBlbHNlIGlmIChhdE1vcmVJbmRlbnRlZCkge1xuICAgICAgICBhdE1vcmVJbmRlbnRlZCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZW1wdHlMaW5lcyArIDEpO1xuXG4gICAgICAvLyBKdXN0IG9uZSBsaW5lIGJyZWFrIC0gcGVyY2VpdmUgYXMgdGhlIHNhbWUgbGluZS5cbiAgICAgIH0gZWxzZSBpZiAoZW1wdHlMaW5lcyA9PT0gMCkge1xuICAgICAgICBpZiAoZGlkUmVhZENvbnRlbnQpIHsgLy8gaS5lLiBvbmx5IGlmIHdlIGhhdmUgYWxyZWFkeSByZWFkIHNvbWUgc2NhbGFyIGNvbnRlbnQuXG4gICAgICAgICAgc3RhdGUucmVzdWx0ICs9ICcgJztcbiAgICAgICAgfVxuXG4gICAgICAvLyBTZXZlcmFsIGxpbmUgYnJlYWtzIC0gcGVyY2VpdmUgYXMgZGlmZmVyZW50IGxpbmVzLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGVtcHR5TGluZXMpO1xuICAgICAgfVxuXG4gICAgLy8gTGl0ZXJhbCBzdHlsZToganVzdCBhZGQgZXhhY3QgbnVtYmVyIG9mIGxpbmUgYnJlYWtzIGJldHdlZW4gY29udGVudCBsaW5lcy5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gS2VlcCBhbGwgbGluZSBicmVha3MgZXhjZXB0IHRoZSBoZWFkZXIgbGluZSBicmVhay5cbiAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG4gICAgfVxuXG4gICAgZGlkUmVhZENvbnRlbnQgPSB0cnVlO1xuICAgIGRldGVjdGVkSW5kZW50ID0gdHJ1ZTtcbiAgICBlbXB0eUxpbmVzID0gMDtcbiAgICBjYXB0dXJlU3RhcnQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICAgIHdoaWxlICghaXNfRU9MKGNoKSAmJiAoY2ggIT09IDApKSB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgX2xpbmUsXG4gICAgICBfdGFnICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfYW5jaG9yICAgPSBzdGF0ZS5hbmNob3IsXG4gICAgICBfcmVzdWx0ICAgPSBbXSxcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIGRldGVjdGVkICA9IGZhbHNlLFxuICAgICAgY2g7XG5cbiAgLy8gdGhlcmUgaXMgYSBsZWFkaW5nIHRhYiBiZWZvcmUgdGhpcyB0b2tlbiwgc28gaXQgY2FuJ3QgYmUgYSBibG9jayBzZXF1ZW5jZS9tYXBwaW5nO1xuICAvLyBpdCBjYW4gc3RpbGwgYmUgZmxvdyBzZXF1ZW5jZS9tYXBwaW5nIG9yIGEgc2NhbGFyXG4gIGlmIChzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHJldHVybiBmYWxzZTtcblxuICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBfcmVzdWx0O1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBpZiAoc3RhdGUuZmlyc3RUYWJJbkxpbmUgIT09IC0xKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiA9IHN0YXRlLmZpcnN0VGFiSW5MaW5lO1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhYiBjaGFyYWN0ZXJzIG11c3Qgbm90IGJlIHVzZWQgaW4gaW5kZW50YXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoY2ggIT09IDB4MkQvKiAtICovKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAoIWlzX1dTX09SX0VPTChmb2xsb3dpbmcpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgc3RhdGUucG9zaXRpb24rKztcblxuICAgIGlmIChza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSkpIHtcbiAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50IDw9IG5vZGVJbmRlbnQpIHtcbiAgICAgICAgX3Jlc3VsdC5wdXNoKG51bGwpO1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfbGluZSA9IHN0YXRlLmxpbmU7XG4gICAgY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfQkxPQ0tfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICBfcmVzdWx0LnB1c2goc3RhdGUucmVzdWx0KTtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKChzdGF0ZS5saW5lID09PSBfbGluZSB8fCBzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCkgJiYgKGNoICE9PSAwKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2JhZCBpbmRlbnRhdGlvbiBvZiBhIHNlcXVlbmNlIGVudHJ5Jyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgbm9kZUluZGVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRldGVjdGVkKSB7XG4gICAgc3RhdGUudGFnID0gX3RhZztcbiAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgIHN0YXRlLmtpbmQgPSAnc2VxdWVuY2UnO1xuICAgIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tNYXBwaW5nKHN0YXRlLCBub2RlSW5kZW50LCBmbG93SW5kZW50KSB7XG4gIHZhciBmb2xsb3dpbmcsXG4gICAgICBhbGxvd0NvbXBhY3QsXG4gICAgICBfbGluZSxcbiAgICAgIF9rZXlMaW5lLFxuICAgICAgX2tleUxpbmVTdGFydCxcbiAgICAgIF9rZXlQb3MsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgX2FuY2hvciAgICAgICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIF9yZXN1bHQgICAgICAgPSB7fSxcbiAgICAgIG92ZXJyaWRhYmxlS2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBrZXlUYWcgICAgICAgID0gbnVsbCxcbiAgICAgIGtleU5vZGUgICAgICAgPSBudWxsLFxuICAgICAgdmFsdWVOb2RlICAgICA9IG51bGwsXG4gICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2UsXG4gICAgICBkZXRlY3RlZCAgICAgID0gZmFsc2UsXG4gICAgICBjaDtcblxuICAvLyB0aGVyZSBpcyBhIGxlYWRpbmcgdGFiIGJlZm9yZSB0aGlzIHRva2VuLCBzbyBpdCBjYW4ndCBiZSBhIGJsb2NrIHNlcXVlbmNlL21hcHBpbmc7XG4gIC8vIGl0IGNhbiBzdGlsbCBiZSBmbG93IHNlcXVlbmNlL21hcHBpbmcgb3IgYSBzY2FsYXJcbiAgaWYgKHN0YXRlLmZpcnN0VGFiSW5MaW5lICE9PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGlmICghYXRFeHBsaWNpdEtleSAmJiBzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gc3RhdGUuZmlyc3RUYWJJbkxpbmU7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFiIGNoYXJhY3RlcnMgbXVzdCBub3QgYmUgdXNlZCBpbiBpbmRlbnRhdGlvbicpO1xuICAgIH1cblxuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcbiAgICBfbGluZSA9IHN0YXRlLmxpbmU7IC8vIFNhdmUgdGhlIGN1cnJlbnQgbGluZS5cblxuICAgIC8vXG4gICAgLy8gRXhwbGljaXQgbm90YXRpb24gY2FzZS4gVGhlcmUgYXJlIHR3byBzZXBhcmF0ZSBibG9ja3M6XG4gICAgLy8gZmlyc3QgZm9yIHRoZSBrZXkgKGRlbm90ZWQgYnkgXCI/XCIpIGFuZCBzZWNvbmQgZm9yIHRoZSB2YWx1ZSAoZGVub3RlZCBieSBcIjpcIilcbiAgICAvL1xuICAgIGlmICgoY2ggPT09IDB4M0YvKiA/ICovIHx8IGNoID09PSAweDNBLyogOiAqLykgJiYgaXNfV1NfT1JfRU9MKGZvbGxvd2luZykpIHtcblxuICAgICAgaWYgKGNoID09PSAweDNGLyogPyAqLykge1xuICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCBudWxsLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gICAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSB0cnVlO1xuICAgICAgICBhbGxvd0NvbXBhY3QgPSB0cnVlO1xuXG4gICAgICB9IGVsc2UgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICAgICAgLy8gaS5lLiAweDNBLyogOiAqLyA9PT0gY2hhcmFjdGVyIGFmdGVyIHRoZSBleHBsaWNpdCBrZXkuXG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dDb21wYWN0ID0gdHJ1ZTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2luY29tcGxldGUgZXhwbGljaXQgbWFwcGluZyBwYWlyOyBhIGtleSBub2RlIGlzIG1pc3NlZDsgb3IgZm9sbG93ZWQgYnkgYSBub24tdGFidWxhdGVkIGVtcHR5IGxpbmUnKTtcbiAgICAgIH1cblxuICAgICAgc3RhdGUucG9zaXRpb24gKz0gMTtcbiAgICAgIGNoID0gZm9sbG93aW5nO1xuXG4gICAgLy9cbiAgICAvLyBJbXBsaWNpdCBub3RhdGlvbiBjYXNlLiBGbG93LXN0eWxlIG5vZGUgYXMgdGhlIGtleSBmaXJzdCwgdGhlbiBcIjpcIiwgYW5kIHRoZSB2YWx1ZS5cbiAgICAvL1xuICAgIH0gZWxzZSB7XG4gICAgICBfa2V5TGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICBfa2V5TGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuICAgICAgX2tleVBvcyA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgICBpZiAoIWNvbXBvc2VOb2RlKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfT1VULCBmYWxzZSwgdHJ1ZSkpIHtcbiAgICAgICAgLy8gTmVpdGhlciBpbXBsaWNpdCBub3IgZXhwbGljaXQgbm90YXRpb24uXG4gICAgICAgIC8vIFJlYWRpbmcgaXMgZG9uZS4gR28gdG8gdGhlIGVwaWxvZ3VlLlxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmxpbmUgPT09IF9saW5lKSB7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgICBpZiAoIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdhIHdoaXRlc3BhY2UgY2hhcmFjdGVyIGlzIGV4cGVjdGVkIGFmdGVyIHRoZSBrZXktdmFsdWUgc2VwYXJhdG9yIHdpdGhpbiBhIGJsb2NrIG1hcHBpbmcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwsIF9rZXlMaW5lLCBfa2V5TGluZVN0YXJ0LCBfa2V5UG9zKTtcbiAgICAgICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2U7XG4gICAgICAgICAgYWxsb3dDb21wYWN0ID0gZmFsc2U7XG4gICAgICAgICAga2V5VGFnID0gc3RhdGUudGFnO1xuICAgICAgICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG5cbiAgICAgICAgfSBlbHNlIGlmIChkZXRlY3RlZCkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW4gbm90IHJlYWQgYW4gaW1wbGljaXQgbWFwcGluZyBwYWlyOyBhIGNvbG9uIGlzIG1pc3NlZCcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBLZWVwIHRoZSByZXN1bHQgb2YgYGNvbXBvc2VOb2RlYC5cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKGRldGVjdGVkKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW4gbm90IHJlYWQgYSBibG9jayBtYXBwaW5nIGVudHJ5OyBhIG11bHRpbGluZSBrZXkgbWF5IG5vdCBiZSBhbiBpbXBsaWNpdCBrZXknKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIEtlZXAgdGhlIHJlc3VsdCBvZiBgY29tcG9zZU5vZGVgLlxuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gQ29tbW9uIHJlYWRpbmcgY29kZSBmb3IgYm90aCBleHBsaWNpdCBhbmQgaW1wbGljaXQgbm90YXRpb25zLlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLmxpbmUgPT09IF9saW5lIHx8IHN0YXRlLmxpbmVJbmRlbnQgPiBub2RlSW5kZW50KSB7XG4gICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICBfa2V5TGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICAgIF9rZXlMaW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICAgIF9rZXlQb3MgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0JMT0NLX09VVCwgdHJ1ZSwgYWxsb3dDb21wYWN0KSkge1xuICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYXRFeHBsaWNpdEtleSkge1xuICAgICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmICgoc3RhdGUubGluZSA9PT0gX2xpbmUgfHwgc3RhdGUubGluZUluZGVudCA+IG5vZGVJbmRlbnQpICYmIChjaCAhPT0gMCkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdiYWQgaW5kZW50YXRpb24gb2YgYSBtYXBwaW5nIGVudHJ5Jyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgbm9kZUluZGVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy9cbiAgLy8gRXBpbG9ndWUuXG4gIC8vXG5cbiAgLy8gU3BlY2lhbCBjYXNlOiBsYXN0IG1hcHBpbmcncyBub2RlIGNvbnRhaW5zIG9ubHkgdGhlIGtleSBpbiBleHBsaWNpdCBub3RhdGlvbi5cbiAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgbnVsbCwgX2tleUxpbmUsIF9rZXlMaW5lU3RhcnQsIF9rZXlQb3MpO1xuICB9XG5cbiAgLy8gRXhwb3NlIHRoZSByZXN1bHRpbmcgbWFwcGluZy5cbiAgaWYgKGRldGVjdGVkKSB7XG4gICAgc3RhdGUudGFnID0gX3RhZztcbiAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgIHN0YXRlLmtpbmQgPSAnbWFwcGluZyc7XG4gICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBkZXRlY3RlZDtcbn1cblxuZnVuY3Rpb24gcmVhZFRhZ1Byb3BlcnR5KHN0YXRlKSB7XG4gIHZhciBfcG9zaXRpb24sXG4gICAgICBpc1ZlcmJhdGltID0gZmFsc2UsXG4gICAgICBpc05hbWVkICAgID0gZmFsc2UsXG4gICAgICB0YWdIYW5kbGUsXG4gICAgICB0YWdOYW1lLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjEvKiAhICovKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiBhIHRhZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHgzQy8qIDwgKi8pIHtcbiAgICBpc1ZlcmJhdGltID0gdHJ1ZTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgfSBlbHNlIGlmIChjaCA9PT0gMHgyMS8qICEgKi8pIHtcbiAgICBpc05hbWVkID0gdHJ1ZTtcbiAgICB0YWdIYW5kbGUgPSAnISEnO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB9IGVsc2Uge1xuICAgIHRhZ0hhbmRsZSA9ICchJztcbiAgfVxuXG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIGlmIChpc1ZlcmJhdGltKSB7XG4gICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgY2ggIT09IDB4M0UvKiA+ICovKTtcblxuICAgIGlmIChzdGF0ZS5wb3NpdGlvbiA8IHN0YXRlLmxlbmd0aCkge1xuICAgICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSB2ZXJiYXRpbSB0YWcnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyMS8qICEgKi8pIHtcbiAgICAgICAgaWYgKCFpc05hbWVkKSB7XG4gICAgICAgICAgdGFnSGFuZGxlID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uIC0gMSwgc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QodGFnSGFuZGxlKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ25hbWVkIHRhZyBoYW5kbGUgY2Fubm90IGNvbnRhaW4gc3VjaCBjaGFyYWN0ZXJzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNOYW1lZCA9IHRydWU7XG4gICAgICAgICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb24gKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgc3VmZml4IGNhbm5vdCBjb250YWluIGV4Y2xhbWF0aW9uIG1hcmtzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIHRhZ05hbWUgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChQQVRURVJOX0ZMT1dfSU5ESUNBVE9SUy50ZXN0KHRhZ05hbWUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIHN1ZmZpeCBjYW5ub3QgY29udGFpbiBmbG93IGluZGljYXRvciBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRhZ05hbWUgJiYgIVBBVFRFUk5fVEFHX1VSSS50ZXN0KHRhZ05hbWUpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBuYW1lIGNhbm5vdCBjb250YWluIHN1Y2ggY2hhcmFjdGVyczogJyArIHRhZ05hbWUpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0YWdOYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KHRhZ05hbWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIG5hbWUgaXMgbWFsZm9ybWVkOiAnICsgdGFnTmFtZSk7XG4gIH1cblxuICBpZiAoaXNWZXJiYXRpbSkge1xuICAgIHN0YXRlLnRhZyA9IHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChzdGF0ZS50YWdNYXAsIHRhZ0hhbmRsZSkpIHtcbiAgICBzdGF0ZS50YWcgPSBzdGF0ZS50YWdNYXBbdGFnSGFuZGxlXSArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmICh0YWdIYW5kbGUgPT09ICchJykge1xuICAgIHN0YXRlLnRhZyA9ICchJyArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmICh0YWdIYW5kbGUgPT09ICchIScpIHtcbiAgICBzdGF0ZS50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6JyArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5kZWNsYXJlZCB0YWcgaGFuZGxlIFwiJyArIHRhZ0hhbmRsZSArICdcIicpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRBbmNob3JQcm9wZXJ0eShzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjYvKiAmICovKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiBhbiBhbmNob3IgcHJvcGVydHknKTtcbiAgfVxuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpICYmICFpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBpZiAoc3RhdGUucG9zaXRpb24gPT09IF9wb3NpdGlvbikge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICduYW1lIG9mIGFuIGFuY2hvciBub2RlIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyJyk7XG4gIH1cblxuICBzdGF0ZS5hbmNob3IgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRBbGlhcyhzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uLCBhbGlhcyxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDJBLyogKiAqLykgcmV0dXJuIGZhbHNlO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpICYmICFpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBpZiAoc3RhdGUucG9zaXRpb24gPT09IF9wb3NpdGlvbikge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICduYW1lIG9mIGFuIGFsaWFzIG5vZGUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXInKTtcbiAgfVxuXG4gIGFsaWFzID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKCFfaGFzT3duUHJvcGVydHkuY2FsbChzdGF0ZS5hbmNob3JNYXAsIGFsaWFzKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmlkZW50aWZpZWQgYWxpYXMgXCInICsgYWxpYXMgKyAnXCInKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VsdCA9IHN0YXRlLmFuY2hvck1hcFthbGlhc107XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VOb2RlKHN0YXRlLCBwYXJlbnRJbmRlbnQsIG5vZGVDb250ZXh0LCBhbGxvd1RvU2VlaywgYWxsb3dDb21wYWN0KSB7XG4gIHZhciBhbGxvd0Jsb2NrU3R5bGVzLFxuICAgICAgYWxsb3dCbG9ja1NjYWxhcnMsXG4gICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMsXG4gICAgICBpbmRlbnRTdGF0dXMgPSAxLCAvLyAxOiB0aGlzPnBhcmVudCwgMDogdGhpcz1wYXJlbnQsIC0xOiB0aGlzPHBhcmVudFxuICAgICAgYXROZXdMaW5lICA9IGZhbHNlLFxuICAgICAgaGFzQ29udGVudCA9IGZhbHNlLFxuICAgICAgdHlwZUluZGV4LFxuICAgICAgdHlwZVF1YW50aXR5LFxuICAgICAgdHlwZUxpc3QsXG4gICAgICB0eXBlLFxuICAgICAgZmxvd0luZGVudCxcbiAgICAgIGJsb2NrSW5kZW50O1xuXG4gIGlmIChzdGF0ZS5saXN0ZW5lciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmxpc3RlbmVyKCdvcGVuJywgc3RhdGUpO1xuICB9XG5cbiAgc3RhdGUudGFnICAgID0gbnVsbDtcbiAgc3RhdGUuYW5jaG9yID0gbnVsbDtcbiAgc3RhdGUua2luZCAgID0gbnVsbDtcbiAgc3RhdGUucmVzdWx0ID0gbnVsbDtcblxuICBhbGxvd0Jsb2NrU3R5bGVzID0gYWxsb3dCbG9ja1NjYWxhcnMgPSBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPVxuICAgIENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCB8fFxuICAgIENPTlRFWFRfQkxPQ0tfSU4gID09PSBub2RlQ29udGV4dDtcblxuICBpZiAoYWxsb3dUb1NlZWspIHtcbiAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuXG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA8IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxKSB7XG4gICAgd2hpbGUgKHJlYWRUYWdQcm9wZXJ0eShzdGF0ZSkgfHwgcmVhZEFuY2hvclByb3BlcnR5KHN0YXRlKSkge1xuICAgICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPSBhbGxvd0Jsb2NrU3R5bGVzO1xuXG4gICAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID4gcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucykge1xuICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyA9IGF0TmV3TGluZSB8fCBhbGxvd0NvbXBhY3Q7XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxIHx8IENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCkge1xuICAgIGlmIChDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0IHx8IENPTlRFWFRfRkxPV19PVVQgPT09IG5vZGVDb250ZXh0KSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50ICsgMTtcbiAgICB9XG5cbiAgICBibG9ja0luZGVudCA9IHN0YXRlLnBvc2l0aW9uIC0gc3RhdGUubGluZVN0YXJ0O1xuXG4gICAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSkge1xuICAgICAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJlxuICAgICAgICAgIChyZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpIHx8XG4gICAgICAgICAgIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIGJsb2NrSW5kZW50LCBmbG93SW5kZW50KSkgfHxcbiAgICAgICAgICByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChhbGxvd0Jsb2NrU2NhbGFycyAmJiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB8fFxuICAgICAgICAgICAgcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCkgfHxcbiAgICAgICAgICAgIHJlYWREb3VibGVRdW90ZWRTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWFkQWxpYXMoc3RhdGUpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc3RhdGUudGFnICE9PSBudWxsIHx8IHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2FsaWFzIG5vZGUgc2hvdWxkIG5vdCBoYXZlIGFueSBwcm9wZXJ0aWVzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVhZFBsYWluU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0KSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLnRhZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdGUudGFnID0gJz8nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5kZW50U3RhdHVzID09PSAwKSB7XG4gICAgICAvLyBTcGVjaWFsIGNhc2U6IGJsb2NrIHNlcXVlbmNlcyBhcmUgYWxsb3dlZCB0byBoYXZlIHNhbWUgaW5kZW50YXRpb24gbGV2ZWwgYXMgdGhlIHBhcmVudC5cbiAgICAgIC8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjc5OTc4NFxuICAgICAgaGFzQ29udGVudCA9IGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJiByZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS50YWcgPT09IG51bGwpIHtcbiAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChzdGF0ZS50YWcgPT09ICc/Jykge1xuICAgIC8vIEltcGxpY2l0IHJlc29sdmluZyBpcyBub3QgYWxsb3dlZCBmb3Igbm9uLXNjYWxhciB0eXBlcywgYW5kICc/J1xuICAgIC8vIG5vbi1zcGVjaWZpYyB0YWcgaXMgb25seSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvIHBsYWluIHNjYWxhcnMuXG4gICAgLy9cbiAgICAvLyBXZSBvbmx5IG5lZWQgdG8gY2hlY2sga2luZCBjb25mb3JtaXR5IGluIGNhc2UgdXNlciBleHBsaWNpdGx5IGFzc2lnbnMgJz8nXG4gICAgLy8gdGFnLCBmb3IgZXhhbXBsZSBsaWtlIHRoaXM6IFwiITw/PiBbMF1cIlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLnJlc3VsdCAhPT0gbnVsbCAmJiBzdGF0ZS5raW5kICE9PSAnc2NhbGFyJykge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuYWNjZXB0YWJsZSBub2RlIGtpbmQgZm9yICE8Pz4gdGFnOyBpdCBzaG91bGQgYmUgXCJzY2FsYXJcIiwgbm90IFwiJyArIHN0YXRlLmtpbmQgKyAnXCInKTtcbiAgICB9XG5cbiAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICB0eXBlID0gc3RhdGUuaW1wbGljaXRUeXBlc1t0eXBlSW5kZXhdO1xuXG4gICAgICBpZiAodHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCkpIHsgLy8gYHN0YXRlLnJlc3VsdGAgdXBkYXRlZCBpbiByZXNvbHZlciBpZiBtYXRjaGVkXG4gICAgICAgIHN0YXRlLnJlc3VsdCA9IHR5cGUuY29uc3RydWN0KHN0YXRlLnJlc3VsdCk7XG4gICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gJyEnKSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXRlLnR5cGVNYXBbc3RhdGUua2luZCB8fCAnZmFsbGJhY2snXSwgc3RhdGUudGFnKSkge1xuICAgICAgdHlwZSA9IHN0YXRlLnR5cGVNYXBbc3RhdGUua2luZCB8fCAnZmFsbGJhY2snXVtzdGF0ZS50YWddO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsb29raW5nIGZvciBtdWx0aSB0eXBlXG4gICAgICB0eXBlID0gbnVsbDtcbiAgICAgIHR5cGVMaXN0ID0gc3RhdGUudHlwZU1hcC5tdWx0aVtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddO1xuXG4gICAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHR5cGVMaXN0Lmxlbmd0aDsgdHlwZUluZGV4IDwgdHlwZVF1YW50aXR5OyB0eXBlSW5kZXggKz0gMSkge1xuICAgICAgICBpZiAoc3RhdGUudGFnLnNsaWNlKDAsIHR5cGVMaXN0W3R5cGVJbmRleF0udGFnLmxlbmd0aCkgPT09IHR5cGVMaXN0W3R5cGVJbmRleF0udGFnKSB7XG4gICAgICAgICAgdHlwZSA9IHR5cGVMaXN0W3R5cGVJbmRleF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmtub3duIHRhZyAhPCcgKyBzdGF0ZS50YWcgKyAnPicpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5yZXN1bHQgIT09IG51bGwgJiYgdHlwZS5raW5kICE9PSBzdGF0ZS5raW5kKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIG5vZGUga2luZCBmb3IgITwnICsgc3RhdGUudGFnICsgJz4gdGFnOyBpdCBzaG91bGQgYmUgXCInICsgdHlwZS5raW5kICsgJ1wiLCBub3QgXCInICsgc3RhdGUua2luZCArICdcIicpO1xuICAgIH1cblxuICAgIGlmICghdHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCwgc3RhdGUudGFnKSkgeyAvLyBgc3RhdGUucmVzdWx0YCB1cGRhdGVkIGluIHJlc29sdmVyIGlmIG1hdGNoZWRcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW5ub3QgcmVzb2x2ZSBhIG5vZGUgd2l0aCAhPCcgKyBzdGF0ZS50YWcgKyAnPiBleHBsaWNpdCB0YWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucmVzdWx0ID0gdHlwZS5jb25zdHJ1Y3Qoc3RhdGUucmVzdWx0LCBzdGF0ZS50YWcpO1xuICAgICAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUubGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5saXN0ZW5lcignY2xvc2UnLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLnRhZyAhPT0gbnVsbCB8fCAgc3RhdGUuYW5jaG9yICE9PSBudWxsIHx8IGhhc0NvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIHJlYWREb2N1bWVudChzdGF0ZSkge1xuICB2YXIgZG9jdW1lbnRTdGFydCA9IHN0YXRlLnBvc2l0aW9uLFxuICAgICAgX3Bvc2l0aW9uLFxuICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgIGRpcmVjdGl2ZUFyZ3MsXG4gICAgICBoYXNEaXJlY3RpdmVzID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBzdGF0ZS52ZXJzaW9uID0gbnVsbDtcbiAgc3RhdGUuY2hlY2tMaW5lQnJlYWtzID0gc3RhdGUubGVnYWN5O1xuICBzdGF0ZS50YWdNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdGF0ZS5hbmNob3JNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiAwIHx8IGNoICE9PSAweDI1LyogJSAqLykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgZGlyZWN0aXZlTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgIGRpcmVjdGl2ZUFyZ3MgPSBbXTtcblxuICAgIGlmIChkaXJlY3RpdmVOYW1lLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkaXJlY3RpdmUgbmFtZSBtdXN0IG5vdCBiZSBsZXNzIHRoYW4gb25lIGNoYXJhY3RlciBpbiBsZW5ndGgnKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICAgIGRvIHsgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pOyB9XG4gICAgICAgIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfRU9MKGNoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNfRU9MKGNoKSkgYnJlYWs7XG5cbiAgICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVBcmdzLnB1c2goc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbikpO1xuICAgIH1cblxuICAgIGlmIChjaCAhPT0gMCkgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG5cbiAgICBpZiAoX2hhc093blByb3BlcnR5LmNhbGwoZGlyZWN0aXZlSGFuZGxlcnMsIGRpcmVjdGl2ZU5hbWUpKSB7XG4gICAgICBkaXJlY3RpdmVIYW5kbGVyc1tkaXJlY3RpdmVOYW1lXShzdGF0ZSwgZGlyZWN0aXZlTmFtZSwgZGlyZWN0aXZlQXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ3Vua25vd24gZG9jdW1lbnQgZGlyZWN0aXZlIFwiJyArIGRpcmVjdGl2ZU5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH1cblxuICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPT09IDAgJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pICAgICA9PT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKSA9PT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAyKSA9PT0gMHgyRC8qIC0gKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbiArPSAzO1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICB9IGVsc2UgaWYgKGhhc0RpcmVjdGl2ZXMpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZGlyZWN0aXZlcyBlbmQgbWFyayBpcyBleHBlY3RlZCcpO1xuICB9XG5cbiAgY29tcG9zZU5vZGUoc3RhdGUsIHN0YXRlLmxpbmVJbmRlbnQgLSAxLCBDT05URVhUX0JMT0NLX09VVCwgZmFsc2UsIHRydWUpO1xuICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgaWYgKHN0YXRlLmNoZWNrTGluZUJyZWFrcyAmJlxuICAgICAgUEFUVEVSTl9OT05fQVNDSUlfTElORV9CUkVBS1MudGVzdChzdGF0ZS5pbnB1dC5zbGljZShkb2N1bWVudFN0YXJ0LCBzdGF0ZS5wb3NpdGlvbikpKSB7XG4gICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAnbm9uLUFTQ0lJIGxpbmUgYnJlYWtzIGFyZSBpbnRlcnByZXRlZCBhcyBjb250ZW50Jyk7XG4gIH1cblxuICBzdGF0ZS5kb2N1bWVudHMucHVzaChzdGF0ZS5yZXN1bHQpO1xuXG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHtcblxuICAgIGlmIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMHgyRS8qIC4gKi8pIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uICs9IDM7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA8IChzdGF0ZS5sZW5ndGggLSAxKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdlbmQgb2YgdGhlIHN0cmVhbSBvciBhIGRvY3VtZW50IHNlcGFyYXRvciBpcyBleHBlY3RlZCcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaW5wdXQgPSBTdHJpbmcoaW5wdXQpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAoaW5wdXQubGVuZ3RoICE9PSAwKSB7XG5cbiAgICAvLyBBZGQgdGFpbGluZyBgXFxuYCBpZiBub3QgZXhpc3RzXG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT09IDB4MEEvKiBMRiAqLyAmJlxuICAgICAgICBpbnB1dC5jaGFyQ29kZUF0KGlucHV0Lmxlbmd0aCAtIDEpICE9PSAweDBELyogQ1IgKi8pIHtcbiAgICAgIGlucHV0ICs9ICdcXG4nO1xuICAgIH1cblxuICAgIC8vIFN0cmlwIEJPTVxuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICAgIGlucHV0ID0gaW5wdXQuc2xpY2UoMSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKGlucHV0LCBvcHRpb25zKTtcblxuICB2YXIgbnVsbHBvcyA9IGlucHV0LmluZGV4T2YoJ1xcMCcpO1xuXG4gIGlmIChudWxscG9zICE9PSAtMSkge1xuICAgIHN0YXRlLnBvc2l0aW9uID0gbnVsbHBvcztcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbnVsbCBieXRlIGlzIG5vdCBhbGxvd2VkIGluIGlucHV0Jyk7XG4gIH1cblxuICAvLyBVc2UgMCBhcyBzdHJpbmcgdGVybWluYXRvci4gVGhhdCBzaWduaWZpY2FudGx5IHNpbXBsaWZpZXMgYm91bmRzIGNoZWNrLlxuICBzdGF0ZS5pbnB1dCArPSAnXFwwJztcblxuICB3aGlsZSAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDB4MjAvKiBTcGFjZSAqLykge1xuICAgIHN0YXRlLmxpbmVJbmRlbnQgKz0gMTtcbiAgICBzdGF0ZS5wb3NpdGlvbiArPSAxO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLnBvc2l0aW9uIDwgKHN0YXRlLmxlbmd0aCAtIDEpKSB7XG4gICAgcmVhZERvY3VtZW50KHN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5kb2N1bWVudHM7XG59XG5cblxuZnVuY3Rpb24gbG9hZEFsbChpbnB1dCwgaXRlcmF0b3IsIG9wdGlvbnMpIHtcbiAgaWYgKGl0ZXJhdG9yICE9PSBudWxsICYmIHR5cGVvZiBpdGVyYXRvciA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucyA9IGl0ZXJhdG9yO1xuICAgIGl0ZXJhdG9yID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkb2N1bWVudHMgPSBsb2FkRG9jdW1lbnRzKGlucHV0LCBvcHRpb25zKTtcblxuICBpZiAodHlwZW9mIGl0ZXJhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50cztcbiAgfVxuXG4gIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gZG9jdW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBpdGVyYXRvcihkb2N1bWVudHNbaW5kZXhdKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGxvYWQoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIGRvY3VtZW50cyA9IGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpO1xuXG4gIGlmIChkb2N1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgLyplc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQqL1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBkb2N1bWVudHNbMF07XG4gIH1cbiAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ2V4cGVjdGVkIGEgc2luZ2xlIGRvY3VtZW50IGluIHRoZSBzdHJlYW0sIGJ1dCBmb3VuZCBtb3JlJyk7XG59XG5cblxubW9kdWxlLmV4cG9ydHMubG9hZEFsbCA9IGxvYWRBbGw7XG5tb2R1bGUuZXhwb3J0cy5sb2FkICAgID0gbG9hZDtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuXG52YXIgY29tbW9uICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgWUFNTEV4Y2VwdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG52YXIgREVGQVVMVF9TQ0hFTUEgICAgICA9IHJlcXVpcmUoJy4vc2NoZW1hL2RlZmF1bHQnKTtcblxudmFyIF90b1N0cmluZyAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIENIQVJfQk9NICAgICAgICAgICAgICAgICAgPSAweEZFRkY7XG52YXIgQ0hBUl9UQUIgICAgICAgICAgICAgICAgICA9IDB4MDk7IC8qIFRhYiAqL1xudmFyIENIQVJfTElORV9GRUVEICAgICAgICAgICAgPSAweDBBOyAvKiBMRiAqL1xudmFyIENIQVJfQ0FSUklBR0VfUkVUVVJOICAgICAgPSAweDBEOyAvKiBDUiAqL1xudmFyIENIQVJfU1BBQ0UgICAgICAgICAgICAgICAgPSAweDIwOyAvKiBTcGFjZSAqL1xudmFyIENIQVJfRVhDTEFNQVRJT04gICAgICAgICAgPSAweDIxOyAvKiAhICovXG52YXIgQ0hBUl9ET1VCTEVfUVVPVEUgICAgICAgICA9IDB4MjI7IC8qIFwiICovXG52YXIgQ0hBUl9TSEFSUCAgICAgICAgICAgICAgICA9IDB4MjM7IC8qICMgKi9cbnZhciBDSEFSX1BFUkNFTlQgICAgICAgICAgICAgID0gMHgyNTsgLyogJSAqL1xudmFyIENIQVJfQU1QRVJTQU5EICAgICAgICAgICAgPSAweDI2OyAvKiAmICovXG52YXIgQ0hBUl9TSU5HTEVfUVVPVEUgICAgICAgICA9IDB4Mjc7IC8qICcgKi9cbnZhciBDSEFSX0FTVEVSSVNLICAgICAgICAgICAgID0gMHgyQTsgLyogKiAqL1xudmFyIENIQVJfQ09NTUEgICAgICAgICAgICAgICAgPSAweDJDOyAvKiAsICovXG52YXIgQ0hBUl9NSU5VUyAgICAgICAgICAgICAgICA9IDB4MkQ7IC8qIC0gKi9cbnZhciBDSEFSX0NPTE9OICAgICAgICAgICAgICAgID0gMHgzQTsgLyogOiAqL1xudmFyIENIQVJfRVFVQUxTICAgICAgICAgICAgICAgPSAweDNEOyAvKiA9ICovXG52YXIgQ0hBUl9HUkVBVEVSX1RIQU4gICAgICAgICA9IDB4M0U7IC8qID4gKi9cbnZhciBDSEFSX1FVRVNUSU9OICAgICAgICAgICAgID0gMHgzRjsgLyogPyAqL1xudmFyIENIQVJfQ09NTUVSQ0lBTF9BVCAgICAgICAgPSAweDQwOyAvKiBAICovXG52YXIgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUICA9IDB4NUI7IC8qIFsgKi9cbnZhciBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUID0gMHg1RDsgLyogXSAqL1xudmFyIENIQVJfR1JBVkVfQUNDRU5UICAgICAgICAgPSAweDYwOyAvKiBgICovXG52YXIgQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVQgICA9IDB4N0I7IC8qIHsgKi9cbnZhciBDSEFSX1ZFUlRJQ0FMX0xJTkUgICAgICAgID0gMHg3QzsgLyogfCAqL1xudmFyIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVCAgPSAweDdEOyAvKiB9ICovXG5cbnZhciBFU0NBUEVfU0VRVUVOQ0VTID0ge307XG5cbkVTQ0FQRV9TRVFVRU5DRVNbMHgwMF0gICA9ICdcXFxcMCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDddICAgPSAnXFxcXGEnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDA4XSAgID0gJ1xcXFxiJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwOV0gICA9ICdcXFxcdCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MEFdICAgPSAnXFxcXG4nO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBCXSAgID0gJ1xcXFx2JztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwQ10gICA9ICdcXFxcZic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MERdICAgPSAnXFxcXHInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDFCXSAgID0gJ1xcXFxlJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgyMl0gICA9ICdcXFxcXCInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDVDXSAgID0gJ1xcXFxcXFxcJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHg4NV0gICA9ICdcXFxcTic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4QTBdICAgPSAnXFxcXF8nO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIwMjhdID0gJ1xcXFxMJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgyMDI5XSA9ICdcXFxcUCc7XG5cbnZhciBERVBSRUNBVEVEX0JPT0xFQU5TX1NZTlRBWCA9IFtcbiAgJ3knLCAnWScsICd5ZXMnLCAnWWVzJywgJ1lFUycsICdvbicsICdPbicsICdPTicsXG4gICduJywgJ04nLCAnbm8nLCAnTm8nLCAnTk8nLCAnb2ZmJywgJ09mZicsICdPRkYnXG5dO1xuXG52YXIgREVQUkVDQVRFRF9CQVNFNjBfU1lOVEFYID0gL15bLStdP1swLTlfXSsoPzo6WzAtOV9dKykrKD86XFwuWzAtOV9dKik/JC87XG5cbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZU1hcChzY2hlbWEsIG1hcCkge1xuICB2YXIgcmVzdWx0LCBrZXlzLCBpbmRleCwgbGVuZ3RoLCB0YWcsIHN0eWxlLCB0eXBlO1xuXG4gIGlmIChtYXAgPT09IG51bGwpIHJldHVybiB7fTtcblxuICByZXN1bHQgPSB7fTtcbiAga2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHRhZyA9IGtleXNbaW5kZXhdO1xuICAgIHN0eWxlID0gU3RyaW5nKG1hcFt0YWddKTtcblxuICAgIGlmICh0YWcuc2xpY2UoMCwgMikgPT09ICchIScpIHtcbiAgICAgIHRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjonICsgdGFnLnNsaWNlKDIpO1xuICAgIH1cbiAgICB0eXBlID0gc2NoZW1hLmNvbXBpbGVkVHlwZU1hcFsnZmFsbGJhY2snXVt0YWddO1xuXG4gICAgaWYgKHR5cGUgJiYgX2hhc093blByb3BlcnR5LmNhbGwodHlwZS5zdHlsZUFsaWFzZXMsIHN0eWxlKSkge1xuICAgICAgc3R5bGUgPSB0eXBlLnN0eWxlQWxpYXNlc1tzdHlsZV07XG4gICAgfVxuXG4gICAgcmVzdWx0W3RhZ10gPSBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUhleChjaGFyYWN0ZXIpIHtcbiAgdmFyIHN0cmluZywgaGFuZGxlLCBsZW5ndGg7XG5cbiAgc3RyaW5nID0gY2hhcmFjdGVyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgPD0gMHhGRikge1xuICAgIGhhbmRsZSA9ICd4JztcbiAgICBsZW5ndGggPSAyO1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSAweEZGRkYpIHtcbiAgICBoYW5kbGUgPSAndSc7XG4gICAgbGVuZ3RoID0gNDtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPD0gMHhGRkZGRkZGRikge1xuICAgIGhhbmRsZSA9ICdVJztcbiAgICBsZW5ndGggPSA4O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdjb2RlIHBvaW50IHdpdGhpbiBhIHN0cmluZyBtYXkgbm90IGJlIGdyZWF0ZXIgdGhhbiAweEZGRkZGRkZGJyk7XG4gIH1cblxuICByZXR1cm4gJ1xcXFwnICsgaGFuZGxlICsgY29tbW9uLnJlcGVhdCgnMCcsIGxlbmd0aCAtIHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufVxuXG5cbnZhciBRVU9USU5HX1RZUEVfU0lOR0xFID0gMSxcbiAgICBRVU9USU5HX1RZUEVfRE9VQkxFID0gMjtcblxuZnVuY3Rpb24gU3RhdGUob3B0aW9ucykge1xuICB0aGlzLnNjaGVtYSAgICAgICAgPSBvcHRpb25zWydzY2hlbWEnXSB8fCBERUZBVUxUX1NDSEVNQTtcbiAgdGhpcy5pbmRlbnQgICAgICAgID0gTWF0aC5tYXgoMSwgKG9wdGlvbnNbJ2luZGVudCddIHx8IDIpKTtcbiAgdGhpcy5ub0FycmF5SW5kZW50ID0gb3B0aW9uc1snbm9BcnJheUluZGVudCddIHx8IGZhbHNlO1xuICB0aGlzLnNraXBJbnZhbGlkICAgPSBvcHRpb25zWydza2lwSW52YWxpZCddIHx8IGZhbHNlO1xuICB0aGlzLmZsb3dMZXZlbCAgICAgPSAoY29tbW9uLmlzTm90aGluZyhvcHRpb25zWydmbG93TGV2ZWwnXSkgPyAtMSA6IG9wdGlvbnNbJ2Zsb3dMZXZlbCddKTtcbiAgdGhpcy5zdHlsZU1hcCAgICAgID0gY29tcGlsZVN0eWxlTWFwKHRoaXMuc2NoZW1hLCBvcHRpb25zWydzdHlsZXMnXSB8fCBudWxsKTtcbiAgdGhpcy5zb3J0S2V5cyAgICAgID0gb3B0aW9uc1snc29ydEtleXMnXSB8fCBmYWxzZTtcbiAgdGhpcy5saW5lV2lkdGggICAgID0gb3B0aW9uc1snbGluZVdpZHRoJ10gfHwgODA7XG4gIHRoaXMubm9SZWZzICAgICAgICA9IG9wdGlvbnNbJ25vUmVmcyddIHx8IGZhbHNlO1xuICB0aGlzLm5vQ29tcGF0TW9kZSAgPSBvcHRpb25zWydub0NvbXBhdE1vZGUnXSB8fCBmYWxzZTtcbiAgdGhpcy5jb25kZW5zZUZsb3cgID0gb3B0aW9uc1snY29uZGVuc2VGbG93J10gfHwgZmFsc2U7XG4gIHRoaXMucXVvdGluZ1R5cGUgICA9IG9wdGlvbnNbJ3F1b3RpbmdUeXBlJ10gPT09ICdcIicgPyBRVU9USU5HX1RZUEVfRE9VQkxFIDogUVVPVElOR19UWVBFX1NJTkdMRTtcbiAgdGhpcy5mb3JjZVF1b3RlcyAgID0gb3B0aW9uc1snZm9yY2VRdW90ZXMnXSB8fCBmYWxzZTtcbiAgdGhpcy5yZXBsYWNlciAgICAgID0gdHlwZW9mIG9wdGlvbnNbJ3JlcGxhY2VyJ10gPT09ICdmdW5jdGlvbicgPyBvcHRpb25zWydyZXBsYWNlciddIDogbnVsbDtcblxuICB0aGlzLmltcGxpY2l0VHlwZXMgPSB0aGlzLnNjaGVtYS5jb21waWxlZEltcGxpY2l0O1xuICB0aGlzLmV4cGxpY2l0VHlwZXMgPSB0aGlzLnNjaGVtYS5jb21waWxlZEV4cGxpY2l0O1xuXG4gIHRoaXMudGFnID0gbnVsbDtcbiAgdGhpcy5yZXN1bHQgPSAnJztcblxuICB0aGlzLmR1cGxpY2F0ZXMgPSBbXTtcbiAgdGhpcy51c2VkRHVwbGljYXRlcyA9IG51bGw7XG59XG5cbi8vIEluZGVudHMgZXZlcnkgbGluZSBpbiBhIHN0cmluZy4gRW1wdHkgbGluZXMgKFxcbiBvbmx5KSBhcmUgbm90IGluZGVudGVkLlxuZnVuY3Rpb24gaW5kZW50U3RyaW5nKHN0cmluZywgc3BhY2VzKSB7XG4gIHZhciBpbmQgPSBjb21tb24ucmVwZWF0KCcgJywgc3BhY2VzKSxcbiAgICAgIHBvc2l0aW9uID0gMCxcbiAgICAgIG5leHQgPSAtMSxcbiAgICAgIHJlc3VsdCA9ICcnLFxuICAgICAgbGluZSxcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgbGVuZ3RoKSB7XG4gICAgbmV4dCA9IHN0cmluZy5pbmRleE9mKCdcXG4nLCBwb3NpdGlvbik7XG4gICAgaWYgKG5leHQgPT09IC0xKSB7XG4gICAgICBsaW5lID0gc3RyaW5nLnNsaWNlKHBvc2l0aW9uKTtcbiAgICAgIHBvc2l0aW9uID0gbGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lID0gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBuZXh0ICsgMSk7XG4gICAgICBwb3NpdGlvbiA9IG5leHQgKyAxO1xuICAgIH1cblxuICAgIGlmIChsaW5lLmxlbmd0aCAmJiBsaW5lICE9PSAnXFxuJykgcmVzdWx0ICs9IGluZDtcblxuICAgIHJlc3VsdCArPSBsaW5lO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpIHtcbiAgcmV0dXJuICdcXG4nICsgY29tbW9uLnJlcGVhdCgnICcsIHN0YXRlLmluZGVudCAqIGxldmVsKTtcbn1cblxuZnVuY3Rpb24gdGVzdEltcGxpY2l0UmVzb2x2aW5nKHN0YXRlLCBzdHIpIHtcbiAgdmFyIGluZGV4LCBsZW5ndGgsIHR5cGU7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHR5cGUgPSBzdGF0ZS5pbXBsaWNpdFR5cGVzW2luZGV4XTtcblxuICAgIGlmICh0eXBlLnJlc29sdmUoc3RyKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBbMzNdIHMtd2hpdGUgOjo9IHMtc3BhY2UgfCBzLXRhYlxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGMpIHtcbiAgcmV0dXJuIGMgPT09IENIQVJfU1BBQ0UgfHwgYyA9PT0gQ0hBUl9UQUI7XG59XG5cbi8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgY2hhcmFjdGVyIGNhbiBiZSBwcmludGVkIHdpdGhvdXQgZXNjYXBpbmcuXG4vLyBGcm9tIFlBTUwgMS4yOiBcImFueSBhbGxvd2VkIGNoYXJhY3RlcnMga25vd24gdG8gYmUgbm9uLXByaW50YWJsZVxuLy8gc2hvdWxkIGFsc28gYmUgZXNjYXBlZC4gW0hvd2V2ZXIsXSBUaGlzIGlzblx1MjAxOXQgbWFuZGF0b3J5XCJcbi8vIERlcml2ZWQgZnJvbSBuYi1jaGFyIC0gXFx0IC0gI3g4NSAtICN4QTAgLSAjeDIwMjggLSAjeDIwMjkuXG5mdW5jdGlvbiBpc1ByaW50YWJsZShjKSB7XG4gIHJldHVybiAgKDB4MDAwMjAgPD0gYyAmJiBjIDw9IDB4MDAwMDdFKVxuICAgICAgfHwgKCgweDAwMEExIDw9IGMgJiYgYyA8PSAweDAwRDdGRikgJiYgYyAhPT0gMHgyMDI4ICYmIGMgIT09IDB4MjAyOSlcbiAgICAgIHx8ICgoMHgwRTAwMCA8PSBjICYmIGMgPD0gMHgwMEZGRkQpICYmIGMgIT09IENIQVJfQk9NKVxuICAgICAgfHwgICgweDEwMDAwIDw9IGMgJiYgYyA8PSAweDEwRkZGRik7XG59XG5cbi8vIFszNF0gbnMtY2hhciA6Oj0gbmItY2hhciAtIHMtd2hpdGVcbi8vIFsyN10gbmItY2hhciA6Oj0gYy1wcmludGFibGUgLSBiLWNoYXIgLSBjLWJ5dGUtb3JkZXItbWFya1xuLy8gWzI2XSBiLWNoYXIgIDo6PSBiLWxpbmUtZmVlZCB8IGItY2FycmlhZ2UtcmV0dXJuXG4vLyBJbmNsdWRpbmcgcy13aGl0ZSAoZm9yIHNvbWUgcmVhc29uLCBleGFtcGxlcyBkb2Vzbid0IG1hdGNoIHNwZWNzIGluIHRoaXMgYXNwZWN0KVxuLy8gbnMtY2hhciA6Oj0gYy1wcmludGFibGUgLSBiLWxpbmUtZmVlZCAtIGItY2FycmlhZ2UtcmV0dXJuIC0gYy1ieXRlLW9yZGVyLW1hcmtcbmZ1bmN0aW9uIGlzTnNDaGFyT3JXaGl0ZXNwYWNlKGMpIHtcbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpXG4gICAgJiYgYyAhPT0gQ0hBUl9CT01cbiAgICAvLyAtIGItY2hhclxuICAgICYmIGMgIT09IENIQVJfQ0FSUklBR0VfUkVUVVJOXG4gICAgJiYgYyAhPT0gQ0hBUl9MSU5FX0ZFRUQ7XG59XG5cbi8vIFsxMjddICBucy1wbGFpbi1zYWZlKGMpIDo6PSBjID0gZmxvdy1vdXQgIFx1MjFEMiBucy1wbGFpbi1zYWZlLW91dFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBmbG93LWluICAgXHUyMUQyIG5zLXBsYWluLXNhZmUtaW5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gYmxvY2sta2V5IFx1MjFEMiBucy1wbGFpbi1zYWZlLW91dFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBmbG93LWtleSAgXHUyMUQyIG5zLXBsYWluLXNhZmUtaW5cbi8vIFsxMjhdIG5zLXBsYWluLXNhZmUtb3V0IDo6PSBucy1jaGFyXG4vLyBbMTI5XSAgbnMtcGxhaW4tc2FmZS1pbiA6Oj0gbnMtY2hhciAtIGMtZmxvdy1pbmRpY2F0b3Jcbi8vIFsxMzBdICBucy1wbGFpbi1jaGFyKGMpIDo6PSAgKCBucy1wbGFpbi1zYWZlKGMpIC0gXHUyMDFDOlx1MjAxRCAtIFx1MjAxQyNcdTIwMUQgKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAoIC8qIEFuIG5zLWNoYXIgcHJlY2VkaW5nICovIFx1MjAxQyNcdTIwMUQgKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAoIFx1MjAxQzpcdTIwMUQgLyogRm9sbG93ZWQgYnkgYW4gbnMtcGxhaW4tc2FmZShjKSAqLyApXG5mdW5jdGlvbiBpc1BsYWluU2FmZShjLCBwcmV2LCBpbmJsb2NrKSB7XG4gIHZhciBjSXNOc0NoYXJPcldoaXRlc3BhY2UgPSBpc05zQ2hhck9yV2hpdGVzcGFjZShjKTtcbiAgdmFyIGNJc05zQ2hhciA9IGNJc05zQ2hhck9yV2hpdGVzcGFjZSAmJiAhaXNXaGl0ZXNwYWNlKGMpO1xuICByZXR1cm4gKFxuICAgIC8vIG5zLXBsYWluLXNhZmVcbiAgICBpbmJsb2NrID8gLy8gYyA9IGZsb3ctaW5cbiAgICAgIGNJc05zQ2hhck9yV2hpdGVzcGFjZVxuICAgICAgOiBjSXNOc0NoYXJPcldoaXRlc3BhY2VcbiAgICAgICAgLy8gLSBjLWZsb3ctaW5kaWNhdG9yXG4gICAgICAgICYmIGMgIT09IENIQVJfQ09NTUFcbiAgICAgICAgJiYgYyAhPT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUXG4gICAgICAgICYmIGMgIT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVRcbiAgICAgICAgJiYgYyAhPT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVRcbiAgICAgICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUXG4gIClcbiAgICAvLyBucy1wbGFpbi1jaGFyXG4gICAgJiYgYyAhPT0gQ0hBUl9TSEFSUCAvLyBmYWxzZSBvbiAnIydcbiAgICAmJiAhKHByZXYgPT09IENIQVJfQ09MT04gJiYgIWNJc05zQ2hhcikgLy8gZmFsc2Ugb24gJzogJ1xuICAgIHx8IChpc05zQ2hhck9yV2hpdGVzcGFjZShwcmV2KSAmJiAhaXNXaGl0ZXNwYWNlKHByZXYpICYmIGMgPT09IENIQVJfU0hBUlApIC8vIGNoYW5nZSB0byB0cnVlIG9uICdbXiBdIydcbiAgICB8fCAocHJldiA9PT0gQ0hBUl9DT0xPTiAmJiBjSXNOc0NoYXIpOyAvLyBjaGFuZ2UgdG8gdHJ1ZSBvbiAnOlteIF0nXG59XG5cbi8vIFNpbXBsaWZpZWQgdGVzdCBmb3IgdmFsdWVzIGFsbG93ZWQgYXMgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiBwbGFpbiBzdHlsZS5cbmZ1bmN0aW9uIGlzUGxhaW5TYWZlRmlyc3QoYykge1xuICAvLyBVc2VzIGEgc3Vic2V0IG9mIG5zLWNoYXIgLSBjLWluZGljYXRvclxuICAvLyB3aGVyZSBucy1jaGFyID0gbmItY2hhciAtIHMtd2hpdGUuXG4gIC8vIE5vIHN1cHBvcnQgb2YgKCAoIFx1MjAxQz9cdTIwMUQgfCBcdTIwMUM6XHUyMDFEIHwgXHUyMDFDLVx1MjAxRCApIC8qIEZvbGxvd2VkIGJ5IGFuIG5zLXBsYWluLXNhZmUoYykpICovICkgcGFydFxuICByZXR1cm4gaXNQcmludGFibGUoYykgJiYgYyAhPT0gQ0hBUl9CT01cbiAgICAmJiAhaXNXaGl0ZXNwYWNlKGMpIC8vIC0gcy13aGl0ZVxuICAgIC8vIC0gKGMtaW5kaWNhdG9yIDo6PVxuICAgIC8vIFx1MjAxQy1cdTIwMUQgfCBcdTIwMUM/XHUyMDFEIHwgXHUyMDFDOlx1MjAxRCB8IFx1MjAxQyxcdTIwMUQgfCBcdTIwMUNbXHUyMDFEIHwgXHUyMDFDXVx1MjAxRCB8IFx1MjAxQ3tcdTIwMUQgfCBcdTIwMUN9XHUyMDFEXG4gICAgJiYgYyAhPT0gQ0hBUl9NSU5VU1xuICAgICYmIGMgIT09IENIQVJfUVVFU1RJT05cbiAgICAmJiBjICE9PSBDSEFSX0NPTE9OXG4gICAgJiYgYyAhPT0gQ0hBUl9DT01NQVxuICAgICYmIGMgIT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVFxuICAgIC8vIHwgXHUyMDFDI1x1MjAxRCB8IFx1MjAxQyZcdTIwMUQgfCBcdTIwMUMqXHUyMDFEIHwgXHUyMDFDIVx1MjAxRCB8IFx1MjAxQ3xcdTIwMUQgfCBcdTIwMUM9XHUyMDFEIHwgXHUyMDFDPlx1MjAxRCB8IFx1MjAxQydcdTIwMUQgfCBcdTIwMUNcIlx1MjAxRFxuICAgICYmIGMgIT09IENIQVJfU0hBUlBcbiAgICAmJiBjICE9PSBDSEFSX0FNUEVSU0FORFxuICAgICYmIGMgIT09IENIQVJfQVNURVJJU0tcbiAgICAmJiBjICE9PSBDSEFSX0VYQ0xBTUFUSU9OXG4gICAgJiYgYyAhPT0gQ0hBUl9WRVJUSUNBTF9MSU5FXG4gICAgJiYgYyAhPT0gQ0hBUl9FUVVBTFNcbiAgICAmJiBjICE9PSBDSEFSX0dSRUFURVJfVEhBTlxuICAgICYmIGMgIT09IENIQVJfU0lOR0xFX1FVT1RFXG4gICAgJiYgYyAhPT0gQ0hBUl9ET1VCTEVfUVVPVEVcbiAgICAvLyB8IFx1MjAxQyVcdTIwMUQgfCBcdTIwMUNAXHUyMDFEIHwgXHUyMDFDYFx1MjAxRClcbiAgICAmJiBjICE9PSBDSEFSX1BFUkNFTlRcbiAgICAmJiBjICE9PSBDSEFSX0NPTU1FUkNJQUxfQVRcbiAgICAmJiBjICE9PSBDSEFSX0dSQVZFX0FDQ0VOVDtcbn1cblxuLy8gU2ltcGxpZmllZCB0ZXN0IGZvciB2YWx1ZXMgYWxsb3dlZCBhcyB0aGUgbGFzdCBjaGFyYWN0ZXIgaW4gcGxhaW4gc3R5bGUuXG5mdW5jdGlvbiBpc1BsYWluU2FmZUxhc3QoYykge1xuICAvLyBqdXN0IG5vdCB3aGl0ZXNwYWNlIG9yIGNvbG9uLCBpdCB3aWxsIGJlIGNoZWNrZWQgdG8gYmUgcGxhaW4gY2hhcmFjdGVyIGxhdGVyXG4gIHJldHVybiAhaXNXaGl0ZXNwYWNlKGMpICYmIGMgIT09IENIQVJfQ09MT047XG59XG5cbi8vIFNhbWUgYXMgJ3N0cmluZycuY29kZVBvaW50QXQocG9zKSwgYnV0IHdvcmtzIGluIG9sZGVyIGJyb3dzZXJzLlxuZnVuY3Rpb24gY29kZVBvaW50QXQoc3RyaW5nLCBwb3MpIHtcbiAgdmFyIGZpcnN0ID0gc3RyaW5nLmNoYXJDb2RlQXQocG9zKSwgc2Vjb25kO1xuICBpZiAoZmlyc3QgPj0gMHhEODAwICYmIGZpcnN0IDw9IDB4REJGRiAmJiBwb3MgKyAxIDwgc3RyaW5nLmxlbmd0aCkge1xuICAgIHNlY29uZCA9IHN0cmluZy5jaGFyQ29kZUF0KHBvcyArIDEpO1xuICAgIGlmIChzZWNvbmQgPj0gMHhEQzAwICYmIHNlY29uZCA8PSAweERGRkYpIHtcbiAgICAgIC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgcmV0dXJuIChmaXJzdCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDA7XG4gICAgfVxuICB9XG4gIHJldHVybiBmaXJzdDtcbn1cblxuLy8gRGV0ZXJtaW5lcyB3aGV0aGVyIGJsb2NrIGluZGVudGF0aW9uIGluZGljYXRvciBpcyByZXF1aXJlZC5cbmZ1bmN0aW9uIG5lZWRJbmRlbnRJbmRpY2F0b3Ioc3RyaW5nKSB7XG4gIHZhciBsZWFkaW5nU3BhY2VSZSA9IC9eXFxuKiAvO1xuICByZXR1cm4gbGVhZGluZ1NwYWNlUmUudGVzdChzdHJpbmcpO1xufVxuXG52YXIgU1RZTEVfUExBSU4gICA9IDEsXG4gICAgU1RZTEVfU0lOR0xFICA9IDIsXG4gICAgU1RZTEVfTElURVJBTCA9IDMsXG4gICAgU1RZTEVfRk9MREVEICA9IDQsXG4gICAgU1RZTEVfRE9VQkxFICA9IDU7XG5cbi8vIERldGVybWluZXMgd2hpY2ggc2NhbGFyIHN0eWxlcyBhcmUgcG9zc2libGUgYW5kIHJldHVybnMgdGhlIHByZWZlcnJlZCBzdHlsZS5cbi8vIGxpbmVXaWR0aCA9IC0xID0+IG5vIGxpbWl0LlxuLy8gUHJlLWNvbmRpdGlvbnM6IHN0ci5sZW5ndGggPiAwLlxuLy8gUG9zdC1jb25kaXRpb25zOlxuLy8gICAgU1RZTEVfUExBSU4gb3IgU1RZTEVfU0lOR0xFID0+IG5vIFxcbiBhcmUgaW4gdGhlIHN0cmluZy5cbi8vICAgIFNUWUxFX0xJVEVSQUwgPT4gbm8gbGluZXMgYXJlIHN1aXRhYmxlIGZvciBmb2xkaW5nIChvciBsaW5lV2lkdGggaXMgLTEpLlxuLy8gICAgU1RZTEVfRk9MREVEID0+IGEgbGluZSA+IGxpbmVXaWR0aCBhbmQgY2FuIGJlIGZvbGRlZCAoYW5kIGxpbmVXaWR0aCAhPSAtMSkuXG5mdW5jdGlvbiBjaG9vc2VTY2FsYXJTdHlsZShzdHJpbmcsIHNpbmdsZUxpbmVPbmx5LCBpbmRlbnRQZXJMZXZlbCwgbGluZVdpZHRoLFxuICB0ZXN0QW1iaWd1b3VzVHlwZSwgcXVvdGluZ1R5cGUsIGZvcmNlUXVvdGVzLCBpbmJsb2NrKSB7XG5cbiAgdmFyIGk7XG4gIHZhciBjaGFyID0gMDtcbiAgdmFyIHByZXZDaGFyID0gbnVsbDtcbiAgdmFyIGhhc0xpbmVCcmVhayA9IGZhbHNlO1xuICB2YXIgaGFzRm9sZGFibGVMaW5lID0gZmFsc2U7IC8vIG9ubHkgY2hlY2tlZCBpZiBzaG91bGRUcmFja1dpZHRoXG4gIHZhciBzaG91bGRUcmFja1dpZHRoID0gbGluZVdpZHRoICE9PSAtMTtcbiAgdmFyIHByZXZpb3VzTGluZUJyZWFrID0gLTE7IC8vIGNvdW50IHRoZSBmaXJzdCBsaW5lIGNvcnJlY3RseVxuICB2YXIgcGxhaW4gPSBpc1BsYWluU2FmZUZpcnN0KGNvZGVQb2ludEF0KHN0cmluZywgMCkpXG4gICAgICAgICAgJiYgaXNQbGFpblNhZmVMYXN0KGNvZGVQb2ludEF0KHN0cmluZywgc3RyaW5nLmxlbmd0aCAtIDEpKTtcblxuICBpZiAoc2luZ2xlTGluZU9ubHkgfHwgZm9yY2VRdW90ZXMpIHtcbiAgICAvLyBDYXNlOiBubyBibG9jayBzdHlsZXMuXG4gICAgLy8gQ2hlY2sgZm9yIGRpc2FsbG93ZWQgY2hhcmFjdGVycyB0byBydWxlIG91dCBwbGFpbiBhbmQgc2luZ2xlLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBjaGFyID49IDB4MTAwMDAgPyBpICs9IDIgOiBpKyspIHtcbiAgICAgIGNoYXIgPSBjb2RlUG9pbnRBdChzdHJpbmcsIGkpO1xuICAgICAgaWYgKCFpc1ByaW50YWJsZShjaGFyKSkge1xuICAgICAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICAgICAgfVxuICAgICAgcGxhaW4gPSBwbGFpbiAmJiBpc1BsYWluU2FmZShjaGFyLCBwcmV2Q2hhciwgaW5ibG9jayk7XG4gICAgICBwcmV2Q2hhciA9IGNoYXI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIENhc2U6IGJsb2NrIHN0eWxlcyBwZXJtaXR0ZWQuXG4gICAgZm9yIChpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGNoYXIgPj0gMHgxMDAwMCA/IGkgKz0gMiA6IGkrKykge1xuICAgICAgY2hhciA9IGNvZGVQb2ludEF0KHN0cmluZywgaSk7XG4gICAgICBpZiAoY2hhciA9PT0gQ0hBUl9MSU5FX0ZFRUQpIHtcbiAgICAgICAgaGFzTGluZUJyZWFrID0gdHJ1ZTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGxpbmUgY2FuIGJlIGZvbGRlZC5cbiAgICAgICAgaWYgKHNob3VsZFRyYWNrV2lkdGgpIHtcbiAgICAgICAgICBoYXNGb2xkYWJsZUxpbmUgPSBoYXNGb2xkYWJsZUxpbmUgfHxcbiAgICAgICAgICAgIC8vIEZvbGRhYmxlIGxpbmUgPSB0b28gbG9uZywgYW5kIG5vdCBtb3JlLWluZGVudGVkLlxuICAgICAgICAgICAgKGkgLSBwcmV2aW91c0xpbmVCcmVhayAtIDEgPiBsaW5lV2lkdGggJiZcbiAgICAgICAgICAgICBzdHJpbmdbcHJldmlvdXNMaW5lQnJlYWsgKyAxXSAhPT0gJyAnKTtcbiAgICAgICAgICBwcmV2aW91c0xpbmVCcmVhayA9IGk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzUHJpbnRhYmxlKGNoYXIpKSB7XG4gICAgICAgIHJldHVybiBTVFlMRV9ET1VCTEU7XG4gICAgICB9XG4gICAgICBwbGFpbiA9IHBsYWluICYmIGlzUGxhaW5TYWZlKGNoYXIsIHByZXZDaGFyLCBpbmJsb2NrKTtcbiAgICAgIHByZXZDaGFyID0gY2hhcjtcbiAgICB9XG4gICAgLy8gaW4gY2FzZSB0aGUgZW5kIGlzIG1pc3NpbmcgYSBcXG5cbiAgICBoYXNGb2xkYWJsZUxpbmUgPSBoYXNGb2xkYWJsZUxpbmUgfHwgKHNob3VsZFRyYWNrV2lkdGggJiZcbiAgICAgIChpIC0gcHJldmlvdXNMaW5lQnJlYWsgLSAxID4gbGluZVdpZHRoICYmXG4gICAgICAgc3RyaW5nW3ByZXZpb3VzTGluZUJyZWFrICsgMV0gIT09ICcgJykpO1xuICB9XG4gIC8vIEFsdGhvdWdoIGV2ZXJ5IHN0eWxlIGNhbiByZXByZXNlbnQgXFxuIHdpdGhvdXQgZXNjYXBpbmcsIHByZWZlciBibG9jayBzdHlsZXNcbiAgLy8gZm9yIG11bHRpbGluZSwgc2luY2UgdGhleSdyZSBtb3JlIHJlYWRhYmxlIGFuZCB0aGV5IGRvbid0IGFkZCBlbXB0eSBsaW5lcy5cbiAgLy8gQWxzbyBwcmVmZXIgZm9sZGluZyBhIHN1cGVyLWxvbmcgbGluZS5cbiAgaWYgKCFoYXNMaW5lQnJlYWsgJiYgIWhhc0ZvbGRhYmxlTGluZSkge1xuICAgIC8vIFN0cmluZ3MgaW50ZXJwcmV0YWJsZSBhcyBhbm90aGVyIHR5cGUgaGF2ZSB0byBiZSBxdW90ZWQ7XG4gICAgLy8gZS5nLiB0aGUgc3RyaW5nICd0cnVlJyB2cy4gdGhlIGJvb2xlYW4gdHJ1ZS5cbiAgICBpZiAocGxhaW4gJiYgIWZvcmNlUXVvdGVzICYmICF0ZXN0QW1iaWd1b3VzVHlwZShzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gU1RZTEVfUExBSU47XG4gICAgfVxuICAgIHJldHVybiBxdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/IFNUWUxFX0RPVUJMRSA6IFNUWUxFX1NJTkdMRTtcbiAgfVxuICAvLyBFZGdlIGNhc2U6IGJsb2NrIGluZGVudGF0aW9uIGluZGljYXRvciBjYW4gb25seSBoYXZlIG9uZSBkaWdpdC5cbiAgaWYgKGluZGVudFBlckxldmVsID4gOSAmJiBuZWVkSW5kZW50SW5kaWNhdG9yKHN0cmluZykpIHtcbiAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICB9XG4gIC8vIEF0IHRoaXMgcG9pbnQgd2Uga25vdyBibG9jayBzdHlsZXMgYXJlIHZhbGlkLlxuICAvLyBQcmVmZXIgbGl0ZXJhbCBzdHlsZSB1bmxlc3Mgd2Ugd2FudCB0byBmb2xkLlxuICBpZiAoIWZvcmNlUXVvdGVzKSB7XG4gICAgcmV0dXJuIGhhc0ZvbGRhYmxlTGluZSA/IFNUWUxFX0ZPTERFRCA6IFNUWUxFX0xJVEVSQUw7XG4gIH1cbiAgcmV0dXJuIHF1b3RpbmdUeXBlID09PSBRVU9USU5HX1RZUEVfRE9VQkxFID8gU1RZTEVfRE9VQkxFIDogU1RZTEVfU0lOR0xFO1xufVxuXG4vLyBOb3RlOiBsaW5lIGJyZWFraW5nL2ZvbGRpbmcgaXMgaW1wbGVtZW50ZWQgZm9yIG9ubHkgdGhlIGZvbGRlZCBzdHlsZS5cbi8vIE5CLiBXZSBkcm9wIHRoZSBsYXN0IHRyYWlsaW5nIG5ld2xpbmUgKGlmIGFueSkgb2YgYSByZXR1cm5lZCBibG9jayBzY2FsYXJcbi8vICBzaW5jZSB0aGUgZHVtcGVyIGFkZHMgaXRzIG93biBuZXdsaW5lLiBUaGlzIGFsd2F5cyB3b3Jrczpcbi8vICAgIFx1MjAyMiBObyBlbmRpbmcgbmV3bGluZSA9PiB1bmFmZmVjdGVkOyBhbHJlYWR5IHVzaW5nIHN0cmlwIFwiLVwiIGNob21waW5nLlxuLy8gICAgXHUyMDIyIEVuZGluZyBuZXdsaW5lICAgID0+IHJlbW92ZWQgdGhlbiByZXN0b3JlZC5cbi8vICBJbXBvcnRhbnRseSwgdGhpcyBrZWVwcyB0aGUgXCIrXCIgY2hvbXAgaW5kaWNhdG9yIGZyb20gZ2FpbmluZyBhbiBleHRyYSBsaW5lLlxuZnVuY3Rpb24gd3JpdGVTY2FsYXIoc3RhdGUsIHN0cmluZywgbGV2ZWwsIGlza2V5LCBpbmJsb2NrKSB7XG4gIHN0YXRlLmR1bXAgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmIChzdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gc3RhdGUucXVvdGluZ1R5cGUgPT09IFFVT1RJTkdfVFlQRV9ET1VCTEUgPyAnXCJcIicgOiBcIicnXCI7XG4gICAgfVxuICAgIGlmICghc3RhdGUubm9Db21wYXRNb2RlKSB7XG4gICAgICBpZiAoREVQUkVDQVRFRF9CT09MRUFOU19TWU5UQVguaW5kZXhPZihzdHJpbmcpICE9PSAtMSB8fCBERVBSRUNBVEVEX0JBU0U2MF9TWU5UQVgudGVzdChzdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5xdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/ICgnXCInICsgc3RyaW5nICsgJ1wiJykgOiAoXCInXCIgKyBzdHJpbmcgKyBcIidcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGluZGVudCA9IHN0YXRlLmluZGVudCAqIE1hdGgubWF4KDEsIGxldmVsKTsgLy8gbm8gMC1pbmRlbnQgc2NhbGFyc1xuICAgIC8vIEFzIGluZGVudGF0aW9uIGdldHMgZGVlcGVyLCBsZXQgdGhlIHdpZHRoIGRlY3JlYXNlIG1vbm90b25pY2FsbHlcbiAgICAvLyB0byB0aGUgbG93ZXIgYm91bmQgbWluKHN0YXRlLmxpbmVXaWR0aCwgNDApLlxuICAgIC8vIE5vdGUgdGhhdCB0aGlzIGltcGxpZXNcbiAgICAvLyAgc3RhdGUubGluZVdpZHRoIFx1MjI2NCA0MCArIHN0YXRlLmluZGVudDogd2lkdGggaXMgZml4ZWQgYXQgdGhlIGxvd2VyIGJvdW5kLlxuICAgIC8vICBzdGF0ZS5saW5lV2lkdGggPiA0MCArIHN0YXRlLmluZGVudDogd2lkdGggZGVjcmVhc2VzIHVudGlsIHRoZSBsb3dlciBib3VuZC5cbiAgICAvLyBUaGlzIGJlaGF2ZXMgYmV0dGVyIHRoYW4gYSBjb25zdGFudCBtaW5pbXVtIHdpZHRoIHdoaWNoIGRpc2FsbG93cyBuYXJyb3dlciBvcHRpb25zLFxuICAgIC8vIG9yIGFuIGluZGVudCB0aHJlc2hvbGQgd2hpY2ggY2F1c2VzIHRoZSB3aWR0aCB0byBzdWRkZW5seSBpbmNyZWFzZS5cbiAgICB2YXIgbGluZVdpZHRoID0gc3RhdGUubGluZVdpZHRoID09PSAtMVxuICAgICAgPyAtMSA6IE1hdGgubWF4KE1hdGgubWluKHN0YXRlLmxpbmVXaWR0aCwgNDApLCBzdGF0ZS5saW5lV2lkdGggLSBpbmRlbnQpO1xuXG4gICAgLy8gV2l0aG91dCBrbm93aW5nIGlmIGtleXMgYXJlIGltcGxpY2l0L2V4cGxpY2l0LCBhc3N1bWUgaW1wbGljaXQgZm9yIHNhZmV0eS5cbiAgICB2YXIgc2luZ2xlTGluZU9ubHkgPSBpc2tleVxuICAgICAgLy8gTm8gYmxvY2sgc3R5bGVzIGluIGZsb3cgbW9kZS5cbiAgICAgIHx8IChzdGF0ZS5mbG93TGV2ZWwgPiAtMSAmJiBsZXZlbCA+PSBzdGF0ZS5mbG93TGV2ZWwpO1xuICAgIGZ1bmN0aW9uIHRlc3RBbWJpZ3VpdHkoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGVzdEltcGxpY2l0UmVzb2x2aW5nKHN0YXRlLCBzdHJpbmcpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoY2hvb3NlU2NhbGFyU3R5bGUoc3RyaW5nLCBzaW5nbGVMaW5lT25seSwgc3RhdGUuaW5kZW50LCBsaW5lV2lkdGgsXG4gICAgICB0ZXN0QW1iaWd1aXR5LCBzdGF0ZS5xdW90aW5nVHlwZSwgc3RhdGUuZm9yY2VRdW90ZXMgJiYgIWlza2V5LCBpbmJsb2NrKSkge1xuXG4gICAgICBjYXNlIFNUWUxFX1BMQUlOOlxuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgY2FzZSBTVFlMRV9TSU5HTEU6XG4gICAgICAgIHJldHVybiBcIidcIiArIHN0cmluZy5yZXBsYWNlKC8nL2csIFwiJydcIikgKyBcIidcIjtcbiAgICAgIGNhc2UgU1RZTEVfTElURVJBTDpcbiAgICAgICAgcmV0dXJuICd8JyArIGJsb2NrSGVhZGVyKHN0cmluZywgc3RhdGUuaW5kZW50KVxuICAgICAgICAgICsgZHJvcEVuZGluZ05ld2xpbmUoaW5kZW50U3RyaW5nKHN0cmluZywgaW5kZW50KSk7XG4gICAgICBjYXNlIFNUWUxFX0ZPTERFRDpcbiAgICAgICAgcmV0dXJuICc+JyArIGJsb2NrSGVhZGVyKHN0cmluZywgc3RhdGUuaW5kZW50KVxuICAgICAgICAgICsgZHJvcEVuZGluZ05ld2xpbmUoaW5kZW50U3RyaW5nKGZvbGRTdHJpbmcoc3RyaW5nLCBsaW5lV2lkdGgpLCBpbmRlbnQpKTtcbiAgICAgIGNhc2UgU1RZTEVfRE9VQkxFOlxuICAgICAgICByZXR1cm4gJ1wiJyArIGVzY2FwZVN0cmluZyhzdHJpbmcsIGxpbmVXaWR0aCkgKyAnXCInO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ2ltcG9zc2libGUgZXJyb3I6IGludmFsaWQgc2NhbGFyIHN0eWxlJyk7XG4gICAgfVxuICB9KCkpO1xufVxuXG4vLyBQcmUtY29uZGl0aW9uczogc3RyaW5nIGlzIHZhbGlkIGZvciBhIGJsb2NrIHNjYWxhciwgMSA8PSBpbmRlbnRQZXJMZXZlbCA8PSA5LlxuZnVuY3Rpb24gYmxvY2tIZWFkZXIoc3RyaW5nLCBpbmRlbnRQZXJMZXZlbCkge1xuICB2YXIgaW5kZW50SW5kaWNhdG9yID0gbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpID8gU3RyaW5nKGluZGVudFBlckxldmVsKSA6ICcnO1xuXG4gIC8vIG5vdGUgdGhlIHNwZWNpYWwgY2FzZTogdGhlIHN0cmluZyAnXFxuJyBjb3VudHMgYXMgYSBcInRyYWlsaW5nXCIgZW1wdHkgbGluZS5cbiAgdmFyIGNsaXAgPSAgICAgICAgICBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSAnXFxuJztcbiAgdmFyIGtlZXAgPSBjbGlwICYmIChzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDJdID09PSAnXFxuJyB8fCBzdHJpbmcgPT09ICdcXG4nKTtcbiAgdmFyIGNob21wID0ga2VlcCA/ICcrJyA6IChjbGlwID8gJycgOiAnLScpO1xuXG4gIHJldHVybiBpbmRlbnRJbmRpY2F0b3IgKyBjaG9tcCArICdcXG4nO1xufVxuXG4vLyAoU2VlIHRoZSBub3RlIGZvciB3cml0ZVNjYWxhci4pXG5mdW5jdGlvbiBkcm9wRW5kaW5nTmV3bGluZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1tzdHJpbmcubGVuZ3RoIC0gMV0gPT09ICdcXG4nID8gc3RyaW5nLnNsaWNlKDAsIC0xKSA6IHN0cmluZztcbn1cblxuLy8gTm90ZTogYSBsb25nIGxpbmUgd2l0aG91dCBhIHN1aXRhYmxlIGJyZWFrIHBvaW50IHdpbGwgZXhjZWVkIHRoZSB3aWR0aCBsaW1pdC5cbi8vIFByZS1jb25kaXRpb25zOiBldmVyeSBjaGFyIGluIHN0ciBpc1ByaW50YWJsZSwgc3RyLmxlbmd0aCA+IDAsIHdpZHRoID4gMC5cbmZ1bmN0aW9uIGZvbGRTdHJpbmcoc3RyaW5nLCB3aWR0aCkge1xuICAvLyBJbiBmb2xkZWQgc3R5bGUsICRrJCBjb25zZWN1dGl2ZSBuZXdsaW5lcyBvdXRwdXQgYXMgJGsrMSQgbmV3bGluZXNcdTIwMTRcbiAgLy8gdW5sZXNzIHRoZXkncmUgYmVmb3JlIG9yIGFmdGVyIGEgbW9yZS1pbmRlbnRlZCBsaW5lLCBvciBhdCB0aGUgdmVyeVxuICAvLyBiZWdpbm5pbmcgb3IgZW5kLCBpbiB3aGljaCBjYXNlICRrJCBtYXBzIHRvICRrJC5cbiAgLy8gVGhlcmVmb3JlLCBwYXJzZSBlYWNoIGNodW5rIGFzIG5ld2xpbmUocykgZm9sbG93ZWQgYnkgYSBjb250ZW50IGxpbmUuXG4gIHZhciBsaW5lUmUgPSAvKFxcbispKFteXFxuXSopL2c7XG5cbiAgLy8gZmlyc3QgbGluZSAocG9zc2libHkgYW4gZW1wdHkgbGluZSlcbiAgdmFyIHJlc3VsdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5leHRMRiA9IHN0cmluZy5pbmRleE9mKCdcXG4nKTtcbiAgICBuZXh0TEYgPSBuZXh0TEYgIT09IC0xID8gbmV4dExGIDogc3RyaW5nLmxlbmd0aDtcbiAgICBsaW5lUmUubGFzdEluZGV4ID0gbmV4dExGO1xuICAgIHJldHVybiBmb2xkTGluZShzdHJpbmcuc2xpY2UoMCwgbmV4dExGKSwgd2lkdGgpO1xuICB9KCkpO1xuICAvLyBJZiB3ZSBoYXZlbid0IHJlYWNoZWQgdGhlIGZpcnN0IGNvbnRlbnQgbGluZSB5ZXQsIGRvbid0IGFkZCBhbiBleHRyYSBcXG4uXG4gIHZhciBwcmV2TW9yZUluZGVudGVkID0gc3RyaW5nWzBdID09PSAnXFxuJyB8fCBzdHJpbmdbMF0gPT09ICcgJztcbiAgdmFyIG1vcmVJbmRlbnRlZDtcblxuICAvLyByZXN0IG9mIHRoZSBsaW5lc1xuICB2YXIgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSBsaW5lUmUuZXhlYyhzdHJpbmcpKSkge1xuICAgIHZhciBwcmVmaXggPSBtYXRjaFsxXSwgbGluZSA9IG1hdGNoWzJdO1xuICAgIG1vcmVJbmRlbnRlZCA9IChsaW5lWzBdID09PSAnICcpO1xuICAgIHJlc3VsdCArPSBwcmVmaXhcbiAgICAgICsgKCFwcmV2TW9yZUluZGVudGVkICYmICFtb3JlSW5kZW50ZWQgJiYgbGluZSAhPT0gJydcbiAgICAgICAgPyAnXFxuJyA6ICcnKVxuICAgICAgKyBmb2xkTGluZShsaW5lLCB3aWR0aCk7XG4gICAgcHJldk1vcmVJbmRlbnRlZCA9IG1vcmVJbmRlbnRlZDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIEdyZWVkeSBsaW5lIGJyZWFraW5nLlxuLy8gUGlja3MgdGhlIGxvbmdlc3QgbGluZSB1bmRlciB0aGUgbGltaXQgZWFjaCB0aW1lLFxuLy8gb3RoZXJ3aXNlIHNldHRsZXMgZm9yIHRoZSBzaG9ydGVzdCBsaW5lIG92ZXIgdGhlIGxpbWl0LlxuLy8gTkIuIE1vcmUtaW5kZW50ZWQgbGluZXMgKmNhbm5vdCogYmUgZm9sZGVkLCBhcyB0aGF0IHdvdWxkIGFkZCBhbiBleHRyYSBcXG4uXG5mdW5jdGlvbiBmb2xkTGluZShsaW5lLCB3aWR0aCkge1xuICBpZiAobGluZSA9PT0gJycgfHwgbGluZVswXSA9PT0gJyAnKSByZXR1cm4gbGluZTtcblxuICAvLyBTaW5jZSBhIG1vcmUtaW5kZW50ZWQgbGluZSBhZGRzIGEgXFxuLCBicmVha3MgY2FuJ3QgYmUgZm9sbG93ZWQgYnkgYSBzcGFjZS5cbiAgdmFyIGJyZWFrUmUgPSAvIFteIF0vZzsgLy8gbm90ZTogdGhlIG1hdGNoIGluZGV4IHdpbGwgYWx3YXlzIGJlIDw9IGxlbmd0aC0yLlxuICB2YXIgbWF0Y2g7XG4gIC8vIHN0YXJ0IGlzIGFuIGluY2x1c2l2ZSBpbmRleC4gZW5kLCBjdXJyLCBhbmQgbmV4dCBhcmUgZXhjbHVzaXZlLlxuICB2YXIgc3RhcnQgPSAwLCBlbmQsIGN1cnIgPSAwLCBuZXh0ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIC8vIEludmFyaWFudHM6IDAgPD0gc3RhcnQgPD0gbGVuZ3RoLTEuXG4gIC8vICAgMCA8PSBjdXJyIDw9IG5leHQgPD0gbWF4KDAsIGxlbmd0aC0yKS4gY3VyciAtIHN0YXJ0IDw9IHdpZHRoLlxuICAvLyBJbnNpZGUgdGhlIGxvb3A6XG4gIC8vICAgQSBtYXRjaCBpbXBsaWVzIGxlbmd0aCA+PSAyLCBzbyBjdXJyIGFuZCBuZXh0IGFyZSA8PSBsZW5ndGgtMi5cbiAgd2hpbGUgKChtYXRjaCA9IGJyZWFrUmUuZXhlYyhsaW5lKSkpIHtcbiAgICBuZXh0ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gbWFpbnRhaW4gaW52YXJpYW50OiBjdXJyIC0gc3RhcnQgPD0gd2lkdGhcbiAgICBpZiAobmV4dCAtIHN0YXJ0ID4gd2lkdGgpIHtcbiAgICAgIGVuZCA9IChjdXJyID4gc3RhcnQpID8gY3VyciA6IG5leHQ7IC8vIGRlcml2ZSBlbmQgPD0gbGVuZ3RoLTJcbiAgICAgIHJlc3VsdCArPSAnXFxuJyArIGxpbmUuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAvLyBza2lwIHRoZSBzcGFjZSB0aGF0IHdhcyBvdXRwdXQgYXMgXFxuXG4gICAgICBzdGFydCA9IGVuZCArIDE7ICAgICAgICAgICAgICAgICAgICAvLyBkZXJpdmUgc3RhcnQgPD0gbGVuZ3RoLTFcbiAgICB9XG4gICAgY3VyciA9IG5leHQ7XG4gIH1cblxuICAvLyBCeSB0aGUgaW52YXJpYW50cywgc3RhcnQgPD0gbGVuZ3RoLTEsIHNvIHRoZXJlIGlzIHNvbWV0aGluZyBsZWZ0IG92ZXIuXG4gIC8vIEl0IGlzIGVpdGhlciB0aGUgd2hvbGUgc3RyaW5nIG9yIGEgcGFydCBzdGFydGluZyBmcm9tIG5vbi13aGl0ZXNwYWNlLlxuICByZXN1bHQgKz0gJ1xcbic7XG4gIC8vIEluc2VydCBhIGJyZWFrIGlmIHRoZSByZW1haW5kZXIgaXMgdG9vIGxvbmcgYW5kIHRoZXJlIGlzIGEgYnJlYWsgYXZhaWxhYmxlLlxuICBpZiAobGluZS5sZW5ndGggLSBzdGFydCA+IHdpZHRoICYmIGN1cnIgPiBzdGFydCkge1xuICAgIHJlc3VsdCArPSBsaW5lLnNsaWNlKHN0YXJ0LCBjdXJyKSArICdcXG4nICsgbGluZS5zbGljZShjdXJyICsgMSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ICs9IGxpbmUuc2xpY2Uoc3RhcnQpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5zbGljZSgxKTsgLy8gZHJvcCBleHRyYSBcXG4gam9pbmVyXG59XG5cbi8vIEVzY2FwZXMgYSBkb3VibGUtcXVvdGVkIHN0cmluZy5cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyhzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgY2hhciA9IDA7XG4gIHZhciBlc2NhcGVTZXE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBjaGFyID49IDB4MTAwMDAgPyBpICs9IDIgOiBpKyspIHtcbiAgICBjaGFyID0gY29kZVBvaW50QXQoc3RyaW5nLCBpKTtcbiAgICBlc2NhcGVTZXEgPSBFU0NBUEVfU0VRVUVOQ0VTW2NoYXJdO1xuXG4gICAgaWYgKCFlc2NhcGVTZXEgJiYgaXNQcmludGFibGUoY2hhcikpIHtcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdbaV07XG4gICAgICBpZiAoY2hhciA+PSAweDEwMDAwKSByZXN1bHQgKz0gc3RyaW5nW2kgKyAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IGVzY2FwZVNlcSB8fCBlbmNvZGVIZXgoY2hhcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBvYmplY3QpIHtcbiAgdmFyIF9yZXN1bHQgPSAnJyxcbiAgICAgIF90YWcgICAgPSBzdGF0ZS50YWcsXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIHZhbHVlO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHZhbHVlID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgdmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgU3RyaW5nKGluZGV4KSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8vIFdyaXRlIG9ubHkgdmFsaWQgZWxlbWVudHMsIHB1dCBudWxsIGluc3RlYWQgb2YgaW52YWxpZCBlbGVtZW50cy5cbiAgICBpZiAod3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgdmFsdWUsIGZhbHNlLCBmYWxzZSkgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgIHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG51bGwsIGZhbHNlLCBmYWxzZSkpKSB7XG5cbiAgICAgIGlmIChfcmVzdWx0ICE9PSAnJykgX3Jlc3VsdCArPSAnLCcgKyAoIXN0YXRlLmNvbmRlbnNlRmxvdyA/ICcgJyA6ICcnKTtcbiAgICAgIF9yZXN1bHQgKz0gc3RhdGUuZHVtcDtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS50YWcgPSBfdGFnO1xuICBzdGF0ZS5kdW1wID0gJ1snICsgX3Jlc3VsdCArICddJztcbn1cblxuZnVuY3Rpb24gd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCwgb2JqZWN0LCBjb21wYWN0KSB7XG4gIHZhciBfcmVzdWx0ID0gJycsXG4gICAgICBfdGFnICAgID0gc3RhdGUudGFnLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGgsXG4gICAgICB2YWx1ZTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB2YWx1ZSA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICAgIHZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbChvYmplY3QsIFN0cmluZyhpbmRleCksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBXcml0ZSBvbmx5IHZhbGlkIGVsZW1lbnRzLCBwdXQgbnVsbCBpbnN0ZWFkIG9mIGludmFsaWQgZWxlbWVudHMuXG4gICAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIHRydWUpIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICB3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgbnVsbCwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIHRydWUpKSkge1xuXG4gICAgICBpZiAoIWNvbXBhY3QgfHwgX3Jlc3VsdCAhPT0gJycpIHtcbiAgICAgICAgX3Jlc3VsdCArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5kdW1wICYmIENIQVJfTElORV9GRUVEID09PSBzdGF0ZS5kdW1wLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgX3Jlc3VsdCArPSAnLSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcmVzdWx0ICs9ICctICc7XG4gICAgICB9XG5cbiAgICAgIF9yZXN1bHQgKz0gc3RhdGUuZHVtcDtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS50YWcgPSBfdGFnO1xuICBzdGF0ZS5kdW1wID0gX3Jlc3VsdCB8fCAnW10nOyAvLyBFbXB0eSBzZXF1ZW5jZSBpZiBubyB2YWxpZCB2YWx1ZXMuXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvd01hcHBpbmcoc3RhdGUsIGxldmVsLCBvYmplY3QpIHtcbiAgdmFyIF9yZXN1bHQgICAgICAgPSAnJyxcbiAgICAgIF90YWcgICAgICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBvYmplY3RLZXlMaXN0ID0gT2JqZWN0LmtleXMob2JqZWN0KSxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoLFxuICAgICAgb2JqZWN0S2V5LFxuICAgICAgb2JqZWN0VmFsdWUsXG4gICAgICBwYWlyQnVmZmVyO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3RLZXlMaXN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcblxuICAgIHBhaXJCdWZmZXIgPSAnJztcbiAgICBpZiAoX3Jlc3VsdCAhPT0gJycpIHBhaXJCdWZmZXIgKz0gJywgJztcblxuICAgIGlmIChzdGF0ZS5jb25kZW5zZUZsb3cpIHBhaXJCdWZmZXIgKz0gJ1wiJztcblxuICAgIG9iamVjdEtleSA9IG9iamVjdEtleUxpc3RbaW5kZXhdO1xuICAgIG9iamVjdFZhbHVlID0gb2JqZWN0W29iamVjdEtleV07XG5cbiAgICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICAgIG9iamVjdFZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbChvYmplY3QsIG9iamVjdEtleSwgb2JqZWN0VmFsdWUpO1xuICAgIH1cblxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgb2JqZWN0S2V5LCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTsgLy8gU2tpcCB0aGlzIHBhaXIgYmVjYXVzZSBvZiBpbnZhbGlkIGtleTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuZHVtcC5sZW5ndGggPiAxMDI0KSBwYWlyQnVmZmVyICs9ICc/ICc7XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXAgKyAoc3RhdGUuY29uZGVuc2VGbG93ID8gJ1wiJyA6ICcnKSArICc6JyArIChzdGF0ZS5jb25kZW5zZUZsb3cgPyAnJyA6ICcgJyk7XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdFZhbHVlLCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTsgLy8gU2tpcCB0aGlzIHBhaXIgYmVjYXVzZSBvZiBpbnZhbGlkIHZhbHVlLlxuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICd7JyArIF9yZXN1bHQgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0LCBjb21wYWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgZXhwbGljaXRQYWlyLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICAvLyBBbGxvdyBzb3J0aW5nIGtleXMgc28gdGhhdCB0aGUgb3V0cHV0IGZpbGUgaXMgZGV0ZXJtaW5pc3RpY1xuICBpZiAoc3RhdGUuc29ydEtleXMgPT09IHRydWUpIHtcbiAgICAvLyBEZWZhdWx0IHNvcnRpbmdcbiAgICBvYmplY3RLZXlMaXN0LnNvcnQoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3RhdGUuc29ydEtleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBDdXN0b20gc29ydCBmdW5jdGlvblxuICAgIG9iamVjdEtleUxpc3Quc29ydChzdGF0ZS5zb3J0S2V5cyk7XG4gIH0gZWxzZSBpZiAoc3RhdGUuc29ydEtleXMpIHtcbiAgICAvLyBTb21ldGhpbmcgaXMgd3JvbmdcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignc29ydEtleXMgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXJCdWZmZXIgPSAnJztcblxuICAgIGlmICghY29tcGFjdCB8fCBfcmVzdWx0ICE9PSAnJykge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcblxuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgb2JqZWN0VmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgb2JqZWN0S2V5LCBvYmplY3RWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0S2V5LCB0cnVlLCB0cnVlLCB0cnVlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCBrZXkuXG4gICAgfVxuXG4gICAgZXhwbGljaXRQYWlyID0gKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHxcbiAgICAgICAgICAgICAgICAgICAoc3RhdGUuZHVtcCAmJiBzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQpO1xuXG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBwYWlyQnVmZmVyICs9ICc/JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhaXJCdWZmZXIgKz0gJz8gJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICBpZiAoZXhwbGljaXRQYWlyKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICB9XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RWYWx1ZSwgdHJ1ZSwgZXhwbGljaXRQYWlyKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCB2YWx1ZS5cbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICBwYWlyQnVmZmVyICs9ICc6JztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFpckJ1ZmZlciArPSAnOiAnO1xuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ3t9JzsgLy8gRW1wdHkgbWFwcGluZyBpZiBubyB2YWxpZCBwYWlycy5cbn1cblxuZnVuY3Rpb24gZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBleHBsaWNpdCkge1xuICB2YXIgX3Jlc3VsdCwgdHlwZUxpc3QsIGluZGV4LCBsZW5ndGgsIHR5cGUsIHN0eWxlO1xuXG4gIHR5cGVMaXN0ID0gZXhwbGljaXQgPyBzdGF0ZS5leHBsaWNpdFR5cGVzIDogc3RhdGUuaW1wbGljaXRUeXBlcztcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdHlwZUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHR5cGUgPSB0eXBlTGlzdFtpbmRleF07XG5cbiAgICBpZiAoKHR5cGUuaW5zdGFuY2VPZiAgfHwgdHlwZS5wcmVkaWNhdGUpICYmXG4gICAgICAgICghdHlwZS5pbnN0YW5jZU9mIHx8ICgodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpICYmIChvYmplY3QgaW5zdGFuY2VvZiB0eXBlLmluc3RhbmNlT2YpKSkgJiZcbiAgICAgICAgKCF0eXBlLnByZWRpY2F0ZSAgfHwgdHlwZS5wcmVkaWNhdGUob2JqZWN0KSkpIHtcblxuICAgICAgaWYgKGV4cGxpY2l0KSB7XG4gICAgICAgIGlmICh0eXBlLm11bHRpICYmIHR5cGUucmVwcmVzZW50TmFtZSkge1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUucmVwcmVzZW50TmFtZShvYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50YWcgPSAnPyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlLnJlcHJlc2VudCkge1xuICAgICAgICBzdHlsZSA9IHN0YXRlLnN0eWxlTWFwW3R5cGUudGFnXSB8fCB0eXBlLmRlZmF1bHRTdHlsZTtcblxuICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwodHlwZS5yZXByZXNlbnQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgICAgX3Jlc3VsdCA9IHR5cGUucmVwcmVzZW50KG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHR5cGUucmVwcmVzZW50LCBzdHlsZSkpIHtcbiAgICAgICAgICBfcmVzdWx0ID0gdHlwZS5yZXByZXNlbnRbc3R5bGVdKG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCchPCcgKyB0eXBlLnRhZyArICc+IHRhZyByZXNvbHZlciBhY2NlcHRzIG5vdCBcIicgKyBzdHlsZSArICdcIiBzdHlsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuZHVtcCA9IF9yZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gU2VyaWFsaXplcyBgb2JqZWN0YCBhbmQgd3JpdGVzIGl0IHRvIGdsb2JhbCBgcmVzdWx0YC5cbi8vIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBvciBmYWxzZSBvbiBpbnZhbGlkIG9iamVjdC5cbi8vXG5mdW5jdGlvbiB3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3QsIGJsb2NrLCBjb21wYWN0LCBpc2tleSwgaXNibG9ja3NlcSkge1xuICBzdGF0ZS50YWcgPSBudWxsO1xuICBzdGF0ZS5kdW1wID0gb2JqZWN0O1xuXG4gIGlmICghZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBmYWxzZSkpIHtcbiAgICBkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIHRydWUpO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBfdG9TdHJpbmcuY2FsbChzdGF0ZS5kdW1wKTtcbiAgdmFyIGluYmxvY2sgPSBibG9jaztcbiAgdmFyIHRhZ1N0cjtcblxuICBpZiAoYmxvY2spIHtcbiAgICBibG9jayA9IChzdGF0ZS5mbG93TGV2ZWwgPCAwIHx8IHN0YXRlLmZsb3dMZXZlbCA+IGxldmVsKTtcbiAgfVxuXG4gIHZhciBvYmplY3RPckFycmF5ID0gdHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGR1cGxpY2F0ZUluZGV4LFxuICAgICAgZHVwbGljYXRlO1xuXG4gIGlmIChvYmplY3RPckFycmF5KSB7XG4gICAgZHVwbGljYXRlSW5kZXggPSBzdGF0ZS5kdXBsaWNhdGVzLmluZGV4T2Yob2JqZWN0KTtcbiAgICBkdXBsaWNhdGUgPSBkdXBsaWNhdGVJbmRleCAhPT0gLTE7XG4gIH1cblxuICBpZiAoKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHwgZHVwbGljYXRlIHx8IChzdGF0ZS5pbmRlbnQgIT09IDIgJiYgbGV2ZWwgPiAwKSkge1xuICAgIGNvbXBhY3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChkdXBsaWNhdGUgJiYgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdKSB7XG4gICAgc3RhdGUuZHVtcCA9ICcqcmVmXycgKyBkdXBsaWNhdGVJbmRleDtcbiAgfSBlbHNlIHtcbiAgICBpZiAob2JqZWN0T3JBcnJheSAmJiBkdXBsaWNhdGUgJiYgIXN0YXRlLnVzZWREdXBsaWNhdGVzW2R1cGxpY2F0ZUluZGV4XSkge1xuICAgICAgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBpZiAoYmxvY2sgJiYgKE9iamVjdC5rZXlzKHN0YXRlLmR1bXApLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgd3JpdGVCbG9ja01hcHBpbmcoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wLCBjb21wYWN0KTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCk7XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgJyAnICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgaWYgKGJsb2NrICYmIChzdGF0ZS5kdW1wLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgaWYgKHN0YXRlLm5vQXJyYXlJbmRlbnQgJiYgIWlzYmxvY2tzZXEgJiYgbGV2ZWwgPiAwKSB7XG4gICAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCAtIDEsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBTdHJpbmddJykge1xuICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gJz8nKSB7XG4gICAgICAgIHdyaXRlU2NhbGFyKHN0YXRlLCBzdGF0ZS5kdW1wLCBsZXZlbCwgaXNrZXksIGluYmxvY2spO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgVW5kZWZpbmVkXScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnNraXBJbnZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbigndW5hY2NlcHRhYmxlIGtpbmQgb2YgYW4gb2JqZWN0IHRvIGR1bXAgJyArIHR5cGUpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS50YWcgIT09IG51bGwgJiYgc3RhdGUudGFnICE9PSAnPycpIHtcbiAgICAgIC8vIE5lZWQgdG8gZW5jb2RlIGFsbCBjaGFyYWN0ZXJzIGV4Y2VwdCB0aG9zZSBhbGxvd2VkIGJ5IHRoZSBzcGVjOlxuICAgICAgLy9cbiAgICAgIC8vIFszNV0gbnMtZGVjLWRpZ2l0ICAgIDo6PSAgWyN4MzAtI3gzOV0gLyogMC05ICovXG4gICAgICAvLyBbMzZdIG5zLWhleC1kaWdpdCAgICA6Oj0gIG5zLWRlYy1kaWdpdFxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfCBbI3g0MS0jeDQ2XSAvKiBBLUYgKi8gfCBbI3g2MS0jeDY2XSAvKiBhLWYgKi9cbiAgICAgIC8vIFszN10gbnMtYXNjaWktbGV0dGVyIDo6PSAgWyN4NDEtI3g1QV0gLyogQS1aICovIHwgWyN4NjEtI3g3QV0gLyogYS16ICovXG4gICAgICAvLyBbMzhdIG5zLXdvcmQtY2hhciAgICA6Oj0gIG5zLWRlYy1kaWdpdCB8IG5zLWFzY2lpLWxldHRlciB8IFx1MjAxQy1cdTIwMURcbiAgICAgIC8vIFszOV0gbnMtdXJpLWNoYXIgICAgIDo6PSAgXHUyMDFDJVx1MjAxRCBucy1oZXgtZGlnaXQgbnMtaGV4LWRpZ2l0IHwgbnMtd29yZC1jaGFyIHwgXHUyMDFDI1x1MjAxRFxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfCBcdTIwMUM7XHUyMDFEIHwgXHUyMDFDL1x1MjAxRCB8IFx1MjAxQz9cdTIwMUQgfCBcdTIwMUM6XHUyMDFEIHwgXHUyMDFDQFx1MjAxRCB8IFx1MjAxQyZcdTIwMUQgfCBcdTIwMUM9XHUyMDFEIHwgXHUyMDFDK1x1MjAxRCB8IFx1MjAxQyRcdTIwMUQgfCBcdTIwMUMsXHUyMDFEXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB8IFx1MjAxQ19cdTIwMUQgfCBcdTIwMUMuXHUyMDFEIHwgXHUyMDFDIVx1MjAxRCB8IFx1MjAxQ35cdTIwMUQgfCBcdTIwMUMqXHUyMDFEIHwgXHUyMDFDJ1x1MjAxRCB8IFx1MjAxQyhcdTIwMUQgfCBcdTIwMUMpXHUyMDFEIHwgXHUyMDFDW1x1MjAxRCB8IFx1MjAxQ11cdTIwMURcbiAgICAgIC8vXG4gICAgICAvLyBBbHNvIG5lZWQgdG8gZW5jb2RlICchJyBiZWNhdXNlIGl0IGhhcyBzcGVjaWFsIG1lYW5pbmcgKGVuZCBvZiB0YWcgcHJlZml4KS5cbiAgICAgIC8vXG4gICAgICB0YWdTdHIgPSBlbmNvZGVVUkkoXG4gICAgICAgIHN0YXRlLnRhZ1swXSA9PT0gJyEnID8gc3RhdGUudGFnLnNsaWNlKDEpIDogc3RhdGUudGFnXG4gICAgICApLnJlcGxhY2UoLyEvZywgJyUyMScpO1xuXG4gICAgICBpZiAoc3RhdGUudGFnWzBdID09PSAnIScpIHtcbiAgICAgICAgdGFnU3RyID0gJyEnICsgdGFnU3RyO1xuICAgICAgfSBlbHNlIGlmICh0YWdTdHIuc2xpY2UoMCwgMTgpID09PSAndGFnOnlhbWwub3JnLDIwMDI6Jykge1xuICAgICAgICB0YWdTdHIgPSAnISEnICsgdGFnU3RyLnNsaWNlKDE4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhZ1N0ciA9ICchPCcgKyB0YWdTdHIgKyAnPic7XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmR1bXAgPSB0YWdTdHIgKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZXREdXBsaWNhdGVSZWZlcmVuY2VzKG9iamVjdCwgc3RhdGUpIHtcbiAgdmFyIG9iamVjdHMgPSBbXSxcbiAgICAgIGR1cGxpY2F0ZXNJbmRleGVzID0gW10sXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aDtcblxuICBpbnNwZWN0Tm9kZShvYmplY3QsIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZHVwbGljYXRlc0luZGV4ZXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHN0YXRlLmR1cGxpY2F0ZXMucHVzaChvYmplY3RzW2R1cGxpY2F0ZXNJbmRleGVzW2luZGV4XV0pO1xuICB9XG4gIHN0YXRlLnVzZWREdXBsaWNhdGVzID0gbmV3IEFycmF5KGxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3ROb2RlKG9iamVjdCwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpIHtcbiAgdmFyIG9iamVjdEtleUxpc3QsXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aDtcblxuICBpZiAob2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgaW5kZXggPSBvYmplY3RzLmluZGV4T2Yob2JqZWN0KTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoZHVwbGljYXRlc0luZGV4ZXMuaW5kZXhPZihpbmRleCkgPT09IC0xKSB7XG4gICAgICAgIGR1cGxpY2F0ZXNJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvYmplY3RzLnB1c2gob2JqZWN0KTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgICBpbnNwZWN0Tm9kZShvYmplY3RbaW5kZXhdLCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdEtleUxpc3QgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3RLZXlMaXN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgICBpbnNwZWN0Tm9kZShvYmplY3Rbb2JqZWN0S2V5TGlzdFtpbmRleF1dLCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZHVtcChpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUob3B0aW9ucyk7XG5cbiAgaWYgKCFzdGF0ZS5ub1JlZnMpIGdldER1cGxpY2F0ZVJlZmVyZW5jZXMoaW5wdXQsIHN0YXRlKTtcblxuICB2YXIgdmFsdWUgPSBpbnB1dDtcblxuICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICB2YWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwoeyAnJzogdmFsdWUgfSwgJycsIHZhbHVlKTtcbiAgfVxuXG4gIGlmICh3cml0ZU5vZGUoc3RhdGUsIDAsIHZhbHVlLCB0cnVlLCB0cnVlKSkgcmV0dXJuIHN0YXRlLmR1bXAgKyAnXFxuJztcblxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzLmR1bXAgPSBkdW1wO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuXG52YXIgbG9hZGVyID0gcmVxdWlyZSgnLi9saWIvbG9hZGVyJyk7XG52YXIgZHVtcGVyID0gcmVxdWlyZSgnLi9saWIvZHVtcGVyJyk7XG5cblxuZnVuY3Rpb24gcmVuYW1lZChmcm9tLCB0bykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24geWFtbC4nICsgZnJvbSArICcgaXMgcmVtb3ZlZCBpbiBqcy15YW1sIDQuICcgK1xuICAgICAgJ1VzZSB5YW1sLicgKyB0byArICcgaW5zdGVhZCwgd2hpY2ggaXMgbm93IHNhZmUgYnkgZGVmYXVsdC4nKTtcbiAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5UeXBlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9saWIvdHlwZScpO1xubW9kdWxlLmV4cG9ydHMuU2NoZW1hICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vbGliL3NjaGVtYScpO1xubW9kdWxlLmV4cG9ydHMuRkFJTFNBRkVfU0NIRU1BICAgICA9IHJlcXVpcmUoJy4vbGliL3NjaGVtYS9mYWlsc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuSlNPTl9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vbGliL3NjaGVtYS9qc29uJyk7XG5tb2R1bGUuZXhwb3J0cy5DT1JFX1NDSEVNQSAgICAgICAgID0gcmVxdWlyZSgnLi9saWIvc2NoZW1hL2NvcmUnKTtcbm1vZHVsZS5leHBvcnRzLkRFRkFVTFRfU0NIRU1BICAgICAgPSByZXF1aXJlKCcuL2xpYi9zY2hlbWEvZGVmYXVsdCcpO1xubW9kdWxlLmV4cG9ydHMubG9hZCAgICAgICAgICAgICAgICA9IGxvYWRlci5sb2FkO1xubW9kdWxlLmV4cG9ydHMubG9hZEFsbCAgICAgICAgICAgICA9IGxvYWRlci5sb2FkQWxsO1xubW9kdWxlLmV4cG9ydHMuZHVtcCAgICAgICAgICAgICAgICA9IGR1bXBlci5kdW1wO1xubW9kdWxlLmV4cG9ydHMuWUFNTEV4Y2VwdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vbGliL2V4Y2VwdGlvbicpO1xuXG4vLyBSZS1leHBvcnQgYWxsIHR5cGVzIGluIGNhc2UgdXNlciB3YW50cyB0byBjcmVhdGUgY3VzdG9tIHNjaGVtYVxubW9kdWxlLmV4cG9ydHMudHlwZXMgPSB7XG4gIGJpbmFyeTogICAgcmVxdWlyZSgnLi9saWIvdHlwZS9iaW5hcnknKSxcbiAgZmxvYXQ6ICAgICByZXF1aXJlKCcuL2xpYi90eXBlL2Zsb2F0JyksXG4gIG1hcDogICAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9tYXAnKSxcbiAgbnVsbDogICAgICByZXF1aXJlKCcuL2xpYi90eXBlL251bGwnKSxcbiAgcGFpcnM6ICAgICByZXF1aXJlKCcuL2xpYi90eXBlL3BhaXJzJyksXG4gIHNldDogICAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9zZXQnKSxcbiAgdGltZXN0YW1wOiByZXF1aXJlKCcuL2xpYi90eXBlL3RpbWVzdGFtcCcpLFxuICBib29sOiAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvYm9vbCcpLFxuICBpbnQ6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvaW50JyksXG4gIG1lcmdlOiAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9tZXJnZScpLFxuICBvbWFwOiAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvb21hcCcpLFxuICBzZXE6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvc2VxJyksXG4gIHN0cjogICAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9zdHInKVxufTtcblxuLy8gUmVtb3ZlZCBmdW5jdGlvbnMgZnJvbSBKUy1ZQU1MIDMuMC54XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZCAgICAgICAgICAgID0gcmVuYW1lZCgnc2FmZUxvYWQnLCAnbG9hZCcpO1xubW9kdWxlLmV4cG9ydHMuc2FmZUxvYWRBbGwgICAgICAgICA9IHJlbmFtZWQoJ3NhZmVMb2FkQWxsJywgJ2xvYWRBbGwnKTtcbm1vZHVsZS5leHBvcnRzLnNhZmVEdW1wICAgICAgICAgICAgPSByZW5hbWVkKCdzYWZlRHVtcCcsICdkdW1wJyk7XG4iLCAiaW1wb3J0IHsgXHJcblx0QXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgXHJcblx0Q2FjaGVkTWV0YWRhdGEsXHJcblx0UGx1Z2luLFxyXG5cdFRBYnN0cmFjdEZpbGUsXHJcblx0bW9tZW50LFxyXG5cdFRGaWxlLFRGb2xkZXJcclxufSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbXBvcnQge05DRWRpdG9yfSBmcm9tICcuL3NyYy9OQ0VkaXRvcic7XHJcbmltcG9ydCB7Tm90ZUNoYWlufSBmcm9tICcuL3NyYy9Ob3RlQ2hhaW4nO1xyXG5pbXBvcnQge05DVGV4dGFyZWF9IGZyb20gJy4vc3JjL05DVGV4dGFyZWEnO1xyXG5pbXBvcnQge05DRmlsZUV4cGxvcmVyfSBmcm9tICcuL3NyYy9OQ0ZpbGVFeHBsb3Jlcic7XHJcbmltcG9ydCB7IFN0cmluZ3MgfSBmcm9tICdzcmMvc3RyaW5ncyc7XHJcbmltcG9ydCB7IFdvcmRDb3VudCB9IGZyb20gJ3NyYy9Xb3JkQ291bnQnO1xyXG5pbXBvcnQgeyBNZXJtYWlkR3JhcGgsQ2FudmFzR3JhcGggfSBmcm9tICdzcmMvZ3JhcGgnO1xyXG5pbXBvcnQgeyBOQ1NldHRpbmdUYWIsTkNTZXR0aW5ncyxERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSAnc3JjL3NldHRpbmcnO1xyXG5pbXBvcnQgeyBhZGRDb21tYW5kcyB9IGZyb20gJ3NyYy9jb21tYW5kcyc7XHJcbmltcG9ydCB7ZGlhbG9nX3N1Z2dlc3R9IGZyb20gJ3NyYy9ndWkvaW5wdXRTdWdnZXN0ZXInXHJcbmltcG9ydCB7ZGlhbG9nX3Byb21wdH0gZnJvbSAnc3JjL2d1aS9pbnB1dFByb21wdCdcclxuaW1wb3J0IHtFYXN5QVBJfSBmcm9tICdzcmMvZWFzeWFwaS9lYXN5YXBpJ1xyXG5pbXBvcnQgeyBOb3RlQ29udGVudFZpZXcgfSBmcm9tICdzcmMvTkNWaWV3JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGVDaGFpblBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0c2V0dGluZ3M6IE5DU2V0dGluZ3M7XHJcblx0Y2hhaW4gOiBOb3RlQ2hhaW47XHJcblx0dGV4dGFyZWEgOiBOQ1RleHRhcmVhO1xyXG5cdGVkaXRvciA6IE5DRWRpdG9yOyBcclxuXHRleHBsb3JlciA6IE5DRmlsZUV4cGxvcmVyO1xyXG5cdG1lcm1haWQgOiBNZXJtYWlkR3JhcGg7XHJcblx0Y2FudmFzIDogQ2FudmFzR3JhcGg7XHJcblx0d29yZGNvdXQgOiBXb3JkQ291bnQ7XHJcblx0c3RyaW5ncyA6IFN0cmluZ3M7XHJcblx0c3RhdHVzIDogc3RyaW5nO1xyXG5cdGRlYnVnOmJvb2xlYW47XHJcblx0dXRpbHM6YW55O1xyXG5cdHRpbWVySWQ6YW55O1xyXG5cdG9iOmFueTtcclxuXHRkaWFsb2dfc3VnZ2VzdDogRnVuY3Rpb247XHJcblx0ZGlhbG9nX3Byb21wdDogRnVuY3Rpb247XHJcblx0ZWFzeWFwaTogRWFzeUFQSTtcclxuXHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdHRoaXMuZGlhbG9nX3N1Z2dlc3QgPSBkaWFsb2dfc3VnZ2VzdFxyXG5cdFx0dGhpcy5kaWFsb2dfcHJvbXB0ID0gZGlhbG9nX3Byb21wdFxyXG5cdFx0dGhpcy5zdGF0dXMgPSAnd2FpdGluZydcclxuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbkxheW91dFJlYWR5KFxyXG5cdFx0XHRhc3luYygpPT57XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5fb25sb2FkXygpO1xyXG5cdFx0XHRcdHRoaXMuX2FmdGVyX2xvYWRpbmdfKClcclxuXHRcdFx0fVxyXG5cdFx0KVxyXG5cdH1cclxuXHJcblx0YXN5bmMgX2FmdGVyX2xvYWRpbmdfKCkge1xyXG5cdFx0d2hpbGUgKCEodGhpcy5hcHAgYXMgYW55KS5wbHVnaW5zPy5wbHVnaW5zWydub3RlLWNoYWluJ10pIHtcclxuXHRcdFx0YXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpOyAvLyBcdTdCNDlcdTVGODUxMDBtc1x1NTE4RFx1NjhDMFx1NjdFNVxyXG5cdFx0fVxyXG5cclxuXHRcdCh0aGlzLmFwcCBhcyBhbnkpLmNvbW1hbmRzLmV4ZWN1dGVDb21tYW5kQnlJZChcclxuXHRcdFx0XCJkYXRhdmlldzpkYXRhdmlldy1mb3JjZS1yZWZyZXNoLXZpZXdzXCJcclxuXHRcdCk7XHJcblxyXG5cdFx0bGV0IHRhcmdldCA9IGF3YWl0ICh0aGlzLmFwcCBhcyBhbnkpLnBsdWdpbnMuZ2V0UGx1Z2luKFwib2JzaWRpYW4tdGFza3MtcGx1Z2luXCIpO1xyXG5cdFx0dGFyZ2V0ICYmIHRhcmdldC5jYWNoZS5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG5cclxuXHRcdC8vIG5ldyBOb3RpY2UoJ05vdGUgQ2hhaW4gaXMgcmVhZHkhJywzMDAwKVxyXG5cdFx0cmV0dXJuICh0aGlzLmFwcCBhcyBhbnkpLnBsdWdpbnM/LnBsdWdpbnNbJ25vdGUtY2hhaW4nXVxyXG5cdH1cclxuXHJcblx0YXN5bmMgX29ubG9hZF8oKSB7XHJcblx0XHR0aGlzLnN0YXR1cyA9ICdsb2FkaW5nJ1xyXG5cdFx0dGhpcy5kZWJ1Zz10cnVlO1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdFxyXG5cdFx0dGhpcy51dGlscyA9IHJlcXVpcmUoJy4vc3JjL3V0aWxzJyk7XHJcblx0XHR0aGlzLm9iID0gcmVxdWlyZSgnb2JzaWRpYW4nKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5lZGl0b3IgPSBuZXcgTkNFZGl0b3IodGhpcyk7XHJcblx0XHR0aGlzLmNoYWluID0gbmV3IE5vdGVDaGFpbih0aGlzLHRoaXMuZWRpdG9yKTtcclxuXHRcdHRoaXMuZXhwbG9yZXIgPSBuZXcgTkNGaWxlRXhwbG9yZXIodGhpcyk7XHJcblx0XHR0aGlzLm1lcm1haWQgPSBuZXcgTWVybWFpZEdyYXBoKHRoaXMpO1xyXG5cdFx0dGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzR3JhcGgodGhpcyk7XHJcblx0XHR0aGlzLnN0cmluZ3MgPSBuZXcgU3RyaW5ncygpO1xyXG5cdFx0dGhpcy5lYXN5YXBpID0gbmV3IEVhc3lBUEkodGhpcy5hcHApO1xyXG5cclxuXHRcdGFkZENvbW1hbmRzKHRoaXMpO1xyXG5cclxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IE5DU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKCdmaWxlLW9wZW4nLCB0aGlzLnVmdW5jX29uX2ZpbGVfb3Blbi5iaW5kKHRoaXMpKVxyXG5cdFx0KTtcclxuXHJcblx0XHQvLyBcdTUyMjBcdTk2NjRcdTY1ODdcdTRFRjZcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbihcclxuXHRcdFx0XCJkZWxldGVcIiwgYXN5bmMgKGZpbGU6IFRGaWxlKSA9PiB7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5jaGFpbi5jaGFpbl9wb3Bfbm9kZShmaWxlKTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLmV4cGxvcmVyLnNvcnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0KSk7XHJcblxyXG5cdFx0Ly8gXHU1MjFCXHU1RUZBXHU2NTg3XHU0RUY2XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAudmF1bHQub24oXHJcblx0XHRcdFwiY3JlYXRlXCIsIGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRhd2FpdCBzbGVlcCg1MDApO1xyXG5cdFx0XHRcdHRoaXMuZXhwbG9yZXIuc29ydCgwLHRydWUpO1xyXG5cdFx0XHR9XHJcblx0XHQpKTtcclxuXHJcblx0XHQvLyBcdTkxQ0RcdTU0N0RcdTU0MERcdTY1ODdcdTRFRjZcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbihcclxuXHRcdFx0XCJyZW5hbWVcIiwgYXN5bmMgKGZpbGU6IFRGaWxlLG9sZFBhdGg6c3RyaW5nKSA9PiB7XHJcblx0XHRcdFx0bGV0IG9sZEZvbGRlciA9IHRoaXMuYXBwLnZhdWx0LmdldEZvbGRlckJ5UGF0aChcclxuXHRcdFx0XHRcdG9sZFBhdGguc2xpY2UoMCxvbGRQYXRoLmxhc3RJbmRleE9mKCcvJykpXHJcblx0XHRcdFx0KVxyXG5cdFx0XHRcdG9sZEZvbGRlciAmJiB0aGlzLmNoYWluLnJlZnJlc2hfZm9sZGVyKG9sZEZvbGRlcik7XHJcblx0XHRcdFx0dGhpcy5jaGFpbi5yZWZyZXNoX3RmaWxlKGZpbGUpO1xyXG5cdFx0XHRcdHRoaXMuZXhwbG9yZXIuc29ydCgpO1xyXG5cdFx0XHRcdHRoaXMuZXhwbG9yZXIuc2V0X2ZpbGVpdGVtX3N0eWxlX29mX2ZpbGUoZmlsZSlcclxuXHRcdFx0fVxyXG5cdFx0KSk7XHJcblxyXG5cdFx0Ly8gXHU1MjFCXHU1RUZBXHU1NDBFXHU3RjZFXHU2NTg3XHU0RUY2XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImZpbGUtbWVudVwiLCAobWVudSwgZmlsZSkgPT4ge1xyXG5cdFx0XHRcdGlmKGZpbGUgaW5zdGFuY2VvZiBURmlsZSl7XHJcblx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcclxuXHRcdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHQuc2V0VGl0bGUodGhpcy5zdHJpbmdzLmZpbGVtZW51X2NyZWF0ZV9uZXh0X25vdGUpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKFwiZmlsZS1wbHVzXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRsZXQgZmlsZW5hbWUgPSBhd2FpdCB0aGlzLmRpYWxvZ19wcm9tcHQoJ0ZpbGUgbmFtZScpO1xyXG5cdFx0XHRcdFx0XHRcdGlmKCFmaWxlbmFtZSl7cmV0dXJufVxyXG5cdFx0XHRcdFx0XHRcdGxldCBkc3QgPSBmaWxlLnBhcmVudD9maWxlLnBhcmVudC5wYXRoICsgJy8nICsgZmlsZW5hbWUrJy5tZCc6ZmlsZW5hbWUrJy5tZCc7XHJcblx0XHRcdFx0XHRcdFx0aWYodGhpcy5jaGFpbi5nZXRfdGZpbGUoZHN0KSl7XHJcblx0XHRcdFx0XHRcdFx0XHRuZXcgTm90aWNlKCdFeGlzdHM6JytmaWxlLnBhdGgsMzAwMCk7XHJcblx0XHRcdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgdGZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUoZHN0LCcnKTtcclxuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuY2hhaW4uY2hhaW5faW5zZXJ0X25vZGVfYWZ0ZXIodGZpbGUsZmlsZSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5lZGl0b3Iuc2V0X2Zyb250bWF0dGVyX2FsaWduX2ZpbGUoXHJcblx0XHRcdFx0XHRcdFx0XHRcdGZpbGUsdGZpbGUsdGhpcy5zZXR0aW5ncy5maWVsZF9vZl9jb25mbHVlbmNlX3RhYl9mb3JtYXRcclxuXHRcdFx0XHRcdFx0XHRcdClcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmNoYWluLm9wZW5fbm90ZSh0ZmlsZSxmYWxzZSxmYWxzZSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFxyXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJmaWxlLW1lbnVcIiwgKG1lbnUsIGZpbGUpID0+IHtcclxuXHRcdFx0XHRpZihmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb249PSdtZCcpe1xyXG5cdFx0XHRcdFx0bWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XHJcblx0XHRcdFx0XHRcdGl0ZW1cclxuXHRcdFx0XHRcdFx0LnNldFRpdGxlKHRoaXMuc3RyaW5ncy5maWxlbWVudV9tb3ZlX2FzX25leHRfbm90ZSlcclxuXHRcdFx0XHRcdFx0LnNldEljb24oXCJoYW5kXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRsZXQgYW5jaG9yID0gYXdhaXQgdGhpcy5jaGFpbi5zdWdndXN0ZXJfbm90ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdGlmKGFuY2hvcil7XHJcblx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmNoYWluLmNoYWluX2luc2VydF9ub2RlX2FmdGVyKGZpbGUsYW5jaG9yKTtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFx1NTQ4Q1x1NTI0RFx1N0Y2RVx1N0IxNFx1OEJCMFx1NzZGOFx1NTQwQ1x1NUM0Mlx1N0VBN1xyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5lZGl0b3Iuc2V0X2Zyb250bWF0dGVyX2FsaWduX2ZpbGUoXHJcblx0XHRcdFx0XHRcdFx0XHRcdGFuY2hvcixmaWxlLHRoaXMuc2V0dGluZ3MuZmllbGRfb2ZfY29uZmx1ZW5jZV90YWJfZm9ybWF0XHJcblx0XHRcdFx0XHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYoZmlsZS5wYXJlbnQhPWFuY2hvci5wYXJlbnQpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRsZXQgZHN0ID0gYW5jaG9yLnBhcmVudC5wYXRoKycvJytmaWxlLm5hbWU7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUoZmlsZSxkc3QpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5leHBsb3Jlci5zb3J0KCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1lbHNlIGlmKGZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKXtcclxuXHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdC5zZXRUaXRsZSh0aGlzLnN0cmluZ3MuZmlsZW1lbnVfbW92ZV9hc19uZXh0X25vdGUpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKFwiaGFuZFwiKVxyXG5cdFx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0bGV0IG5vdGVzID0gZmlsZS5wYXJlbnQ/LmNoaWxkcmVuO1xyXG5cdFx0XHRcdFx0XHRcdGlmKG5vdGVzKXtcclxuXHRcdFx0XHRcdFx0XHRcdG5vdGVzID0gdGhpcy5jaGFpbi5zb3J0X3RmaWxlc19ieV9jaGFpbihub3Rlcyk7XHJcblx0XHRcdFx0XHRcdFx0XHRub3RlcyA9IG5vdGVzLmZpbHRlcigoeDpUQWJzdHJhY3RGaWxlKT0+eCE9ZmlsZSlcclxuXHRcdFx0XHRcdFx0XHRcdGxldCBhbmNob3IgPSBhd2FpdCB0aGlzLmRpYWxvZ19zdWdnZXN0KFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRub3Rlcy5tYXAoKHg6VEFic3RyYWN0RmlsZSk9PnggaW5zdGFuY2VvZiBURmlsZT8nXHVEODNEXHVEQ0MzJyt4LmJhc2VuYW1lOidcdUQ4M0RcdURDQzEnK3gubmFtZSksXHJcblx0XHRcdFx0XHRcdFx0XHRcdG5vdGVzXHJcblx0XHRcdFx0XHRcdFx0XHQpXHJcblx0XHRcdFx0XHRcdFx0XHRpZighYW5jaG9yKXtyZXR1cm59XHJcblx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmNoYWluLm1vdmVfZm9sZGVyX2FzX25leHRfbm90ZShmaWxlLGFuY2hvcik7XHJcblx0XHRcdFx0XHRcdFx0XHRuZXcgTm90aWNlKGAke2FuY2hvciBpbnN0YW5jZW9mIFRGaWxlP2FuY2hvci5iYXNlbmFtZTphbmNob3IubmFtZX0tLT4ke2ZpbGUubmFtZX1gKVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jaGFpbi5yZWZyZXNoX3RmaWxlKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5leHBsb3Jlci5zb3J0KDAsdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZXQgc2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG5cdFx0XHRcdFx0Jy50cmVlLWl0ZW0tc2VsZi5pcy1zZWxlY3RlZCdcclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0bGV0IGl0ZW1zID0gT2JqZWN0LnZhbHVlcyhzZWxlY3RvcikubWFwKCh4OmFueSk9PnguZGF0YXNldD8ucGF0aClcclxuXHRcdFx0XHRsZXQgdGZpbGVzID0gaXRlbXMubWFwKHg9PnRoaXMuY2hhaW4uZ2V0X3RmaWxlKHgpKS5maWx0ZXIoeD0+eC5leHRlbnNpb249PSdtZCcpXHJcblx0XHRcdFx0aWYodGZpbGVzLmxlbmd0aD4xKXtcclxuXHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdC5zZXRUaXRsZSh0aGlzLnN0cmluZ3MuZmlsZW1lbnVfbW92ZV9hc19uZXh0X25vdGVzKVxyXG5cdFx0XHRcdFx0XHQuc2V0SWNvbihcImhhbmRcIilcclxuXHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHRmaWxlcyA9IHRoaXMuY2hhaW4uc29ydF90ZmlsZXNfYnlfY2hhaW4odGZpbGVzKVxyXG5cdFx0XHRcdFx0XHRcdGxldCBub3RlcyA9IHRoaXMuY2hhaW4uZ2V0X2FsbF90ZmlsZXMoKVxyXG5cdFx0XHRcdFx0XHRcdG5vdGVzID0gbm90ZXMuZmlsdGVyKCh4OlRGaWxlKT0+IXRmaWxlcy5jb250YWlucyh4KSlcclxuXHRcdFx0XHRcdFx0XHRsZXQgYW5jaG9yID0gYXdhaXQgdGhpcy5jaGFpbi5zdWdndXN0ZXJfbm90ZShub3RlcylcclxuXHRcdFx0XHRcdFx0XHRpZighYW5jaG9yKXtyZXR1cm59XHJcblx0XHRcdFx0XHRcdFx0Zm9yKGxldCB0ZmlsZSBvZiB0ZmlsZXMpe1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYodGZpbGUucGFyZW50LnBhdGghPWFuY2hvci5wYXJlbnQucGF0aCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGxldCBkc3QgPSBhbmNob3IucGFyZW50LnBhdGgrXCIvXCIrdGZpbGUubmFtZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucmVuYW1lRmlsZSh0ZmlsZSxkc3QpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5jaGFpbi5jaGFpbl9wb3Bfbm9kZSh0ZmlsZSlcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0dGZpbGVzLnVuc2hpZnQoYW5jaG9yKVxyXG5cdFx0XHRcdFx0XHRcdGxldCBhbmNob3JfbmV4dCA9IHRoaXMuY2hhaW4uZ2V0X25leHRfbm90ZShhbmNob3IpO1xyXG5cdFx0XHRcdFx0XHRcdGlmKGFuY2hvcl9uZXh0KXt0ZmlsZXMucHVzaChhbmNob3JfbmV4dCl9XHJcblx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5jaGFpbi5jaGFpbl9jb25jYXRfdGZpbGVzKHRmaWxlcyk7XHJcblx0XHRcdFx0XHRcdFx0Zm9yKGxldCBkc3Qgb2YgdGZpbGVzLnNsaWNlKDEsdGZpbGVzLmxlbmd0aC0xKSl7XHJcblx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXJfYWxpZ25fZmlsZShcclxuXHRcdFx0XHRcdFx0XHRcdFx0YW5jaG9yLGRzdCx0aGlzLnNldHRpbmdzLmZpZWxkX29mX2NvbmZsdWVuY2VfdGFiX2Zvcm1hdFxyXG5cdFx0XHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHQpO1xyXG5cdFx0XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUub24oXHJcblx0XHRcdFx0J2NoYW5nZWQnLGFzeW5jIChmaWxlOiBURmlsZSwgZGF0YTogc3RyaW5nLCBjYWNoZTogQ2FjaGVkTWV0YWRhdGEpPT57XHJcblx0XHRcdFx0XHRpZihmaWxlPT10aGlzLmNoYWluLmN1cnJlbnRfbm90ZSl7XHJcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aGlzLnRpbWVySWQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bGV0IHRpbWVySWQgPSBzZXRUaW1lb3V0KGFzeW5jICgpPT57XHJcblx0XHRcdFx0XHRcdC8vIFx1NjU4N1x1NEVGNlx1NTIxN1x1ODg2OFx1NjM5Mlx1NUU4RlxyXG5cdFx0XHRcdFx0XHRpZihmaWxlLnBhcmVudCl7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5jaGFpbi5jaGlsZHJlbltmaWxlLnBhcmVudC5wYXRoXT0gdGhpcy5jaGFpbi5zb3J0X3RmaWxlc19ieV9jaGFpbihcclxuXHRcdFx0XHRcdFx0XHRcdGZpbGUucGFyZW50LmNoaWxkcmVuXHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR0aGlzLmV4cGxvcmVyLnNvcnQoMCxmYWxzZSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBcdTY1ODdcdTRFRjZcdTU0MERcdTc5RjBcclxuXHRcdFx0XHRcdFx0aWYodGhpcy5zZXR0aW5ncy5maWVsZF9vZl9kaXNwbGF5X3RleHQpe1xyXG5cdFx0XHRcdFx0XHRcdGxldCB0eHQgPSB0aGlzLmV4cGxvcmVyLmdldF9kaXNwbGF5X3RleHQoZmlsZSlcclxuXHRcdFx0XHRcdFx0XHRsZXQgaXRlbXMgPSAodGhpcy5leHBsb3Jlci5maWxlX2V4cGxvcmVyIGFzIGFueSkuZmlsZUl0ZW1zXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5leHBsb3Jlci5fc2V0X2Rpc3BsYXlfdGV4dF8oaXRlbXNbZmlsZS5wYXRoXSx0eHQpXHJcblxyXG5cdFx0XHRcdFx0XHRcdGxldCBjYW52YXMgPSBpdGVtc1tmaWxlLnBhdGguc2xpY2UoMCxmaWxlLnBhdGgubGVuZ3RoLTIpKydjYW52YXMnXVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZXhwbG9yZXIuX3NldF9kaXNwbGF5X3RleHRfKGNhbnZhcyx0eHQpXHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFx1NTk4Mlx1Njc5Q1x1NjYyRlx1NzZFRVx1NUY1NVxyXG5cdFx0XHRcdFx0XHRcdGlmKChmaWxlLnBhcmVudCAmJiBmaWxlLmJhc2VuYW1lPT1maWxlLnBhcmVudC5uYW1lKSB8fCAoZmlsZS5wYXJlbnQgJiYgZmlsZS5wYXJlbnQucGF0aD09Jy8nKSl7XHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgZmllbGQgPSB0aGlzLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIoZmlsZSx0aGlzLnNldHRpbmdzLmZpZWxkX29mX2Rpc3BsYXlfdGV4dClcclxuXHRcdFx0XHRcdFx0XHRcdGxldCBwcmV2ID0gKGZpbGUgYXMgYW55KS5ub3RlX2NoYWluX2Rpc3BsYXlfZmllbGRcclxuXHRcdFx0XHRcdFx0XHRcdGlmKCFwcmV2IHx8IHByZXYhPWZpZWxkKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Zm9yKGxldCBrZXkgaW4gaXRlbXMpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxldCBpdGVtID0gaXRlbXNba2V5XVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxldCBwcGF0aCA9ICcnXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYoZmlsZS5wYXJlbnQucGF0aD09Jy8nKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBwYXRoID09ICcnXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcGF0aCA9IGZpbGUucGFyZW50LnBhdGgrJy8nXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmKGl0ZW0uZmlsZS5wYXRoLnN0YXJ0c1dpdGgocHBhdGgpfHxpdGVtLmZpbGUucGF0aD09ZmlsZS5wYXJlbnQucGF0aCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsZXQgdHh0ID0gdGhpcy5leHBsb3Jlci5nZXRfZGlzcGxheV90ZXh0KGl0ZW0uZmlsZSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuZXhwbG9yZXIuX3NldF9kaXNwbGF5X3RleHRfKGl0ZW0sdHh0KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0KGZpbGUgYXMgYW55KS5ub3RlX2NoYWluX2Rpc3BsYXlfZmllbGQgPSBmaWVsZFxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gXHU2NTg3XHU0RUY2XHU5ODlDXHU4MjcyXHJcblx0XHRcdFx0XHRcdGlmKHRoaXMuc2V0dGluZ3MuZmllbGRfb2ZfYmFja2dyb3VuZF9jb2xvcil7XHJcblx0XHRcdFx0XHRcdFx0bGV0IHN0eWxlID0gYXdhaXQgdGhpcy5leHBsb3Jlci5nZXRfZmlsZWl0ZW1fc3R5bGUoZmlsZSlcclxuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmV4cGxvcmVyLnNldF9maWxlaXRlbV9zdHlsZV9vZl9maWxlKGZpbGUsc3R5bGUpXHJcblx0XHRcdFx0XHRcdFx0bGV0IGl0ZW1zID0gKHRoaXMuZXhwbG9yZXIuZmlsZV9leHBsb3JlciBhcyBhbnkpLmZpbGVJdGVtc1xyXG5cclxuXHRcdFx0XHRcdFx0XHRsZXQgY2FudmFzID0gaXRlbXNbZmlsZS5wYXRoLnNsaWNlKDAsZmlsZS5wYXRoLmxlbmd0aC0yKSsnY2FudmFzJ11cclxuXHRcdFx0XHRcdFx0XHRpZihjYW52YXMpe1xyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5leHBsb3Jlci5zZXRfZmlsZWl0ZW1fc3R5bGVfb2ZfZmlsZShjYW52YXMuZmlsZSxzdHlsZSlcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFx1NTk4Mlx1Njc5Q1x1NjYyRlx1NzZFRVx1NUY1NVxyXG5cdFx0XHRcdFx0XHRcdGlmKChmaWxlLnBhcmVudCAmJiBmaWxlLmJhc2VuYW1lPT1maWxlLnBhcmVudC5uYW1lKSB8fCAoZmlsZS5wYXJlbnQgJiYgZmlsZS5wYXJlbnQucGF0aD09Jy8nKSl7XHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgZmllbGQgPSB0aGlzLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIoZmlsZSx0aGlzLnNldHRpbmdzLmZpZWxkX29mX2JhY2tncm91bmRfY29sb3IpXHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgcHJldiA9IChmaWxlIGFzIGFueSkubm90ZV9jaGFpbl9iZ2NvbG9yXHJcblx0XHRcdFx0XHRcdFx0XHRpZighcHJldiB8fCBwcmV2IT1maWVsZCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGZvcihsZXQga2V5IGluIGl0ZW1zKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsZXQgaXRlbSA9IGl0ZW1zW2tleV1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsZXQgcHBhdGggPSAnJ1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmKGZpbGUucGFyZW50LnBhdGg9PScvJyl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcGF0aCA9PSAnJ1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHBhdGggPSBmaWxlLnBhcmVudC5wYXRoKycvJ1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZihpdGVtLmZpbGUucGF0aC5zdGFydHNXaXRoKHBwYXRoKXx8aXRlbS5maWxlLnBhdGg9PWZpbGUucGFyZW50LnBhdGgpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGV0IHN0eWxlID0gYXdhaXQgdGhpcy5leHBsb3Jlci5nZXRfZmlsZWl0ZW1fc3R5bGUoaXRlbS5maWxlKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5leHBsb3Jlci5zZXRfZmlsZWl0ZW1fc3R5bGVfb2ZfZmlsZShpdGVtLmZpbGUsc3R5bGUpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHQoZmlsZSBhcyBhbnkpLm5vdGVfY2hhaW5fYmdjb2xvciA9IGZpZWxkXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fSw1MDApXHJcblx0XHRcdFx0XHRpZihmaWxlPT10aGlzLmNoYWluLmN1cnJlbnRfbm90ZSl7XHJcblx0XHRcdFx0XHRcdHRoaXMudGltZXJJZCA9IHRoaXMudGltZXJJZFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdH0pXHJcblx0XHQpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJWaWV3KFxyXG5cdFx0XHQnbm90ZS1jb250ZW50LXZpZXcnLFxyXG5cdFx0XHQobGVhZikgPT4gbmV3IE5vdGVDb250ZW50VmlldyhsZWFmLCB0aGlzKVxyXG5cdFx0KTtcclxuXHJcblx0XHRcclxuXHRcdHRoaXMud29yZGNvdXQgPSBuZXcgV29yZENvdW50KHRoaXMsdGhpcy5hcHApO1xyXG5cdFx0dGhpcy50ZXh0YXJlYSA9IG5ldyBOQ1RleHRhcmVhKHRoaXMpO1xyXG5cdFx0dGhpcy5zdGF0dXMgPSAnbG9hZGVkJ1xyXG5cdH1cclxuXHJcblxyXG5cdGFzeW5jIG9udW5sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5leHBsb3Jlci51bnJlZ2lzdGVyKCk7XHJcblx0XHRhd2FpdCB0aGlzLmV4cGxvcmVyLnNvcnQoKTtcclxuXHR9XHJcblx0XHJcblx0YXN5bmMgdWZ1bmNfb25fZmlsZV9vcGVuKGZpbGU6VEZpbGUpe1xyXG5cdFx0aWYodGhpcy5zZXR0aW5ncy5yZWZyZXNoRGF0YVZpZXcpe1xyXG5cdFx0XHQodGhpcy5hcHAgYXMgYW55KS5jb21tYW5kcy5leGVjdXRlQ29tbWFuZEJ5SWQoXHJcblx0XHRcdFx0XCJkYXRhdmlldzpkYXRhdmlldy1mb3JjZS1yZWZyZXNoLXZpZXdzXCJcclxuXHRcdFx0KVxyXG5cdFx0fVxyXG5cdFx0aWYodGhpcy5zZXR0aW5ncy5yZWZyZXNoVGFza3Mpe1xyXG5cdFx0XHRsZXQgdGFyZ2V0ID0gYXdhaXQgKHRoaXMuYXBwIGFzIGFueSkucGx1Z2lucy5nZXRQbHVnaW4oXCJvYnNpZGlhbi10YXNrcy1wbHVnaW5cIik7XHJcblx0XHRcdHRhcmdldCAmJiB0YXJnZXQuY2FjaGUubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuXHRcdH1cclxuXHRcdGlmKHRoaXMuc2V0dGluZ3MuYXV0b19ub3RlY2hhaW4pe1xyXG5cdFx0XHRsZXQgbm90ZXMgPSB0aGlzLmNoYWluLmdldF9icm90aGVycyhmaWxlKTtcclxuXHRcdFx0aWYobm90ZXMubGVuZ3RoPT0wKXtyZXR1cm47fVxyXG5cdFx0XHRsZXQgeGZvbGRlcnMgPSB0aGlzLnNldHRpbmdzLndvcmRjb3VudHhmb2xkZXIuc3BsaXQoJ1xcbicpLmZpbHRlcih4PT54IT0nJyk7XHJcblx0XHRcdGZvcihsZXQgaXRlbSBvZiB4Zm9sZGVycyl7XHJcblx0XHRcdFx0aWYoZmlsZS5wYXRoLnN0YXJ0c1dpdGgoaXRlbSkpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1lbHNlIGlmKGl0ZW09PScvJyl7XHJcblx0XHRcdFx0XHRpZihmaWxlLnBhcmVudD8ucGF0aD09Jy8nKXtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZih0aGlzLmV4cGxvcmVyPy5maWxlX2V4cGxvcmVyKXtcclxuXHRcdFx0XHRub3RlcyA9IHRoaXMuY2hhaW4uc29ydF90ZmlsZXMobm90ZXMsKHRoaXMuZXhwbG9yZXIuZmlsZV9leHBsb3JlciBhcyBhbnkpLnNvcnRPcmRlcik7XHJcblx0XHRcdFx0bm90ZXMgPSB0aGlzLmNoYWluLnNvcnRfdGZpbGVzKG5vdGVzLCdjaGFpbicpO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMuY2hhaW4uY2hhaW5fY29uY2F0X3RmaWxlcyhub3Rlcyk7XHJcblx0XHRcdFx0dGhpcy5leHBsb3Jlci5zb3J0KCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgY2xlYXJfaW5saW5rcyh0ZmlsZT10aGlzLmNoYWluLmN1cnJlbnRfbm90ZSxtb2RlPSdzdWdnZXN0ZXInKXtcclxuXHRcdGlmKHRmaWxlPT1udWxsKXtyZXR1cm47fVxyXG5cdFx0bGV0IG5vdGVzID0gdGhpcy5jaGFpbi5nZXRfaW5saW5rcyh0ZmlsZSk7XHJcblx0XHRpZihub3Rlcy5sZW5ndGgpe1xyXG5cdFx0XHRpZihtb2RlPT09J3N1Z2dlc3Rlcicpe1xyXG5cdFx0XHRcdG1vZGUgPSBhd2FpdCB0aGlzLmRpYWxvZ19zdWdnZXN0KFxyXG5cdFx0XHRcdFx0W1wiZGVsZXRlIGxpbmtzXCIsJ3JlcGxhY2UgbGlua3MnLFwiZGVsZXRlIHBhcmFncmFwaCB3aXRoIGxpbmtzXCIsXSxcclxuXHRcdFx0XHRcdFtbJ2xpbmsnLCdkZWwnXSxbJ2xpbmsnLCdyZXAnXSxbJ3BhcmEnLCdkZWwnXV1cclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCByZWcgPSB0aGlzLmVkaXRvci5yZWdleHBfbGluayh0ZmlsZSxtb2RlWzBdKTtcclxuXHRcdFx0aWYocmVnKXtcclxuXHRcdFx0XHRmb3IobGV0IG5vdGUgb2Ygbm90ZXMpe1xyXG5cdFx0XHRcdFx0bGV0IHRhcmdldDtcclxuXHRcdFx0XHRcdGlmKG1vZGVbMV09PT0ncmVwJyl7XHJcblx0XHRcdFx0XHRcdHRhcmdldD10ZmlsZS5iYXNlbmFtZTtcclxuXHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHR0YXJnZXQ9JydcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuZWRpdG9yLnJlcGxhY2Uobm90ZSxyZWcsdGFyZ2V0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlcGxhY2Vfbm90ZXNfd2l0aF9yZWd4KCl7XHJcblx0XHRsZXQgbm90ZXMgPSBhd2FpdCB0aGlzLmNoYWluLnN1Z2dlc3Rlcl9ub3RlcygpO1xyXG5cdFx0aWYobm90ZXM/Lmxlbmd0aD4wKXtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRsZXQgcmVncyA9IGF3YWl0IHRoaXMuZGlhbG9nX3Byb21wdCgnRW50ZXIgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byByZXBsYWNlLicpO1xyXG5cdFx0XHRcdGlmKHJlZ3M9PW51bGwpe1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZXQgcmVnID0gbmV3IFJlZ0V4cChyZWdzLCdnJyk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0bGV0IHRhcmdldCA9IGF3YWl0IHRoaXMuZGlhbG9nX3Byb21wdCgnRW50ZXIgdGhlIHRhcmdldCBzdHJpbmcuJyk7XHJcblx0XHRcdFx0aWYodGFyZ2V0PT1udWxsKXtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGFyZ2V0ID0gdGFyZ2V0LnJlcGxhY2UoXHJcblx0XHRcdFx0XHQvXFxcXG4vZywnXFxuJ1xyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0Zm9yKGxldCBub3RlIG9mIG5vdGVzKXtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuZWRpdG9yLnJlcGxhY2Uobm90ZSxyZWcsdGFyZ2V0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdFx0XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGFzeW5jIGNtZF9jaGFpbl9pbnNlcnRfbm9kZSgpe1xyXG5cclxuXHRcdGxldCBzZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcblx0XHRcdCcudHJlZS1pdGVtLXNlbGYuaXMtc2VsZWN0ZWQnXHJcblx0XHQpXHJcblx0XHRsZXQgaXRlbXMgPSBPYmplY3QudmFsdWVzKHNlbGVjdG9yKS5tYXAoKHg6YW55KT0+eC5kYXRhc2V0Py5wYXRoKVxyXG5cdFx0bGV0IHRmaWxlcyA9IGl0ZW1zLm1hcCh4PT50aGlzLmNoYWluLmdldF90ZmlsZSh4KSkuZmlsdGVyKHg9PnguZXh0ZW5zaW9uPT0nbWQnKVxyXG5cdFx0aWYodGZpbGVzLmxlbmd0aD4xKXtcclxuXHRcdFx0dGZpbGVzID0gdGhpcy5jaGFpbi5zb3J0X3RmaWxlc19ieV9jaGFpbih0ZmlsZXMpXHJcblx0XHRcdGxldCBub3RlcyA9IHRoaXMuY2hhaW4uZ2V0X2FsbF90ZmlsZXMoKVxyXG5cdFx0XHRub3RlcyA9IG5vdGVzLmZpbHRlcigoeDpURmlsZSk9PiF0ZmlsZXMuY29udGFpbnMoeCkpXHJcblx0XHRcdGxldCBhbmNob3IgPSBhd2FpdCB0aGlzLmNoYWluLnN1Z2d1c3Rlcl9ub3RlKG5vdGVzKVxyXG5cdFx0XHRpZighYW5jaG9yKXtyZXR1cm59XHJcblx0XHRcdGZvcihsZXQgdGZpbGUgb2YgdGZpbGVzKXtcclxuXHRcdFx0XHRpZih0ZmlsZS5wYXJlbnQucGF0aCE9YW5jaG9yLnBhcmVudC5wYXRoKXtcclxuXHRcdFx0XHRcdGxldCBkc3QgPSBhbmNob3IucGFyZW50LnBhdGgrXCIvXCIrdGZpbGUubmFtZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUodGZpbGUsZHN0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5jaGFpbi5jaGFpbl9wb3Bfbm9kZSh0ZmlsZSlcclxuXHRcdFx0fVxyXG5cdFx0XHR0ZmlsZXMudW5zaGlmdChhbmNob3IpXHJcblx0XHRcdGxldCBhbmNob3JfbmV4dCA9IHRoaXMuY2hhaW4uZ2V0X25leHRfbm90ZShhbmNob3IpO1xyXG5cdFx0XHRpZihhbmNob3JfbmV4dCl7dGZpbGVzLnB1c2goYW5jaG9yX25leHQpfVxyXG5cdFx0XHRhd2FpdCB0aGlzLmNoYWluLmNoYWluX2NvbmNhdF90ZmlsZXModGZpbGVzKTtcclxuXHRcdFx0cmV0dXJuXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGxldCBjdXJyID0gdGhpcy5jaGFpbi5jdXJyZW50X25vdGU7XHJcblx0XHRpZihjdXJyPT1udWxsKXtyZXR1cm47fVxyXG5cdFx0bGV0IHNtb2RlID0gKHRoaXMuc3RyaW5ncyBhcyBhbnkpW3RoaXMuc2V0dGluZ3Muc3VnZ2VzdGVyTm90ZXNNb2RlXTtcclxuXHRcdGxldCBub3RlcyA9IGF3YWl0IHRoaXMuY2hhaW4uc3VnZ2VzdGVyX25vdGVzKGN1cnIsZmFsc2Usc21vZGUpO1xyXG5cdFx0aWYoIW5vdGVzKXtyZXR1cm59XHJcblx0XHRub3RlcyA9IHRoaXMuY2hhaW4uc29ydF90ZmlsZXMobm90ZXMsWydtdGltZScsJ3gnXSk7XHJcblx0XHRub3RlcyA9IHRoaXMuY2hhaW4uc29ydF90ZmlsZXNfYnlfY2hhaW4obm90ZXMpO1xyXG5cdFx0Ly9ub3RlcyA9IG5vdGVzLmZpbHRlcihmPT5mIT1jdXJyKTtcclxuXHRcdC8vXHU0RTNBMFx1NjVGNlx1NEU1Rlx1NjYzRVx1NzkzQVx1RkYwQ1x1NTQyNlx1NTIxOVx1NEVFNVx1NEUzQVx1NjYyRmJ1Z1xyXG5cdFx0Ly9pZihub3Rlcy5sZW5ndGg9PTApe3JldHVybjt9XHJcblx0XHRjb25zdCBub3RlID0gYXdhaXQgdGhpcy5kaWFsb2dfc3VnZ2VzdChcclxuXHRcdFx0dGhpcy51dGlscy5hcnJheV9wcmVmaXhfaWQoXHJcblx0XHRcdFx0bm90ZXMubWFwKChmaWxlOlRGaWxlKSA9PiB0aGlzLnRmaWxlX3RvX3N0cmluZyhmaWxlLFtdLFwiXCIpKVxyXG5cdFx0XHQpLCBcclxuXHRcdFx0bm90ZXNcclxuXHRcdCk7IFxyXG5cdFx0XHJcblx0XHRpZighbm90ZSl7cmV0dXJuO31cclxuXHRcdFxyXG5cdFx0bGV0IHNpdGVtcyA9IFtcclxuXHRcdFx0dGhpcy5zdHJpbmdzLml0ZW1faW5zZXJ0X25vZGVfYWZ0ZXIsXHJcblx0XHRcdHRoaXMuc3RyaW5ncy5pdGVtX2luc2VydF9ub2RlX2JlZm9yZSxcclxuXHRcdFx0dGhpcy5zdHJpbmdzLml0ZW1faW5zZXJ0X25vZGVfYXNfaGVhZCxcclxuXHRcdFx0dGhpcy5zdHJpbmdzLml0ZW1faW5zZXJ0X25vZGVfYXNfdGFpbCxcclxuXHRcdFx0dGhpcy5zdHJpbmdzLml0ZW1faW5zZXJ0X2ZvbGRlcl9hZnRlcixcclxuXHRcdF07XHJcblx0XHRsZXQgbW9kZSA9IGF3YWl0IHRoaXMuZGlhbG9nX3N1Z2dlc3QoXHJcblx0XHRcdHRoaXMudXRpbHMuYXJyYXlfcHJlZml4X2lkKHNpdGVtcyksXHJcblx0XHRcdHNpdGVtcyxmYWxzZSx0aGlzLnN0cmluZ3MuaXRlbV9pbnNlcnRfc3VnZ2VzdGVyXHJcblx0XHQpO1xyXG5cdFx0XHJcblx0XHRpZighbW9kZSl7cmV0dXJuO31cclxuXHJcblx0XHRpZihtb2RlPT09dGhpcy5zdHJpbmdzLml0ZW1faW5zZXJ0X25vZGVfYXNfaGVhZCl7XHJcblx0XHRcdGF3YWl0IHRoaXMuY2hhaW4uY2hhaW5faW5zZXJ0X25vZGVfYXNfaGVhZChjdXJyLG5vdGUpO1xyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMuc3RyaW5ncy5pdGVtX2luc2VydF9ub2RlX2FzX3RhaWwpe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmNoYWluLmNoYWluX2luc2VydF9ub2RlX2FzX3RhaWwoY3Vycixub3RlKTtcclxuXHRcdH1lbHNlIGlmKG1vZGU9PT10aGlzLnN0cmluZ3MuaXRlbV9pbnNlcnRfbm9kZV9iZWZvcmUpe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmNoYWluLmNoYWluX2luc2VydF9ub2RlX2JlZm9yZShjdXJyLG5vdGUpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXJfYWxpZ25fZmlsZShcclxuXHRcdFx0XHRub3RlLFxyXG5cdFx0XHRcdGN1cnIsXHJcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5maWVsZF9vZl9jb25mbHVlbmNlX3RhYl9mb3JtYXRcclxuXHRcdFx0KVxyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMuc3RyaW5ncy5pdGVtX2luc2VydF9ub2RlX2FmdGVyKXtcclxuXHRcdFx0YXdhaXQgdGhpcy5jaGFpbi5jaGFpbl9pbnNlcnRfbm9kZV9hZnRlcihjdXJyLG5vdGUpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXJfYWxpZ25fZmlsZShcclxuXHRcdFx0XHRub3RlLFxyXG5cdFx0XHRcdGN1cnIsXHJcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5maWVsZF9vZl9jb25mbHVlbmNlX3RhYl9mb3JtYXRcclxuXHRcdFx0KVxyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMuc3RyaW5ncy5pdGVtX2luc2VydF9mb2xkZXJfYWZ0ZXIpe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmNoYWluLmNoYWluX2luc2VydF9mb2xkZXJfYWZ0ZXIoY3Vycixub3RlKTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdHRmaWxlX3RvX3N0cmluZyh0ZmlsZTpURmlsZSxmaWVsZHM6QXJyYXk8c3RyaW5nPixzZXE6c3RyaW5nKXtcclxuXHRcdGxldCBpdGVtcyA9IG5ldyBBcnJheSgpO1xyXG5cdFx0aWYodGZpbGU9PXRoaXMuY2hhaW4uY3VycmVudF9ub3RlKXtcclxuXHRcdFx0aXRlbXMucHVzaCgnXHVEODNDXHVERkUwJyArIHRmaWxlLmJhc2VuYW1lKVxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGl0ZW1zLnB1c2godGZpbGUuYmFzZW5hbWUpXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGZvcihsZXQgZmllbGQgb2YgZmllbGRzKXtcclxuXHRcdFx0dHJ5e1xyXG5cdFx0XHRcdGl0ZW1zLnB1c2godGhpcy5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKHRmaWxlLGZpZWxkKSk7XHJcblx0XHRcdH1jYXRjaChlcnJvcil7XHJcblx0XHRcdFx0aXRlbXMucHVzaChcIi1cIik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBpdGVtcy5qb2luKHNlcSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBvcGVuX25vdGVfc21hcnRlcigpe1xyXG5cdFx0Ly8gXHU5NEZFXHU1RjBGXHU4QzAzXHU3NTI4XHJcblx0XHRsZXQgY3VyciA9IHRoaXMuY2hhaW4uY3VycmVudF9ub3RlO1xyXG5cdFx0bGV0IG5vdGVzID0gYXdhaXQgdGhpcy5jaGFpbi5zdWdnZXN0ZXJfbm90ZXMoY3VycixmYWxzZSlcclxuXHRcdFxyXG5cdFx0bm90ZXMgPSB0aGlzLmNoYWluLnNvcnRfdGZpbGVzKG5vdGVzLFsnbXRpbWUnLCd4J10pO1xyXG5cdFx0bm90ZXMgPSB0aGlzLmNoYWluLnNvcnRfdGZpbGVzX2J5X2NoYWluKG5vdGVzKTtcclxuXHRcdGlmKG5vdGVzLmxlbmd0aD4wKXtcclxuXHRcdFx0bGV0IG5vdGUgPSBhd2FpdCB0aGlzLmRpYWxvZ19zdWdnZXN0KFxyXG5cdFx0XHRcdHRoaXMudXRpbHMuYXJyYXlfcHJlZml4X2lkKFxyXG5cdFx0XHRcdFx0bm90ZXMubWFwKChmaWxlOlRGaWxlKSA9PiB0aGlzLmNoYWluLnRmaWxlX3RvX3N0cmluZyhmaWxlKSlcclxuXHRcdFx0XHQpLFxyXG5cdFx0XHRcdG5vdGVzXHJcblx0XHRcdClcclxuXHRcdFx0aWYobm90ZSl7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5jaGFpbi5vcGVuX25vdGUobm90ZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0iLCAiaW1wb3J0IHsgdGltZSB9IGZyb20gJ2NvbnNvbGUnO1xyXG5pbXBvcnQgeyBcclxuXHRBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLCBcclxuXHRQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsXHJcblx0VEFic3RyYWN0RmlsZSxcclxuXHRURmlsZSxURm9sZGVyXHJcbn0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgKiBhcyBpbnRlcm5hbCBmcm9tICdzdHJlYW0nO1xyXG5pbXBvcnQgTm90ZUNoYWluUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIE5DRWRpdG9ye1xyXG5cdGFwcDpBcHA7XHJcblx0bnJldHJ5Om51bWJlcjtcclxuXHRwbHVnaW46Tm90ZUNoYWluUGx1Z2luO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihwbHVnaW46Tm90ZUNoYWluUGx1Z2luKXtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdFx0dGhpcy5hcHAgPSB0aGlzLnBsdWdpbi5hcHA7XHJcblx0XHR0aGlzLm5yZXRyeT0xMDtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNldF9mcm9udG1hdHRlcih0ZmlsZTpURmlsZXxzdHJpbmd8QXJyYXk8VEZpbGV8c3RyaW5nPixrZXk6c3RyaW5nLHZhbHVlOmFueSxucmV0cnk9dGhpcy5ucmV0cnkpe1xyXG5cdFx0bGV0IGt2Ontba2V5OnN0cmluZ106c3RyaW5nfSA9IHt9O1xyXG5cdFx0a3Zba2V5XSA9IHZhbHVlO1xyXG5cdFx0bGV0IGZsYWcgPSBhd2FpdCB0aGlzLnNldF9tdWx0aV9mcm9udG1hdHRlcih0ZmlsZSxrdixucmV0cnkpO1xyXG5cdFx0cmV0dXJuIGZsYWc7XHJcblx0fVxyXG5cclxuXHRjaGVja19mcm9udG1hdHRlcih0ZmlsZTpURmlsZSxrdjp7W2tleTpzdHJpbmddOmFueX0pOmJvb2xlYW57XHJcblx0XHR0cnkge1xyXG5cdFx0XHRpZighdGZpbGUpe3JldHVybiBmYWxzZTt9XHJcblx0XHRcdGxldCBtZXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGZpbGUpO1xyXG5cdFx0XHRpZihtZXRhPy5mcm9udG1hdHRlcil7XHJcblx0XHRcdFx0Zm9yKGxldCBrIGluIGt2KXtcclxuXHRcdFx0XHRcdGlmKCEobWV0YS5mcm9udG1hdHRlcltrXT09a3Zba10pKXtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyB3YWl0X2Zyb250bWF0dGVyKHRmaWxlOlRGaWxlLGt2Ontba2V5OnN0cmluZ106YW55fSxucmV0cnk9dGhpcy5ucmV0cnkpOlByb21pc2U8Ym9vbGVhbj57XHJcblx0XHRsZXQgZmxhZyA9IHRoaXMuY2hlY2tfZnJvbnRtYXR0ZXIodGZpbGUsa3YpO1xyXG5cdFx0XHJcblx0XHR3aGlsZSghZmxhZyAmJiBucmV0cnk+MCl7XHJcblx0XHRcdGF3YWl0IHNsZWVwKDUwKTtcclxuXHRcdFx0bnJldHJ5ID0gbnJldHJ5LTE7XHJcblx0XHRcdGZsYWcgPSB0aGlzLmNoZWNrX2Zyb250bWF0dGVyKHRmaWxlLGt2KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmbGFnO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2V0X211bHRpX2Zyb250bWF0dGVyKHRmaWxlOlRGaWxlfHN0cmluZ3xBcnJheTxURmlsZXxzdHJpbmc+LGt2Ontba2V5OnN0cmluZ106YW55fSxucmV0cnk9dGhpcy5ucmV0cnkpOlByb21pc2U8Ym9vbGVhbj57XHJcblx0XHRpZihBcnJheS5pc0FycmF5KHRmaWxlKSl7XHJcblx0XHRcdGZvcihsZXQgaXRlbSBvZiB0ZmlsZSl7XHJcblx0XHRcdFx0dGhpcy5zZXRfbXVsdGlfZnJvbnRtYXR0ZXIoaXRlbSxrdixucmV0cnkpXHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH1cclxuXHRcdGlmKHR5cGVvZih0ZmlsZSk9PSdzdHJpbmcnKXtcclxuXHRcdFx0dGZpbGUgPSB0aGlzLnBsdWdpbi5jaGFpbi5nZXRfdGZpbGUodGZpbGUpXHJcblx0XHR9XHJcblx0XHRpZighdGZpbGUgfHwgISh0ZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSl7XHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0fVxyXG5cdFx0bGV0IGZsYWc9IGZhbHNlXHJcblx0XHRpZihucmV0cnk+MSl7XHJcblx0XHRcdGZsYWcgPSB0aGlzLmNoZWNrX2Zyb250bWF0dGVyKHRmaWxlLGt2KTtcclxuXHRcdH1cclxuXHRcdHdoaWxlKCFmbGFnICYmIG5yZXRyeT4wKXtcclxuXHRcdFx0YXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKHRmaWxlLCAoZm0pID0+e1xyXG5cdFx0XHRcdGZvcihsZXQgayBpbiBrdil7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5lYXN5YXBpLmVkaXRvci5kaWN0X3NldF92YWx1ZShmbSxrLGt2W2tdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRhd2FpdCBzbGVlcCgxMDApO1xyXG5cdFx0XHRucmV0cnkgPSBucmV0cnktMTtcclxuXHRcdFx0ZmxhZyA9IHRoaXMuY2hlY2tfZnJvbnRtYXR0ZXIodGZpbGUsa3YpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZsYWc7XHJcblx0fVxyXG5cclxuXHRnZXRfZnJvbnRtYXR0ZXIodGZpbGU6VEZpbGUsa2V5OnN0cmluZyl7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRpZighdGZpbGUpe3JldHVybiBudWxsO31cclxuXHRcdFx0bGV0IG1ldGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0ZmlsZSk7XHJcblx0XHRcdGlmKG1ldGE/LmZyb250bWF0dGVyKXtcclxuXHRcdFx0XHRpZihtZXRhLmZyb250bWF0dGVyW2tleV0pe1xyXG5cdFx0XHRcdFx0cmV0dXJuIG1ldGEuZnJvbnRtYXR0ZXJba2V5XVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZXQga2V5cyA9IGtleS5zcGxpdCgnLicpXHJcblx0XHRcdFx0bGV0IGNmbSA9IG1ldGEuZnJvbnRtYXR0ZXJcclxuXHRcdFx0XHRmb3IobGV0IGsgb2Yga2V5cyl7XHJcblx0XHRcdFx0XHRsZXQgaXRlbXMgPWsubWF0Y2goL14oLio/KShcXFstP1xcZCtcXF0pPyQvKVxyXG5cdFx0XHRcdFx0aWYoIWl0ZW1zKXtyZXR1cm4gbnVsbH1cclxuXHRcdFx0XHRcdGlmKGl0ZW1zWzFdKXtcclxuXHRcdFx0XHRcdFx0Y2ZtID0gY2ZtW2l0ZW1zWzFdXVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYoIWNmbSl7cmV0dXJuIG51bGx9XHJcblx0XHRcdFx0XHRpZihBcnJheS5pc0FycmF5KGNmbSkgJiYgaXRlbXNbMl0pe1xyXG5cdFx0XHRcdFx0XHRsZXQgaSA9IHBhcnNlSW50KGl0ZW1zWzJdLnNsaWNlKDEsaXRlbXNbMl0ubGVuZ3RoLTEpKVxyXG5cdFx0XHRcdFx0XHRpZihpPDApe1xyXG5cdFx0XHRcdFx0XHRcdGkgPSBpK2NmbS5sZW5ndGhcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRjZm0gPSBjZm1baV1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGNmbVxyXG5cdFx0XHR9XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldF92YXVsdF9uYW1lKCl7XHJcblx0XHRsZXQgaXRlbXMgPSAodGhpcy5wbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5iYXNlUGF0aC5zcGxpdCgnXFxcXCcpXHJcblx0XHRpdGVtcyA9IGl0ZW1zW2l0ZW1zLmxlbmd0aC0xXS5zcGxpdCgnLycpXHJcblx0XHRyZXR1cm4gaXRlbXNbaXRlbXMubGVuZ3RoLTFdXHJcblx0fVxyXG5cclxuXHRnZXRfZnJvbnRtYXR0ZXJfY29uZmlnKHRmaWxlOlRBYnN0cmFjdEZpbGUsa2V5OnN0cmluZyl7XHJcblx0XHRpZih0ZmlsZSBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHRcdFx0aWYodGZpbGUuZXh0ZW5zaW9uPT0nbWQnKXtcclxuXHRcdFx0XHRsZXQgY29uZmlnID0gdGhpcy5nZXRfZnJvbnRtYXR0ZXIodGZpbGUsa2V5KVxyXG5cdFx0XHRcdGlmKGNvbmZpZyl7cmV0dXJuIGNvbmZpZ31cclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0bGV0IGZpbGUgPSB0aGlzLnBsdWdpbi5jaGFpbi5nZXRfdGZpbGUoXHJcblx0XHRcdFx0XHR0ZmlsZS5wYXRoLnNsaWNlKDAsdGZpbGUucGF0aC5sZW5ndGgtdGZpbGUuZXh0ZW5zaW9uLmxlbmd0aCkrJ21kJ1xyXG5cdFx0XHRcdClcclxuXHRcdFx0XHRpZihmaWxlKXtcclxuXHRcdFx0XHRcdGxldCBjb25maWcgPSB0aGlzLmdldF9mcm9udG1hdHRlcihmaWxlLGtleSlcclxuXHRcdFx0XHRcdGlmKGNvbmZpZyl7cmV0dXJuIGNvbmZpZ31cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bGV0IGZpbGUgPSB0aGlzLnBsdWdpbi5jaGFpbi5nZXRfdGZpbGUodGZpbGUucGF0aCsnLycrdGZpbGUubmFtZSsnLm1kJylcclxuXHRcdFx0aWYoZmlsZSl7XHJcblx0XHRcdFx0bGV0IGNvbmZpZyA9IHRoaXMuZ2V0X2Zyb250bWF0dGVyKGZpbGUsa2V5KydfZm9sZGVyJylcclxuXHRcdFx0XHRpZihjb25maWcpe3JldHVybiBjb25maWd9XHJcblx0XHRcdFx0Y29uZmlnID0gdGhpcy5nZXRfZnJvbnRtYXR0ZXIoZmlsZSxrZXkpXHRcdFx0XHRcclxuXHRcdFx0XHRpZihjb25maWcpe3JldHVybiBjb25maWd9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0bGV0IGRpciA9IHRmaWxlLnBhcmVudFxyXG5cdFx0d2hpbGUoZGlyKXtcclxuXHRcdFx0bGV0IGNmaWxlO1xyXG5cdFx0XHRpZihkaXIucGFyZW50KXtcclxuXHRcdFx0XHRjZmlsZSA9IHRoaXMucGx1Z2luLmNoYWluLmdldF90ZmlsZShcclxuXHRcdFx0XHRcdGRpci5wYXRoKycvJytkaXIubmFtZSsnLm1kJ1xyXG5cdFx0XHRcdClcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0Y2ZpbGUgPSB0aGlzLnBsdWdpbi5jaGFpbi5nZXRfdGZpbGUoXHJcblx0XHRcdFx0XHR0aGlzLmdldF92YXVsdF9uYW1lKClcclxuXHRcdFx0XHQpXHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IGNvbmZpZyA9IHRoaXMuZ2V0X2Zyb250bWF0dGVyKGNmaWxlLGtleSlcclxuXHRcdFx0aWYoY29uZmlnKXtyZXR1cm4gY29uZmlnfVxyXG5cdFx0XHRkaXIgPSBkaXIucGFyZW50XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbFxyXG5cclxuXHR9XHJcblx0cmVnZXhwX2xpbmsodGZpbGU6VEZpbGUsbW9kZTpzdHJpbmcpe1xyXG5cdFx0Ly9bW25vdGV8fGFsaWFzXV1cclxuXHRcdGlmKG1vZGU9PT0nbGluaycpe1xyXG5cdFx0XHRyZXR1cm4gbmV3IFJlZ0V4cChgXFxcXFtcXFxcWyR7dGZpbGUuYmFzZW5hbWV9XFxcXHw/LipcXFxcXVxcXFxdYCwnZycpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvL3BhcmFncmFwaFxyXG5cdFx0aWYobW9kZT09PSdwYXJhJyl7XHJcblx0XHRcdHJldHVybiBuZXcgUmVnRXhwKGAuKlxcXFxbXFxcXFske3RmaWxlLmJhc2VuYW1lfVxcXFx8Py4qXFxcXF1cXFxcXS4qYCwnZycpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcmVwbGFjZSh0ZmlsZTpURmlsZSxyZWdleDphbnksdGFyZ2V0OnN0cmluZyl7XHJcblx0XHRpZih0eXBlb2YgcmVnZXggPT09ICdzdHJpbmcnKXtcclxuXHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQucHJvY2Vzcyh0ZmlsZSwoZGF0YSk9PntcclxuXHRcdFx0XHRpZihkYXRhLmluZGV4T2YocmVnZXgpPi0xKXtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhLnJlcGxhY2UocmVnZXgsIHRhcmdldCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHR9KVxyXG5cdFx0fWVsc2UgaWYocmVnZXggaW5zdGFuY2VvZiBSZWdFeHApe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5wcm9jZXNzKHRmaWxlLChkYXRhKT0+e1xyXG5cdFx0XHRcdGlmKGRhdGEubWF0Y2gocmVnZXgpKXtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhLnJlcGxhY2UocmVnZXgsIHRhcmdldCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcmVtb3ZlX21ldGFkYXRhKHRmaWxlOlRGaWxlfHN0cmluZyl7XHJcblx0XHRpZih0ZmlsZSBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHRcdFx0dGZpbGUgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQuY2FjaGVkUmVhZCh0ZmlsZSk7XHJcblx0XHR9XHJcblx0XHRpZih0eXBlb2YodGZpbGUpIT0nc3RyaW5nJyl7XHJcblx0XHRcdHJldHVybiAnJ1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBoZWFkZXJSZWdleCA9IC9eLS0tXFxzKihbXFxzXFxTXSo/KVxccyotLS0vXHJcblx0XHRsZXQgbWF0Y2ggPSBoZWFkZXJSZWdleC5leGVjKHRmaWxlKTtcclxuXHRcdGlmKG1hdGNoKXtcclxuXHRcdFx0dGZpbGUgPSB0ZmlsZS5zbGljZShtYXRjaFswXS5sZW5ndGgpLnRyaW0oKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0ZmlsZTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGV4dHJhY3RfY29kZV9ibG9jayh0ZmlsZTpURmlsZXxzdHJpbmcsYnR5cGU6c3RyaW5nKXtcclxuXHJcblx0XHRpZih0ZmlsZSBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHRcdFx0dGZpbGUgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQuY2FjaGVkUmVhZCh0ZmlsZSk7XHJcblx0XHR9XHJcblx0XHRpZih0eXBlb2YodGZpbGUpIT0nc3RyaW5nJyl7XHJcblx0XHRcdHJldHVybiAnJ1xyXG5cdFx0fVxyXG5cdFx0bGV0IGNzc0NvZGVCbG9ja3MgPSBbXTtcclxuXHRcdGxldCByZWcgPSBuZXcgUmVnRXhwKGBcXGBcXGBcXGAke2J0eXBlfVxcXFxuKFtcXFxcc1xcXFxTXSo/KVxcblxcYFxcYFxcYGAsJ2cnKTs7XHJcblx0XHRsZXQgbWF0Y2hlcztcclxuXHRcdHdoaWxlICgobWF0Y2hlcyA9IHJlZy5leGVjKHRmaWxlKSkgIT09IG51bGwpIHtcclxuXHRcdFx0Y3NzQ29kZUJsb2Nrcy5wdXNoKG1hdGNoZXNbMV0udHJpbSgpKTsgLy8gRXh0cmFjdCB0aGUgQ1NTIGNvZGUgd2l0aG91dCBiYWNrdGlja3NcclxuXHRcdH1cclxuXHRcdHJldHVybiBjc3NDb2RlQmxvY2tzO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgZXh0cmFjdF90ZW1wbGF0ZXJfYmxvY2sodGZpbGU6VEZpbGV8c3RyaW5nLHJlZz0vPCVcXCpcXHMqKFtcXHNcXFNdKj8pXFxzKi0/JT4vZyl7XHJcblx0XHRpZih0ZmlsZSBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHRcdFx0dGZpbGUgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQuY2FjaGVkUmVhZCh0ZmlsZSk7XHJcblx0XHR9XHJcblx0XHRpZih0eXBlb2YodGZpbGUpIT0nc3RyaW5nJyl7XHJcblx0XHRcdHJldHVybiAnJ1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBjc3NDb2RlQmxvY2tzID0gW107XHJcblx0XHRsZXQgbWF0Y2hlcztcclxuXHRcdHdoaWxlICgobWF0Y2hlcyA9IHJlZy5leGVjKHRmaWxlKSkgIT09IG51bGwpIHtcclxuXHRcdFx0Y3NzQ29kZUJsb2Nrcy5wdXNoKG1hdGNoZXNbMF0udHJpbSgpKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0bGV0IHRwbHMgPSBhd2FpdCB0aGlzLmV4dHJhY3RfY29kZV9ibG9jayh0ZmlsZSwnanMgLy90ZW1wbGF0ZXInKTtcclxuXHRcdGZvcihsZXQgdHBsIG9mIHRwbHMpe1xyXG5cdFx0XHRjc3NDb2RlQmxvY2tzLnB1c2goYDwlKlxcbiR7dHBsfVxcbi0lPmApXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNzc0NvZGVCbG9ja3M7XHJcblx0fVxyXG5cclxuXHRhc3luYyBleHRyYWN0X3lhbWxfYmxvY2sodGZpbGU6VEZpbGV8c3RyaW5nKXtcclxuXHRcdFxyXG5cdFx0aWYodGZpbGUgaW5zdGFuY2VvZiBURmlsZSl7XHJcblx0XHRcdHRmaWxlID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmNhY2hlZFJlYWQodGZpbGUpO1xyXG5cdFx0fVxyXG5cdFx0aWYodHlwZW9mKHRmaWxlKSE9J3N0cmluZycpe1xyXG5cdFx0XHRyZXR1cm4gJydcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgaGVhZGVyUmVnZXggPSAvXi0tLVxccyooW1xcc1xcU10qPylcXHMqLS0tL1xyXG5cdFx0bGV0IG1hdGNoID0gaGVhZGVyUmVnZXguZXhlYyh0ZmlsZSk7XHJcbiAgICAgICAgaWYobWF0Y2gpe1xyXG5cdFx0XHRyZXR1cm4gbWF0Y2hbMF1cclxuICAgICAgICB9XHJcblx0XHRyZXR1cm4gJydcclxuXHR9XHJcblxyXG5cdF9leHRyYWN0X2Jsb2NrX2lkXyhwYXJhOnN0cmluZyl7XHJcblx0XHRsZXQgcmVnID0gL1xccytcXF5bYS16QS1aMC05XStcXHI/XFxuPyQvXHJcblx0XHRsZXQgbWF0Y2ggPSByZWcuZXhlYyhwYXJhKVxyXG5cdFx0aWYobWF0Y2gpe1xyXG5cdFx0XHRyZXR1cm4gbWF0Y2hbMF0udHJpbSgpXHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0cmV0dXJuICcnXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRfZ2VuZXJhdGVfcmFuZG9tX3N0cmluZ18obGVuZ3RoOm51bWJlcikge1xyXG5cdFx0bGV0IGNoYXJhY3RlcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xyXG5cdFx0bGV0IHJlc3VsdCA9ICcnO1xyXG5cdFxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzLmxlbmd0aCk7XHJcblx0XHRcdHJlc3VsdCArPSBjaGFyYWN0ZXJzW3JhbmRvbUluZGV4XTtcclxuXHRcdH1cclxuXHRcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRhc3luYyBleHRyYWN0X2FsbF9ibG9ja3ModGZpbGU6VEZpbGV8c3RyaW5nKXtcclxuXHRcdFxyXG5cdFx0aWYodGZpbGUgaW5zdGFuY2VvZiBURmlsZSl7XHJcblx0XHRcdHRmaWxlID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmNhY2hlZFJlYWQodGZpbGUpO1xyXG5cdFx0fVxyXG5cdFx0aWYodHlwZW9mKHRmaWxlKSE9J3N0cmluZycpe1xyXG5cdFx0XHRyZXR1cm4gJydcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgY3R4ID0gdGZpbGU7XHJcblx0XHRsZXQgYmxvY2tzID0gW107XHJcblxyXG5cdFx0bGV0IGhlYWQgPSBhd2FpdCB0aGlzLnBsdWdpbi5lZGl0b3IuZXh0cmFjdF95YW1sX2Jsb2NrKGN0eCk7XHJcblx0XHRpZihoZWFkIT0nJyl7XHJcblx0XHRcdGJsb2Nrcy5wdXNoKFsnWUFNTCcsaGVhZF0pXHJcblx0XHRcdGN0eD1jdHguc2xpY2UoaGVhZC5sZW5ndGgpXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGt2Z2V0czp7W2tleTpzdHJpbmddOmFueX0gPSB7XHJcblx0XHRcdCdcdTdBN0FcdTc2N0RcdTZCQjVcdTg0M0QnOi9eKFxccypcXG4pKi8sXHJcblx0XHRcdCdcdTRFRTNcdTc4MDFcdTU3NTcnOiAvXlsgXFx0XSpgYGBbXFxzXFxTXSo/XFxuWyBcXHRdKmBgYFsgXFx0XSpcXG4oXFxzKlxcXlthLXpBLVowLTldK1xccj9bXFxuJF0pPy8sXHJcblx0XHRcdCd0cGxcdTRFRTNcdTc4MDFcdTU3NTcnOi9ePCVcXCpbXFxzXFxTXSo/XFxuLT9cXCo/JT5bIFxcdF0qXFxuKFxccytcXF5bYS16QS1aMC05XStcXHI/W1xcbiRdKT8vLFxyXG5cdFx0XHQnXHU0RUZCXHU1MkExJzogL15bIFxcdF0qLSBcXFsuXFxdLipcXG4/KFxccytcXF5bYS16QS1aMC05XStcXHI/W1xcbiRdKT8vLFxyXG5cdFx0XHQnXHU2NUUwXHU1RThGXHU1MjE3XHU4ODY4JzogL15bIFxcdF0qLSAuKlxcbj8oXFxzK1xcXlthLXpBLVowLTldK1xccj9bXFxuJF0pPy8sXHJcblx0XHRcdCdcdTY3MDlcdTVFOEZcdTUyMTdcdTg4NjgnOiAvXlsgXFx0XSpcXGRcXC4gLipcXG4/KFxccytbIFxcdF0qXFxeW2EtekEtWjAtOV0rXFxyP1tcXG4kXSk/LyxcclxuXHRcdFx0J1x1NUYxNVx1NzUyOCc6IC9eKD4uKlxcbikrKFxccypcXF5bYS16QS1aMC05XStcXHI/W1xcbiRdKT8vLFxyXG5cdFx0XHQnXHU2ODA3XHU5ODk4JzogL14jKyAuKlxcbihcXHMqXFxeW2EtekEtWjAtOV0rXFxyP1tcXG4kXSk/LyxcclxuXHRcdFx0J1x1NkJCNVx1ODQzRCc6IC9eKC4qXFxuPykoXFxzKlxcXlthLXpBLVowLTldK1xccj9bXFxuJF0pPy9cclxuXHRcdH1cclxuXHRcdHdoaWxlKGN0eC5sZW5ndGg+MCl7XHJcblx0XHRcdGxldCBmbGFnID0gdHJ1ZVxyXG5cdFx0XHRmb3IobGV0IGtleSBvZiBPYmplY3Qua2V5cyhrdmdldHMpKXtcclxuXHRcdFx0XHRsZXQgcmVnID0ga3ZnZXRzW2tleV07XHJcblx0XHRcdFx0bGV0IG1hdGNoID0gcmVnLmV4ZWMoY3R4KTtcclxuXHRcdFx0XHRpZihtYXRjaCl7XHJcblx0XHRcdFx0XHRsZXQgY3VyciA9IG1hdGNoWzBdO1xyXG5cdFx0XHRcdFx0aWYoY3Vyci5sZW5ndGg+MCl7XHJcblx0XHRcdFx0XHRcdGxldCBiaWQgPSB0aGlzLl9leHRyYWN0X2Jsb2NrX2lkXyhjdXJyKVxyXG5cdFx0XHRcdFx0XHRpZihrZXk9PSdcdTZCQjVcdTg0M0QnICYmIGJsb2Nrcy5sZW5ndGg+MCAmJiBibG9ja3NbYmxvY2tzLmxlbmd0aC0xXVswXT09J1x1NkJCNVx1ODQzRCcpe1xyXG5cdFx0XHRcdFx0XHRcdGJsb2Nrc1tibG9ja3MubGVuZ3RoLTFdWzFdID0gYmxvY2tzW2Jsb2Nrcy5sZW5ndGgtMV1bMV0rY3VyclxyXG5cdFx0XHRcdFx0XHRcdGJsb2Nrc1tibG9ja3MubGVuZ3RoLTFdWzJdID0gYmlkXHJcblx0XHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHRcdGJsb2Nrcy5wdXNoKFtrZXksY3VycixiaWRdKVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGZsYWcgPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRjdHg9Y3R4LnNsaWNlKGN1cnIubGVuZ3RoKVxyXG5cdFx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZihmbGFnKXtcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoY3R4Lmxlbmd0aD4wKXtcclxuXHRcdFx0bGV0IGJpZCA9IHRoaXMuX2V4dHJhY3RfYmxvY2tfaWRfKGN0eClcclxuXHRcdFx0YmxvY2tzLnB1c2goWydcdTZCQjVcdTg0M0QnLGN0eCxiaWRdKVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGJsb2Nrc1xyXG5cdH1cclxuXHJcblx0YXN5bmMgYXBwZW5kX2Jsb2NrX2lkcyh0ZmlsZTpURmlsZSl7XHJcblx0XHRsZXQgYmxvY2tzID0gYXdhaXQgdGhpcy5leHRyYWN0X2FsbF9ibG9ja3ModGZpbGUpO1xyXG5cdFx0bGV0IGl0ZW1zID0gW11cclxuXHRcdGZvcihsZXQgYmxvY2sgb2YgYmxvY2tzKXtcclxuXHRcdFx0aWYoWydcdTdBN0FcdTc2N0RcdTZCQjVcdTg0M0QnLCdZQU1MJ10uY29udGFpbnMoYmxvY2tbMF0pKXtcclxuXHRcdFx0XHRpdGVtcy5wdXNoKGJsb2NrWzFdKVxyXG5cdFx0XHR9ZWxzZSBpZighYmxvY2tbMl0pe1xyXG5cdFx0XHRcdGxldCBiaWQgPSB0aGlzLl9nZW5lcmF0ZV9yYW5kb21fc3RyaW5nXyg2KVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKFsnXHU0RUZCXHU1MkExJywnXHU2NUUwXHU1RThGXHU1MjE3XHU4ODY4JywnXHU2NzA5XHU1RThGXHU1MjE3XHU4ODY4J10uY29udGFpbnMoYmxvY2tbMF0pKXtcclxuXHRcdFx0XHRcdGl0ZW1zLnB1c2goYmxvY2tbMV0uc2xpY2UoMCwtMSkrJyBeJytiaWQrJ1xcbicpXHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRpZihibG9ja1sxXS5lbmRzV2l0aCgnXFxuJykpe1xyXG5cdFx0XHRcdFx0XHRpdGVtcy5wdXNoKGJsb2NrWzFdKydeJytiaWQrJ1xcbicpXHJcblx0XHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdFx0aXRlbXMucHVzaChibG9ja1sxXSsnXFxuXicrYmlkKydcXG4nKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0aXRlbXMucHVzaChibG9ja1sxXSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0bGV0IHJlcyA9IGl0ZW1zLmpvaW4oJycpXHJcblx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5tb2RpZnkodGZpbGUscmVzKVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlbW92ZV9ibG9ja19pZHModGZpbGU6VEZpbGUpe1xyXG5cdFx0bGV0IGJsb2NrcyA9IGF3YWl0IHRoaXMuZXh0cmFjdF9hbGxfYmxvY2tzKHRmaWxlKTtcclxuXHRcdGxldCBpdGVtcyA9IFtdXHJcblx0XHRmb3IobGV0IGJsb2NrIG9mIGJsb2Nrcyl7XHJcblx0XHRcdGlmKFsnXHU3QTdBXHU3NjdEXHU2QkI1XHU4NDNEJywnWUFNTCddLmNvbnRhaW5zKGJsb2NrWzBdKSl7XHJcblx0XHRcdFx0aXRlbXMucHVzaChibG9ja1sxXSlcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0bGV0IHJlZyA9IC9cXHMrXFxeW2EtekEtWjAtOV0rXFxyP1xcbj8kL1xyXG5cdFx0XHRcdGxldCBtYXRjaCA9IHJlZy5leGVjKGJsb2NrWzFdKVxyXG5cdFx0XHRcdGlmKG1hdGNoKXtcclxuXHRcdFx0XHRcdGl0ZW1zLnB1c2goYmxvY2tbMV0ucmVwbGFjZShyZWcsJ1xcbicpKVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aXRlbXMucHVzaChibG9ja1sxXSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGxldCByZXMgPSBpdGVtcy5qb2luKCcnKVxyXG5cdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KHRmaWxlLHJlcylcclxuXHRcdHJldHVybiByZXM7XHJcblx0fVxyXG5cclxuXHRhc3luYyBnZXRfY3VycmVudF9zZWN0aW9uKCl7XHJcblx0XHRsZXQgdmlldyA9ICh0aGlzLmFwcC53b3Jrc3BhY2UgYXMgYW55KS5nZXRBY3RpdmVGaWxlVmlldygpXHJcblx0XHRsZXQgZWRpdG9yID0gdmlldy5lZGl0b3I7XHJcblx0XHRsZXQgdGZpbGUgPSB2aWV3LmZpbGU7XHJcblx0XHRpZighdmlldyB8fCAhZWRpdG9yIHx8ICF0ZmlsZSl7cmV0dXJuIG51bGx9XHJcblx0XHRsZXQgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG5cdFx0bGV0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGZpbGUpXHJcblx0XHRpZighY2FjaGUpe3JldHVybn1cclxuXHRcdGlmKCFjdXJzb3Ipe1xyXG5cdFx0XHRsZXQgY3R4ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY2FjaGVkUmVhZCh0ZmlsZSk7XHJcblx0XHRcdGxldCBpdGVtcyA9IGNhY2hlPy5zZWN0aW9ucz8ubWFwKFxyXG5cdFx0XHRcdHNlY3Rpb249PmN0eC5zbGljZShzZWN0aW9uLnBvc2l0aW9uLnN0YXJ0Lm9mZnNldCxzZWN0aW9uLnBvc2l0aW9uLmVuZC5vZmZzZXQpXHJcblx0XHRcdClcclxuXHRcdFx0aWYoIWl0ZW1zKXtyZXR1cm4gbnVsbH1cclxuXHRcdFx0bGV0IHNlY3Rpb24gPSBhd2FpdCB0aGlzLnBsdWdpbi5kaWFsb2dfc3VnZ2VzdChpdGVtcyxjYWNoZS5zZWN0aW9ucylcclxuXHRcdFx0cmV0dXJuIHNlY3Rpb25cclxuXHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bGV0IHNlY3Rpb25zID0gY2FjaGU/LnNlY3Rpb25zPy5maWx0ZXIoXHJcblx0XHRcdFx0eD0+e3JldHVybiB4LnBvc2l0aW9uLnN0YXJ0LmxpbmU8PWN1cnNvci5saW5lICYmIHgucG9zaXRpb24uZW5kLmxpbmU+PWN1cnNvci5saW5lfVxyXG5cdFx0XHQpWzBdXHJcblx0XHRcdHJldHVybiBzZWN0aW9uc1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgc2V0X2Zyb250bWF0dGVyX2FsaWduX2ZpbGUoc3JjOlRGaWxlLGRzdDpURmlsZSxmaWVsZDpzdHJpbmcpe1xyXG5cdFx0aWYoZmllbGQpe1xyXG5cdFx0XHRsZXQgdmFsdWUgPSB0aGlzLmdldF9mcm9udG1hdHRlcihzcmMsZmllbGQpO1xyXG5cdFx0XHRpZih2YWx1ZSl7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5zZXRfZnJvbnRtYXR0ZXIoZHN0LGZpZWxkLHZhbHVlLDEpXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbiIsICJcclxuaW1wb3J0IHsgXHJcblx0QXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgXHJcblx0UGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLG1vbWVudCxNYXJrZG93blJlbmRlcmVyLENvbXBvbmVudCxcclxuXHRUQWJzdHJhY3RGaWxlLFxyXG5cdFRGaWxlLFRGb2xkZXJcclxufSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbXBvcnQgTm90ZUNoYWluUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XHJcbmltcG9ydCB7TkNFZGl0b3J9IGZyb20gJy4vTkNFZGl0b3InO1xyXG5pbXBvcnQge2dldF90cF9mdW5jfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHtOb3RlQ29udGVudE1vZGFsLE5vdGVFZGl0b3JNb2RhbH0gZnJvbSAnLi9OQ01vZGFsJ1xyXG5pbXBvcnQge05vdGVDb250ZW50Vmlld30gZnJvbSAnLi9OQ1ZpZXcnXHJcbmltcG9ydCB7IHN0cmluZ3MgfSBmcm9tICcuL3N0cmluZ3MnO1xyXG5pbXBvcnQgeyBvZmYgfSBmcm9tICdwcm9jZXNzJztcclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIE5vdGVDaGFpbntcclxuXHRwbHVnaW46Tm90ZUNoYWluUGx1Z2luO1xyXG5cdGFwcDpBcHA7XHJcblx0cHJldjpzdHJpbmc7XHJcblx0bmV4dDpzdHJpbmc7XHJcblx0ZWRpdG9yOk5DRWRpdG9yO1xyXG5cdGNoaWxkcmVuOntba2V5OnN0cmluZ106YW55fTtcclxuXHROb3RlRWRpdG9yTW9kYWw6YW55XHJcblxyXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4sZWRpdG9yOk5DRWRpdG9yLHByZXY9XCJQcmV2Tm90ZVwiLG5leHQ9XCJOZXh0Tm90ZVwiKSB7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMuYXBwID0gcGx1Z2luLmFwcDtcclxuXHRcdGlmKGVkaXRvcil7XHJcblx0XHRcdHRoaXMuZWRpdG9yID0gZWRpdG9yO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHRoaXMuZWRpdG9yID0gbmV3IE5DRWRpdG9yKHBsdWdpbik7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHRoaXMuTm90ZUVkaXRvck1vZGFsID0gTm90ZUVkaXRvck1vZGFsXHJcblx0XHRcclxuXHRcdHRoaXMucHJldiA9IHByZXY7XHJcblx0XHR0aGlzLm5leHQgPSBuZXh0O1xyXG5cdFx0dGhpcy5pbml0X2NoaWxkcmVuKCk7XHJcblx0fVxyXG5cclxuICAgIGFzeW5jIG9wZW5fbm90ZV9pbl9tb2RhbChub3RlUGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbGV0IGZpbGUgPSB0aGlzLmdldF90ZmlsZShub3RlUGF0aCk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuICAgICAgICAgICAgICAgIGxldCBtb2RhbCA9IG5ldyBOb3RlQ29udGVudE1vZGFsKHRoaXMuYXBwLCBjb250ZW50LCB0aGlzLnBsdWdpbixmaWxlLnBhdGgpO1xyXG5cdFx0XHRcdG1vZGFsLm9wZW4oKTtcclxuXHRcdFx0XHRyZXR1cm4gbW9kYWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IG1vZGFsID0gbmV3IE5vdGVDb250ZW50TW9kYWwodGhpcy5hcHAsIG5vdGVQYXRoLCB0aGlzLnBsdWdpbiwnJyk7XHJcblx0XHRcdFx0bW9kYWwub3BlbigpO1xyXG5cdFx0XHRcdHJldHVybiBtb2RhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yIG9wZW5pbmcgbm90ZSBpbiBtb2RhbDogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblx0YXN5bmMgb3Blbl9ub3RlX2luX3ZpZXcobm90ZVBhdGg6IHN0cmluZykge1xyXG5cdFx0dHJ5IHtcclxuXHJcblx0XHRcdGxldCBjb250ZW50ICA9ICcnO1xyXG5cdFx0XHRsZXQgc291cmNlUGF0aCA9ICcnO1xyXG4gICAgICAgICAgICBsZXQgZmlsZSA9IHRoaXMuZ2V0X3RmaWxlKG5vdGVQYXRoKTtcclxuICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XHJcblx0XHRcdFx0c291cmNlUGF0aCA9IG5vdGVQYXRoO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cdFx0XHRcdGNvbnRlbnQgPSBub3RlUGF0aDtcclxuICAgICAgICAgICAgfVxyXG5cdFx0XHRsZXQgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpOyAvLyBcdTUzRjNcdTRGQTdcdTYyNTNcdTVGMDBcclxuXHRcdFx0aWYoIWxlYWYpe3JldHVybn1cclxuXHRcdFx0YXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xyXG5cdFx0XHRcdHR5cGU6ICdub3RlLWNvbnRlbnQtdmlldycsXHJcblx0XHRcdFx0YWN0aXZlOiB0cnVlLFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0Y29uc3QgdmlldyA9IGxlYWYudmlldyBhcyBOb3RlQ29udGVudFZpZXc7XHJcblx0XHRcdFxyXG5cdFx0XHR2aWV3LnNldENvbnRlbnQoY29udGVudCwgc291cmNlUGF0aCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3Igb3BlbmluZyBub3RlIGluIG1vZGFsOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgICAgfVxyXG5cdH1cclxuXHJcblx0aW5pdF9jaGlsZHJlbigpe1xyXG5cdFx0dGhpcy5jaGlsZHJlbiA9IHt9O1xyXG5cdFx0Zm9yKGxldCBmIG9mIHRoaXMuZ2V0X2FsbF9mb2xkZXJzKCkpe1xyXG5cdFx0XHRsZXQgdGZpbGVzID0gZi5jaGlsZHJlbjtcclxuXHRcdFx0aWYodGhpcy5wbHVnaW4uZXhwbG9yZXI/LmZpbGVfZXhwbG9yZXIpe1xyXG5cdFx0XHRcdHRmaWxlcyAgPSB0aGlzLnNvcnRfdGZpbGVzKFxyXG5cdFx0XHRcdFx0dGZpbGVzLFxyXG5cdFx0XHRcdFx0KHRoaXMucGx1Z2luLmV4cGxvcmVyLmZpbGVfZXhwbG9yZXIgYXMgYW55KS5zb3J0T3JkZXJcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdCh0aGlzLmNoaWxkcmVuIGFzIGFueSlbZi5wYXRoXSA9IHRoaXMuc29ydF90ZmlsZXNfYnlfY2hhaW4odGZpbGVzKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0cmVmcmVzaF9mb2xkZXIodGZvbGRlcjpURm9sZGVyKXtcclxuXHRcdGlmKHRmb2xkZXI/LmNoaWxkcmVuKXtcclxuXHRcdFx0bGV0IHRmaWxlcyAgPSB0Zm9sZGVyLmNoaWxkcmVuO1xyXG5cdFx0XHRpZih0aGlzLnBsdWdpbi5leHBsb3Jlci5maWxlX2V4cGxvcmVyKXtcclxuXHRcdFx0XHR0ZmlsZXMgID0gdGhpcy5zb3J0X3RmaWxlcyhcclxuXHRcdFx0XHRcdHRmaWxlcyBhcyBhbnksXHJcblx0XHRcdFx0XHQodGhpcy5wbHVnaW4uZXhwbG9yZXIuZmlsZV9leHBsb3JlciBhcyBhbnkpLnNvcnRPcmRlclxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5jaGlsZHJlblt0Zm9sZGVyLnBhdGhdID0gdGhpcy5zb3J0X3RmaWxlc19ieV9jaGFpbihcclxuXHRcdFx0XHR0ZmlsZXNcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblxyXG5cdFxyXG5cclxuXHRyZWZyZXNoX3RmaWxlKHRmaWxlOlRBYnN0cmFjdEZpbGUpe1xyXG5cdFx0aWYodGZpbGUucGFyZW50Py5jaGlsZHJlbil7XHJcblx0XHRcdHRoaXMucmVmcmVzaF9mb2xkZXIodGZpbGUucGFyZW50KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB0cF9maW5kX3RmaWxlKCl7XHJcblx0XHRyZXR1cm4gZ2V0X3RwX2Z1bmModGhpcy5hcHAsJ3RwLmZpbGUuZmluZF90ZmlsZScpO1xyXG5cdH1cclxuXHJcblx0Z2V0IHRwX3N1Z2dlc3Rlcigpe1xyXG5cdFx0cmV0dXJuIGdldF90cF9mdW5jKHRoaXMuYXBwLCd0cC5zeXN0ZW0uc3VnZ2VzdGVyJyk7XHJcblx0fVxyXG5cclxuXHRnZXQgdHBfcHJvbXB0KCl7XHJcblx0XHRyZXR1cm4gZ2V0X3RwX2Z1bmModGhpcy5hcHAsJ3RwLnN5c3RlbS5wcm9tcHQnKTtcclxuXHR9XHJcblxyXG5cdGdldF9hbGxfZm9sZGVycygpe1xyXG5cdFx0bGV0IGZvbGRlcnMgPSAodGhpcy5hcHAudmF1bHQgYXMgYW55KS5nZXRBbGxGb2xkZXJzKCk7XHJcblx0XHRsZXQgZm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0Rm9sZGVyQnlQYXRoKCcvJyk7XHJcblx0XHRpZihmb2xkZXImJiAhZm9sZGVycy5jb250YWlucyhmb2xkZXIpKXtcclxuXHRcdFx0Zm9sZGVycy5wdXNoKGZvbGRlcik7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZm9sZGVycztcclxuXHR9XHJcblxyXG5cdGdldF9hbGxfdGZpbGVzKHNvcnRfbW9kZT0nJyl7XHJcblx0XHRsZXQgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcblx0XHRpZighKHNvcnRfbW9kZT09PScnKSl7XHJcblx0XHRcdHRoaXMuc29ydF90ZmlsZXMoZmlsZXMsc29ydF9tb2RlPXNvcnRfbW9kZSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmlsZXM7XHJcblx0fVxyXG5cclxuXHRnZXRfYWxsX3RmaWxlc190YWdzKHRhZ3M6c3RyaW5nfEFycmF5PHN0cmluZz4sc29ydF9tb2RlPScnKXtcclxuXHRcdGlmKCFBcnJheS5pc0FycmF5KHRhZ3MpKXtcclxuXHRcdFx0dGFncyA9IFt0YWdzXVxyXG5cdFx0fVxyXG5cclxuXHRcdHRhZ3MgPSB0YWdzLm1hcCh4PT57XHJcblx0XHRcdGlmKHguc3RhcnRzV2l0aCgnIycpKXtcclxuXHRcdFx0XHRyZXR1cm4geDtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0cmV0dXJuICcjJyt4O1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdGxldCB0ZmlsZXMgPSB0aGlzLmdldF9hbGxfdGZpbGVzKHNvcnRfbW9kZSkuZmlsdGVyKHg9PntcclxuXHRcdFx0bGV0IHR0YWdzID0gdGhpcy5nZXRfdGFncyh4KTtcclxuXHRcdFx0Zm9yKGxldCB0YWcgb2YgdGFncyl7XHJcblx0XHRcdFx0aWYodHRhZ3MuY29udGFpbnModGFnKSl7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0XHRyZXR1cm4gdGZpbGVzO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRzb3J0X2ZvbGRlcnNfYnlfbXRpbWUoZm9sZGVyczpBcnJheTxURm9sZGVyPixyZXZlcnNlPXRydWUpe1xyXG5cdFx0ZnVuY3Rpb24gdWZ1bmMoZjpURm9sZGVyKXtcclxuXHRcdFx0cmV0dXJuIE1hdGgubWF4KFxyXG5cdFx0XHRcdC4uLmYuY2hpbGRyZW4uZmlsdGVyKChmOlRGaWxlKT0+Zi5iYXNlbmFtZSkubWFwKChmOlRGaWxlKT0+Zi5zdGF0XHJcblx0XHRcdFx0Lm10aW1lKVxyXG5cdFx0XHQpXHJcblx0XHR9XHJcblx0XHRsZXQgcmVzID0gZm9sZGVycy5zb3J0KChhLGIpPT51ZnVuYyhhKS11ZnVuYyhiKSk7XHJcblx0XHRpZihyZXZlcnNlKXtcclxuXHRcdFx0cmVzID0gcmVzLnJldmVyc2UoKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiByZXM7XHJcblx0fVxyXG5cclxuXHRhc3luYyBjbWRfbW92ZV9maWxlX3RvX2Fub3RoZXJfZm9sZGVyKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGlmKHRmaWxlPT1udWxsKXtyZXR1cm47fVxyXG5cclxuXHRcdGxldCBmb2xkZXJzID0gdGhpcy5nZXRfYWxsX2ZvbGRlcnMoKTtcclxuXHRcdGZvbGRlcnMgPSB0aGlzLnNvcnRfZm9sZGVyc19ieV9tdGltZShmb2xkZXJzXHJcblx0XHQpLmZpbHRlcihmPT5mIT10ZmlsZS5wYXJlbnQpO1xyXG5cclxuXHRcdGlmKHRmaWxlLmV4dGVuc2lvbj09PSdtZCcpe1xyXG5cdFx0XHRmb2xkZXJzID0gZm9sZGVycy5maWx0ZXIoKGY6VEZpbGUpPT50aGlzLmZpbHRlcl91c2VyX2lnbm9yZShmKSk7XHJcblx0XHR9XHJcblx0XHR0cnkge1xyXG5cdFx0XHRsZXQgZm9sZGVyID0gYXdhaXQgdGhpcy5wbHVnaW4uZGlhbG9nX3N1Z2dlc3QoXHJcblx0XHRcdFx0dGhpcy5wbHVnaW4udXRpbHMuYXJyYXlfcHJlZml4X2lkKFxyXG5cdFx0XHRcdFx0Zm9sZGVycy5tYXAoKGY6VEZpbGUpPT5mLnBhdGgpXHJcblx0XHRcdFx0KSxmb2xkZXJzXHJcblx0XHRcdCk7XHJcblx0XHRcdC8vIFx1NzlGQlx1NTJBOFx1N0IxNFx1OEJCMFxyXG5cdFx0XHRsZXQgZHN0ID0gZm9sZGVyLnBhdGgrXCIvXCIrdGZpbGUuYmFzZW5hbWUrXCIuXCIrdGZpbGUuZXh0ZW5zaW9uO1xyXG5cdFx0XHRhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5yZW5hbWVGaWxlKHRmaWxlLGRzdCk7XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZmlsdGVyX3VzZXJfaWdub3JlKG5vdGU6VEZpbGUpe1xyXG5cdFx0aWYoISgodGhpcy5hcHAudmF1bHQgYXMgYW55KS5jb25maWcuYXR0YWNobWVudEZvbGRlclBhdGg9PT0nLi8nKSl7XHJcblx0XHRcdGlmKG5vdGUucGF0aC5zdGFydHNXaXRoKFxyXG5cdFx0XHRcdCh0aGlzLmFwcC52YXVsdCBhcyBhbnkpLmNvbmZpZy5hdHRhY2htZW50Rm9sZGVyUGF0aClcclxuXHRcdFx0KXtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmKCh0aGlzLmFwcC52YXVsdCBhcyBhbnkpLnVzZXJJZ25vcmVGaWx0ZXJzKXtcclxuXHRcdFx0Zm9yKGxldCB4IG9mICh0aGlzLmFwcC52YXVsdCBhcyBhbnkpLnVzZXJJZ25vcmVGaWx0ZXJzKXtcclxuXHRcdFx0XHRpZihub3RlLnBhdGguc3RhcnRzV2l0aCh4KSl7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHN1Z2d1c3Rlcl9ub3RlKG5vdGVzIDogbnVsbCB8IEFycmF5PFRGaWxlPiA9IG51bGwsc2xpY2U9MCxvbmx5bmFtZT1mYWxzZSl7XHJcblx0XHQvLyBcdTRFQ0VcdTVFOTNcdTRFMkRcdTkwMDlcdTYyRTlcdTRFMDBcdTRFMkFcdTdCMTRcdThCQjBcclxuXHRcdGlmKG5vdGVzPT1udWxsKXtcclxuXHRcdFx0bm90ZXMgPSB0aGlzLnNvcnRfdGZpbGVzKFxyXG5cdFx0XHRcdHRoaXMuYXBwLnZhdWx0LmdldEZpbGVzKCksXHJcblx0XHRcdFx0WydtdGltZScsJ3gnXVxyXG5cdFx0XHQpLmZpbHRlcigoZjpURmlsZSk9PnRoaXMuZmlsdGVyX3VzZXJfaWdub3JlKGYpKTtcclxuXHRcdH1cclxuXHRcdHRyeSB7XHJcblx0XHRcdGxldCBpdGVtcztcclxuXHRcdFx0aWYob25seW5hbWUpe1xyXG5cdFx0XHRcdGl0ZW1zID0gKG5vdGVzIGFzIGFueSkubWFwKChmOlRGaWxlKT0+Zi5iYXNlbmFtZSlcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0aXRlbXMgPSAobm90ZXMgYXMgYW55KS5tYXAoKGY6VEZpbGUpPT5mLnBhdGguc2xpY2Uoc2xpY2UpKVxyXG5cdFx0XHR9XHJcblx0XHRcdGxldCBtc2cgPSB0aGlzLnBsdWdpbi51dGlscy5hcnJheV9wcmVmaXhfaWQoaXRlbXMpO1xyXG5cdFx0XHRsZXQgbm90ZSA9IGF3YWl0IHRoaXMucGx1Z2luLmRpYWxvZ19zdWdnZXN0KG1zZyxub3Rlcyk7XHJcblx0XHRcdHJldHVybiBub3RlO1xyXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRvcGVuX25vdGUodGZpbGU6VEZpbGUsbmV3X3RhYj1mYWxzZSxyZXZlYWxGb2xkZXI9ZmFsc2UsY29sbGFwc2U9dHJ1ZSl7XHJcblx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0XHRpZihuZXdfdGFiIHx8ICF2aWV3IHx8ICF2aWV3LmxlYWYpe1xyXG5cdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLm9wZW5GaWxlKHRmaWxlKTtcclxuXHRcdFx0fWVsc2UgaWYoKHZpZXcubGVhZiBhcyBhbnkpLnBpbm5lZCl7XHJcblx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSkub3BlbkZpbGUodGZpbGUpO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHR2aWV3LmxlYWYub3BlbkZpbGUodGZpbGUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRpZihyZXZlYWxGb2xkZXIpe1xyXG5cdFx0XHRcdGlmKGNvbGxhcHNlKXtcclxuXHRcdFx0XHRcdCh0aGlzLnBsdWdpbi5leHBsb3Jlci5maWxlX2V4cGxvcmVyIGFzIGFueSkudHJlZS5zZXRDb2xsYXBzZUFsbCh0cnVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0KHRoaXMucGx1Z2luLmV4cGxvcmVyLmZpbGVfZXhwbG9yZXIgYXMgYW55KS5yZXZlYWxJbkZvbGRlcih0ZmlsZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIHN1Z2d1c3Rlcl9vcGVuX25vdGUoKXtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGxldCBub3RlID0gYXdhaXQgdGhpcy5zdWdndXN0ZXJfbm90ZSgpO1xyXG5cdFx0XHR0aGlzLm9wZW5fbm90ZShub3RlKTtcclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRcclxuXHRnZXRfdGZpbGUocGF0aDpzdHJpbmd8VEZpbGUsb25seV9maXJzdD10cnVlKXtcclxuXHRcdHRyeXtcclxuXHRcdFx0aWYocGF0aCBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHRcdFx0XHRyZXR1cm4gcGF0aDtcclxuXHRcdFx0fVxyXG5cdFx0XHRwYXRoID0gcGF0aC5zcGxpdCgnfCcpWzBdLnJlcGxhY2UoJyFbWycsJycpLnJlcGxhY2UoJ1tbJywnJykucmVwbGFjZSgnXV0nLCcnKTtcclxuXHRcdFx0bGV0IHRmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0RmlsZUJ5UGF0aChwYXRoKVxyXG5cdFx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdFx0cmV0dXJuIHRmaWxlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgdGZpbGVzID0gKHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUgYXMgYW55KS51bmlxdWVGaWxlTG9va3VwLmdldChwYXRoLnRvTG93ZXJDYXNlKCkpO1xyXG5cdFx0XHRpZighdGZpbGVzKXtcclxuXHRcdFx0XHR0ZmlsZXMgPSAodGhpcy5hcHAubWV0YWRhdGFDYWNoZSBhcyBhbnkpLnVuaXF1ZUZpbGVMb29rdXAuZ2V0KHBhdGgudG9Mb3dlckNhc2UoKSsnLm1kJyk7XHJcblx0XHRcdFx0aWYoIXRmaWxlcyl7XHJcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdHBhdGggPSBwYXRoKycubWQnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgY3RmaWxlcyA9IHRmaWxlcy5maWx0ZXIoKHg6VEZpbGUpPT54Lm5hbWU9PXBhdGgpXHJcblx0XHRcdGlmKGN0ZmlsZXMubGVuZ3RoPjApe1xyXG5cdFx0XHRcdGlmKG9ubHlfZmlyc3Qpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGN0ZmlsZXNbMF1cclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdHJldHVybiBjdGZpbGVzXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZih0ZmlsZXMubGVuZ3RoPjApe1xyXG5cdFx0XHRcdGlmKG9ubHlfZmlyc3Qpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRmaWxlc1swXVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRmaWxlc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1jYXRjaHtcclxuXHRcdFx0cmV0dXJuIG51bGxcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldF90YWdzKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGlmKCF0ZmlsZSl7cmV0dXJuIFtdfVxyXG5cdFx0bGV0IG1jYWNoZT0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGZpbGUpO1xyXG5cdFx0bGV0IHRhZ3M6QXJyYXk8c3RyaW5nPiA9IFtdXHJcblx0XHRpZihtY2FjaGU/LnRhZ3Mpe1xyXG5cdFx0XHRmb3IobGV0IGN1cnIgb2YgbWNhY2hlLnRhZ3Mpe1xyXG5cdFx0XHRcdGlmKCF0YWdzLmNvbnRhaW5zKGN1cnIudGFnKSl7XHJcblx0XHRcdFx0XHR0YWdzLnB1c2goY3Vyci50YWcpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZihtY2FjaGU/LmZyb250bWF0dGVyPy50YWdzKXtcclxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShtY2FjaGUuZnJvbnRtYXR0ZXIudGFncykpe1xyXG5cdFx0XHRcdGZvcihsZXQgY3VyciBvZiBtY2FjaGUuZnJvbnRtYXR0ZXIudGFncyl7XHJcblx0XHRcdFx0XHRsZXQgdGFnID0gJyMnK2N1cnI7XHJcblx0XHRcdFx0XHRpZighdGFncy5jb250YWlucyh0YWcpKXtcclxuXHRcdFx0XHRcdFx0dGFncy5wdXNoKHRhZylcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1lbHNlIGlmKHR5cGVvZiBtY2FjaGUuZnJvbnRtYXR0ZXIudGFncyA9PT0gJ3N0cmluZycpe1xyXG5cdFx0XHRcdGxldCB0YWcgPSBgI2ArbWNhY2hlLmZyb250bWF0dGVyLnRhZ3NcclxuXHRcdFx0XHRpZighdGFncy5jb250YWlucyh0YWcpKXtcclxuXHRcdFx0XHRcdHRhZ3MucHVzaCh0YWcpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRhZ3NcclxuXHR9XHJcblxyXG5cdGdldF9yZWNlbnRfdGZpbGVzKG9ubHlfbWQ9dHJ1ZSk6QXJyYXk8VEZpbGU+e1xyXG5cdFx0bGV0IHJlY2VudCA9ICh0aGlzLmFwcCBhcyBhbnkpLnBsdWdpbnMuZ2V0UGx1Z2luKCdyZWNlbnQtZmlsZXMtb2JzaWRpYW4nKTtcclxuXHRcdGlmKHJlY2VudCl7XHJcblx0XHRcdGxldCBmaWxlcyA9IHJlY2VudC5kYXRhLnJlY2VudEZpbGVzLm1hcChcclxuXHRcdFx0XHQoeDphbnkpPT50aGlzLmdldF90ZmlsZSh4LnBhdGgpXHJcblx0XHRcdCkuZmlsdGVyKCh4OmFueSk9PngpXHJcblx0XHRcdHJldHVybiBmaWxlc1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGxldCByZWNlbnQgPSBbXVxyXG5cdFx0XHRsZXQgZmlsZXMgPSAodGhpcy5hcHAud29ya3NwYWNlIGFzIGFueSkucmVjZW50RmlsZVRyYWNrZXI/Lmxhc3RPcGVuRmlsZXNcclxuXHRcdFx0aWYoZmlsZXMgICYmIGZpbGVzLmxlbmd0aD4wKXtcclxuXHRcdFx0XHRyZWNlbnQgPSBmaWxlcy5tYXAoKHg6c3RyaW5nKT0+dGhpcy5nZXRfdGZpbGUoeCkpLmZpbHRlcigoeDpURmlsZSk9PngpXHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IHRmaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKVxyXG5cdFx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdFx0cmVjZW50LnVuc2hpZnQodGZpbGUpXHJcblx0XHRcdH1cclxuXHRcdFx0aWYob25seV9tZCl7XHJcblx0XHRcdFx0cmVjZW50ID0gcmVjZW50LmZpbHRlcigoeDpURmlsZSk9PnguZXh0ZW5zaW9uPT0nbWQnKVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZWNlbnRcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldF9sYXN0X2RhaWx5X25vdGUocmVjZW50X2ZpcnN0PXRydWUpe1xyXG5cdFx0bGV0IHBhdHRlcm49L15cXGR7NH0tXFxkezJ9LVxcZHsyfSQvO1xyXG5cclxuXHRcdGlmKHJlY2VudF9maXJzdCl7XHJcblx0XHRcdGxldCByZWNlbnQgPSB0aGlzLmdldF9yZWNlbnRfdGZpbGVzKClcclxuXHRcdFx0Zm9yKGxldCB0ZmlsZSBvZiByZWNlbnQpe1xyXG5cdFx0XHRcdGlmKHRmaWxlLmJhc2VuYW1lLm1hdGNoKHBhdHRlcm4pKXtcclxuXHRcdFx0XHRcdHJldHVybiB0ZmlsZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0bGV0IHQgPSBtb21lbnQoKVxyXG5cdFx0Zm9yKGxldCBpPTA7aTwyMDtpKyspe1xyXG5cdFx0XHRsZXQgeHQgPSB0LmNsb25lKCkuYWRkKC1pLCdkYXlzJylcclxuXHRcdFx0Ly8gXHU1RTkzXHU0RTJEXHU2MjQwXHU2NzA5XHU2NTg3XHU0RUY2XHJcblx0XHRcdGxldCBmbmFtZSA9IHh0LmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xyXG5cdFx0XHRsZXQgdGZpbGUgPSB0aGlzLmdldF90ZmlsZShmbmFtZSk7XHJcblx0XHRcdGlmKHRmaWxlKXtcclxuXHRcdFx0XHRyZXR1cm4gdGZpbGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0bGV0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbHRlcihcclxuXHRcdFx0KHg6VEZpbGUpPT54LmJhc2VuYW1lLm1hdGNoKHBhdHRlcm4pXHJcblx0XHQpO1xyXG5cdFx0ZmlsZXMgPSB0aGlzLnNvcnRfdGZpbGVzKGZpbGVzLCduYW1lJyk7XHJcblx0XHRpZihmaWxlcy5sZW5ndGg+MCl7XHJcblx0XHRcdHJldHVybiBmaWxlc1tmaWxlcy5sZW5ndGgtMV07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdGdldF9uZWlnaGJvcl9sZWFmKG9mZnNldD0xKXtcclxuXHRcdGxldCBhcHAgPSB0aGlzLnBsdWdpbi5hcHBcclxuXHRcdGxldCBsZWF2ZXMgPSBhcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZSgnbWFya2Rvd24nKTtcclxuXHRcdGxldCBhY3RpdmVMZWFmID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcblx0XHRpZihhY3RpdmVMZWFmKXtcclxuXHRcdFx0bGV0IGlkeCA9IGxlYXZlcy5tYXAoeD0+eC52aWV3PT1hY3RpdmVMZWFmKS5pbmRleE9mKHRydWUpO1xyXG5cdFx0XHRpZHggPSBpZHgrb2Zmc2V0O1xyXG5cdFx0XHRpZihpZHg8MCB8fCBpZHg+bGVhdmVzLmxlbmd0aC0xKXtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbGVhdmVzW2lkeF07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXRfbGFzdF9hY3RpdmF0ZV9sZWFmKHNraXBfY29ub3RlPXRydWUpe1xyXG5cdFx0bGV0IGxlYXZlczpBcnJheTxhbnk+ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZSgnbWFya2Rvd24nKTtcclxuXHRcdGxlYXZlcyA9IGxlYXZlcy5maWx0ZXIoeD0+eC5nZXRWaWV3U3RhdGUoKS5zdGF0ZS5maWxlKTtcclxuXHRcdGxlYXZlcyA9IGxlYXZlcy5zb3J0KChhLGIpPT5iLmFjdGl2ZVRpbWUgLSBhLmFjdGl2ZVRpbWUpO1xyXG5cclxuXHRcdGZvcihsZXQgbGVhZiBvZiBsZWF2ZXMpe1xyXG5cdFx0XHRsZXQgZmlsZSA9IGxlYWYuZ2V0Vmlld1N0YXRlKCkuc3RhdGUuZmlsZTtcclxuXHRcdFx0aWYoc2tpcF9jb25vdGUgJiYgdGhpcy5nZXRfdGFncyhmaWxlKS5jb250YWlucygnI2Nvbm90ZScpKXtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbGVhZjtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgbGVhZiA9IG51bGw7XHJcblx0XHRmb3IobGV0IGkgb2YgWzEsLTEsMF0pe1xyXG5cdFx0XHRsZWFmID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X25laWdoYm9yX2xlYWYoaSk7XHJcblx0XHRcdGlmKGxlYWYpe1xyXG5cdFx0XHRcdHJldHVybiBsZWFmO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdGdldCBjdXJyZW50X25vdGUoKTpURmlsZXxudWxse1xyXG5cdFx0cmV0dXJuIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcblx0fVxyXG5cclxuXHRnZXRfc2VsZWN0ZWRfZmlsZXMoY3VycmVudF9pZl9ub19zZWxlY3RlZD10cnVlKXtcclxuXHRcdGxldCBzZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcblx0XHQgIFwiLnRyZWUtaXRlbS1zZWxmLmlzLXNlbGVjdGVkXCJcclxuXHRcdCk7XHJcblx0XHRsZXQgaXRlbXMgPSBPYmplY3QudmFsdWVzKHNlbGVjdG9yKS5tYXAoKHg6YW55KSA9PiB7XHJcblx0XHQgIHZhciBfYTtcclxuXHRcdCAgcmV0dXJuIChfYSA9IHguZGF0YXNldCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnBhdGg7XHJcblx0XHR9KTtcclxuXHRcdGxldCB0ZmlsZXMgPSBpdGVtcy5tYXAoXHJcblx0XHRcdCh4KSA9PiB0aGlzLmdldF90ZmlsZSh4KSkuZmlsdGVyKCh4KSA9PiB4LmV4dGVuc2lvbiA9PSBcIm1kXCJcclxuXHRcdClcclxuXHRcdGlmKHRmaWxlcy5sZW5ndGg+MCl7XHJcblx0XHRcdHJldHVybiB0ZmlsZXNcclxuXHRcdH1lbHNlIGlmKGN1cnJlbnRfaWZfbm9fc2VsZWN0ZWQgJiYgdGhpcy5jdXJyZW50X25vdGUpe1xyXG5cdFx0XHRyZXR1cm4gW3RoaXMuY3VycmVudF9ub3RlXVxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHJldHVybiBbXVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0X2lubGlua3ModGZpbGU9dGhpcy5jdXJyZW50X25vdGUsb25seV9tZD10cnVlKTpBcnJheTxURmlsZT57XHJcblx0XHRpZih0ZmlsZT09bnVsbCl7cmV0dXJuIFtdO31cclxuXHRcdGxldCByZXM6QXJyYXk8VEZpbGU+ID0gW11cclxuXHJcblx0XHRsZXQgaW5saW5rcyA9ICh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlIGFzIGFueSkuZ2V0QmFja2xpbmtzRm9yRmlsZSh0ZmlsZSk7XHJcblx0XHRmb3IobGV0IFtrLHZdIG9mIGlubGlua3MuZGF0YSl7XHJcblx0XHRcdGxldCBjdXJyID0gdGhpcy5hcHAudmF1bHQuZ2V0RmlsZUJ5UGF0aChrKTtcclxuXHRcdFx0aWYoY3Vycil7XHJcblx0XHRcdFx0cmVzLnB1c2goY3VycilcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcblxyXG5cdGdldF90Zm9sZGVycyhuYW1lOnN0cmluZyl7XHJcblx0XHRsZXQgZm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0Rm9sZGVyQnlQYXRoKG5hbWUpO1xyXG5cdFx0aWYoZm9sZGVyKXtcclxuXHRcdFx0cmV0dXJuIFtmb2xkZXJdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0X2FsbF9mb2xkZXJzKCkuZmlsdGVyKCh4OlRGb2xkZXIpPT54Lm5hbWU9PW5hbWUpO1xyXG5cdH1cclxuXHJcblx0Z2V0X2dyb3VwKGdyb3VwOnN0cmluZyl7XHJcblx0XHRsZXQgdGZpbGVzOkFycmF5PFRGaWxlPiA9IFtdO1xyXG5cdFx0bGV0IHRhZ3MgPSB0aGlzLmdldF9hbGxfdGZpbGVzX3RhZ3MoZ3JvdXApO1xyXG5cdFx0Zm9yKGxldCBmIG9mIHRhZ3Mpe1xyXG5cdFx0XHRpZighdGZpbGVzLmNvbnRhaW5zKGYpKXtcclxuXHRcdFx0XHR0ZmlsZXMucHVzaChmKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBmb2xkZXJzID0gdGhpcy5nZXRfdGZvbGRlcnMoZ3JvdXApO1xyXG5cdFx0Zm9yKGxldCBmb2xkZXIgb2YgZm9sZGVycyl7XHJcblx0XHRcdGxldCB4ZmlsZXMgPSB0aGlzLmdldF90ZmlsZXNfb2ZfZm9sZGVyKGZvbGRlcix0cnVlKTtcclxuXHRcdFx0Zm9yKGxldCBmIG9mIHhmaWxlcyl7XHJcblx0XHRcdFx0aWYoIXRmaWxlcy5jb250YWlucyhmKSl7XHJcblx0XHRcdFx0XHR0ZmlsZXMucHVzaChmKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRsZXQgdGZpbGUgPSB0aGlzLmdldF90ZmlsZShncm91cCk7XHJcblx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdGxldCB4ZmlsZXMgPSB0aGlzLmdldF9saW5rcyh0ZmlsZSx0cnVlKTtcclxuXHRcdFx0Zm9yKGxldCBmIG9mIHhmaWxlcyl7XHJcblx0XHRcdFx0aWYoIXRmaWxlcy5jb250YWlucyhmKSl7XHJcblx0XHRcdFx0XHR0ZmlsZXMucHVzaChmKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiB0ZmlsZXM7XHJcblx0fVxyXG5cclxuXHRnZXRfb3V0bGlua3ModGZpbGU9dGhpcy5jdXJyZW50X25vdGUsb25seV9tZD10cnVlKTpBcnJheTxURmlsZT57XHJcblx0XHRpZih0ZmlsZT09bnVsbCl7cmV0dXJuIFtdO31cclxuXHJcblx0XHRsZXQgbWNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGZpbGUpO1xyXG5cdFx0aWYoIW1jYWNoZSl7cmV0dXJuIFtdO31cclxuXHJcblx0XHRsZXQgcmVzOkFycmF5PFRGaWxlPiA9IFtdO1xyXG5cdFx0aWYobWNhY2hlLmxpbmtzKXtcclxuXHRcdFx0Zm9yKGxldCBsaW5rIG9mIG1jYWNoZS5saW5rcyl7XHJcblx0XHRcdFx0bGV0IHRmaWxlID0gdGhpcy5nZXRfdGZpbGUobGluay5saW5rKTtcclxuXHRcdFx0XHRpZih0ZmlsZSAmJiAhcmVzLmNvbnRhaW5zKHRmaWxlKSAmJiAhKG9ubHlfbWQgJiYgdGZpbGUuZXh0ZW5zaW9uIT0nbWQnKSl7XHJcblx0XHRcdFx0XHRyZXMucHVzaCh0ZmlsZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZihtY2FjaGUuZnJvbnRtYXR0ZXJMaW5rcyl7XHJcblx0XHRcdGZvcihsZXQgbGluayBvZiBtY2FjaGUuZnJvbnRtYXR0ZXJMaW5rcyl7XHJcblx0XHRcdFx0bGV0IHRmaWxlID0gdGhpcy5nZXRfdGZpbGUobGluay5saW5rKTtcclxuXHRcdFx0XHRpZih0ZmlsZSAmJiAhcmVzLmNvbnRhaW5zKHRmaWxlKSAmJiAhKG9ubHlfbWQgJiYgdGZpbGUuZXh0ZW5zaW9uIT0nbWQnKSl7XHJcblx0XHRcdFx0XHRyZXMucHVzaCh0ZmlsZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZighb25seV9tZCAmJiBtY2FjaGUuZW1iZWRzKXtcclxuXHRcdFx0Zm9yKGxldCBsaW5rIG9mIG1jYWNoZS5lbWJlZHMpe1xyXG5cdFx0XHRcdGxldCB0ZmlsZSA9IHRoaXMuZ2V0X3RmaWxlKGxpbmsubGluayk7XHJcblx0XHRcdFx0aWYodGZpbGUgJiYgIXJlcy5jb250YWlucyh0ZmlsZSkpe1xyXG5cdFx0XHRcdFx0cmVzLnB1c2godGZpbGUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcblxyXG5cdGdldF9saW5rcyh0ZmlsZT10aGlzLmN1cnJlbnRfbm90ZSxvbmx5X21kPXRydWUpe1xyXG5cdFx0bGV0IGlubGlua3MgPSB0aGlzLmdldF9pbmxpbmtzKHRmaWxlLG9ubHlfbWQpO1xyXG5cdFx0bGV0IG91dGxpbmtzID0gdGhpcy5nZXRfb3V0bGlua3ModGZpbGUsb25seV9tZCk7XHJcblx0XHRmb3IobGV0IGxpbmsgb2YgaW5saW5rcyl7XHJcblx0XHRcdGlmKCFvdXRsaW5rcy5jb250YWlucyhsaW5rKSl7XHJcblx0XHRcdFx0b3V0bGlua3MucHVzaChsaW5rKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gb3V0bGlua3M7XHJcblx0fVxyXG5cclxuXHRnZXRfZ3JvdXBfaW5saW5rcyh0ZmlsZXM6QXJyYXk8VEZpbGU+LGxldmVsPTEpe1xyXG5cdFx0bGV0IGl0ZW1zID0gdGZpbGVzLm1hcCgoeDpURmlsZSk9PngpO1xyXG5cdFx0d2hpbGUobGV2ZWwhPTApe1xyXG5cdFx0XHRsZXQgY3VyciA9IGl0ZW1zLm1hcCgoeDpURmlsZSk9PngpO1xyXG5cdFx0XHRmb3IobGV0IGMgb2YgY3Vycil7XHJcblx0XHRcdFx0bGV0IGxpbmtzID0gdGhpcy5nZXRfaW5saW5rcyhjLHRydWUpO1xyXG5cdFx0XHRcdGZvcihsZXQgbGluayBvZiBsaW5rcyl7XHJcblx0XHRcdFx0XHRpZighaXRlbXMuY29udGFpbnMobGluaykpe1xyXG5cdFx0XHRcdFx0XHRpdGVtcy5wdXNoKGxpbmspXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGN1cnIubGVuZ3RoPT1pdGVtcy5sZW5ndGgpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldmVsID0gbGV2ZWwtMTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBpdGVtcztcclxuXHR9XHJcblxyXG5cdGdldF9ncm91cF9vdXRsaW5rcyh0ZmlsZXM6QXJyYXk8VEZpbGU+LGxldmVsPTEpe1xyXG5cdFx0bGV0IGl0ZW1zID0gdGZpbGVzLm1hcCgoeDpURmlsZSk9PngpO1xyXG5cdFx0d2hpbGUobGV2ZWwhPTApe1xyXG5cdFx0XHRsZXQgY3VyciA9IGl0ZW1zLm1hcCgoeDpURmlsZSk9PngpO1xyXG5cdFx0XHRmb3IobGV0IGMgb2YgY3Vycil7XHJcblx0XHRcdFx0bGV0IGxpbmtzID0gdGhpcy5nZXRfb3V0bGlua3MoYyx0cnVlKTtcclxuXHRcdFx0XHRmb3IobGV0IGxpbmsgb2YgbGlua3Mpe1xyXG5cdFx0XHRcdFx0aWYoIWl0ZW1zLmNvbnRhaW5zKGxpbmspKXtcclxuXHRcdFx0XHRcdFx0aXRlbXMucHVzaChsaW5rKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZihjdXJyLmxlbmd0aD09aXRlbXMubGVuZ3RoKXtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRsZXZlbCA9IGxldmVsLTE7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gaXRlbXM7XHJcblx0fVxyXG5cclxuXHRnZXRfZ3JvdXBfbGlua3ModGZpbGVzOkFycmF5PFRGaWxlPixsZXZlbD0xKXtcclxuXHRcdGxldCBpdGVtcyA9IHRmaWxlcy5tYXAoKHg6VEZpbGUpPT54KTtcclxuXHRcdHdoaWxlKGxldmVsIT0wKXtcclxuXHRcdFx0bGV0IGN1cnIgPSBpdGVtcy5tYXAoKHg6VEZpbGUpPT54KTtcclxuXHRcdFx0Zm9yKGxldCBjIG9mIGN1cnIpe1xyXG5cdFx0XHRcdGxldCBsaW5rcyA9IHRoaXMuZ2V0X2xpbmtzKGMsdHJ1ZSk7XHJcblx0XHRcdFx0Zm9yKGxldCBsaW5rIG9mIGxpbmtzKXtcclxuXHRcdFx0XHRcdGlmKCFpdGVtcy5jb250YWlucyhsaW5rKSl7XHJcblx0XHRcdFx0XHRcdGl0ZW1zLnB1c2gobGluaylcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoY3Vyci5sZW5ndGg9PWl0ZW1zLmxlbmd0aCl7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0bGV2ZWwgPSBsZXZlbC0xO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGl0ZW1zO1xyXG5cdH1cclxuXHJcblx0Z2V0X2Jyb3RoZXJzKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGlmKHRmaWxlJiZ0ZmlsZS5wYXJlbnQpe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRfdGZpbGVzX29mX2ZvbGRlcih0ZmlsZS5wYXJlbnQsZmFsc2UpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHJldHVybiBbXTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1cclxuXHJcblx0Z2V0X3VuY2xlcyh0ZmlsZTpURmlsZSl7XHJcblx0XHRpZih0ZmlsZSAmJiB0ZmlsZS5wYXJlbnQgJiYgdGZpbGUucGFyZW50LnBhcmVudCl7XHJcblx0XHRcdGxldCBmb2xkZXIgPSB0ZmlsZS5wYXJlbnQucGFyZW50O1xyXG5cdFx0XHRyZXR1cm4gZm9sZGVyLmNoaWxkcmVuLmZpbHRlcihcclxuXHRcdFx0XHQoeDpUQWJzdHJhY3RGaWxlKT0+eCBpbnN0YW5jZW9mIFRGaWxlXHJcblx0XHRcdClcclxuXHRcdH1cclxuXHRcdHJldHVybiBbXVxyXG5cdH1cclxuXHJcblx0Z2V0X3RmaWxlc19vZl9mb2xkZXIodGZvbGRlcjpURm9sZGVyfG51bGwsd2l0aF9jaGlsZHJlbj1mYWxzZSk6YW55e1xyXG5cdFx0aWYodGZvbGRlcj09bnVsbCl7cmV0dXJuIFtdO31cclxuXHRcdGxldCBub3RlcyA9IFtdO1xyXG5cdFx0Zm9yKGxldCBjIG9mIHRmb2xkZXIuY2hpbGRyZW4pe1xyXG5cdFx0XHRpZihjIGluc3RhbmNlb2YgVEZpbGUgJiYgYy5leHRlbnNpb249PT0nbWQnKXtcclxuXHRcdFx0XHRub3Rlcy5wdXNoKGMpO1xyXG5cdFx0XHR9ZWxzZSBpZihjIGluc3RhbmNlb2YgVEZvbGRlciAmJiB3aXRoX2NoaWxkcmVuKXtcclxuXHRcdFx0XHRsZXQgdG1wID0gdGhpcy5nZXRfdGZpbGVzX29mX2ZvbGRlcihjKTtcclxuXHRcdFx0XHRmb3IobGV0IHggb2YgdG1wKXtcclxuXHRcdFx0XHRcdG5vdGVzLnB1c2goeCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbm90ZXM7XHJcblxyXG5cdH1cclxuXHJcblx0aW5kZXhPZkZvbGRlcih0ZmlsZTpURm9sZGVyLHRmaWxlczpBcnJheTxURmlsZT4pe1xyXG5cdFx0bGV0IGluZm8gPSB0aGlzLmdldF9mb2xkZXJfcHJlX2luZm8odGZpbGUpO1xyXG5cclxuXHRcdGxldCBpZHggPSAtMTtcclxuXHRcdGxldCBhbmNob3IgPSB0aGlzLmdldF90ZmlsZShpbmZvWydwcmV2J10pO1xyXG5cdFx0aWYoYW5jaG9yKXtcclxuXHRcdFx0aWR4ID0gdGZpbGVzLmluZGV4T2YoYW5jaG9yKVxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBvZmZzZXQgPSBpbmZvWydvZmZzZXQnXVxyXG5cdFx0aWYodHlwZW9mKG9mZnNldCk9PSdzdHJpbmcnKXtcclxuXHRcdFx0aWR4ID0gaWR4ICsgcGFyc2VGbG9hdChvZmZzZXQpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGlkeCA9IGlkeCArIG9mZnNldDtcclxuXHRcdH1cclxuXHRcdHJldHVybiBpZHg7XHJcblx0fVxyXG5cclxuXHR0ZmlsZV90b19zdHJpbmcodGZpbGU6VEZpbGUpe1xyXG5cdFx0bGV0IGN1cnIgPSB0aGlzLmN1cnJlbnRfbm90ZTtcclxuXHRcdGxldCBtc2cgPSAnJztcclxuXHRcdGlmKHRmaWxlLnBhcmVudD09Y3Vycj8ucGFyZW50KXtcclxuXHRcdFx0bXNnID0gdGZpbGUuYmFzZW5hbWU7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bXNnID0gdGZpbGUucGF0aDtcclxuXHRcdH1cclxuXHRcdGlmKHRmaWxlPT10aGlzLmN1cnJlbnRfbm90ZSl7XHJcblx0XHRcdHJldHVybiBgXHVEODNDXHVERkUwICR7bXNnfWBcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRyZXR1cm4gbXNnO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0fVxyXG5cclxuXHRhc3luYyBzdWdnZXN0ZXJfbm90ZXModGZpbGU9dGhpcy5jdXJyZW50X25vdGUsY3Vycl9maXJzdD1mYWxzZSxzbW9kZT0nJyl7XHJcblx0XHRpZih0ZmlsZSl7dGZpbGU9PXRoaXMuY3VycmVudF9ub3RlO31cclxuXHRcdGxldCBrdiA9IFtcclxuXHRcdFx0dGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX2dldF9icm90aGVycyxcclxuXHRcdFx0dGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX25vdGVjaGFpbixcclxuXHRcdFx0dGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX3VuY2xlX25vdGVzLFxyXG5cdFx0XHR0aGlzLnBsdWdpbi5zdHJpbmdzLml0ZW1fc2FtZV9mb2xkZXIsXHJcblx0XHRcdHRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9pbmxpbmtzX291dGxpbmtzLFxyXG5cdFx0XHR0aGlzLnBsdWdpbi5zdHJpbmdzLml0ZW1faW5saW5zLFxyXG5cdFx0XHR0aGlzLnBsdWdpbi5zdHJpbmdzLml0ZW1fb3V0bGlua3MsXHJcblx0XHRcdHRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9hbGxfbm9lcyxcclxuXHRcdFx0dGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX3JlY2VudCxcclxuXHRcdF1cclxuXHRcdFxyXG5cdFx0aWYoY3Vycl9maXJzdCl7XHJcblx0XHRcdGt2LnVuc2hpZnQodGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX2N1cnJlbnRub3RlKVxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGt2LnB1c2godGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX2N1cnJlbnRub3RlKVxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBtb2RlID0gJyc7XHJcblx0XHRpZihrdi5jb250YWlucyhzbW9kZSkpe1xyXG5cdFx0XHRtb2RlID0gc21vZGU7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bW9kZSA9IGF3YWl0IHRoaXMucGx1Z2luLmRpYWxvZ19zdWdnZXN0KHRoaXMucGx1Z2luLnV0aWxzLmFycmF5X3ByZWZpeF9pZChrdiksa3YpO1xyXG5cdFx0fVxyXG5cdFx0aWYobW9kZT09PXRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9jdXJyZW50bm90ZSl7XHJcblx0XHRcdHJldHVybiBbdGZpbGVdO1xyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9nZXRfYnJvdGhlcnMpe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRfYnJvdGhlcnModGZpbGUpO1xyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9zYW1lX2ZvbGRlcil7XHJcblx0XHRcdGlmKHRmaWxlPy5wYXJlbnQpe1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmdldF90ZmlsZXNfb2ZfZm9sZGVyKHRmaWxlLnBhcmVudCx0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9pbmxpbmtzX291dGxpbmtzKXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0X2xpbmtzKHRmaWxlKTtcclxuXHRcdH1lbHNlIGlmKG1vZGU9PT10aGlzLnBsdWdpbi5zdHJpbmdzLml0ZW1faW5saW5zKXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0X2lubGlua3ModGZpbGUpO1xyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9vdXRsaW5rcyl7XHJcblx0XHRcdHJldHVybiB0aGlzLmdldF9vdXRsaW5rcyh0ZmlsZSk7XHJcblx0XHR9ZWxzZSBpZihtb2RlPT09dGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX2FsbF9ub2VzKXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0X2FsbF90ZmlsZXMoKTtcclxuXHRcdH1lbHNlIGlmKG1vZGU9PT10aGlzLnBsdWdpbi5zdHJpbmdzLml0ZW1fcmVjZW50KXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0X3JlY2VudF90ZmlsZXMoKVxyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV91bmNsZV9ub3Rlcyl7XHJcblx0XHRcdGlmKHRmaWxlKXtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRfdW5jbGVzKHRmaWxlKTtcclxuXHRcdFx0fVxyXG5cdFx0fWVsc2UgaWYobW9kZT09PXRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9ub3RlY2hhaW4pe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRfY2hhaW4oXHJcblx0XHRcdFx0dGZpbGUsXHJcblx0XHRcdFx0TnVtYmVyKHRoaXMucGx1Z2luLnNldHRpbmdzLlByZXZDaGFpbiksXHJcblx0XHRcdFx0TnVtYmVyKHRoaXMucGx1Z2luLnNldHRpbmdzLk5leHRDaGFpbilcclxuXHRcdFx0KTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRyZXR1cm4gW107XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblx0Ly8gQ2hhaW5cclxuXHRnZXRfcHJldl9ub3RlKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGlmKCF0ZmlsZSl7cmV0dXJuO31cclxuXHRcdGlmKCh0ZmlsZSBhcyBhbnkpLmRlbGV0ZWQpe1xyXG5cdFx0XHRsZXQgdGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG5cdFx0XHRcclxuXHRcdFx0dGZpbGVzID0gdGZpbGVzLmZpbHRlcihmPT57XHJcblx0XHRcdFx0aWYoIWYpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxldCBuZXh0ID0gdGhpcy5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKGYsdGhpcy5uZXh0KVxyXG5cdFx0XHRcdGlmKHR5cGVvZihuZXh0KSE9J3N0cmluZycpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBgW1ske3RmaWxlLmJhc2VuYW1lfV1dYD09IG5leHRcclxuXHRcdFx0fSlcclxuXHJcblx0XHRcdGlmKHRmaWxlcy5sZW5ndGg+MCl7XHJcblx0XHRcdFx0cmV0dXJuIHRmaWxlc1swXTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH1lbHNle1xyXG5cdFx0XHRsZXQgbmFtZSA9IHRoaXMuZWRpdG9yLmdldF9mcm9udG1hdHRlcih0ZmlsZSx0aGlzLnByZXYpO1xyXG5cdFx0XHRpZighbmFtZXx8dHlwZW9mKG5hbWUpIT0nc3RyaW5nJyl7cmV0dXJuIG51bGw7fVxyXG5cdFx0XHRsZXQgbm90ZSA9IHRoaXMuZ2V0X3RmaWxlKG5hbWUpO1xyXG5cdFx0XHRyZXR1cm4gbm90ZT9ub3RlOm51bGw7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRvcGVuX3ByZXZfbm90ZXModGZpbGU9dGhpcy5jdXJyZW50X25vdGUpe1xyXG5cdFx0bGV0IG5vdGUgPSB0aGlzLmdldF9wcmV2X25vdGUodGZpbGUpO1xyXG5cdFx0dGhpcy5vcGVuX25vdGUobm90ZSk7XHJcblx0fVxyXG5cclxuXHRnZXRfbmV4dF9ub3RlKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGlmKCF0ZmlsZSl7cmV0dXJuIG51bGw7fVxyXG5cdFx0aWYoKHRmaWxlIGFzIGFueSkuZGVsZXRlZCl7XHJcblx0XHRcdGxldCB0ZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcblx0XHRcdGxldCBwcmV2ID0gXHJcblx0XHRcdHRmaWxlcyA9IHRmaWxlcy5maWx0ZXIoZj0+e1xyXG5cdFx0XHRcdGlmKCFmKXtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZXQgcHJldiA9IHRoaXMuZWRpdG9yLmdldF9mcm9udG1hdHRlcihmLHRoaXMucHJldilcclxuXHRcdFx0XHRpZih0eXBlb2YocHJldikhPSdzdHJpbmcnKXtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gYFtbJHt0ZmlsZS5iYXNlbmFtZX1dXWA9PSBwcmV2XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZih0ZmlsZXMubGVuZ3RoPjApe1xyXG5cdFx0XHRcdHJldHVybiB0ZmlsZXNbMF07XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bGV0IG5hbWUgPSB0aGlzLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIodGZpbGUsdGhpcy5uZXh0KTtcclxuXHRcdFx0aWYoIW5hbWV8fHR5cGVvZihuYW1lKSE9J3N0cmluZycpe3JldHVybiBudWxsO31cclxuXHRcdFx0bGV0IG5vdGUgPSB0aGlzLmdldF90ZmlsZShuYW1lKTtcclxuXHRcdFx0cmV0dXJuIG5vdGU/bm90ZTpudWxsO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0b3Blbl9uZXh0X25vdGVzKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdGxldCBub3RlID0gdGhpcy5nZXRfbmV4dF9ub3RlKHRmaWxlKTtcclxuXHRcdHRoaXMub3Blbl9ub3RlKG5vdGUpO1xyXG5cdH1cclxuXHJcblx0Z2V0X2NoYWluKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlLHByZXY9MTAsbmV4dD0xMCx3aXRoX3NlbGY9dHJ1ZSl7XHJcblx0XHRpZih0ZmlsZT09bnVsbCl7cmV0dXJuIFtdO31cclxuXHRcdFxyXG5cdFx0bGV0IHJlcyA9IG5ldyBBcnJheSgpO1xyXG5cdFx0aWYod2l0aF9zZWxmKXtcclxuXHRcdFx0cmVzLnB1c2godGZpbGUpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRsZXQgdG1wID0gdGZpbGU7XHJcblx0XHRmb3IobGV0IGk9cHJldjtpIT0wO2ktLSl7XHRcclxuXHRcdFx0bGV0IG5vdGUgPSB0aGlzLmdldF9wcmV2X25vdGUodG1wKTtcclxuXHRcdFx0aWYoIW5vdGUpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9ZWxzZSBpZihyZXMuaW5jbHVkZXMobm90ZSkpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRyZXMudW5zaGlmdChub3RlKTtcclxuXHRcdFx0XHR0bXAgPSBub3RlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHR0bXAgPSB0ZmlsZTtcclxuXHRcdGZvcihsZXQgaT1uZXh0O2khPTA7aS0tKXtcclxuXHRcdFx0bGV0IG5vdGUgPSB0aGlzLmdldF9uZXh0X25vdGUodG1wKTtcclxuXHRcdFx0aWYoIW5vdGUpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9ZWxzZSBpZihyZXMuaW5jbHVkZXMobm90ZSkpe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRyZXMucHVzaChub3RlKTtcclxuXHRcdFx0XHR0bXAgPSBub3RlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzO1xyXG5cdH1cclxuXHJcblx0Z2V0X2ZpcnN0X25vdGUodGZpbGU9dGhpcy5jdXJyZW50X25vdGUpe1xyXG5cdFx0bGV0IG5vdGVzID0gdGhpcy5nZXRfY2hhaW4odGZpbGUsLTEsMCxmYWxzZSk7XHJcblx0XHRpZihub3Rlcy5sZW5ndGg+MCl7XHJcblx0XHRcdHJldHVybiBub3Rlc1swXTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldF9sYXN0X25vdGUodGZpbGU9dGhpcy5jdXJyZW50X25vdGUpe1xyXG5cdFx0bGV0IG5vdGVzID0gdGhpcy5nZXRfY2hhaW4odGZpbGUsMCwtMSxmYWxzZSk7XHJcblx0XHRpZihub3Rlcy5sZW5ndGg+MCl7XHJcblx0XHRcdHJldHVybiBub3Rlc1tub3Rlcy5sZW5ndGgtMV07XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXRfbmVpZ2hib3JzKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlKXtcclxuXHRcdHJldHVybiBbXHJcblx0XHRcdHRoaXMuZ2V0X3ByZXZfbm90ZSh0ZmlsZSksXHJcblx0XHRcdHRoaXMuZ2V0X25leHRfbm90ZSh0ZmlsZSksXHJcblx0XHRdXHJcblx0fVxyXG5cclxuXHRhc3luYyBjaGFpbl9zZXRfcHJldih0ZmlsZTpURmlsZSxwcmV2OlRGaWxlfG51bGwpe1xyXG5cdFx0aWYodGZpbGU9PW51bGwgfHwgdGZpbGU9PXByZXYpe3JldHVybjt9XHJcblx0XHRpZih0aGlzLmdldF9wcmV2X25vdGUodGZpbGUpPT1wcmV2KXtcclxuXHRcdFx0aWYocHJldj09bnVsbCl7XHJcblx0XHRcdFx0aWYodGhpcy5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKHRmaWxlLHRoaXMucHJldikhPW51bGwpe1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5lZGl0b3Iuc2V0X2Zyb250bWF0dGVyKFxyXG5cdFx0XHRcdFx0XHR0ZmlsZSx0aGlzLnByZXYsbnVsbFxyXG5cdFx0XHRcdFx0KSBcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0bGV0IG1zZyA9IGBOb3RlIENoYWluOiAke3ByZXY/LmJhc2VuYW1lfSAtLT4gXHVEODNDXHVERkUwJHt0ZmlsZS5iYXNlbmFtZX1gO1xyXG5cdFx0aWYocHJldj09bnVsbCApe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXIoXHJcblx0XHRcdFx0dGZpbGUsdGhpcy5wcmV2LG51bGxcclxuXHRcdFx0KTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXIoXHJcblx0XHRcdFx0dGZpbGUsdGhpcy5wcmV2LGBbWyR7cHJldi5iYXNlbmFtZX1dXWBcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcdGlmKHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGljZV93aGlsZV9tb2RpZnlfY2hhaW4pe1xyXG5cdFx0XHRuZXcgTm90aWNlKG1zZyw1MDAwKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIGNoYWluX3NldF9uZXh0KHRmaWxlOlRGaWxlLG5leHQ6VEZpbGV8bnVsbCl7XHJcblx0XHRpZih0ZmlsZT09bnVsbCB8fCB0ZmlsZT09bmV4dCl7cmV0dXJuO31cclxuXHRcdGlmKHRoaXMuZ2V0X25leHRfbm90ZSh0ZmlsZSk9PW5leHQpe1xyXG5cdFx0XHRpZihuZXh0PT1udWxsKXtcclxuXHRcdFx0XHRpZih0aGlzLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIodGZpbGUsdGhpcy5uZXh0KSE9bnVsbCl7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXIoXHJcblx0XHRcdFx0XHRcdHRmaWxlLHRoaXMubmV4dCxudWxsXHJcblx0XHRcdFx0XHQpIFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRsZXQgbXNnID0gYE5vdGUgQ2hhaW46IFx1RDgzQ1x1REZFMCR7dGZpbGU/LmJhc2VuYW1lfSA8LS0gJHtuZXh0Py5iYXNlbmFtZX1gO1xyXG5cdFx0aWYobmV4dD09bnVsbCApe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXIoXHJcblx0XHRcdFx0dGZpbGUsdGhpcy5uZXh0LG51bGxcclxuXHRcdFx0KTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXIoXHJcblx0XHRcdFx0dGZpbGUsdGhpcy5uZXh0LGBbWyR7bmV4dC5iYXNlbmFtZX1dXWBcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcdGlmKHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGljZV93aGlsZV9tb2RpZnlfY2hhaW4pe1xyXG5cdFx0XHRuZXcgTm90aWNlKG1zZyw1MDAwKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFx1NUMwNiB0ZmlsZXMgXHU3OUZCXHU1MkE4XHU0RTNBIGFuY2hvciBcdTc2ODRcdTU0MEVcdTdGNkVcdTdCMTRcdThCQjBcclxuXHRhc3luYyBjaGFpbl9zZXRfbmV4dF9maWxlcyh0ZmlsZXM6QXJyYXk8VEZpbGU+LGFuY2hvcjpURmlsZXxudWxsLHNhbWVfZm9sZGVyPXRydWUpe1xyXG5cdFx0XHJcblx0XHRpZighdGZpbGVzKXtyZXR1cm47fVxyXG5cclxuXHRcdHRmaWxlcyA9IHRmaWxlcy5maWx0ZXIoeD0+eD8uZXh0ZW5zaW9uPT0nbWQnKTtcclxuXHRcdGlmKHRmaWxlcy5sZW5ndGg9PTApe3JldHVybjt9XHJcblxyXG5cdFx0aWYoIWFuY2hvcil7cmV0dXJufTtcclxuXHJcblx0XHRpZih0ZmlsZXMuY29udGFpbnMoYW5jaG9yKSl7cmV0dXJuO31cclxuXHJcblx0XHRsZXQgeHRmaWxlcyA9IHRoaXMuc29ydF90ZmlsZXNfYnlfY2hhaW4odGZpbGVzKTtcclxuXHRcdFxyXG5cclxuXHRcdC8vIFx1NzlGQlx1NTJBOFx1NjU4N1x1NEVGNlx1RkYwQ1x1NjI1M1x1NjVBRFx1NjVFN1x1OTRGRVxyXG5cdFx0Zm9yKGxldCB0ZmlsZSBvZiB4dGZpbGVzKXtcclxuXHRcdFx0aWYoYW5jaG9yLnBhcmVudCl7XHJcblx0XHRcdFx0aWYoc2FtZV9mb2xkZXIgJiYgdGZpbGUucGFyZW50Py5wYXRoIT1hbmNob3IucGFyZW50Py5wYXRoKXtcclxuXHRcdFx0XHRcdGxldCBkc3QgPSBhbmNob3IucGFyZW50LnBhdGgrXCIvXCIrdGZpbGUubmFtZTtcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUodGZpbGUsZHN0KTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGVycm9yKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGF3YWl0IHRoaXMuY2hhaW5fcG9wX25vZGUodGZpbGUgYXMgVEZpbGUpXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0ZmlsZXMudW5zaGlmdChhbmNob3IpXHJcblx0XHRsZXQgYW5jaG9yX25leHQgPSB0aGlzLmdldF9uZXh0X25vdGUoYW5jaG9yKTtcclxuXHRcdGlmKGFuY2hvcl9uZXh0KXt0ZmlsZXMucHVzaChhbmNob3JfbmV4dCl9XHJcblx0XHRhd2FpdCB0aGlzLmNoYWluX2NvbmNhdF90ZmlsZXModGZpbGVzKTtcclxuXHRcdGZvcihsZXQgZHN0IG9mIHRmaWxlcy5zbGljZSgxLHRmaWxlcy5sZW5ndGgtMSkpe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXJfYWxpZ25fZmlsZShcclxuXHRcdFx0XHRhbmNob3IsZHN0LHRoaXMucGx1Z2luLnNldHRpbmdzLmZpZWxkX29mX2NvbmZsdWVuY2VfdGFiX2Zvcm1hdFxyXG5cdFx0XHQpXHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cclxuXHRhc3luYyBjaGFpbl9zZXRfcHJldl9uZXh0KHRmaWxlOlRGaWxlLHByZXY6VEZpbGUsbmV4dDpURmlsZSl7XHJcblx0XHRpZih0ZmlsZT09bnVsbCB8fCBwcmV2PT1uZXh0fHx0ZmlsZT09cHJldnx8dGZpbGU9PW5leHQpe3JldHVybjt9XHJcblxyXG5cdFx0aWYodGhpcy5nZXRfcHJldl9ub3RlKHRmaWxlKT09cHJldil7XHJcblx0XHRcdGF3YWl0IHRoaXMuY2hhaW5fc2V0X25leHQodGZpbGUsbmV4dCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZih0aGlzLmdldF9uZXh0X25vdGUodGZpbGUpPT1uZXh0KXtcclxuXHRcdFx0YXdhaXQgdGhpcy5jaGFpbl9zZXRfcHJldih0ZmlsZSxwcmV2KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBtc2cgPSBgTm90ZSBDaGFpbjogJHtwcmV2Py5iYXNlbmFtZX0gLS0+IFx1RDgzQ1x1REZFMCR7dGZpbGU/LmJhc2VuYW1lfSA8LS0gJHtuZXh0Py5iYXNlbmFtZX1gO1xyXG5cdFx0bGV0IGZtOntba2V5OnN0cmluZ106YW55fSA9IHt9O1xyXG5cdFx0Zm1bdGhpcy5wcmV2XSA9IHByZXY/YFtbJHtwcmV2LmJhc2VuYW1lfV1dYDpudWxsO1xyXG5cdFx0Zm1bdGhpcy5uZXh0XSA9IG5leHQ/YFtbJHtuZXh0LmJhc2VuYW1lfV1dYDpudWxsO1xyXG5cdFx0YXdhaXQgdGhpcy5wbHVnaW4uZWRpdG9yLnNldF9tdWx0aV9mcm9udG1hdHRlcih0ZmlsZSxmbSk7XHJcblx0XHRpZih0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RpY2Vfd2hpbGVfbW9kaWZ5X2NoYWluKXtcclxuXHRcdFx0bmV3IE5vdGljZShtc2csNTAwMCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBjaGFpbl9saW5rX3ByZXZfbmV4dChwcmV2OlRGaWxlLG5leHQ6VEZpbGUpe1xyXG5cdFx0YXdhaXQgdGhpcy5jaGFpbl9zZXRfcHJldihuZXh0LHByZXYpO1xyXG5cdFx0YXdhaXQgdGhpcy5jaGFpbl9zZXRfbmV4dChwcmV2LG5leHQpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgY2hhaW5fY29uY2F0X3RmaWxlcyh0ZmlsZXM6QXJyYXk8VEZpbGU+KXtcclxuXHRcdC8vIFx1NkUwNVx1OTY2NFx1ODFFQVx1OTVFRFx1NzNBRlxyXG5cdFx0bGV0IHByZXYgPSB0aGlzLmdldF9wcmV2X25vdGUodGZpbGVzWzBdKTtcclxuXHRcdGlmKHRmaWxlcy5jb250YWlucyhwcmV2KSl7XHJcblx0XHRcdGF3YWl0IHRoaXMuY2hhaW5fc2V0X3ByZXYodGZpbGVzWzBdLG51bGwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFx1NkUwNVx1OTY2NFx1ODFFQVx1OTVFRFx1NzNBRlxyXG5cdFx0bGV0IG5leHQgPSB0aGlzLmdldF9uZXh0X25vdGUodGZpbGVzW3RmaWxlcy5sZW5ndGgtMV0pO1xyXG5cdFx0aWYodGZpbGVzLmNvbnRhaW5zKG5leHQpKXtcclxuXHRcdFx0YXdhaXQgdGhpcy5jaGFpbl9zZXRfbmV4dCh0ZmlsZXNbdGZpbGVzLmxlbmd0aC0xXSxudWxsKTtcclxuXHRcdH1cclxuXHRcdGlmKHRmaWxlcy5sZW5ndGg8PTEpe1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRsZXQgTiA9IHRmaWxlcy5sZW5ndGg7XHJcblx0XHRhd2FpdCB0aGlzLmNoYWluX3NldF9uZXh0KHRmaWxlc1swXSx0ZmlsZXNbMV0pO1xyXG5cdFx0YXdhaXQgdGhpcy5jaGFpbl9zZXRfcHJldih0ZmlsZXNbTi0xXSx0ZmlsZXNbTi0yXSk7XHJcblx0XHRmb3IobGV0IGk9MTtpPHRmaWxlcy5sZW5ndGgtMTtpKyspe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmNoYWluX3NldF9wcmV2X25leHQodGZpbGVzW2ldLHRmaWxlc1tpLTFdLHRmaWxlc1tpKzFdKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgY2hhaW5fcG9wX25vZGUodGZpbGU6VEZpbGUpe1xyXG5cdFx0bGV0IG5vdGVzID0gdGhpcy5nZXRfbmVpZ2hib3JzKHRmaWxlKTtcclxuXHRcdGF3YWl0IHRoaXMuY2hhaW5fbGlua19wcmV2X25leHQobm90ZXNbMF0sbm90ZXNbMV0pO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgY2hhaW5faW5zZXJ0X25vZGVfYXNfaGVhZCh0ZmlsZTpURmlsZSxhbmNob3I6VEZpbGUpe1xyXG5cdFx0bGV0IGhlYWQgPSB0aGlzLmdldF9maXJzdF9ub3RlKGFuY2hvcik7XHJcblx0XHRhd2FpdCB0aGlzLmNoYWluX2xpbmtfcHJldl9uZXh0KHRmaWxlLGhlYWQpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgY2hhaW5faW5zZXJ0X25vZGVfYXNfdGFpbCh0ZmlsZTpURmlsZSxhbmNob3I6VEZpbGUpe1xyXG5cdFx0bGV0IHRhaWwgPSB0aGlzLmdldF9sYXN0X25vdGUoYW5jaG9yKTtcclxuXHRcdGF3YWl0IHRoaXMuY2hhaW5fbGlua19wcmV2X25leHQodGFpbCx0ZmlsZSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBjaGFpbl9pbnNlcnRfbm9kZV9hZnRlcih0ZmlsZTpURmlsZSxhbmNob3I6VEZpbGUpe1xyXG5cdFx0bGV0IGFuY2hvcl9uZXh0ID0gdGhpcy5nZXRfbmV4dF9ub3RlKGFuY2hvcik7XHJcblx0XHRpZihhbmNob3JfbmV4dD09dGZpbGUpe3JldHVybjt9XHJcblxyXG5cdFx0bGV0IHRmaWxlX25laWdoYm9yID0gdGhpcy5nZXRfbmVpZ2hib3JzKHRmaWxlKTtcclxuXHRcdGlmKHRmaWxlX25laWdoYm9yWzFdPT1hbmNob3Ipe1xyXG5cdFx0XHRhd2FpdCB0aGlzLmNoYWluX2NvbmNhdF90ZmlsZXMoXHJcblx0XHRcdFx0W3RmaWxlX25laWdoYm9yWzBdLGFuY2hvcix0ZmlsZSxhbmNob3JfbmV4dF1cclxuXHRcdFx0KTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRhd2FpdCB0aGlzLmNoYWluX3BvcF9ub2RlKHRmaWxlKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5jaGFpbl9jb25jYXRfdGZpbGVzKFthbmNob3IsdGZpbGUsYW5jaG9yX25leHRdKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIGNoYWluX2luc2VydF9ub2RlX2JlZm9yZSh0ZmlsZTpURmlsZSxhbmNob3I6VEZpbGUpe1xyXG5cdFx0bGV0IGFuY2hvcl9wcmV2ID0gdGhpcy5nZXRfcHJldl9ub3RlKGFuY2hvcik7XHJcblx0XHRpZihhbmNob3JfcHJldj09dGZpbGUpe3JldHVybjt9XHJcblx0XHRsZXQgdGZpbGVfbmVpZ2hib3IgPSB0aGlzLmdldF9uZWlnaGJvcnModGZpbGUpO1xyXG5cdFx0aWYodGZpbGVfbmVpZ2hib3JbMF09PWFuY2hvcil7XHJcblx0XHRcdGF3YWl0IHRoaXMuY2hhaW5fY29uY2F0X3RmaWxlcyhcclxuXHRcdFx0XHRbYW5jaG9yX3ByZXYsdGZpbGUsYW5jaG9yLHRmaWxlX25laWdoYm9yWzFdXVxyXG5cdFx0XHQpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGF3YWl0IHRoaXMuY2hhaW5fcG9wX25vZGUodGZpbGUpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLmNoYWluX2NvbmNhdF90ZmlsZXMoW2FuY2hvcl9wcmV2LHRmaWxlLGFuY2hvcl0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgY2hhaW5faW5zZXJ0X2ZvbGRlcl9hZnRlcih0ZmlsZTpURmlsZSxhbmNob3I6VEZpbGUpe1xyXG5cdFx0aWYoIXRmaWxlLnBhcmVudCB8fCB0ZmlsZS5wYXJlbnQucGFyZW50IT1hbmNob3IucGFyZW50KXtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0bGV0IG5vdGUgPSB0aGlzLmdldF90ZmlsZSh0ZmlsZS5wYXJlbnQubmFtZSk7XHJcblx0XHRpZighbm90ZSl7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGF3YWl0IHRoaXMucGx1Z2luLmVkaXRvci5zZXRfbXVsdGlfZnJvbnRtYXR0ZXIoXHJcblx0XHRcdG5vdGUsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcIkZvbGRlclByZXZOb3RlXCI6YFtbJHthbmNob3IuYmFzZW5hbWV9XV1gLFxyXG5cdFx0XHRcdFwiRm9sZGVyUHJldk5vdGVPZmZzZXRcIjowLjUsXHJcblx0XHQgICAgfVxyXG5cdFx0KVxyXG5cdH1cclxuXHRcclxuXHRhc3luYyBjaGFpbl9zdWdnZXN0ZXJfdGZpbGVzKHRmaWxlPXRoaXMuY3VycmVudF9ub3RlLG1vZGU9J3N1Z2dlc3Rlcicpe1xyXG5cdFx0bGV0IG5vdGVzID0gdGhpcy5nZXRfYnJvdGhlcnModGZpbGUpO1xyXG5cdFx0aWYobm90ZXMubGVuZ3RoPT0wKXtyZXR1cm47fVxyXG5cclxuXHRcdGxldCBmaWxlcyA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyX3NvcnQobm90ZXMpO1xyXG5cdFx0YXdhaXQgdGhpcy5jaGFpbl9jb25jYXRfdGZpbGVzKGZpbGVzKTtcclxuXHR9XHJcblxyXG5cdHNvcnRfdGZpbGVzKGZpbGVzOkFycmF5PFRGaWxlPixmaWVsZDphbnkpOmFueXtcclxuXHRcdGlmKHR5cGVvZiBmaWVsZCA9PT0gJ3N0cmluZycpe1xyXG5cdFx0XHRpZihmaWVsZD09PSduYW1lJyB8fCBmaWVsZD09PSdhbHBoYWJldGljYWwnKXtcclxuXHRcdFx0XHRyZXR1cm4gZmlsZXMuc29ydChcclxuXHRcdFx0XHRcdChhLGIpPT4oYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKSlcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9ZWxzZSBpZihmaWVsZD09PSdtdGltZSd8fCBmaWVsZD09PSdieU1vZGlmaWVkVGltZScpe1xyXG5cdFx0XHRcdHJldHVybiBmaWxlcy5zb3J0KFxyXG5cdFx0XHRcdFx0KGEsYik9PihhLnN0YXQ/Lm10aW1lLWIuc3RhdD8ubXRpbWUpXHJcblx0XHRcdFx0KVxyXG5cdFx0XHR9ZWxzZSBpZihmaWVsZD09PSdjdGltZScgfHwgZmllbGQ9PT0nYnlDcmVhdGVkVGltZScpe1xyXG5cdFx0XHRcdHJldHVybiBmaWxlcy5zb3J0KFxyXG5cdFx0XHRcdFx0KGEsYik9PihhLnN0YXQ/LmN0aW1lLWIuc3RhdD8uY3RpbWUpXHJcblx0XHRcdFx0KVxyXG5cdFx0XHR9ZWxzZSBpZihmaWVsZD09PSdhbHBoYWJldGljYWxSZXZlcnNlJyl7XHJcblx0XHRcdFx0cmV0dXJuIGZpbGVzLnNvcnQoXHJcblx0XHRcdFx0XHQoYixhKT0+KGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSkpXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fWVsc2UgaWYoZmllbGQ9PT0nYnlNb2RpZmllZFRpbWVSZXZlcnNlJyl7XHJcblx0XHRcdFx0cmV0dXJuIGZpbGVzLnNvcnQoXHJcblx0XHRcdFx0XHQoYixhKT0+KGEuc3RhdD8ubXRpbWUtYi5zdGF0Py5tdGltZSlcclxuXHRcdFx0XHQpXHJcblx0XHRcdH1lbHNlIGlmKGZpZWxkPT09J2J5Q3JlYXRlZFRpbWVSZXZlcnNlJyl7XHJcblx0XHRcdFx0cmV0dXJuIGZpbGVzLnNvcnQoXHJcblx0XHRcdFx0XHQoYixhKT0+KGEuc3RhdD8uY3RpbWUtYi5zdGF0Py5jdGltZSlcclxuXHRcdFx0XHQpXHJcblx0XHRcdH1lbHNlIGlmKGZpZWxkPT09J2NoYWluJyl7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuc29ydF90ZmlsZXNfYnlfY2hhaW4oZmlsZXMpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmaWxlcztcclxuXHRcdH1lbHNlIGlmKHR5cGVvZiBmaWVsZCA9PT0gJ29iamVjdCcpe1xyXG5cdFx0XHRpZihmaWVsZCBpbnN0YW5jZW9mIEFycmF5KXtcclxuXHRcdFx0XHRsZXQgbmZpbGVzID0gdGhpcy5zb3J0X3RmaWxlcyhmaWxlcyxmaWVsZFswXSk7XHJcblx0XHRcdFx0aWYoZmllbGQubGVuZ3RoPj0yKXtcclxuXHRcdFx0XHRcdGlmKGZpZWxkWzFdPT09J3gnKXtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG5maWxlcy5yZXZlcnNlKClcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIG5maWxlcztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZpbGVzO1xyXG5cdH1cclxuXHRcclxuXHRzb3J0X3RmaWxlc19ieV9jaGFpbih0ZmlsZXM6QXJyYXk8VEFic3RyYWN0RmlsZT4pe1xyXG5cdFx0bGV0IG5vdGVzID0gdGZpbGVzLmZpbHRlcihmPT5mIGluc3RhbmNlb2YgVEZpbGUpO1xyXG5cdFx0bGV0IHJlczpUQWJzdHJhY3RGaWxlW10gPSBbXTtcclxuXHRcdGxldCBjdGZpbGVzOlRGaWxlW10gPSBbXTtcclxuXHRcdHdoaWxlKG5vdGVzLmxlbmd0aD4wKXtcclxuXHRcdFx0bGV0IG5vdGUgPSBub3Rlc1swXTtcclxuXHRcdFx0aWYobm90ZSBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHRcdFx0XHRsZXQgeGNoYWluID0gdGhpcy5nZXRfY2hhaW4obm90ZSwtMSwtMSk7XHJcblx0XHRcdFx0Zm9yKGxldCB4IG9mIHhjaGFpbil7XHJcblx0XHRcdFx0XHRpZihub3Rlcy5jb250YWlucyh4KSl7XHJcblx0XHRcdFx0XHRcdGN0ZmlsZXMucHVzaCh4KTtcclxuXHRcdFx0XHRcdFx0bm90ZXMucmVtb3ZlKHgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJlcy5wdXNoKC4uLmN0ZmlsZXMpO1xyXG5cdFx0bGV0IGNhbnZhcyA9IHJlcy5maWx0ZXIoZj0+KGYgaW5zdGFuY2VvZiBURmlsZSkgJiYoZi5leHRlbnNpb249PSdjYW52YXMnKSlcclxuXHRcdHJlcyA9IHJlcy5maWx0ZXIoZj0+KGYgaW5zdGFuY2VvZiBURmlsZSkgJiYoZi5leHRlbnNpb24hPSdjYW52YXMnKSk7XHJcblx0XHRsZXQgZm9sZGVycyA9IHRmaWxlcy5maWx0ZXIoZj0+ZiBpbnN0YW5jZW9mIFRGb2xkZXIpO1xyXG5cdFx0aWYoZm9sZGVycy5sZW5ndGg+MCl7XHJcblx0XHRcdGxldCBpZHhzID0gZm9sZGVycy5tYXAoXHJcblx0XHRcdFx0KGY6VEZvbGRlcik9PnRoaXMuaW5kZXhPZkZvbGRlcihmLGN0ZmlsZXMpXHJcblx0XHRcdCk7XHJcblx0XHRcdHJlcy5wdXNoKC4uLmZvbGRlcnMpO1xyXG5cdFx0XHRmdW5jdGlvbiBpbmRleE9mKGY6VEFic3RyYWN0RmlsZSl7XHJcblx0XHRcdFx0aWYoZiBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHRcdFx0XHRcdHJldHVybiByZXMuaW5kZXhPZihmKTtcclxuXHRcdFx0XHR9ZWxzZSBpZihmIGluc3RhbmNlb2YgVEZvbGRlcil7XHJcblx0XHRcdFx0XHRyZXR1cm4gaWR4c1tmb2xkZXJzLmluZGV4T2YoZildO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXMgPSByZXMuc29ydCgoYSxiKT0+aW5kZXhPZihhKS1pbmRleE9mKGIpKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Zm9yKGxldCB0ZmlsZSBvZiBjYW52YXMpe1xyXG5cdFx0XHRsZXQgcm5hbWUgPSByZXMubWFwKHg9PnggaW5zdGFuY2VvZiBURm9sZGVyP3gubmFtZTogKHggYXMgVEZpbGUpLmJhc2VuYW1lKTtcclxuXHRcdFx0bGV0IGNuYW1lID0gKHRmaWxlIGFzIFRGaWxlKS5iYXNlbmFtZTtcclxuXHRcdFx0bGV0IGlkeCA9IHJuYW1lLmluZGV4T2YoY25hbWUpO1xyXG5cdFx0XHRpZihpZHg8MCl7XHJcblx0XHRcdFx0aWR4ID0gcm5hbWUuaW5kZXhPZihjbmFtZS5zcGxpdCgnLicpLnNsaWNlKDAsLTEpLmpvaW4oJy4nKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoaWR4PDApe1xyXG5cdFx0XHRcdHJlcy5wdXNoKHRmaWxlKTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0cmVzLnNwbGljZShpZHgrMSwwLHRmaWxlKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcblxyXG5cdHNvcnRfdGZpbGVzX2ZvbGRlcl9maXJzdCh0ZmlsZXM6QXJyYXk8VEZpbGU+KXtcclxuXHRcdGxldCBBID0gdGZpbGVzLmZpbHRlcihmPT5mIGluc3RhbmNlb2YgVEZvbGRlcikuc29ydCgoYSxiKT0+KGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSkpKTtcclxuXHRcdGxldCBCID0gdGZpbGVzLmZpbHRlcihmPT5mIGluc3RhbmNlb2YgVEZpbGUpO1xyXG5cdFx0cmV0dXJuIHRoaXMucGx1Z2luLnV0aWxzLmNvbmNhdF9hcnJheShbQSxCXSk7XHJcblx0fVxyXG5cclxuXHRzb3J0X3RmaWxlc19ieV9maWVsZCh0ZmlsZXM6QXJyYXk8VEZpbGU+LGZpZWxkOnN0cmluZyl7XHJcblx0XHRsZXQgcmVzID0gdGZpbGVzLnNvcnQoXHJcblx0XHRcdChhLGIpPT57XHJcblx0XHRcdFx0bGV0IGF2ID0gdGhpcy5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKGEsZmllbGQpO1xyXG5cdFx0XHRcdGxldCBidiA9IHRoaXMuZWRpdG9yLmdldF9mcm9udG1hdHRlcihiLGZpZWxkKTtcclxuXHRcdFx0XHRpZih0eXBlb2YoYXYpIT10eXBlb2YoYnYpKXtcclxuXHRcdFx0XHRcdHJldHVybiAwXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKHR5cGVvZihhdik9PSdudW1iZXInICYmIHR5cGVvZihidik9PSdudW1iZXInKXtcclxuXHRcdFx0XHRcdHJldHVybiBhdiAtIGJ2O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZih0eXBlb2YoYXYpPT0nc3RyaW5nJyAmJiB0eXBlb2YoYnYpPT0nc3RyaW5nJyl7XHJcblx0XHRcdFx0XHRsZXQgdiA9IChhdiBhcyBzdHJpbmcpLmxvY2FsZUNvbXBhcmUoYnYgYXMgc3RyaW5nKVxyXG5cdFx0XHRcdFx0cmV0dXJuIHZcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIDBcclxuXHRcdFx0fVxyXG5cdFx0KVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcblxyXG5cdGFzeW5jIHN1Z2dlc3Rlcl9zb3J0KHRmaWxlczpBcnJheTxURmlsZT4pe1xyXG5cdFx0aWYoIXRmaWxlcyl7cmV0dXJuIFtdO31cclxuXHRcdGlmKHRmaWxlcy5sZW5ndGg9PTApe3JldHVybiBbXX07XHJcblx0XHRsZXQga3YgPSB7XHJcblx0XHRcdCdjaGFpbic6J2NoYWluJyxcclxuXHRcdFx0J25hbWUgKGEgdG8geiknOiduYW1lJyxcclxuXHRcdFx0J2N0aW1lIChvbGQgdG8gbmV3KSc6J2N0aW1lJyxcclxuXHRcdFx0J210aW1lIChvbGQgdG8gbmV3KSc6J210aW1lJyxcclxuXHRcdFx0J25hbWUgKHogdG8gYSknOlsnbmFtZScsJ3gnXSxcclxuXHRcdFx0J2N0aW1lIChuZXcgdG8gb2xkKSc6WydjdGltZScsJ3gnXSxcclxuXHRcdFx0J210aW1lIChuZXcgdG8gb2xkKSc6WydtdGltZScsJ3gnXSxcclxuXHRcdH1cclxuXHRcdGxldCBmaWVsZCA9IGF3YWl0IHRoaXMucGx1Z2luLmRpYWxvZ19zdWdnZXN0KFxyXG5cdFx0XHRPYmplY3Qua2V5cyhrdiksXHJcblx0XHRcdE9iamVjdC52YWx1ZXMoa3YpXHJcblx0XHQpO1xyXG5cdFx0aWYoZmllbGQ9PW51bGwpe3JldHVybiBbXTt9XHJcblx0XHRpZihmaWVsZD09J2NoYWluJyl7IFxyXG5cdFx0XHR0ZmlsZXMgPSB0aGlzLnNvcnRfdGZpbGVzKHRmaWxlcywnbmFtZScpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuc29ydF90ZmlsZXModGZpbGVzLGZpZWxkKTtcclxuXHR9XHJcblxyXG5cdHZpZXdfc29ydF9ieV9jaGFpbigpe1xyXG5cdFx0bGV0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFxyXG5cdFx0XHRcImZpbGUtZXhwbG9yZXJcIlxyXG5cdFx0KVswXT8udmlldyBhcyBhbnk7XHJcblx0XHRpZighdmlldyl7cmV0dXJuO31cclxuXHRcdHZpZXcuc29ydCgpO1xyXG5cdFx0aWYodmlldy5yZWFkeSl7XHJcblx0XHRcdGZvcihsZXQgcGF0aCBpbiB2aWV3LmZpbGVJdGVtcyl7XHJcblx0XHRcdFx0bGV0IGl0ZW0gPSB2aWV3LmZpbGVJdGVtc1twYXRoXTtcclxuXHRcdFx0XHRpZihpdGVtLnZDaGlsZHJlbil7XHJcblx0XHRcdFx0XHRsZXQgZmlsZXMgPSBpdGVtLnZDaGlsZHJlbi5fY2hpbGRyZW4ubWFwKChmOmFueSk9PmYuZmlsZSk7XHJcblx0XHRcdFx0XHRmaWxlcyA9IHRoaXMuc29ydF90ZmlsZXNfYnlfY2hhaW4oZmlsZXMpO1xyXG5cdFx0XHRcdFx0bGV0IGNoaWxkcmVuID0gaXRlbS52Q2hpbGRyZW4uX2NoaWxkcmVuLnNvcnQoXHJcblx0XHRcdFx0XHRcdChhOmFueSxiOmFueSk9PmZpbGVzLmluZGV4T2YoYS5maWxlKS1maWxlcy5pbmRleE9mKGIuZmlsZSlcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdGl0ZW0udkNoaWxkcmVuLnNldENoaWxkcmVuKGNoaWxkcmVuKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dmlldy50cmVlLmluZmluaXR5U2Nyb2xsLmNvbXB1dGUoKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgZ2V0X2ZpbGVfbGlua3ModGZpbGU6VEZpbGUseGxpbmtzPXRydWUsaW5saW5rcz10cnVlLG91dGxpbmtzPXRydWUsb25seW1kPWZhbHNlKXtcclxuXHRcdGxldCBpdGVtczp7W2tleTpzdHJpbmddOmFueX0gPSB7fVxyXG5cclxuXHRcdGlmKCF0ZmlsZSl7XHJcblx0XHRcdHJldHVybiBpdGVtcztcclxuXHRcdH1cclxuXHJcblx0XHRpdGVtc1snXHVEODNDXHVERkUwICcrdGZpbGUuYmFzZW5hbWVdID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5nZXRGdWxsUGF0aCh0ZmlsZS5wYXRoKVxyXG5cdFx0aWYoeGxpbmtzKXtcclxuXHRcdFx0bGV0IHRtcDtcclxuXHRcdFx0dG1wID0gdGhpcy5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKHRmaWxlLCdnaXRodWInKTtcclxuXHRcdFx0aWYodG1wKXtcclxuXHRcdFx0XHRpZih0bXAuY29udGFpbnMoJ2dpdGh1Yi5jb20nKSl7XHJcblx0XHRcdFx0XHRpdGVtc1snXHVEODNDXHVERjEwZ2l0aHViJ10gPSB0bXA7XHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRpdGVtc1snXHVEODNDXHVERjEwZ2l0aHViJ10gPSBgaHR0cHM6Ly9naXRodWIuY29tL2ArdG1wO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHR0bXAgPSB0aGlzLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIodGZpbGUsJ2h1Z2dpbmdmYWNlJyk7XHJcblx0XHRcdGlmKHRtcCl7XHJcblx0XHRcdFx0aWYodG1wLmNvbnRhaW5zKCdodWdnaW5nZmFjZS5jbycpKXtcclxuXHRcdFx0XHRcdGl0ZW1zWydcdUQ4M0NcdURGMTBodWdnaW5nZmFjZVx1RDgzRVx1REQxNyddID0gdG1wO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aXRlbXNbJ1x1RDgzQ1x1REYxMGh1Z2dpbmdmYWNlXHVEODNFXHVERDE3J10gPSBgaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9gK3RtcDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dG1wID0gdGhpcy5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKHRmaWxlLCdhcnhpdicpO1xyXG5cdFx0XHRpZih0bXA/LklEKXtcclxuXHRcdFx0XHRpdGVtc1snXHVEODNDXHVERjEwYXJ4aXYnXSA9IGBodHRwczovL2FyeGl2Lm9yZy9hYnMvYCt0bXA/LklEO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0bGV0IHRleHQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKHRmaWxlKVxyXG5cdFx0XHQvLyBcdTUzMzlcdTkxNERcdTU5MTZcdTkwRThcdTk0RkVcdTYzQTVcclxuXHRcdFx0Y29uc3QgcmVnZXggPSAvXFxbW14oXFxbXFxdKV0qP1xcXVxcKC4qP1xcKS9nO1xyXG5cdFx0XHRjb25zdCBtYXRjaGVzID0gdGV4dC5tYXRjaChyZWdleCk7XHJcblx0XHRcdGlmIChtYXRjaGVzKSB7XHJcblx0XHRcdFx0Zm9yIChjb25zdCBtYXRjaCBvZiBtYXRjaGVzKSB7XHJcblx0XHRcdFx0XHQvLyBcdTYzRDBcdTUzRDZcdTUzMzlcdTkxNERcdTc2ODRcdTdFQzRcclxuXHRcdFx0XHRcdGxldCBrZXkgPSBtYXRjaC5zbGljZSgxLG1hdGNoLmluZGV4T2YoJ10oJykpO1xyXG5cdFx0XHRcdFx0bGV0IHZhbHVlID0gbWF0Y2guc2xpY2UobWF0Y2guaW5kZXhPZignXSgnKSkuc2xpY2UoMiwtMSk7XHJcblx0XHRcdFx0XHRpZih2YWx1ZT09PScnKXtjb250aW51ZTt9XHJcblx0XHRcdFx0XHRpZihrZXk9PT0nJyl7XHJcblx0XHRcdFx0XHRcdGtleSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYodmFsdWUuc3RhcnRzV2l0aCgnaHR0cCcpKXtcclxuXHRcdFx0XHRcdFx0a2V5PSdcdUQ4M0NcdURGMTAgJytrZXk7XHJcblx0XHRcdFx0XHR9ZWxzZSBpZih2YWx1ZS5zdGFydHNXaXRoKCdmaWxlOi8vLycpKXtcclxuXHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5zbGljZSg4KVxyXG5cdFx0XHRcdFx0XHRrZXk9ICdcdUQ4M0RcdURDQzEgJyAra2V5O1xyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdGtleSA9ICdcdUQ4M0RcdUREMTcgJytrZXk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpdGVtc1trZXldID0gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZihpbmxpbmtzKXtcclxuXHQgICAgICAgIGxldCBsaW5rcyA9IHRoaXMuZ2V0X2lubGlua3ModGZpbGUsZmFsc2UpO1xyXG5cdCAgICAgICAgZm9yKGxldCBpIG9mIGxpbmtzKXtcclxuXHQgICAgICAgICAgICBpZihvbmx5bWQmJiAhKGkuZXh0ZW5zaW9uPT09J21kJykpe2NvbnRpbnVlO31cclxuXHRcdFx0XHRpZihpLmV4dGVuc2lvbj09PSdtZCcpe1xyXG5cdFx0XHRcdFx0aXRlbXNbJ1x1MjEzOVx1RkUwRiAnK2kuYmFzZW5hbWVdID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5nZXRGdWxsUGF0aChpLnBhdGgpO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aXRlbXNbJ1x1MjEzOVx1RkUwRiAnK2kubmFtZV0gPSAodGhpcy5hcHAudmF1bHQuYWRhcHRlciBhcyBhbnkpLmdldEZ1bGxQYXRoKGkucGF0aCk7XHJcblx0XHRcdFx0fVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICAgIGlmKG91dGxpbmtzKXtcclxuXHQgICAgICAgIGxldCBsaW5rcyA9IHRoaXMuZ2V0X291dGxpbmtzKHRmaWxlLGZhbHNlKTtcclxuXHQgICAgICAgIGZvcihsZXQgaSBvZiBsaW5rcyl7XHJcblx0ICAgICAgICAgICAgaWYob25seW1kJiYgIShpLmV4dGVuc2lvbj09PSdtZCcpKXtjb250aW51ZTt9XHJcblx0XHRcdFx0aWYoaS5leHRlbnNpb249PT0nbWQnKXtcclxuXHRcdFx0XHRcdGl0ZW1zWydcdUQ4M0NcdUREN0VcdUZFMEYgJytpLmJhc2VuYW1lXSA9ICh0aGlzLmFwcC52YXVsdC5hZGFwdGVyIGFzIGFueSkuZ2V0RnVsbFBhdGgoaS5wYXRoKTtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdGl0ZW1zWydcdUQ4M0NcdUREN0VcdUZFMEYgJytpLm5hbWVdID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5nZXRGdWxsUGF0aChpLnBhdGgpO1xyXG5cdFx0XHRcdH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdFx0aXRlbXNbJ1x1RDgzRFx1REM5MiB2YXVsdCddID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5nZXRGdWxsUGF0aCgnLicpO1xyXG5cdFx0cmV0dXJuIGl0ZW1zO1xyXG5cdH1cclxuXHJcblx0Z2V0X2ZvbGRlcl9wcmVfaW5mbyh0Zm9sZGVyOlRGb2xkZXIpe1xyXG5cdFx0bGV0IG5vdGUgPSB0aGlzLmdldF90ZmlsZSh0Zm9sZGVyLnBhdGgrJy8nK3Rmb2xkZXIubmFtZSsnLm1kJyk7XHJcblx0XHRpZighbm90ZSl7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0J3ByZXYnOm51bGwsXHJcblx0XHRcdFx0J29mZnNldCc6MC4wLFxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0bGV0IGluZm8gPSB7XHJcblx0XHRcdCdwcmV2Jzp0aGlzLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIobm90ZSwnRm9sZGVyUHJldk5vdGUnKSxcclxuXHRcdFx0J29mZnNldCc6dGhpcy5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKG5vdGUsJ0ZvbGRlclByZXZOb3RlT2Zmc2V0JyksXHJcblx0XHR9XHJcblx0XHRpZihpbmZvWydvZmZzZXQnXSA9PW51bGwpe1xyXG5cdFx0XHRpbmZvWydvZmZzZXQnXSA9IDAuMDtcclxuXHRcdH1cclxuXHRcdHJldHVybiBpbmZvO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2V0X2ZvbGRlcl9wcmVfaW5mbyh0Zm9sZGVyOlRGb2xkZXIscHJldjpzdHJpbmd8VEZpbGUsb2Zmc2V0Om51bWJlcil7XHJcblx0XHRsZXQgdGZpbGUgPSBhd2FpdCB0aGlzLmdldF9mb2xkZXJfbm90ZSh0Zm9sZGVyKTtcclxuXHRcdGxldCBhbmNob3IgID0gcHJldiBpbnN0YW5jZW9mIFRGaWxlP3ByZXY6dGhpcy5nZXRfdGZpbGUocHJldik7XHJcblx0XHRpZihhbmNob3Ipe1xyXG5cdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5lZGl0b3Iuc2V0X211bHRpX2Zyb250bWF0dGVyKFxyXG5cdFx0XHRcdHRmaWxlLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwiRm9sZGVyUHJldk5vdGVcIjpgW1ske2FuY2hvci5iYXNlbmFtZX1dXWAsXHJcblx0XHRcdFx0XHRcIkZvbGRlclByZXZOb3RlT2Zmc2V0XCI6b2Zmc2V0LFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0KVxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLmVkaXRvci5zZXRfbXVsdGlfZnJvbnRtYXR0ZXIoXHJcblx0XHRcdFx0dGZpbGUsXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJGb2xkZXJQcmV2Tm90ZVwiOm51bGwsXHJcblx0XHRcdFx0XHRcIkZvbGRlclByZXZOb3RlT2Zmc2V0XCI6b2Zmc2V0LFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0KVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcmVzZXRfb2Zmc2V0X29mX2ZvbGRlcih0Zm9sZGVyOlRGb2xkZXIpe1xyXG5cdFx0bGV0IHByZXYgPSB0aGlzLmdldF9mb2xkZXJfcHJlX2luZm8odGZvbGRlcik7XHJcblx0XHRpZihwcmV2WydvZmZzZXQnXT09bnVsbCl7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgdGZvbGRlcnMgPSB0Zm9sZGVyLnBhcmVudD8uY2hpbGRyZW4uZmlsdGVyKCh4OlRBYnN0cmFjdEZpbGUpPT54IGluc3RhbmNlb2YgVEZvbGRlcik7XHJcblx0XHRsZXQgZm9sZGVyczphbnlbXSA9IFtdO1xyXG5cdFx0aWYodGZvbGRlcnMpe1xyXG5cdFx0XHRmb3IobGV0IHggb2YgdGZvbGRlcnMpe1xyXG5cdFx0XHRcdGxldCBpbmZvID0gdGhpcy5nZXRfZm9sZGVyX3ByZV9pbmZvKHggYXMgVEZvbGRlcik7XHJcblx0XHRcdFx0aWYoaW5mb1sncHJldiddPT1wcmV2WydwcmV2J10pe1xyXG5cdFx0XHRcdFx0Zm9sZGVycy5wdXNoKHgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Zm9sZGVycyA9IGZvbGRlcnMuc29ydCgoYSxiKT0+e1xyXG5cdFx0XHRsZXQgYWluZm8gPSB0aGlzLmdldF9mb2xkZXJfcHJlX2luZm8oYSBhcyBURm9sZGVyKTtcclxuXHRcdFx0bGV0IGJpbmZvID0gdGhpcy5nZXRfZm9sZGVyX3ByZV9pbmZvKGIgYXMgVEZvbGRlcik7XHJcblx0XHRcdHJldHVybiBhaW5mb1snb2Zmc2V0J10tYmluZm9bJ29mZnNldCddO1xyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdGlmKGZvbGRlcnMubGVuZ3RoPT0wKXtyZXR1cm59XHJcblxyXG5cdFx0bGV0IGJhc2UgPSBNYXRoLnBvdygwLjEsTWF0aC5jZWlsKE1hdGgubG9nMTAoZm9sZGVycy5sZW5ndGgrMSkpKzEpO1xyXG5cdFx0bGV0IG9mZnNldCA9IDAuNS1iYXNlO1xyXG5cdFx0Zm9yKGxldCBmb2xkZXIgb2YgZm9sZGVycyl7XHJcblx0XHRcdG9mZnNldCA9IG9mZnNldCtiYXNlO1xyXG5cdFx0XHRhd2FpdCB0aGlzLnNldF9mb2xkZXJfcHJlX2luZm8oZm9sZGVyLHByZXZbJ3ByZXYnXSxvZmZzZXQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRhc3luYyBnZXRfZm9sZGVyX25vdGUodGZvbGRlcjpURm9sZGVyLGNyZWF0ZT10cnVlKXtcclxuXHRcdGxldCBub3RlID0gdGhpcy5nZXRfdGZpbGUodGZvbGRlci5wYXRoKycvJyt0Zm9sZGVyLm5hbWUrJy5tZCcpO1xyXG5cdFx0aWYoIW5vdGUgJiYgY3JlYXRlKXtcclxuXHRcdFx0bm90ZSA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZSh0Zm9sZGVyLnBhdGgrJy8nK3Rmb2xkZXIubmFtZSsnLm1kJywnJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbm90ZTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIG1vdmVfZm9sZGVyX2FzX25leHRfbm90ZSh0Zm9sZGVyOlRGb2xkZXIsYW5jaG9yOlRGb2xkZXJ8VEZpbGUpe1xyXG5cdFx0aWYoYW5jaG9yIGluc3RhbmNlb2YgVEZvbGRlcil7XHJcblx0XHRcdGxldCBwcmV2ID0gdGhpcy5nZXRfZm9sZGVyX3ByZV9pbmZvKGFuY2hvcik7XHJcblx0XHRcdGF3YWl0IHRoaXMuc2V0X2ZvbGRlcl9wcmVfaW5mbyh0Zm9sZGVyLHByZXZbJ3ByZXYnXSxwcmV2WydvZmZzZXQnXSoxLjAwMSk7XHJcblx0XHR9ZWxzZSBpZihhbmNob3IgaW5zdGFuY2VvZiBURmlsZSl7XHJcblx0XHRcdGxldCBwcmV2czphbnlbXSA9IFtdO1xyXG5cdFx0XHRsZXQgdGZvbGRlcnMgPSB0Zm9sZGVyLnBhcmVudD8uY2hpbGRyZW4uZmlsdGVyKCh4OlRBYnN0cmFjdEZpbGUpPT54IGluc3RhbmNlb2YgVEZvbGRlciAmJiB4IT10Zm9sZGVyKTtcclxuXHRcdFx0aWYodGZvbGRlcnMpe1xyXG5cdFx0XHRcdGZvcihsZXQgeCBvZiB0Zm9sZGVycyl7XHJcblx0XHRcdFx0XHRsZXQgaW5mbyA9IGF3YWl0IHRoaXMuZ2V0X2ZvbGRlcl9wcmVfaW5mbyh4IGFzIFRGb2xkZXIpO1xyXG5cdFx0XHRcdFx0cHJldnMucHVzaChpbmZvKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cHJldnMgPSBwcmV2cy5maWx0ZXIoeD0+eFsncHJldiddICYmIHRoaXMuZ2V0X3RmaWxlKHhbJ3ByZXYnXSk9PWFuY2hvcikubWFwKHg9PnhbJ29mZnNldCddKTtcclxuXHRcdFx0aWYocHJldnMubGVuZ3RoPT0wKXtcclxuXHRcdFx0XHR0aGlzLnNldF9mb2xkZXJfcHJlX2luZm8odGZvbGRlcixhbmNob3IsMC41KTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0dGhpcy5zZXRfZm9sZGVyX3ByZV9pbmZvKHRmb2xkZXIsYW5jaG9yLE1hdGgubWluKC4uLnByZXZzKSoxLjAwMSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0YXdhaXQgdGhpcy5yZXNldF9vZmZzZXRfb2ZfZm9sZGVyKHRmb2xkZXIpO1xyXG5cdH1cclxuXHJcblx0Z2V0X2NvbmZsdWVuY2VfbGV2ZWwobm90ZTpURmlsZSl7XHJcblx0XHRsZXQgZm0gPSB0aGlzLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIobm90ZSwgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmllbGRfb2ZfY29uZmx1ZW5jZV90YWJfZm9ybWF0KTtcclxuXHRcdGlmKGZtKXtcclxuXHRcdFx0cmV0dXJuIChmbS5tYXRjaCgvXFx0L2cpIHx8IFtdKS5sZW5ndGg7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9XHJcbn0iLCAiXHJcbmltcG9ydCB7IFxyXG5cdEFwcCwgTW9kYWwsIE5vdGljZSxNYXJrZG93blJlbmRlcmVyLENvbXBvbmVudCxcclxuICAgIFRGaWxlXHJcbn0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW1wb3J0IE5vdGVDaGFpblBsdWdpbiBmcm9tIFwiLi4vbWFpblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5vdGVDb250ZW50TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICBjb250ZW50OiBzdHJpbmc7XHJcbiAgICBwbHVnaW46IE5vdGVDaGFpblBsdWdpbjtcclxuICAgIHNvdXJjZVBhdGg6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgY29udGVudDogc3RyaW5nLCBwbHVnaW46IE5vdGVDaGFpblBsdWdpbiwgc291cmNlUGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgICAgIHRoaXMuc291cmNlUGF0aCA9IHNvdXJjZVBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHtjb250ZW50RWx9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLm1vZGFsRWwuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICB0aGlzLm1vZGFsRWwuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7IC8vIFx1NkRGQlx1NTJBMFx1NkVEQVx1NTJBOFx1Njc2MVxyXG5cclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAnbm90ZS1jb250ZW50LWNvbnRhaW5lcicgfSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKCdtYXJrZG93bi1yZW5kZXJlZCcpO1xyXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLWNlbGwnO1xyXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS52ZXJ0aWNhbEFsaWduID0gJ21pZGRsZSc7XHJcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnBhZGRpbmcgPSAnMjBweCc7IC8vIFx1NkRGQlx1NTJBMFx1NEUwMFx1NEU5Qlx1NTE4NVx1OEZCOVx1OERERFxyXG5cclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTRFMDBcdTRFMkFcdTRFMzRcdTY1RjZcdTc2ODQgQ29tcG9uZW50IFx1NUI5RVx1NEY4QlxyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnQoKTtcclxuICAgICAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlcih0aGlzLmFwcCwgdGhpcy5jb250ZW50LCBjb250YWluZXIsIHRoaXMuc291cmNlUGF0aCwgY29tcG9uZW50KS50aGVuKHg9PntcclxuICAgICAgICAgICAgdGhpcy5hZGRDbGlja0xpc3RlbmVyKGNvbnRhaW5lcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgb25DbG9zZSgpIHtcclxuICAgICAgICBsZXQge2NvbnRlbnRFbH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENsaWNrTGlzdGVuZXIoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgPT09ICdBJyAmJiB0YXJnZXQuaGFzQ2xhc3MoJ2ludGVybmFsLWxpbmsnKSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGxldCBocmVmID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhyZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5Ob3RlSW5NYWluVmlldyhocmVmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYS5pbnRlcm5hbC1saW5rJykuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaHJlZiA9IGVsLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgICAgICAgICBpZiAoaHJlZikge1xyXG4gICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnLCBocmVmKTtcclxuICAgICAgICAgICAgICAgIGVsLnNldEF0dHIoJ2FyaWEtbGFiZWwnLCBocmVmKTtcclxuICAgICAgICAgICAgICAgIGVsLmFkZENsYXNzKCdob3Zlci1saW5rJyk7IC8vIFx1MjcwNSBcdTY4MzhcdTVGQzNcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKFwiaG92ZXItbGlua1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdtYXJrZG93bicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyUGFyZW50OiBlbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rdGV4dDogaHJlZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlUGF0aDogdGhpcy5zb3VyY2VQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBvcGVuTm90ZUluTWFpblZpZXcobGlua1RleHQ6IHN0cmluZykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQobGlua1RleHQsICcnLCBmYWxzZSwgeyBhY3RpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvciBvcGVuaW5nIG5vdGU6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTm90ZUVkaXRvck1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgZmlsZVBhdGg6IHN0cmluZzsgLy8gXHU2REZCXHU1MkEwXHU2NTg3XHU0RUY2XHU4REVGXHU1Rjg0XHU1QzVFXHU2MDI3XHJcbiAgICBpc0VkaXRNb2RlOiBib29sZWFuOyAvLyBcdTZERkJcdTUyQTBcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTVDNUVcdTYwMjdcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZmlsZVBhdGg6IHN0cmluZywgaXNFZGl0TW9kZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XHJcbiAgICAgICAgdGhpcy5pc0VkaXRNb2RlID0gaXNFZGl0TW9kZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBvbk9wZW4oKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRWRpdE1vZGUpIHtcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2NTg3XHU0RUY2XHU1QkY5XHU4QzYxXHJcbiAgICAgICAgICAgIGxldCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMuZmlsZVBhdGgpIGFzIFRGaWxlO1xyXG4gICAgICAgICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU0RTAwXHU0RTJBXHU2NUIwXHU3Njg0XHU1REU1XHU0RjVDXHU1MzNBXHU1M0Y2XHU1QjUwXHU1RTc2XHU2MjUzXHU1RjAwXHU2NTg3XHU0RUY2XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBsZWFmLm9wZW5GaWxlKGZpbGUsIHsgc3RhdGU6IHsgbW9kZTogJ3NvdXJjZScgfSB9KTsgLy8gXHU0RUU1XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU2MjUzXHU1RjAwXHU2NTg3XHU0RUY2XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gXHU1MTczXHU5NUVEXHU1RjUzXHU1MjREXHU2QTIxXHU2MDAxXHU3QTk3XHU1M0UzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBGaWxlIG5vdCBmb3VuZDogJHt0aGlzLmZpbGVQYXRofWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gXHU1MTc2XHU0RUQ2XHU2QTIxXHU1RjBGXHU3Njg0XHU1OTA0XHU3NDA2XHU5MDNCXHU4RjkxXHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vdCBpbiBlZGl0IG1vZGUuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHtcclxuXHRBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLFxyXG5cdFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgbW9tZW50LCBNYXJrZG93blJlbmRlcmVyLCBDb21wb25lbnQsXHJcblx0VEFic3RyYWN0RmlsZSxcclxuXHRURmlsZSwgVEZvbGRlcixcclxuXHRNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0XHJcbn0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW1wb3J0IE5vdGVDaGFpblBsdWdpbiBmcm9tIFwiLi4vbWFpblwiO1xyXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdwcm9jZXNzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBOQ1RleHRhcmVhIHtcclxuXHR5YW1sanMgPSByZXF1aXJlKCdqcy15YW1sJylcclxuXHRwbHVnaW46IE5vdGVDaGFpblBsdWdpbjtcclxuXHRhcHA6IEFwcDtcclxuXHJcblx0Y29uc3RydWN0b3IocGx1Z2luOiBOb3RlQ2hhaW5QbHVnaW4pIHtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdFx0dGhpcy5hcHAgPSBwbHVnaW4uYXBwO1xyXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKClcclxuXHR9XHJcblxyXG5cdGFycmF5QnVmZmVyVG9CYXNlNjQoYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xyXG5cdFx0bGV0IGJpbmFyeSA9ICcnO1xyXG5cdFx0bGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcclxuXHRcdGxldCBsZW4gPSBieXRlcy5ieXRlTGVuZ3RoO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG5cdFx0XHRiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gd2luZG93LmJ0b2EoYmluYXJ5KTtcclxuXHR9XHJcblx0YXN5bmMgcmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihmaWVsZCA9ICd0ZXh0YXJlYScpIHtcclxuXHRcdGxldCBuYyA9IHRoaXMucGx1Z2luXHJcblx0XHRuYy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKGZpZWxkLCBhc3luYyAoXHJcblx0XHRcdHNvdXJjZTogc3RyaW5nLFxyXG5cdFx0XHRlbDogSFRNTEVsZW1lbnQsXHJcblx0XHRcdGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dFxyXG5cdFx0KSA9PiB7XHJcblx0XHRcdHNvdXJjZSA9IHNvdXJjZS50cmltKClcclxuXHRcdFx0bGV0IGNvbmZpZztcclxuXHRcdFx0aWYgKHNvdXJjZSA9PSAnJykge1xyXG5cdFx0XHRcdGNvbmZpZyA9IHt9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y29uZmlnID0gbmMudGV4dGFyZWEueWFtbGpzLmxvYWQoc291cmNlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRsZXQgdGZpbGUgPSBuYy5jaGFpbi5nZXRfdGZpbGUoY3R4LnNvdXJjZVBhdGgpO1xyXG5cdFx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdFx0bGV0IGZyb250bWF0dGVyID0gKG5jLmFwcCBhcyBhbnkpLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRmaWxlKVsnZnJvbnRtYXR0ZXInXTtcclxuXHRcdFx0XHRpZihmcm9udG1hdHRlcil7XHJcblx0XHRcdFx0XHRmb3IobGV0IGtleSBpbiBmcm9udG1hdHRlcil7XHJcblx0XHRcdFx0XHRcdGNvbmZpZ1trZXldID0gZnJvbnRtYXR0ZXJba2V5XTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGxldCBjb250YWluZXIgPSBlbC5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogJ3RleHRhcmVhLWNvbnRhaW5lcicgfSk7XHJcblxyXG5cdFx0XHRsZXQgYXJlYTogYW55ID0gbnVsbDtcclxuXHRcdFx0aWYgKGNvbmZpZ1sndGV4dGFyZWEnXSAhPSBmYWxzZSkge1xyXG5cdFx0XHRcdGxldCBjbHMgPSAnY29kZV9ibG9ja190ZXh0YXJlYSdcclxuXHRcdFx0XHRpZiAoY29uZmlnLnRleHRhcmVhPy5jbHMpIHtcclxuXHRcdFx0XHRcdGNscyA9IGNvbmZpZ1sndGV4dGFyZWEnXVsnY2xzJ11cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0YXJlYSA9IGNvbnRhaW5lci5jcmVhdGVFbChcInRleHRhcmVhXCIsIHsgY2xzOiBjbHMgfSk7XHJcblx0XHRcdFx0YXJlYS5zdHlsZS53aWR0aCA9ICcxMDAlJ1xyXG5cdFx0XHRcdGFyZWEuc3R5bGUuaGVpZ2h0ID0gJzIwMHB4J1xyXG5cdFx0XHRcdGxldCBzdHlsZSA9IGNvbmZpZy50ZXh0YXJlYT8uc3R5bGVcclxuXHRcdFx0XHRpZiAoc3R5bGUgJiYgdHlwZW9mIChzdHlsZSkgPT0gJ29iamVjdCcpIHtcclxuXHRcdFx0XHRcdGZvciAobGV0IG5hbWUgaW4gc3R5bGUpIHtcclxuXHRcdFx0XHRcdFx0aWYgKG5hbWUgPT0gJ2JhY2tncm91bmRJbWFnZScpIHtcclxuXHRcdFx0XHRcdFx0XHRsZXQgaW1nID0gbmMuY2hhaW4uZ2V0X3RmaWxlKHN0eWxlW25hbWVdKVxyXG5cdFx0XHRcdFx0XHRcdGlmIChpbWcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGxldCBkYXRhID0gYXdhaXQgbmMuYXBwLnZhdWx0LnJlYWRCaW5hcnkoaW1nKVxyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHRleHQgPSB0aGlzLmFycmF5QnVmZmVyVG9CYXNlNjQoZGF0YSk7XHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgYnM2NCA9IGBkYXRhOmltYWdlL3BuZztiYXNlNjQsJHt0ZXh0fWA7XHJcblx0XHRcdFx0XHRcdFx0XHQoYXJlYSBhcyBhbnkpLnN0eWxlW25hbWVdID0gYHVybCgnJHticzY0fScpYFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGludWVcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0KGFyZWEgYXMgYW55KS5zdHlsZVtuYW1lXSA9IHN0eWxlW25hbWVdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKGxldCBrIGluIGNvbmZpZykge1xyXG5cdFx0XHRcdGlmIChrLnN0YXJ0c1dpdGgoJ2J1dHRvbnMnKSkge1xyXG5cdFx0XHRcdFx0bGV0IGJ0bnMgPSBjb25maWdba107XHJcblx0XHRcdFx0XHRpZiAoYnRucyAmJiBBcnJheS5pc0FycmF5KGJ0bnMpKSB7XHJcblx0XHRcdFx0XHRcdC8vIFx1NTIxQlx1NUVGQVx1NEUwMFx1NEUyQVx1NjMwOVx1OTRBRVx1NUJCOVx1NTY2OFxyXG5cdFx0XHRcdFx0XHRsZXQgYnV0dG9uQ29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiAnY29kZV9ibG9ja190ZXh0YXJlYV9idG5fY29udGFpbmVyJyB9KTtcclxuXHRcdFx0XHRcdFx0YnV0dG9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7IC8vIFx1OEJCRVx1N0Y2RVx1NjMwOVx1OTRBRVx1NUJCOVx1NTY2OFx1NEUzQWZsZXhcdTVFMDNcdTVDNDBcdUZGMENcdTRGN0ZcdTYzMDlcdTk0QUVcdTU3MjhcdTU0MENcdTRFMDBcdTg4NENcdTY2M0VcdTc5M0FcclxuXHRcdFx0XHRcdFx0YnV0dG9uQ29udGFpbmVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2ZsZXgtc3RhcnQnOyAvLyBcdThCQkVcdTdGNkVcdTYzMDlcdTk0QUVcdTRFNEJcdTk1RjRcdTc2ODRcdTk1RjRcdThERERcdTU3NDdcdTUzMDBcdTUyMDZcdTVFMDNcclxuXHRcdFx0XHRcdFx0YnV0dG9uQ29udGFpbmVyLnN0eWxlLm1hcmdpblRvcCA9ICcxMHB4J1xyXG5cdFx0XHRcdFx0XHRmb3IgKGxldCBidG4gb2YgYnRucykge1xyXG5cdFx0XHRcdFx0XHRcdGxldCBuYW1lID0gYnRuWzBdXHJcblx0XHRcdFx0XHRcdFx0bGV0IGZuYW1lID0gYnRuWzFdXHJcblx0XHRcdFx0XHRcdFx0aWYgKCFuYW1lIHx8ICFmbmFtZSkgeyBjb250aW51ZSB9XHJcblxyXG5cdFx0XHRcdFx0XHRcdGxldCBjbHMgPSAnY29kZV9ibG9ja190ZXh0YXJlYV9idG4nXHJcblx0XHRcdFx0XHRcdFx0aWYgKGJ0blsyXSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y2xzID0gYnRuWzJdXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdC8vIFx1NUU5M1x1ODFFQVx1NUUyNlx1NTFGRFx1NjU3MFxyXG5cdFx0XHRcdFx0XHRcdGxldCB1ZnVuYyA9IChuYy50ZXh0YXJlYSBhcyBhbnkpW2ZuYW1lXTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIXVmdW5jKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBjdXN0b21KUy90ZW1wbGF0ZXJcdTUxRkRcdTY1NzBcclxuXHRcdFx0XHRcdFx0XHRcdHVmdW5jID0gYXdhaXQgbmMudXRpbHMuZ2V0X3N0cl9mdW5jKG5jLmFwcCwgZm5hbWUpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZiAodWZ1bmMpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGxldCB4YnRuID0gYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6IG5hbWUsIGNsczogY2xzIH0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0eGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dWZ1bmMoYXJlYSwgc291cmNlLCBlbCwgY3R4KVxyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0XHRjb250aW51ZVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gXHU1NDdEXHU0RUU0XHJcblx0XHRcdFx0XHRcdFx0bGV0IGMgPSAobmMuYXBwIGFzIGFueSkuY29tbWFuZHM/LmZpbmRDb21tYW5kKGZuYW1lKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoYykge1xyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHhidG4gPSBidXR0b25Db250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogbmFtZSwgY2xzOiBjbHMgfSk7XHJcblx0XHRcdFx0XHRcdFx0XHR4YnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQobmMuYXBwIGFzIGFueSkuY29tbWFuZHMuZXhlY3V0ZUNvbW1hbmRCeUlkKGZuYW1lKVxyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0XHRjb250aW51ZVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0bGV0IHRmaWxlID0gbmMuY2hhaW4uZ2V0X3RmaWxlKGZuYW1lKVxyXG5cdFx0XHRcdFx0XHRcdGlmICh0ZmlsZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHhidG4gPSBidXR0b25Db250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogbmFtZSwgY2xzOiBjbHMgfSk7XHJcblx0XHRcdFx0XHRcdFx0XHR4YnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRsZXQgdGFncyA9IG5jLmNoYWluLmdldF90YWdzKHRmaWxlKS5tYXAoeD0+eC5zbGljZSgxKSkuZmlsdGVyKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHg9Pm5jLnNldHRpbmdzLnRwbF90YWdzX2ZvbGRlci5jb250YWlucyh4KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZih0YWdzLmxlbmd0aD4wKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRuYy51dGlscy5wYXJzZV90ZW1wbGF0ZXIoXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRuYy5hcHAsIGZuYW1lLCB0cnVlLCB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZWE6IGFyZWEsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNvdXJjZTogc291cmNlLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlbDogZWwsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGN0eDogY3R4XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bmMuY2hhaW4ub3Blbl9ub3RlX2luX21vZGFsKHRmaWxlLnBhdGgpXHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGludWVcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbkNvbnRhaW5lcik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoYXJlYSAmJiBjb25maWdbJ2ZvY3VzJ10gIT0gZmFsc2UpIHtcclxuXHRcdFx0XHRhcmVhLmZvY3VzKClcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRjbGVhcl9hcmVhKGFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQpIHtcclxuXHRcdGFyZWEudmFsdWUgPSAnJztcclxuXHR9XHJcblxyXG5cdGNvcHlfYXJlYShhcmVhOiBIVE1MVGV4dEFyZWFFbGVtZW50KSB7XHJcblx0XHRhcmVhLnNlbGVjdCgpO1xyXG5cdFx0bmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoYXJlYS52YWx1ZSk7XHJcblx0fVxyXG5cclxuXHRsb2dfYXJlYShhcmVhOiBIVE1MVGV4dEFyZWFFbGVtZW50KSB7XHJcblx0XHRjb25zb2xlLmxvZygnXHU1RjUzXHU1MjREVGV4dGFyZWFcdTRFM0FcdUZGMUEnKVxyXG5cdFx0Y29uc29sZS5sb2coYXJlYSlcclxuXHR9XHJcbn1cclxuXHJcblxyXG4iLCAiaW1wb3J0IHsgXHJcblx0QXBwLFRBYnN0cmFjdEZpbGUsVEZpbGUsVEZvbGRlcixWYXVsdCxDYWNoZWRNZXRhZGF0YVxyXG59IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmltcG9ydCBOb3RlQ2hhaW5QbHVnaW4gZnJvbSBcIi4uL21haW5cIjtcclxuaW1wb3J0IHtOb3RlQ2hhaW59IGZyb20gXCIuL05vdGVDaGFpblwiO1xyXG5pbXBvcnQgeyBhcm91bmQgfSBmcm9tICdtb25rZXktYXJvdW5kJztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTkNGaWxlRXhwbG9yZXJ7XHJcblx0cGx1Z2luOk5vdGVDaGFpblBsdWdpbjtcclxuXHRhcHA6QXBwO1xyXG5cdGNoYWluOk5vdGVDaGFpbjtcclxuXHRnZXRTb3J0ZWRGb2xkZXJJdGVtczpGdW5jdGlvbjtcclxuXHRnZXRTb3J0ZWRGb2xkZXJJdGVtc19uZXc6RnVuY3Rpb247XHJcblx0Z2V0VGl0bGU6RnVuY3Rpb247XHJcblx0Z2V0VGl0bGVfbmV3OkZ1bmN0aW9uO1xyXG5cdF9Gb2xkZXJEb21fOmFueTtcclxuXHRwcml2YXRlIGV4cGxvcmVyUGF0Y2hlczogRnVuY3Rpb25bXSA9IFtdO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihwbHVnaW46Tm90ZUNoYWluUGx1Z2luKXtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdFx0dGhpcy5jaGFpbiA9IHBsdWdpbi5jaGFpbjtcclxuXHRcdHRoaXMuYXBwID0gcGx1Z2luLmFwcDtcclxuXHRcdHRoaXMucmVnaXN0ZXIoKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlZ2lzdGVyKCl7XHJcblx0XHRhd2FpdCB0aGlzLndhaXRGb3JGaWxlRXhwbG9yZXIoKTtcclxuXHRcdGF3YWl0IHRoaXMucGF0Y2hGaWxlRXhwbG9yZXIoKTtcclxuXHRcdHRyeSB7XHRcdFx0XHJcblx0XHRcdHRoaXMuc29ydCgwLHRydWUpO1xyXG5cdFx0XHR0aGlzLnNldF9kaXNwbGF5X3RleHQoKVxyXG5cdFx0XHR0aGlzLnNldF9maWxlaXRlbV9zdHlsZSgpXHJcblx0XHRcdFxyXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBwYXRjaEZpbGVFeHBsb3JlcigpIHtcclxuXHJcblx0XHQvLyBcdTc2RUVcdTVGNTVcdTYyRDZcdTUyQThcdTYzOTJcdTVFOEZcclxuXHRcdGxldCBleHBsb3JlclZpZXcgPSB0aGlzLmZpbGVfZXhwbG9yZXI7XHJcblx0XHR0aGlzLmV4cGxvcmVyUGF0Y2hlcy5wdXNoKFxyXG5cdFx0XHRhcm91bmQoT2JqZWN0LmdldFByb3RvdHlwZU9mKCh0aGlzLnBsdWdpbi5hcHAgYXMgYW55KS5kcmFnTWFuYWdlciksIHtcclxuXHRcdFx0XHRvbkRyYWdFbmQ6KG9yaWdpbmFsKSA9PiBmdW5jdGlvbiguLi5hcmdzOmFueVtdKSB7XHJcblx0XHRcdFx0XHRsZXQgZHJhZ01hbmFnZXIgPSB0aGlzO1xyXG5cdFx0XHRcdFx0bGV0IG5jID0gZHJhZ01hbmFnZXIuYXBwLnBsdWdpbnMucGx1Z2luc1snbm90ZS1jaGFpbiddO1xyXG5cdFx0XHRcdFx0YXN5bmMgZnVuY3Rpb24gbW92ZV9maWxlKGRyYWdNYW5hZ2VyOmFueSl7XHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0bGV0IGhvdmVyRWwgPSBkcmFnTWFuYWdlci5ob3ZlckVsO1xyXG5cdFx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdob3ZlckVsOicsaG92ZXJFbCk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGhvdmVyRWwgJiYgKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoaG92ZXJFbC5jbGFzc0xpc3QuY29udGFpbnMoXCJ0cmVlLWl0ZW1cIikgJiYgaG92ZXJFbC5jbGFzc0xpc3QuY29udGFpbnMoXCJuYXYtZm9sZGVyXCIpKSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoaG92ZXJFbC5jbGFzc0xpc3QuY29udGFpbnMoXCJuYXYtZmlsZXMtY29udGFpbmVyXCIpKVxyXG5cdFx0XHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0XHRcdCkge1x0XHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IGdob3N0RWwgPSBkcmFnTWFuYWdlci5naG9zdEVsO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoIWdob3N0RWwpe3JldHVybjt9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHggPSBwYXJzZUludChnaG9zdEVsLnN0eWxlLmxlZnQsIDEwKTtcclxuXHRcdFx0XHRcdFx0XHRcdGxldCB5ID0gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS50b3AsIDEwKTtcclxuXHRcdFx0XHRcdFx0XHRcdGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LHkpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoIWVsZW1lbnQpe3JldHVybjt9XHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgcGF0aDtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCduYXYtZmlsZS10aXRsZS1jb250ZW50Jykpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtZW50ID0gZWxlbWVudC5jbG9zZXN0KCcubmF2LWZpbGUtdGl0bGUnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoIWVsZW1lbnQpe3JldHVybjt9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdHBhdGggPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtcGF0aFwiKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgdGFyZ2V0ID0gZHJhZ01hbmFnZXIuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYodGFyZ2V0IGluc3RhbmNlb2YgVEZvbGRlcnx8dGFyZ2V0LmV4dGVuc2lvbiE9J21kJyl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGxldCBzb3VyY2VFbHMgPSBkcmFnTWFuYWdlci5zb3VyY2VFbHM7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYoIXNvdXJjZUVscyB8fCBzb3VyY2VFbHMubGVuZ3RoPT0wKXtyZXR1cm47fVxyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHRmaWxlczogVEZpbGVbXTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKHNvdXJjZUVscy5sZW5ndGg9PTEpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR0ZmlsZXMgPSBzb3VyY2VFbHMubWFwKCh4OmFueSk9PmRyYWdNYW5hZ2VyLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoeD8uZGF0YXNldD8ucGF0aCkpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRmaWxlcyA9IG5jLmNoYWluLmdldF9zZWxlY3RlZF9maWxlcyhmYWxzZSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBcdTk3MDBcdTg5ODFcdTUxNDhcdTYyNjdcdTg4NENvcmlnaW5hbC5jYWxsKHRoaXMsLi4uYXJncyk7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bmMuY2hhaW4uY2hhaW5fc2V0X25leHRfZmlsZXModGZpbGVzLHRhcmdldCx0cnVlKTs7XHJcblx0XHRcdFx0XHRcdFx0XHR9LCAxMDApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGVycm9yKVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZihuYy5zZXR0aW5ncy5pc2RyYWdlZCl7XHJcblx0XHRcdFx0XHRcdG1vdmVfZmlsZShkcmFnTWFuYWdlcik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdG9yaWdpbmFsLmNhbGwodGhpcywuLi5hcmdzKTtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0fSlcclxuXHRcdCk7XHJcblx0XHRcclxuXHRcdHRoaXMuZXhwbG9yZXJQYXRjaGVzLnB1c2goXHJcblx0XHRcdGFyb3VuZChPYmplY3QuZ2V0UHJvdG90eXBlT2YoZXhwbG9yZXJWaWV3KSwge1xyXG5cdFx0XHRcdGdldFNvcnRlZEZvbGRlckl0ZW1zOihvcmlnaW5hbCkgPT4gZnVuY3Rpb24oZTphbnkpIHtcclxuXHRcdFx0XHRcdGxldCBwbHVnaW4gPSAodGhpcy5hcHAgYXMgYW55KS5wbHVnaW5zLmdldFBsdWdpbignbm90ZS1jaGFpbicpO1xyXG5cdFx0XHRcdFx0aWYgKHBsdWdpbikge1xyXG5cdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdGxldCByZXMgPSBvcmlnaW5hbC5jYWxsKHRoaXMsIGUpO1xyXG5cdFx0XHRcdFx0XHRcdGxldCB0ZmlsZXMgPSBwbHVnaW4uY2hhaW4uY2hpbGRyZW5bZS5wYXRoXTtcclxuXHRcdFx0XHRcdFx0XHRpZiAodGZpbGVzKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXMgPSByZXMuc29ydCgoYTphbnksIGI6YW55KSA9PiB0ZmlsZXMuaW5kZXhPZihhLmZpbGUpIC0gdGZpbGVzLmluZGV4T2YoYi5maWxlKSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXM7XHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCBlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gZHJhZ0ZpbGVzOihvcmlnaW5hbCkgPT4gZnVuY3Rpb24oLi4uYXJncykge1xyXG5cdFx0XHRcdC8vIFx0bGV0IG5jID0gdGhpcy5hcHAucGx1Z2lucy5wbHVnaW5zWydub3RlLWNoYWluJ107XHJcblx0XHRcdFx0Ly8gXHRpZihuYy5zZXR0aW5ncy5pc2RyYWdlZCl7XHJcblxyXG5cdFx0XHRcdC8vIFx0fWVsc2V7XHJcblx0XHRcdFx0Ly8gXHRcdHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xyXG5cdFx0XHRcdC8vIFx0fVxyXG5cdFx0XHRcdC8vIH1cclxuXHRcdFx0fSlcclxuXHRcdCk7XHJcblxyXG5cclxuXHRcdC8vIFx1NjU4N1x1NEVGNlx1NTQwRFx1NzlGMFxyXG5cdFx0bGV0IGl0ZW0gPSBPYmplY3QudmFsdWVzKCh0aGlzLmZpbGVfZXhwbG9yZXIgYXMgYW55KS5maWxlSXRlbXMpWzBdO1xyXG5cdFx0XHJcblx0XHRpZihpdGVtKXtcclxuXHRcdFx0YXJvdW5kKE9iamVjdC5nZXRQcm90b3R5cGVPZihpdGVtKSwge1xyXG5cdFx0XHRcdGdldFR0aXRsZToob3JpZ2luYWwpID0+IGZ1bmN0aW9uKGU6YW55KSB7XHJcblx0XHRcdFx0XHRsZXQgcGx1Z2luID0gKHRoaXMuYXBwIGFzIGFueSkucGx1Z2lucy5nZXRQbHVnaW4oJ25vdGUtY2hhaW4nKTtcclxuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbihlOmFueSl7XHJcblx0XHRcdFx0XHRcdGlmKHBsdWdpbil7XHJcblx0XHRcdFx0XHRcdFx0dHJ5e1xyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHJlcyA9IHBsdWdpbi5leHBsb3Jlci5nZXRfZGlzcGxheV90ZXh0KHRoaXMuZmlsZSlcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXM7XHJcblx0XHRcdFx0XHRcdFx0fWNhdGNoKGUpe1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcyk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHRhc3luYyB1bnJlZ2lzdGVyKCl7XHJcblx0XHRsZXQgaXRlbXMgPSAodGhpcy5maWxlX2V4cGxvcmVyIGFzIGFueSkuZmlsZUl0ZW1zXHJcblx0XHRmb3IobGV0IGtleSBpbiBpdGVtcyl7XHJcblx0XHRcdGxldCBpdGVtID0gaXRlbXNba2V5XVxyXG5cdFx0XHRhd2FpdCB0aGlzLl9zZXRfZGlzcGxheV90ZXh0XyhpdGVtLHRoaXMuZ2V0X29yaWdpbl90ZXh0KGl0ZW0uZmlsZSkpXHJcblx0XHRcdGl0ZW0uZWwuc3R5bGUuYmFja2dyb3VuZCA9IG51bGxcclxuXHRcdFx0aXRlbS5lbC5zdHlsZS5ib3JkZXIgPSBudWxsXHJcblx0XHR9XHJcblx0XHR0aGlzLmV4cGxvcmVyUGF0Y2hlcy5mb3JFYWNoKHVucGF0Y2ggPT4gdW5wYXRjaCgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHdhaXRGb3JGaWxlRXhwbG9yZXIoKSB7XHJcblx0XHR3aGlsZSAoISh0aGlzLmZpbGVfZXhwbG9yZXIgYXMgYW55KS5maWxlSXRlbXMpIHtcclxuXHRcdFx0YXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpOyAvLyBcdTdCNDlcdTVGODUxMDBtc1x1NTE4RFx1NjhDMFx1NjdFNVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuICh0aGlzLmZpbGVfZXhwbG9yZXIgYXMgYW55KS5maWxlSXRlbXNcclxuXHR9XHJcblxyXG5cdGdldCBmaWxlX2V4cGxvcmVyKCl7XHJcblx0XHRsZXQgYSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoXHJcblx0XHRcdFwiZmlsZS1leHBsb3JlclwiXHJcblx0XHQpXHJcblx0XHRsZXQgdmlldyA9IGFbMF0/LnZpZXc7XHJcblx0XHRyZXR1cm4gdmlldztcclxuXHR9XHJcblx0XHJcblx0YXN5bmMgc29ydChuc2xlZXA9MCxpbml0PWZhbHNlKXtcclxuXHRcdGlmKCh0aGlzLmZpbGVfZXhwbG9yZXIgYXMgYW55KT8uc29ydCl7XHJcblx0XHRcdGlmKG5zbGVlcD4wKXtcclxuXHRcdFx0XHRhd2FpdCBzbGVlcChuc2xlZXApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGluaXQpe1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLmNoYWluLmluaXRfY2hpbGRyZW4oKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoT2JqZWN0LmtleXModGhpcy5wbHVnaW4uY2hhaW4uY2hpbGRyZW4pLmxlbmd0aD09MCl7XHJcblx0XHRcdFx0c2V0VGltZW91dCgoKT0+e1xyXG5cdFx0XHRcdFx0dGhpcy5zb3J0KG5zbGVlcCx0cnVlKTtcclxuXHRcdFx0XHR9LCAzMDAwKTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0KHRoaXMuZmlsZV9leHBsb3JlciBhcyBhbnkpLnNvcnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVx0XHJcblx0fVxyXG5cclxuXHRnZXRfZmllbGRfb2ZfZGlzcGxheV90ZXh0KHRmaWxlOlRBYnN0cmFjdEZpbGUpOnN0cmluZ3tcclxuXHRcdGlmKHRoaXMucGx1Z2luLnNldHRpbmdzLmZpZWxkX29mX2Rpc3BsYXlfdGV4dCl7XHJcblx0XHRcdGxldCBpdGVtID0gIHRoaXMucGx1Z2luLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXJfY29uZmlnKHRmaWxlLHRoaXMucGx1Z2luLnNldHRpbmdzLmZpZWxkX29mX2Rpc3BsYXlfdGV4dClcclxuXHRcdFx0aWYodHlwZW9mKGl0ZW0pICE9ICdzdHJpbmcnKXtcclxuXHRcdFx0XHRyZXR1cm4gJydcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gaXRlbVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuICcnXHJcblx0fVxyXG5cclxuXHRnZXRfb3JpZ2luX3RleHQodGZpbGU6VEFic3RyYWN0RmlsZSl7XHJcblx0XHRpZih0ZmlsZSBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHRcdFx0aWYodGZpbGUuZXh0ZW5zaW9uPT0nbWQnKXtcclxuXHRcdFx0XHRyZXR1cm4gdGZpbGUuYmFzZW5hbWVcclxuXHRcdFx0fWVsc2UgaWYodGZpbGUuZXh0ZW5zaW9uPT0nY2FudmFzJyl7XHJcblx0XHRcdFx0cmV0dXJuIHRmaWxlLmJhc2VuYW1lXHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHJldHVybiB0ZmlsZS5uYW1lXHJcblx0XHRcdH1cclxuXHRcdH1lbHNle1xyXG5cdFx0XHRyZXR1cm4gdGZpbGUubmFtZVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0X2l0ZW0odGZpbGU6VEFic3RyYWN0RmlsZSxmaWVsZDpzdHJpbmcpe1xyXG5cdFx0aWYoIWZpZWxkKXtyZXR1cm4gJyd9XHJcblx0XHRsZXQgZmllbGRzID0gZmllbGQuc3BsaXQoJ3wnKVxyXG5cdFx0bGV0IGl0ZW06YW55ID0gJydcclxuXHRcdGZvcihsZXQgZiBvZiBmaWVsZHMpe1xyXG5cdFx0XHRpZihmPT0nJDAnKXtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRfb3JpZ2luX3RleHQodGZpbGUpXHJcblx0XHRcdH1cclxuXHRcdFx0aWYoZi5zdGFydHNXaXRoKCc/Jykpe1xyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRcdH1cclxuXHRcdFx0aWYodGZpbGUgaW5zdGFuY2VvZiBURmlsZSl7XHJcblx0XHRcdFx0bGV0IHMgPSB0aGlzLnBsdWdpbi5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKHRmaWxlLGYpXHJcblx0XHRcdFx0aWYodHlwZW9mIHMgPT09ICdudW1iZXInKXtcclxuXHRcdFx0XHRcdGl0ZW0gPSBgJHtzfWBcclxuXHRcdFx0XHR9ZWxzZSBpZih0eXBlb2YocykhPSdzdHJpbmcnIHx8IHM9PScnKXtcclxuXHRcdFx0XHRcdGNvbnRpbnVlXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGl0ZW0gPSBzXHJcblx0XHRcdFx0YnJlYWtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYoZmllbGRzLmxhc3QoKT8uc3RhcnRzV2l0aCgnPycpICYmIGl0ZW0pe1xyXG5cdFx0XHRyZXR1cm4gZmllbGRzLmxhc3QoKT8uc2xpY2UoMSkucmVwbGFjZSgvXFwkMS9nLGl0ZW0pICB8fCAnJ1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGl0ZW1cclxuXHR9XHJcblxyXG5cdGdldF9kaXNwbGF5X3RleHQodGZpbGU6VEFic3RyYWN0RmlsZSkge1xyXG5cdFx0bGV0IHN0ciA9IHRoaXMuZ2V0X2ZpZWxkX29mX2Rpc3BsYXlfdGV4dCh0ZmlsZSlcclxuXHJcblx0XHRcclxuXHRcdGlmKCFzdHIgJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmllbGRfb2ZfY29uZmx1ZW5jZV90YWJfZm9ybWF0KXtcclxuXHRcdFx0c3RyID0gYDwke3RoaXMucGx1Z2luLnNldHRpbmdzLmZpZWxkX29mX2NvbmZsdWVuY2VfdGFiX2Zvcm1hdH0+PCQwPmBcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRzdHIgPSBgPCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuZmllbGRfb2ZfY29uZmx1ZW5jZV90YWJfZm9ybWF0fT4ke3N0cn1gXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGlmKCFzdHIgfHwgc3RyPT0nJDAnIHx8IHN0cj09JzwkMD4nKXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0X29yaWdpbl90ZXh0KHRmaWxlKVxyXG5cdFx0fVxyXG5cdCAgXHJcblx0XHRsZXQgbXN0ciA9IHN0ci5yZXBsYWNlKC9cXDwoLis/KT9cXD4vZywgKG1hdGNoOnN0cmluZywgZmllbGQ6c3RyaW5nKSA9PiB7XHJcblx0XHRcdHJldHVybiB0aGlzLmdldF9pdGVtKHRmaWxlLGZpZWxkKVxyXG5cdFx0fSlcclxuXHRcdG1zdHIgPSBtc3RyXHJcblx0XHRpZihtc3RyPT0nJyl7XHJcblx0XHRcdHJldHVybiB0aGlzLmdldF9vcmlnaW5fdGV4dCh0ZmlsZSlcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRyZXR1cm4gbXN0clxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0X3NldF9kaXNwbGF5X3RleHRfKGl0ZW06YW55LHR4dDphbnkpe1xyXG5cdFx0aWYoaXRlbSAmJiB0eHQpe1xyXG5cdFx0XHRpZih0eXBlb2YodHh0KT09J3N0cmluZycpe1xyXG5cdFx0XHRcdGl0ZW0uaW5uZXJFbC5zZXRUZXh0KHR4dClcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRzZXRfZGlzcGxheV90ZXh0KCl7XHJcblx0XHRsZXQgaXRlbXMgPSAodGhpcy5maWxlX2V4cGxvcmVyIGFzIGFueSkuZmlsZUl0ZW1zXHJcblx0XHRmb3IobGV0IGtleSBpbiBpdGVtcyl7XHJcblx0XHRcdGxldCBpdGVtID0gaXRlbXNba2V5XVxyXG5cdFx0XHRsZXQgdHh0ID0gdGhpcy5nZXRfZGlzcGxheV90ZXh0KGl0ZW0uZmlsZSlcclxuXHRcdFx0dGhpcy5fc2V0X2Rpc3BsYXlfdGV4dF8oaXRlbSx0eHQpXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBnZXRfZmlsZWl0ZW1fc3R5bGUodGZpbGU6VEFic3RyYWN0RmlsZSl7XHJcblx0XHRpZih0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWVsZF9vZl9iYWNrZ3JvdW5kX2NvbG9yKXtcclxuXHRcdFx0bGV0IHN0eWxlID0gdGhpcy5wbHVnaW4uZWRpdG9yLmdldF9mcm9udG1hdHRlcl9jb25maWcodGZpbGUsdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmllbGRfb2ZfYmFja2dyb3VuZF9jb2xvcilcclxuXHRcdFx0aWYodHlwZW9mKHN0eWxlKT09J3N0cmluZycpe1xyXG5cdFx0XHRcdGxldCBmdW5jID0gYXdhaXQgdGhpcy5wbHVnaW4udXRpbHMuZ2V0X3N0cl9mdW5jKHRoaXMuYXBwLHN0eWxlKVxyXG5cdFx0XHRcdGlmKGZ1bmMpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHN0eWxlXHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbFxyXG5cdH1cclxuXHJcblx0YXN5bmMgc2V0X2ZpbGVpdGVtX3N0eWxlKCl7XHJcblx0XHRsZXQgaXRlbXMgPSAodGhpcy5maWxlX2V4cGxvcmVyIGFzIGFueSkuZmlsZUl0ZW1zXHJcblx0XHRmb3IobGV0IGtleSBpbiBpdGVtcyl7XHJcblx0XHRcdGxldCBpdGVtID0gaXRlbXNba2V5XVxyXG5cdFx0XHRsZXQgc3R5bGUgPSBhd2FpdCB0aGlzLmdldF9maWxlaXRlbV9zdHlsZShpdGVtLmZpbGUpXHJcblx0XHRcdGF3YWl0IHRoaXMuc2V0X2ZpbGVpdGVtX3N0eWxlX29mX2ZpbGUoaXRlbS5maWxlLHN0eWxlKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgc2V0X2ZpbGVpdGVtX3N0eWxlX29mX2ZpbGUodGZpbGU6VEFic3RyYWN0RmlsZSxzdHlsZT1udWxsKXtcclxuXHRcdGlmKCF0ZmlsZSl7cmV0dXJufVxyXG5cdFx0aWYoIXN0eWxlKXtcclxuXHRcdFx0c3R5bGUgPSBhd2FpdCB0aGlzLmdldF9maWxlaXRlbV9zdHlsZSh0ZmlsZSlcclxuXHRcdH1cclxuXHRcdGxldCBpdGVtcyA9ICh0aGlzLmZpbGVfZXhwbG9yZXIgYXMgYW55KS5maWxlSXRlbXNcclxuXHRcdGxldCBpdGVtID0gaXRlbXNbdGZpbGUucGF0aF1cclxuXHRcdGlmKGl0ZW0pe1xyXG5cdFx0XHRpZih0eXBlb2Yoc3R5bGUpPT0nZnVuY3Rpb24nKXtcclxuXHRcdFx0XHRzdHlsZSA9IGF3YWl0IChzdHlsZSBhcyBhbnkpKHRmaWxlKVxyXG5cdFx0XHRcdGlmKCFzdHlsZSl7XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoc3R5bGU9PW51bGwpe1xyXG5cdFx0XHRcdGl0ZW0uZWwuc3R5bGUuYmFja2dyb3VuZCA9IG51bGxcclxuXHRcdFx0XHRpdGVtLmVsLnN0eWxlLmJvcmRlciA9IG51bGxcclxuXHRcdFx0fWVsc2UgaWYgKHR5cGVvZihzdHlsZSk9PSdzdHJpbmcnKXtcclxuXHRcdFx0XHRpdGVtLmVsLnN0eWxlLmJhY2tncm91bmQgPSBzdHlsZVxyXG5cdFx0XHR9ZWxzZSBpZih0eXBlb2Yoc3R5bGUpPT0nb2JqZWN0Jyl7XHJcblx0XHRcdFx0Zm9yKGxldCBrIGluIChzdHlsZSBhcyBhbnkpKXtcclxuXHRcdFx0XHRcdChpdGVtIGFzIGFueSkuZWwuc3R5bGVba10gPSAoc3R5bGUgYXMgYW55KVtrXVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fWVsc2UgaWYodHlwZW9mKHN0eWxlKT09J2Z1bmN0aW9uJyl7XHJcblx0XHRcdFx0YXdhaXQgKHN0eWxlIGFzIGFueSkodGZpbGUpXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0iLCAiZnVuY3Rpb24gYXJvdW5kKG9iaiwgZmFjdG9yaWVzKSB7XG4gIGNvbnN0IHJlbW92ZXJzID0gT2JqZWN0LmtleXMoZmFjdG9yaWVzKS5tYXAoKGtleSkgPT4gYXJvdW5kMShvYmosIGtleSwgZmFjdG9yaWVzW2tleV0pKTtcbiAgcmV0dXJuIHJlbW92ZXJzLmxlbmd0aCA9PT0gMSA/IHJlbW92ZXJzWzBdIDogZnVuY3Rpb24oKSB7XG4gICAgcmVtb3ZlcnMuZm9yRWFjaCgocikgPT4gcigpKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGFyb3VuZDEob2JqLCBtZXRob2QsIGNyZWF0ZVdyYXBwZXIpIHtcbiAgY29uc3QgaW5oZXJpdGVkID0gb2JqW21ldGhvZF0sIGhhZE93biA9IG9iai5oYXNPd25Qcm9wZXJ0eShtZXRob2QpLCBvcmlnaW5hbCA9IGhhZE93biA/IGluaGVyaXRlZCA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKVttZXRob2RdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGxldCBjdXJyZW50ID0gY3JlYXRlV3JhcHBlcihvcmlnaW5hbCk7XG4gIGlmIChpbmhlcml0ZWQpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGN1cnJlbnQsIGluaGVyaXRlZCk7XG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZih3cmFwcGVyLCBjdXJyZW50KTtcbiAgb2JqW21ldGhvZF0gPSB3cmFwcGVyO1xuICByZXR1cm4gcmVtb3ZlO1xuICBmdW5jdGlvbiB3cmFwcGVyKC4uLmFyZ3MpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gb3JpZ2luYWwgJiYgb2JqW21ldGhvZF0gPT09IHdyYXBwZXIpXG4gICAgICByZW1vdmUoKTtcbiAgICByZXR1cm4gY3VycmVudC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgaWYgKG9ialttZXRob2RdID09PSB3cmFwcGVyKSB7XG4gICAgICBpZiAoaGFkT3duKVxuICAgICAgICBvYmpbbWV0aG9kXSA9IG9yaWdpbmFsO1xuICAgICAgZWxzZVxuICAgICAgICBkZWxldGUgb2JqW21ldGhvZF07XG4gICAgfVxuICAgIGlmIChjdXJyZW50ID09PSBvcmlnaW5hbClcbiAgICAgIHJldHVybjtcbiAgICBjdXJyZW50ID0gb3JpZ2luYWw7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHdyYXBwZXIsIGluaGVyaXRlZCB8fCBGdW5jdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlZHVwZShrZXksIG9sZEZuLCBuZXdGbikge1xuICBjaGVja1trZXldID0ga2V5O1xuICByZXR1cm4gY2hlY2s7XG4gIGZ1bmN0aW9uIGNoZWNrKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gKG9sZEZuW2tleV0gPT09IGtleSA/IG9sZEZuIDogbmV3Rm4pLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG59XG5mdW5jdGlvbiBhZnRlcihwcm9taXNlLCBjYikge1xuICByZXR1cm4gcHJvbWlzZS50aGVuKGNiLCBjYik7XG59XG5mdW5jdGlvbiBzZXJpYWxpemUoYXN5bmNGdW5jdGlvbikge1xuICBsZXQgbGFzdFJ1biA9IFByb21pc2UucmVzb2x2ZSgpO1xuICBmdW5jdGlvbiB3cmFwcGVyKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gbGFzdFJ1biA9IG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgYWZ0ZXIobGFzdFJ1biwgKCkgPT4ge1xuICAgICAgICBhc3luY0Z1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpLnRoZW4ocmVzLCByZWopO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgd3JhcHBlci5hZnRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsYXN0UnVuID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICBhZnRlcihsYXN0UnVuLCByZXMpO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gd3JhcHBlcjtcbn1cblxuZXhwb3J0IHsgYWZ0ZXIsIGFyb3VuZCwgZGVkdXBlLCBzZXJpYWxpemUgfTtcbiIsICJcclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdze1xyXG4gICAgbGFuZ3VhZ2U6c3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBsZXQgbGFuZyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2UnKTtcclxuICAgICAgICBpZihsYW5nKXtcclxuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZSA9IGxhbmc7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2UgPSAnZW4nO1xyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG4gICAgZ2V0IGNtZF9tZXJtYWlkX2Zsb3djaGFydF9saW5rKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnTWVybWFpZFx1OTRGRVx1NjNBNVx1NTM2MVx1NzI0NydcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuICdNZXJtYWlkIG9mIGxpbmtlZCBub3Rlcyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbWRfbWVybWFpZF9mbG93Y2hhcnRfZm9sZGVyKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnTWVybWFpZFx1NzZFRVx1NUY1NVx1NTM2MVx1NzI0NydcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuICdNZXJtYWlkIG9mIGZvbGRlciBub3Rlcyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbWRfbWVybWFpZF9mbG93Y2hhcnRfYXV0bygpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ01lcm1haWRcdTUzNjFcdTcyNDcnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiAnTWVybWFpZCBvZiBub3Rlcyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXQgY21kX2ZpbGVfb3Blbl93aXRoX3N5c3RlbV9hcHAoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTY1ODdcdTRFRjYgLSBcdTRGN0ZcdTc1MjhcdTdDRkJcdTdFREZcdTdBMEJcdTVFOEZcdTYyNTNcdTVGMDBcdUZGMDhcdTRFQzVcdTY4NENcdTk3NjJcdUZGMDknXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiAnRmlsZSAtIG9wZW4gd2l0aCBzeXN0ZW0gYXBwIChkZXNrdG9wIG9ubHkpJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNtZF9maWxlX3Nob3dfaW5fc3lzdGVtX2V4cGxvcmVyKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2NTg3XHU0RUY2IC0gXHU1NzI4XHU3Q0ZCXHU3RURGXHU2RDRGXHU4OUM4XHU3Njg0XHU2N0U1XHU3NzBCXHVGRjA4XHU0RUM1XHU2ODRDXHU5NzYyXHVGRjA5J1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gJ0ZpbGUgLSBzaG93IGluIHN5c3RlbSBleHBsb3JlciAoZGVza3RvcCBvbmx5KSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbWRfZmlsZV9yZW5hbWUoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTY1ODdcdTRFRjYgLSBcdTkxQ0RcdTU0N0RcdTU0MERcdTY1ODdcdTRFRjYnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiAnRmlsZSAtIHJlbmFtZSBmaWxlJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldCBjbWRfbG9uZ2Zvcm0ybm90ZWNoYWluKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2ODM5XHU2MzZFTG9uZ0Zvcm1cdTkxQ0RcdTdGNkVcdTdCMTRcdThCQjBcdTk0RkVcdTY3NjEnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiAnUmVzZXQgbm90ZSBjaGFpbiBieSBsb25nZm9ybSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbWRfbG9uZ2Zvcm00bm90ZWNoYWluKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2ODM5XHU2MzZFXHU3QjE0XHU4QkIwXHU5NEZFXHU2NzYxXHVGRjBDXHU5MUNEXHU3RjZFTG9uZ0Zvcm1cdTU3M0FcdTY2NkYnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJlc2V0IGxvbmdmb3JtIHNjZW5lcyBieSBub3RlIGNoYWluXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbWRfc29ydF9maWxlX2V4cGxvcmVyKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2ODM5XHU2MzZFXHU3QjE0XHU4QkIwXHU5NEZFXHU2MzkyXHU1RThGJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJTb3J0IGZpbGUgZXhwbG9yZXIgYnkgbm90ZSBjaGFpblwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY21kX29wZW5fbm90ZXNfc21hcnRlcigpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NjY3QVx1ODBGRFx1NjI1M1x1NUYwMFx1NjU4N1x1NEVGNidcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiT3BlbiBub3RlIHNtYXJ0ZXJcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNtZF9vcGVuX25vdGUoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTYyNTNcdTVGMDBcdTY1ODdcdTRFRjYnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIk9wZW4gbm90ZVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY21kX29wZW5fcHJldl9ub3RlKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2MjUzXHU1RjAwXHU1MjREXHU3RjZFXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJPcGVuIHByZXYgbm90ZVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2hhaW5fbW92ZV91cF9ub2RlKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1NDExXHU1MjREXHU3OUZCXHU1MkE4XHU3QjE0XHU4QkIwXHU4MjgyXHU3MEI5J1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJNb3ZlIG5vZGUgdXBcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNoYWluX21vdmVfZG93bl9ub2RlKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1NDExXHU1NDBFXHU3OUZCXHU1MkE4XHU3QjE0XHU4QkIwXHU4MjgyXHU3MEI5J1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJNb3ZlIG5vZGUgZG93blwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY21kX29wZW5fbmV4dF9ub3RlKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2MjUzXHU1RjAwXHU1NDBFXHU3RjZFXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJPcGVuIG5leHQgbm90ZVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY21kX3JldmVhbF9ub3RlKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1QjlBXHU0RjREXHU1RjUzXHU1MjREXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJSZXZlYWwgY3VycmVudCBmaWxlIGluIG5hdmlnYXRpb25cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNtZF9vcGVuX2FuZF9yZXZlYWxfbm90ZSgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NjI1M1x1NUYwMFx1NUU3Nlx1NUI5QVx1NEY0RFx1N0IxNFx1OEJCMCdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiT3BlbiBhbmQgcmV2ZWFsIG5vdGVcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNtZF9vcGVuX3ByZXZfbm90ZV9vZl9yaWdodF9sZWFmKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1M0YzXHU0RkE3XHU5ODc1XHU5NzYyXHU2MjUzXHU1RjAwXHU1MjREXHU3RjZFXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJPcGVuIHByZXYgbm90ZSBvZiByaWdodCBsZWFmXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbWRfb3Blbl9uZXh0X25vdGVfb2ZfcmlnaHRfbGVhZigpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NTNGM1x1NEZBN1x1OTg3NVx1OTc2Mlx1NjI1M1x1NUYwMFx1NTQwRVx1N0Y2RVx1N0IxNFx1OEJCMCdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiT3BlbiBuZXh0IG5vdGUgb2YgcmlnaHQgbGVhZlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY21kX2V4ZWN1dGVfdGVtcGxhdGVfbW9kYWwoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTYyNjdcdTg4NENcdTgxMUFcdTY3MkNcdTdCMTRcdThCQjAnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkV4ZWN1dGUgVGVtcGxhdGVyIG1vZGFsXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbWRfdG9vZ2xlX2Nzc19ibG9ja19pbl9ub3RlKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1NDJGXHU3NTI4L1x1NTE3M1x1OTVFRCBjc3MgXHU0RUUzXHU3ODAxXHU1NzU3J1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJUb29nbGUgY3NzIGJsb2NrIGluIG5vdGVcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCBjbWRfc2V0X2Zyb250bWF0dGVyKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2MjQwXHU5MDA5XHU3QjE0XHU4QkIwXHU4QkJFXHU3RjZFXHU1QzVFXHU2MDI3J1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJTZXQgZnJvbm1hdHRlciBmb3Igc2VsZWN0ZWQgbm90ZXNcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNtZF9tb3ZlX25leHRfbGV2ZWwoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTYzRDBcdTlBRDhcdTdGMjlcdThGREJcdTVDNDJcdTdFQTcnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkluY3JlYXNlIHRoZSBpbmRlbnRhdGlvbiBsZXZlbFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY21kX21vdmVfbm9uZV9sZXZlbCgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NTIyMFx1OTY2NFx1N0YyOVx1OEZEQlx1NUM0Mlx1N0VBNydcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiUmVtb3ZlIHRoZSBpbmRlbnRhdGlvbiBsZXZlbFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY21kX21vdmVfcHJldl9sZXZlbCgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1OTY0RFx1NEY0RVx1N0YyOVx1OEZEQlx1NUM0Mlx1N0VBNydcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiRGVjcmVhc2UgdGhlIGluZGVudGF0aW9uIGxldmVsXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbWRfb3Blbl9ub3RlX2luX21vZGFsKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1RjM5XHU3QTk3XHU0RTJEXHU2MjUzXHU1RjAwXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJPcGVuIG5vdGUgaW4gbW9kYWxcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNtZF9vcGVuX25vdGVfaW5fdmlldygpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1OTg3NVx1OTc2Mlx1NEUyRFx1NjI1M1x1NUYwMFx1N0IxNFx1OEJCMCdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiT3BlbiBub3RlIGluIHZpZXdcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNtZF9pbnNlcnRfY29tbWFuZF9pZCgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NjNEMlx1NTE2NVx1NTQ3RFx1NEVFNElEJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJJbnNlcnQgY29tbWFuZCBpZFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0IGZpbGVtZW51X2NyZWF0ZV9uZXh0X25vdGUoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTUyMUJcdTVFRkFcdTU0MEVcdTdGNkVcdTdCMTRcdThCQjAnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkNyZWF0ZSBuZXh0IG5vdGVcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZpbGVtZW51X21vdmVfYXNfbmV4dF9ub3RlKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU3OUZCXHU1MkE4XHU0RTNBXHU1NDBFXHU3RjZFXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJNb3ZlIGFzIG5leHQgbm90ZVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgZmlsZW1lbnVfbW92ZV9hc19uZXh0X25vdGVzKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU3OUZCXHU1MkE4XHU0RTNBXHU1NDBFXHU3RjZFXHU3QjE0XHU4QkIwXHVGRjA4XHU5MDA5XHU0RTJEXHU3QjE0XHU4QkIwXHVGRjA5J1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJNb3ZlIGFzIG5leHQgbm90ZXMoc2VsZWN0ZWQpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGVhcl9pbmxpbmtzKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2RTA1XHU3NDA2XHU3QjE0XHU4QkIwXHU1MTY1XHU5NEZFJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gJ0NsZWFyIGlubGlua3Mgb2YgY3VycmVudCBmaWxlJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1vdmVfZmlsZV90b19hbm90aGVyX2ZvbGRlcigpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NzlGQlx1NTJBOFx1NUY1M1x1NTI0RFx1NjU4N1x1NEVGNidcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiTW92ZSBjdXJyZW50IGZpbGUgdG8gYW5vdGhlciBmb2xkZXJcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlcGxhY2Vfbm90ZXNfd2l0aF9yZWd4KCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2QjYzXHU1MjE5XHU4ODY4XHU4RkJFXHU1RjBGXHU2NkZGXHU2MzYyXHU3QjE0XHU4QkIwXHU1MTg1XHU1QkI5J1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJSZXBsYWNlIGJ5IHJlZ2V4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjaGFpbl9pbnNlcnRfbm9kZSgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NjNEMlx1NTE2NVx1ODI4Mlx1NzBCOSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiSW5zZXJ0IG5vZGUgb2YgY2hhaW5cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNoYWluX3NldF9zZXFfbm90ZSgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1OTFDRFx1NTg1MVx1NUY1M1x1NTI0RFx1NjU4N1x1NEVGNlx1NTkzOVx1N0IxNFx1OEJCMFx1OTRGRVx1Njc2MSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiUmVidWlsZCB0aGUgY2hhaW4gb2YgY3VycmVudCBmb2xkZXJcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNyZWF0ZV9uZXdfbm90ZSgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NTIxQlx1NUVGQVx1NjVCMFx1N0IxNFx1OEJCMCdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiQ3JlYXRlIG5ldyBub3RlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBzZXR0aW5nX2lzU29ydEZpbGVFeHBsb3Jlcigpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NjgzOVx1NjM2RVx1N0IxNFx1OEJCMFx1OTRGRVx1Njc2MVx1NjM5Mlx1NUU4Rlx1NzZFRVx1NUY1NSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiU29ydCBieSBjaGFpbiBpbiBmaWxlIGV4cGxvcmVyP1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2V0dGluZ19pc0ZvbGRlckZpcnN0KCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2MzkyXHU1RThGXHU2NUY2XHU3NkVFXHU1RjU1XHU2NUY2XHU2NTg3XHU0RUY2XHU1OTM5XHU0RjE4XHU1MTQ4XHVGRjFGJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJTb3J0IGZvbGRlciBmaXJzdCBpbiBmaWxlIGV4cGxvcmVyP1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2V0dGluZ19pc2RyYWdlZCgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NjJENlx1NTJBOFx1NjM5Mlx1NUU4RidcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiU29ydCBmaWxlcyBieSBkcmFnICYgZHJvcD9cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgZ2V0IHNldHRpbmdfUHJldkNoYWluKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1MjREXHU3RjZFXHU3QjE0XHU4QkIwXHU2NTcwXHU5MUNGXHVGRjFGJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJOdW1iZXIgb2YgcHJldiBub3RlcyB0byBzaG93P1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2V0dGluZ19OZXh0Q2hhaW4oKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTU0MEVcdTdGNkVcdTdCMTRcdThCQjBcdTY1NzBcdTkxQ0ZcdUZGMUYnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIk51bWJlciBvZiBuZXh0IG5vdGVzIHRvIHNob3c/XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBzZXR0aW5nX3N1Z2dlc3Rlck5vdGVzTW9kZSgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5jaGFpbl9pbnNlcnRfbm9kZX1cdUZGMUFcdTlFRDhcdThCQTRcdTZBMjFcdTVGMEZgXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLmNoYWluX2luc2VydF9ub2RlfTpEZWZhdWx0IG1vZGVgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBzZXR0aW5nX2F1dG9fbm90ZWNoYWluKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2MjUzXHU1RjAwXHU2NTg3XHU0RUY2XHU2NUY2XHVGRjBDXHU4MUVBXHU1MkE4XHU5MUNEXHU1ODUxXHU2NTg3XHU0RUY2XHU1OTM5XHU3QjE0XHU4QkIwXHU5NEZFXHVGRjFGJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJBdXRvIGJ1aWxkIG5vdGVjaGFpbiBvZiBmb2xkZXIgd2hpbGUgb3BlbiBuZXcgZmlsZT9cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNldHRpbmdfcmVmcmVzaERhdGFWaWV3KCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2MjUzXHU1RjAwXHU2NTg3XHU0RUY2XHU2NUY2XHVGRjBDXHU1MjM3XHU2NUIwRGF0YXZpZXdcdTg5QzZcdTU2RkVcdUZGMUYnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJlZnJlc2ggZGF0YXZpZXcgd2hpbGUgb3BlbiBuZXcgZmlsZT9cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNldHRpbmdfcmVmcmVzaFRhc2tzKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2MjUzXHU1RjAwXHU2NTg3XHU0RUY2XHU2NUY2XHVGRjBDXHU1MjM3XHU2NUIwVGFza3NcdTg5QzZcdTU2RkVcdUZGMUYnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJlZnJlc2ggdGFza3Mgd2hpbGUgb3BlbiBuZXcgZmlsZT9cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNldHRpbmdfd29yZGNvdXQoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTdFREZcdThCQTFcdTZCQ0ZcdTY1RTVcdTVCNTdcdTY1NzAnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJlZ2lzdGVyIGRhaWx5IHdvcmQgY291bnQ/XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgc2V0dGluZ19hdmF0YSgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NTkzNFx1NTBDRidcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiQXZhdGFcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNldHRpbmdfdGVtcGxhdGVyX3RhZygpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1ODExQVx1NjcyQ1x1N0IxNFx1OEJCMFx1NjgwN1x1N0I3RVx1NjIxNlx1NzZFRVx1NUY1NSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiVGFncyBvciBmb2xkZXIgb2Ygc2NyaXB0IG5vdGVcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBnZXQgc2V0dGluZ193b3JkY291dF94Zm9sZGVyKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU4REYzXHU4RkM3XHU0RUU1XHU0RTBCXHU3NkVFXHU1RjU1J1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJJZ25vcmUgdGhlc2UgZm9sZGVyc1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2V0dGluZ19ub3RpY2Vfd2hpbGVfbW9kaWZ5X2NoYWluKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU0RkVFXHU2NTM5XHU3QjE0XHU4QkIwXHU5NEZFXHU2NUY2XHU2NjNFXHU3OTNBXHU5MDFBXHU3N0U1XHVGRjFGJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJOb3RpY2Ugd2hpbGUgbW9kaWZ5IG5vdGUgY2hhaW4/XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXQgc2V0dGluZ19maWVsZF9vZl9kaXNwbGF5X3RleHQoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTY1ODdcdTRFRjZcdTUyMTdcdTg4NjhcdTY2M0VcdTc5M0FcdTY1ODdcdTRFRjZcdTU0MEQnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkRpc3BsYXkgdGV4dCBmb3Igbm90ZXMgaW4gZmlsZS1leHBsb3Jlcj9cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNldHRpbmdfY29uZmx1ZW5jZV90YWJfZm9ybWF0KCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU0RjdGXHU3NTI4Q29uZmx1ZW5jZVx1N0YyOVx1OEZEQlx1NjgzQ1x1NUYwRidcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiVXNlIGNvbmZsdWVuY2UgaW5kZW50YXRpb24gZm9ybWF0XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBzZXR0aW5nX2ZpZWxkX29mX2JhY2tncm91bmRfY29sb3IoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTY1ODdcdTRFRjZcdTUyMTdcdTg4NjhcdTUxNDNcdTdEMjBcdTk4Q0VcdTY4M0MnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkZpbGUtaXRlbSBzdHlsZSBmb3Igbm90ZXMgaW4gZmlsZS1leHBsb3Jlcj9cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldCBpdGVtX2luc2VydF9zdWdnZXN0ZXIoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTYzRDJcdTUxNjVcdTZBMjFcdTVGMEZcdUZGMDhcdTc2RjhcdTVCRjlcdTRFOEVcdTk1MUFcdTcwQjlcdUZGMDknXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkluc2VydCBtb2RlKHJlbGF0ZSB0byBhbmNob3IpLlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbV9pbnNlcnRfbm9kZV9hZnRlcigpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NTQwRVx1N0Y2RVx1N0IxNFx1OEJCMCdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiTmV4dCBub3RlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBpdGVtX2luc2VydF9ub2RlX2JlZm9yZSgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NTI0RFx1N0Y2RVx1N0IxNFx1OEJCMCdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiUHJldiBub3RlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBpdGVtX2luc2VydF9ub2RlX2FzX2hlYWQoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTk0RkVcdTU5MzQnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkhlYWQgb2YgY2hhaW5cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGl0ZW1faW5zZXJ0X25vZGVfYXNfdGFpbCgpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1OTRGRVx1NUMzRSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiVGFpbCBvZiB0aGFpblwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbV9pbnNlcnRfZm9sZGVyX2FmdGVyKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2NTg3XHU0RUY2XHU1OTM5XHU1NDBFXHU3RjZFJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJGb2xkZXIgYXMgbmV4dFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbV9nZXRfYnJvdGhlcnMoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTU0MENcdTdFQTdcdTdCMTRcdThCQjAnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIk5vdGVzIGluIHNhbWUgZm9sZGVyXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBpdGVtX3NhbWVfZm9sZGVyKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1NDBDXHU3RUE3XHU3QjE0XHU4QkIwK1x1NUI1MFx1NzZFRVx1NUY1NSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiTm90ZXMgaW4gc2FtZSBmb2xkZXIocmVjdXJzaXZlKVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbV9pbmxpbmtzX291dGxpbmtzKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1MUZBXHU5NEZFK1x1NTE2NVx1OTRGRSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwib3V0TGlua3MgKyBpbkxpbmtzXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBpdGVtX2lubGlucygpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NTE2NVx1OTRGRSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiaW5saW5rc1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbV9vdXRsaW5rcygpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NTFGQVx1OTRGRSdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwib3V0bGlua3NcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGl0ZW1fYWxsX25vZXMoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTYyNDBcdTY3MDlcdTdCMTRcdThCQjAnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkFsbCBub3Rlc1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbV9yZWNlbnQoKXtcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdThGRDFcdTY3MUZcdTdCMTRcdThCQjAnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJlY2VudFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbV91bmNsZV9ub3Rlcygpe1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1NEUwQVx1N0VBN1x1N0IxNFx1OEJCMCdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiTm90ZXMgaW4gZ3JhbmRwYSBmb2xkZXJcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGl0ZW1fbm90ZWNoYWluKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU3QjE0XHU4QkIwXHU5NEZFXHU2NzYxJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJOb3RlIGNoYWluXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBpdGVtX2N1cnJlbnRub3RlKCl7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU1RjUzXHU1MjREXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJDdXJyZW50IG5vdGVcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGl0ZW1fY2hhaW5faW5zZXJ0X25vZGVfYWZ0ZXIoKTpzdHJpbmd7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU2REZCXHU1MkEwXHU1NDBFXHU3RjZFXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJDcmVhdGUgbmV4dCBub3RlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBpdGVtX2NoYWluX2luc2VydF9ub2RlX2FzX3RhaWwoKTpzdHJpbmd7XHJcbiAgICAgICAgaWYodGhpcy5sYW5ndWFnZT09J3poJyl7XHJcbiAgICAgICAgICAgIHJldHVybiAnXHU5NEZFXHU1QzNFXHU2REZCXHU1MkEwXHU3QjE0XHU4QkIwJ1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gXCJDcmVhdGUgdGFpbCBub3RlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBpdGVtX2NoYWluX2luc2VydF9ub2RlX2JlZm9yZSgpOnN0cmluZ3tcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTZERkJcdTUyQTBcdTUyNERcdTdGNkVcdTdCMTRcdThCQjAnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkNyZWF0ZSBwcmV2IG5vdGVcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGl0ZW1fY2hhaW5faW5zZXJ0X25vZGVfYXNfaGVhZCgpOnN0cmluZ3tcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTk0RkVcdTU5MzRcdTZERkJcdTUyQTBcdTdCMTRcdThCQjAnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkNyZWF0ZSBoZWFkIG5vdGVcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGl0ZW1faXRlbV9jaGFpbl9pbnNlcnRfbnVsbCgpOnN0cmluZ3tcclxuICAgICAgICBpZih0aGlzLmxhbmd1YWdlPT0nemgnKXtcclxuICAgICAgICAgICAgcmV0dXJuICdcdTY1RTBcdTk0RkVcdTYzQTUnXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkNyZWF0ZSBub3RlIG5vdCBpbiBjaGFpblwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgcHJvbXB0X25vdGVuYW1lKCk6c3RyaW5ne1xyXG4gICAgICAgIGlmKHRoaXMubGFuZ3VhZ2U9PSd6aCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gJ1x1OEY5M1x1NTE2NVx1N0IxNFx1OEJCMFx1NTQwRCdcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiSW5wdXQgbm90ZSBuYW1lXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBsZXQgc3RyaW5ncyA9IG5ldyBTdHJpbmdzKCk7IiwgImltcG9ydCB7IHRpbWUgfSBmcm9tICdjb25zb2xlJztcclxuaW1wb3J0IHsgXHJcbiAgICBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLCBcclxuICAgIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyxcclxuICAgIFRGaWxlLCBURm9sZGVyLCBtb21lbnQsIEVkaXRvclBvc2l0aW9uLCBFZGl0b3JTZWxlY3Rpb25cclxufSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBOb3RlQ2hhaW5QbHVnaW4gZnJvbSBcIi4uL21haW5cIjtcclxuaW1wb3J0ICogYXMgaW50ZXJuYWwgZnJvbSAnc3RyZWFtJztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgV29yZENvdW50e1xyXG5cdGFwcDpBcHA7XHJcbiAgICBwbHVnaW46Tm90ZUNoYWluUGx1Z2luO1xyXG5cdG5yZXRyeTpudW1iZXI7XHJcbiAgICB0aW1lcklkOk5vZGVKUy5UaW1lb3V0O1xyXG4gICAgY3Vycl9hY3RpdmVfZmlsZTpURmlsZTtcclxuICAgIGV2ZW50czogQXJyYXk8b2JqZWN0PjtcclxuXHJcblx0Y29uc3RydWN0b3IocGx1Z2luOk5vdGVDaGFpblBsdWdpbixhcHA6QXBwKXtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMuYXBwID0gYXBwO1xyXG5cdFx0dGhpcy5ucmV0cnk9MTAwO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcigpOyAgIFxyXG5cdH1cclxuXHJcbiAgICBmaWx0ZXIodGZpbGU6VEZpbGUpe1xyXG4gICAgICAgIGlmKCF0ZmlsZSl7cmV0dXJuIGZhbHNlO31cclxuICAgICAgICBpZigodGZpbGUgYXMgYW55KS5kZWxldGVkKXtyZXR1cm4gZmFsc2U7fVxyXG4gICAgICAgIGlmKHRmaWxlLmV4dGVuc2lvbiE9J21kJyl7cmV0dXJuIGZhbHNlO31cclxuICAgICAgICBsZXQgeGZvbGRlcnMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy53b3JkY291bnR4Zm9sZGVyLnNwbGl0KCdcXG4nKS5maWx0ZXIoeD0+eCE9JycpO1xyXG4gICAgICAgIGZvcihsZXQgaXRlbSBvZiB4Zm9sZGVycyl7XHJcbiAgICAgICAgICAgIGlmKHRmaWxlLnBhdGguc3RhcnRzV2l0aChpdGVtKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKGl0ZW09PScvJyl7XHJcbiAgICAgICAgICAgICAgICBpZih0ZmlsZS5wYXJlbnQ/LnBhdGg9PScvJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1N0VERlx1OEJBMVx1NUI1N1x1NjU3MFxyXG4gICAgY291bnRfd29yZHMoY3R4OnN0cmluZyxpZ25vcmU9L1tcXHMhXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXV5fYHt8fVx1RkYwQ1x1MzAwMlx1RkYwMVx1RkYxRlx1MzAxMFx1MzAxMVx1MzAwMVx1RkYxQlx1RkYxQVx1MjAxQ1x1MjAxRFx1MjAxOFx1MjAxOVx1MzAwQVx1MzAwQlx1RkYwOFx1RkYwOVx1RkYzQlx1RkYzRFx1MjAxNFx1MjAyNlx1RkZFNV0vZyl7XHJcbiAgICAgICAgbGV0IE4gPSBjdHgucmVwbGFjZShpZ25vcmUsICcnKS5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGVucmVnZXggPSAvW2EtekEtWjAtOS1dKy9nO1xyXG4gICAgICAgIGxldCBtYXRjaGVzID0gY3R4Lm1hdGNoKGVucmVnZXgpO1xyXG4gICAgICAgIGlmKG1hdGNoZXMpe1xyXG4gICAgICAgICAgICBsZXQgZWxlbj0wO1xyXG4gICAgICAgICAgICBtYXRjaGVzLmZvckVhY2goeD0+ZWxlbj1lbGVuK3gubGVuZ3RoKTtcclxuICAgICAgICAgICAgTiA9IE4tZWxlbittYXRjaGVzLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE47XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0X210aW1lX3ZhbHVlKHRmaWxlOlRGaWxlLGtleTpzdHJpbmcsdmFsOm51bWJlcil7XHJcblxyXG4gICAgICAgIGxldCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuICAgICAgICBsZXQgZWRpdG9yU3RhdGU6IHtcclxuICAgICAgICAgICAgY3Vyc29yPzogRWRpdG9yUG9zaXRpb24sXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbj86IHN0cmluZyxcclxuICAgICAgICAgICAgc2FuY2hvcj86RWRpdG9yUG9zaXRpb24sXHJcbiAgICAgICAgICAgIHNoZWFkPzpFZGl0b3JQb3NpdGlvbixcclxuICAgICAgICAgICAgc2Nyb2xsSW5mbz86IHsgbGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciB9XHJcbiAgICAgICAgfSA9IHt9O1xyXG4gICAgXHJcbiAgICAgICAgaWYgKGFjdGl2ZVZpZXcgJiYgYWN0aXZlVmlldy5maWxlID09PSB0ZmlsZSkge1xyXG4gICAgICAgICAgICBsZXQgZWRpdG9yID0gYWN0aXZlVmlldy5lZGl0b3I7XHJcbiAgICAgICAgICAgIGlmIChlZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgIGVkaXRvclN0YXRlLmN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuICAgICAgICAgICAgICAgIGVkaXRvclN0YXRlLnNlbGVjdGlvbiA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIGVkaXRvclN0YXRlLnNhbmNob3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCdhbmNob3InKTtcclxuICAgICAgICAgICAgICAgIGVkaXRvclN0YXRlLnNoZWFkID0gZWRpdG9yLmdldEN1cnNvcignaGVhZCcpO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yU3RhdGUuc2Nyb2xsSW5mbyA9IGVkaXRvci5nZXRTY3JvbGxJbmZvKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFsaW5lID0gZWRpdG9yU3RhdGU/LmN1cnNvcj8ubGluZSAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgID8gYWN0aXZlVmlldz8uZWRpdG9yPy5nZXRMaW5lKGVkaXRvclN0YXRlLmN1cnNvci5saW5lKVxyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICBpZihhbGluZSAmJiBhbGluZS5zdGFydHNXaXRoKCd8JykgJiYgYWxpbmUuZW5kc1dpdGgoJ3wnKSl7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKFxyXG4gICAgICAgICAgICB0ZmlsZSxcclxuICAgICAgICAgICAgKGZtKSA9PntcclxuICAgICAgICAgICAgICAgIGxldCB0ID0gbW9tZW50LnVuaXgodGZpbGUuc3RhdC5tdGltZS8xMDAwKTtcclxuICAgICAgICAgICAgICAgIGxldCBtdGltZSA9IHQuZm9ybWF0KCdZWVlZLU1NLUREJyk7XHJcbiAgICAgICAgICAgICAgICBpZihmbVtrZXldPT1udWxsKXtcclxuICAgICAgICAgICAgICAgICAgICBpZih2YWw+MCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZtW2tleV0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobXRpbWU9PSBtb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKSAmJiBtdGltZSE9bW9tZW50LnVuaXgodGZpbGUuc3RhdC5jdGltZS8xMDAwKS5mb3JtYXQoJ1lZWVktTU0tREQnKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbVtrZXldW3QuYWRkKC0xLCdkYXlzJykuZm9ybWF0KCdZWVlZLU1NLUREJyldID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtW2tleV1bbXRpbWVdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRzID0gT2JqZWN0LmtleXMoZm1ba2V5XSkuc29ydCgoYixhKT0+YS5sb2NhbGVDb21wYXJlKGIpKS5maWx0ZXIoeD0+ISh4PT1tdGltZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRzLmxlbmd0aD09MCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbD4wKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtW2tleV1bbXRpbWVdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZihmbVtrZXldW210aW1lXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbVtrZXldW210aW1lXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZigodmFsLWZtW2tleV1bdHNbMF1dKSE9MCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbVtrZXldW210aW1lXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoZm1ba2V5XVttdGltZV0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZtW2tleV1bbXRpbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgICAgIC8vIFJlc3RvcmUgZWRpdG9yIHN0YXRlIGlmIGl0IHdhcyBzYXZlZFxyXG4gICAgICAgIGlmIChhY3RpdmVWaWV3ICYmIGFjdGl2ZVZpZXcuZmlsZSA9PT0gdGZpbGUpIHtcclxuICAgICAgICAgICAgbGV0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xyXG4gICAgICAgICAgICBpZiAoZWRpdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWRpdG9yU3RhdGUuc2VsZWN0aW9uICYmIGVkaXRvclN0YXRlLnNhbmNob3IgJiYgZWRpdG9yU3RhdGUuc2hlYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBlZGl0b3Iuc2V0U2VsZWN0aW9uKGVkaXRvclN0YXRlLnNhbmNob3IsZWRpdG9yU3RhdGUuc2hlYWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yIHNldHRpbmcgc2VsZWN0aW9uOiR7ZXJyb3J9YCwzMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAoZWRpdG9yU3RhdGUuY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZWRpdG9yLnNldEN1cnNvcihlZGl0b3JTdGF0ZS5jdXJzb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGVkaXRvclN0YXRlLnNjcm9sbEluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBlZGl0b3Iuc2Nyb2xsVG8oZWRpdG9yU3RhdGUuc2Nyb2xsSW5mby5sZWZ0LCBlZGl0b3JTdGF0ZS5zY3JvbGxJbmZvLnRvcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X25ld193b3Jkcyh0ZmlsZTpURmlsZSxkYXk9bW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJykpe1xyXG4gICAgICAgIGxldCBtZXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGZpbGUpO1xyXG4gICAgICAgIGxldCB2YWx1ZXMgPSBtZXRhPy5mcm9udG1hdHRlcj8ud29yZHM7XHJcbiAgICAgICAgaWYodmFsdWVzKXtcclxuICAgICAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpLnNvcnQoKGEsYik9PmEubG9jYWxlQ29tcGFyZShiKSk7XHJcbiAgICAgICAgICAgIGxldCBpZHggPSBrZXlzLmluZGV4T2YoZGF5KTtcclxuICAgICAgICAgICAgaWYoaWR4PDApe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKGlkeD09MCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzW2RheV07XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1tkYXldLXZhbHVlc1trZXlzW2lkeC0xXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHVwZGF0ZV93b3JkX2NvdW50KHRmaWxlOlRGaWxlKXtcclxuICAgICAgICBpZighdGhpcy5maWx0ZXIodGZpbGUpKXtyZXR1cm47fVxyXG4gICAgICAgIGxldCBjdHggPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKHRmaWxlKTtcclxuICAgICAgICBsZXQgbWNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGZpbGUpXHJcbiAgICAgICAgaWYobWNhY2hlPy5mcm9udG1hdHRlclBvc2l0aW9uKXtcclxuICAgICAgICAgICAgY3R4ID0gY3R4LnNsaWNlKG1jYWNoZS5mcm9udG1hdHRlclBvc2l0aW9uLmVuZC5vZmZzZXQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBOID0gdGhpcy5jb3VudF93b3JkcyhjdHgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0X210aW1lX3ZhbHVlKHRmaWxlLCd3b3JkcycsTik7XHJcbiAgICB9XHJcblxyXG5cdGNoZWNrX2Zyb250bWF0dGVyKHRmaWxlOlRGaWxlLGt2Ontba2V5OnN0cmluZ106YW55fSk6Ym9vbGVhbntcclxuXHRcdHRyeSB7XHJcblx0XHRcdGlmKCF0ZmlsZSl7cmV0dXJuIGZhbHNlO31cclxuXHRcdFx0bGV0IG1ldGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0ZmlsZSk7XHJcblx0XHRcdGlmKG1ldGE/LmZyb250bWF0dGVyKXtcclxuXHRcdFx0XHRmb3IobGV0IGsgaW4ga3Ype1xyXG5cdFx0XHRcdFx0aWYoIShtZXRhLmZyb250bWF0dGVyW2tdPT1rdltrXSkpe1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIHdhaXRfZnJvbnRtYXR0ZXIodGZpbGU6VEZpbGUsa3Y6e1trZXk6c3RyaW5nXTphbnl9LG5yZXRyeT10aGlzLm5yZXRyeSk6UHJvbWlzZTxib29sZWFuPntcclxuXHRcdGxldCBmbGFnID0gdGhpcy5jaGVja19mcm9udG1hdHRlcih0ZmlsZSxrdik7XHJcblx0XHRcclxuXHRcdHdoaWxlKCFmbGFnICYmIG5yZXRyeT4wKXtcclxuXHRcdFx0YXdhaXQgc2xlZXAoNTApO1xyXG5cdFx0XHRucmV0cnkgPSBucmV0cnktMTtcclxuXHRcdFx0ZmxhZyA9IHRoaXMuY2hlY2tfZnJvbnRtYXR0ZXIodGZpbGUsa3YpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZsYWc7XHJcblx0fVxyXG5cclxuICAgIGFzeW5jIHVwZGF0ZV93b3JkX2NvdW50X29mX3ZhdWx0KCl7XHJcbiAgICAgICAgbGV0IHRmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5maWx0ZXIoKHg6VEZpbGUpPT50aGlzLmZpbHRlcih4KSk7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIGZvcihsZXQgdGZpbGUgb2YgdGZpbGVzKXtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgJHtpfS8ke3RmaWxlcy5sZW5ndGh9OiR7dGZpbGUubmFtZX1gLDMwMDApO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZV93b3JkX2NvdW50KHRmaWxlKTtcclxuICAgICAgICAgICAgaSA9IGkrMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXIoKXtcclxuXHRcdGlmKHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmRjb3V0KXtcclxuXHRcdFx0dGhpcy5yZWdlaXN0ZXJfZWRpdG9yX2NoYW5nZSgpO1xyXG5cdFx0XHR0aGlzLnJlZ2Vpc3Rlcl9hY3RpdmVfbGVhZl9jaGFuZ2UoKTtcclxuXHRcdH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVnZWlzdGVyX2VkaXRvcl9jaGFuZ2UoKXsgICAgXHJcbiAgICAgICAgbGV0IGUgPSB0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2VkaXRvci1jaGFuZ2UnLGFzeW5jIChlZGl0b3IsaW5mbyk9PntcclxuICAgICAgICAgICAgaWYoaW5mby5maWxlPy5leHRlbnNpb24hPSdtZCcpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHRoaXMudGltZXJJZCE9PW51bGwpe1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoaW5mby5maWxlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZXJJZCA9IHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV93b3JkX2NvdW50KChpbmZvIGFzIGFueSkuZmlsZSk7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyRXZlbnQoZSk7XHJcbiAgICAgICAgdGhpcy5ldmVudHMucHVzaChlKTtcclxuICAgIH1cclxuXHJcbiAgICByZWdlaXN0ZXJfYWN0aXZlX2xlYWZfY2hhbmdlKCl7XHJcbiAgICAgICAgbGV0IGUgPSB0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsYXN5bmMgKGxlYWYpPT57XHJcblxyXG4gICAgICAgICAgICBsZXQgdGZpbGUgPSAobGVhZj8udmlldyBhcyBhbnkpLmZpbGU7XHJcbiAgICAgICAgICAgIGlmKCFsZWFmPy52aWV3KXtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZighKChsZWFmLnZpZXcgYXMgYW55KT8uZmlsZT8uZXh0ZW5zaW9uPT0nbWQnKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVfd29yZF9jb3VudCh0ZmlsZSk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuY3Vycl9hY3RpdmVfZmlsZT09bnVsbCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJfYWN0aXZlX2ZpbGUgPSB0ZmlsZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih0aGlzLmN1cnJfYWN0aXZlX2ZpbGUgIT0gdGZpbGUpe1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVfd29yZF9jb3VudCh0aGlzLmN1cnJfYWN0aXZlX2ZpbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyX2FjdGl2ZV9maWxlID0gdGZpbGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnBsdWdpbi5yZWdpc3RlckV2ZW50KGUpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzLnB1c2goZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5yZWdpc3Rlcigpe1xyXG4gICAgICAgIGZvcihsZXQgZSBvZiB0aGlzLmV2ZW50cyl7XHJcbiAgICAgICAgICAgIChlIGFzIGFueSkuZS5vZmZyZWYoZSlcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSB0aGlzLmV2ZW50cy5zbGljZSgtMSwwKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfd29yZHNfb2ZfdGZpbGVzKGZpbGVzOkFycmF5PFRGaWxlPnxudWxsPW51bGwpe1xyXG4gICAgICAgIGlmKCFmaWxlcyl7XHJcbiAgICAgICAgICAgIGZpbGVzID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X2FsbF90ZmlsZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZpbGVzLm1hcChcclxuICAgICAgICAgICAgeD0+dGhpcy5wbHVnaW4uZWRpdG9yLmdldF9mcm9udG1hdHRlcih4LCd3b3JkcycpXHJcbiAgICAgICAgKS5maWx0ZXIoeD0+eCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VtX3dvcmRzX29mX3RpZmxlcyhmaWxlczpBcnJheTxURmlsZT58bnVsbD1udWxsLCBiZWd0Om51bWJlcnxzdHJpbmc9MTAsIGVuZHQ6bnVtYmVyfHN0cmluZz0wKSB7XHJcbiAgICAgICAgZmlsZXMgPSB0aGlzLmdldF93b3Jkc19vZl90ZmlsZXMoZmlsZXMpXHJcbiAgICAgICAgaWYodHlwZW9mKGJlZ3QpPT0nbnVtYmVyJyl7XHJcbiAgICAgICAgICAgIGJlZ3QgPSBtb21lbnQoKS5hZGQoLWJlZ3QsJ2RheXMnKS5mb3JtYXQoJ1lZWVktTU0tREQnKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0eXBlb2YoZW5kdCk9PSdudW1iZXInKXtcclxuICAgICAgICAgICAgZW5kdCA9IG1vbWVudCgpLmFkZCgtZW5kdCwnZGF5cycpLmZvcm1hdCgnWVlZWS1NTS1ERCcpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBzdGFydERhdGUgPSBuZXcgRGF0ZShiZWd0KTtcclxuICAgICAgICBsZXQgZW5kRGF0ZSA9IG5ldyBEYXRlKGVuZHQpO1xyXG4gICAgICAgIGxldCBkYWlseVdvcmRDb3VudHM6e1trZXk6c3RyaW5nXTphbnl9ID0ge307XHJcbiAgICBcclxuICAgICAgICAvLyBJbml0aWFsaXplIGRhaWx5V29yZENvdW50cyB3aXRoIGFsbCBkYXRlcyBpbiB0aGUgcmFuZ2VcclxuICAgICAgICBmb3IgKGxldCBkYXRlID0gbmV3IERhdGUoc3RhcnREYXRlKTsgZGF0ZSA8PSBlbmREYXRlOyBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKSkge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZVN0ciA9IGRhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xyXG4gICAgICAgICAgICBkYWlseVdvcmRDb3VudHNbZGF0ZVN0cl0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBTdW0gdXAgdGhlIHdvcmQgY291bnRzIGZvciBlYWNoIGRhdGVcclxuICAgICAgICBmaWxlcy5mb3JFYWNoKChmaWxlOmFueSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbGFzdFdvcmRDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBlYXJsaWVzdERhdGUgPSBuZXcgRGF0ZShPYmplY3Qua2V5cyhmaWxlKS5zb3J0KClbMF0pO1xyXG4gICAgXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgbGFzdFdvcmRDb3VudCB3aXRoIHRoZSBlYXJsaWVzdCBkYXRlJ3Mgd29yZCBjb3VudCBpbiB0aGUgZmlsZVxyXG4gICAgICAgICAgICBpZiAoZWFybGllc3REYXRlIDwgc3RhcnREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0V29yZENvdW50ID0gZmlsZVtlYXJsaWVzdERhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgZGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSk7IGRhdGUgPD0gZW5kRGF0ZTsgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgMSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRlU3RyID0gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5oYXNPd25Qcm9wZXJ0eShkYXRlU3RyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RXb3JkQ291bnQgPSBmaWxlW2RhdGVTdHJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGFpbHlXb3JkQ291bnRzW2RhdGVTdHJdICs9IGxhc3RXb3JkQ291bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGFpbHlXb3JkQ291bnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGRpZmZfd29yZHNfb2ZfdGlmbGVzKGRhaWx5V29yZENvdW50czogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSwgZmlyc3RfYXNfemVybzogYm9vbGVhbiA9IHRydWUpOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHtcclxuICAgICAgICBsZXQgZGFpbHlOZXdXb3JkQ291bnRzOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0ge307XHJcbiAgICAgICAgbGV0IHByZXZpb3VzVG90YWwgPSAwO1xyXG4gICAgICAgIGxldCBmaXJzdCA9ICcnO1xyXG4gICAgXHJcbiAgICAgICAgZm9yIChsZXQgZGF0ZSBpbiBkYWlseVdvcmRDb3VudHMpIHtcclxuICAgICAgICAgICAgaWYgKGZpcnN0ID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgZmlyc3QgPSBkYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50VG90YWwgPSBkYWlseVdvcmRDb3VudHNbZGF0ZV07XHJcbiAgICAgICAgICAgIGRhaWx5TmV3V29yZENvdW50c1tkYXRlXSA9IGN1cnJlbnRUb3RhbCAtIHByZXZpb3VzVG90YWw7XHJcbiAgICAgICAgICAgIHByZXZpb3VzVG90YWwgPSBjdXJyZW50VG90YWw7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGZpcnN0X2FzX3plcm8gJiYgZmlyc3QgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIGRhaWx5TmV3V29yZENvdW50c1tmaXJzdF0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHJldHVybiBkYWlseU5ld1dvcmRDb3VudHM7XHJcbiAgICB9XHJcbn0iLCAiXHJcbmltcG9ydCB7IFxyXG5cdEFwcCwgRWRpdG9yLCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFxyXG5cdFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyxtb21lbnQsXHJcblx0VEFic3RyYWN0RmlsZSxcclxuXHRURmlsZSxURm9sZGVyXHJcbn0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW1wb3J0IE5vdGVDaGFpblBsdWdpbiBmcm9tIFwiLi4vbWFpblwiO1xyXG5pbXBvcnQge05DRWRpdG9yfSBmcm9tICcuL05DRWRpdG9yJztcclxuaW1wb3J0IHtnZXRfdHBfZnVuY30gZnJvbSAnLi91dGlscydcclxuaW1wb3J0IHsgc3RyaW5ncyB9IGZyb20gJy4vc3RyaW5ncyc7XHJcbmltcG9ydCB7IG9mZiB9IGZyb20gJ3Byb2Nlc3MnO1xyXG5pbXBvcnQgeyBsaW5rIH0gZnJvbSAnZnMnO1xyXG5cclxuXHJcblxyXG5jbGFzcyBOb3RlTm9kZSB7XHJcblx0dGZpbGUgOiBURmlsZTtcclxuXHRub3RlMmlkIDoge1trZXk6c3RyaW5nXTphbnl9O1xyXG5cdGlkIDogbnVtYmVyO1xyXG5cdHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW47XHJcblxyXG5cdGNvbnN0cnVjdG9yKHRmaWxlOlRGaWxlLHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4pIHtcclxuXHRcdHRoaXMudGZpbGUgPSB0ZmlsZTtcclxuXHRcdHRoaXMubm90ZTJpZCA9IHt9O1xyXG5cdFx0dGhpcy5pZCA9IDA7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHR9XHJcblxyXG5cdC8vIFx1OEZENFx1NTZERSBJRFhYWFhcclxuXHRnZXRfaWQodGZpbGU6VEZpbGUpIHtcclxuXHRcdGlmICh0ZmlsZS5iYXNlbmFtZSBpbiB0aGlzLm5vdGUyaWQpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMubm90ZTJpZFt0ZmlsZS5iYXNlbmFtZV07XHJcblx0XHR9XHJcblx0XHRsZXQgbmV3SWQgPSBgSUQke3RoaXMuaWQudG9TdHJpbmcoKS5wYWRTdGFydCg0LCAnMCcpfWA7XHJcblx0XHR0aGlzLm5vdGUyaWRbdGZpbGUuYmFzZW5hbWVdID0gbmV3SWQ7XHJcblx0XHR0aGlzLmlkID0gdGhpcy5pZCsxO1xyXG5cdFx0cmV0dXJuIG5ld0lkO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIFx1OEZENFx1NTZERUlEWFhYWFtcInRmaWxlLmJhc2VuYW1lXCJdXHJcblx0Z2V0X25vZGUodGZpbGU6VEZpbGUpe1xyXG5cdFx0bGV0IGlkID0gdGhpcy5nZXRfaWQodGZpbGUpO1xyXG5cdFx0cmV0dXJuIGAke2lkfShcIiR7dGZpbGUuYmFzZW5hbWV9XCIpYFxyXG5cdH1cclxuXHJcblx0Z2V0X21laHJtYWlkX25vZGUobm9kZTpzdHJpbmcsYXZhdGE9Jycpe1xyXG5cdFx0aWYgKG5vZGUgaW4gdGhpcy5ub3RlMmlkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLm5vdGUyaWRbbm9kZV07XHJcblx0XHR9XHJcblx0XHRpZihub2RlLnN0YXJ0c1dpdGgoJ3N1YmdyYXBoICcpKXtcclxuXHRcdFx0cmV0dXJuIG5vZGUuc2xpY2UoJ3N1YmdyYXBoICcubGVuZ3RoKVxyXG5cdFx0fVxyXG5cdFx0bGV0IG5ld0lkID0gYElEJHt0aGlzLmlkLnRvU3RyaW5nKCkucGFkU3RhcnQoNCwgJzAnKX1gO1xyXG5cdFx0dGhpcy5ub3RlMmlkW25vZGVdID0gbmV3SWQ7XHJcblx0XHR0aGlzLmlkID0gdGhpcy5pZCsxO1xyXG5cdFx0bGV0IHRmaWxlID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X3RmaWxlKG5vZGUpO1xyXG5cdFx0aWYodGZpbGUpe1xyXG5cdFx0XHRpZihhdmF0YSA9PScnKXtcclxuXHRcdFx0XHRhdmF0YSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmF2YXRhXHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IG1ldGEgPSB0aGlzLnBsdWdpbi5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKHRmaWxlLGF2YXRhKTtcclxuXHRcdFx0aWYobWV0YSl7XHJcblx0XHRcdFx0aWYobWV0YS5zdGFydHNXaXRoKCcjJykpe1xyXG5cdFx0XHRcdFx0bm9kZSA9IGAhW1ske3RmaWxlLmJhc2VuYW1lfSR7bWV0YX18bm8taGVhZF1dYFxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0bm9kZSA9IG1ldGEucmVwbGFjZSgnU0VMRicsYFtbJHt0ZmlsZS5iYXNlbmFtZX1dXWApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGAke25ld0lkfShcIiR7bm9kZX1cIilgO1xyXG5cdH1cclxuXHJcblx0Z2V0X2NhbnZhc19ub2RlKG5vZGU6c3RyaW5nKXtcclxuXHRcdGlmIChub2RlIGluIHRoaXMubm90ZTJpZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5ub3RlMmlkW25vZGVdO1xyXG5cdFx0fVxyXG5cdFx0bGV0IG5ld0lkID0gYElEJHt0aGlzLmlkLnRvU3RyaW5nKCkucGFkU3RhcnQoNCwgJzAnKX1gO1xyXG5cdFx0dGhpcy5ub3RlMmlkW25vZGVdID0gbmV3SWQ7XHJcblx0XHR0aGlzLmlkID0gdGhpcy5pZCsxO1xyXG5cdFx0cmV0dXJuIG5ld0lkO1xyXG5cclxuXHR9XHJcblxyXG5cdG5vdGVzMmNsYXNzKCl7XHJcblx0XHRsZXQgbXNnID0gJ1xcbic7XHJcblx0XHRmb3IobGV0IHRmaWxlIGluIHRoaXMubm90ZTJpZCl7XHJcblx0XHRcdG1zZyA9IG1zZytgXFx0Y2xhc3MgJHt0aGlzLm5vdGUyaWRbdGZpbGVdfSBpbnRlcm5hbC1saW5rO1xcbmA7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbXNnXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWVybWFpZEdyYXBoe1xyXG5cdHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW47XHJcblx0YXBwOkFwcDtcclxuXHRlZGl0b3I6TkNFZGl0b3I7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4pIHtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdFx0dGhpcy5hcHAgPSBwbHVnaW4uYXBwO1xyXG5cdFx0dGhpcy5lZGl0b3IgPSBwbHVnaW4uZWRpdG9yO1xyXG5cdH1cclxuXHJcblx0Z2V0X25vdGVfbm9kZSh0ZmlsZTpURmlsZSl7XHJcblx0XHRsZXQgbm9kZSA9IG5ldyBOb3RlTm9kZSh0ZmlsZSx0aGlzLnBsdWdpbik7XHJcblx0XHRyZXR1cm4gbm9kZTtcclxuXHR9XHJcblxyXG5cdHN1YmdyYXBoX2NoYWluKG5vZGU6Tm90ZU5vZGUsdGZpbGVzOkFycmF5PFRGaWxlPixzdWJncmFwaD0nJyxsaW5lPSc8LS0+Jyl7XHJcblxyXG5cdFx0bGV0IG1zZyA9ICcnO1xyXG5cdFx0bGV0IGl0ZW1zID0gdGZpbGVzLm1hcCh4PT54KTtcclxuXHRcdGxldCBzdGFiID0gJ1xcdCc7XHJcblx0XHRpZihzdWJncmFwaCE9Jycpe1xyXG5cdFx0XHRtc2cgPSBtc2cgKyBgXFxuXFx0c3ViZ3JhcGggJHtzdWJncmFwaH1cXG5gO1xyXG5cdFx0XHRzdGFiID0gJ1xcdFxcdCc7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGkgPSAwO1xyXG5cdFx0d2hpbGUoaTxpdGVtcy5sZW5ndGgtMSl7XHJcblx0XHRcdGxldCBwcmV2ID0gbm9kZS5nZXRfbm9kZShpdGVtc1tpXSk7XHJcblx0XHRcdGxldCBuZXh0ID0gbm9kZS5nZXRfbm9kZShpdGVtc1tpKzFdKTtcclxuXHRcdFx0bXNnID0gbXNnK2Ake3N0YWJ9JHtwcmV2fSR7bGluZX0ke25leHR9XFxuYDtcclxuXHRcdFx0aSA9IGkrMTtcclxuXHRcdH1cclxuXHJcblx0XHRpZihzdWJncmFwaCE9Jycpe1xyXG5cdFx0XHRtc2cgPSBtc2crXCJcXHRlbmRcXG5cIjtcclxuXHRcdH1cclxuXHRcdHJldHVybiBtc2c7XHJcblx0fVxyXG5cclxuXHRzdWJncmFwaF9saW5rcyhub2RlOk5vdGVOb2RlLHRmaWxlczpBcnJheTxURmlsZT4sc3ViZ3JhcGg9JycsbGluZT0nLS0+Jyx0ZmlsZXNfZmlyc3Q9ZmFsc2Upe1xyXG5cdFx0bGV0IG1zZyA9ICcnO1xyXG5cdFx0bGV0IGl0ZW1zID0gdGZpbGVzLm1hcCh4PT54KTtcclxuXHRcdGxldCBzdGFiID0gJ1xcdCc7XHJcblx0XHRpZihzdWJncmFwaCE9Jycpe1xyXG5cdFx0XHRtc2cgPSBtc2cgKyBgXFxuXFx0c3ViZ3JhcGggJHtzdWJncmFwaH1cXG5gO1xyXG5cdFx0XHRzdGFiID0gJ1xcdFxcdCc7XHJcblxyXG5cdFx0fVxyXG5cdFx0bGV0IGkgPSAwO1xyXG5cdFx0bGV0IHNpZCA9IG5vZGUuZ2V0X25vZGUobm9kZS50ZmlsZSk7XHJcblx0XHR3aGlsZShpPGl0ZW1zLmxlbmd0aCl7XHJcblx0XHRcdGxldCBpZCA9IG5vZGUuZ2V0X25vZGUoaXRlbXNbaV0pO1xyXG5cdFx0XHRpZih0ZmlsZXNfZmlyc3Qpe1xyXG5cdFx0XHRcdG1zZyA9IG1zZytgJHtzdGFifSR7aWR9JHtsaW5lfSR7c2lkfVxcbmA7XHJcblxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRtc2cgPSBtc2crYCR7c3RhYn0ke3NpZH0ke2xpbmV9JHtpZH1cXG5gO1xyXG5cdFx0XHR9XHJcblx0XHRcdGkgPSBpKzE7XHJcblx0XHR9XHJcblx0XHRpZihzdWJncmFwaCE9Jycpe1xyXG5cdFx0XHRtc2cgPSBtc2crXCJcXHRlbmRcXG5cIjtcclxuXHRcdH1cclxuXHRcdHJldHVybiBtc2c7XHJcblx0fVxyXG5cclxuXHQvLyBbc3JjLGRzdCxpb11cclxuXHRlZGdlc19vZl90ZmlsZXModGZpbGVzOkFycmF5PFRGaWxlPixtZXJnZV9pbm91dD10cnVlKXtcclxuXHRcdGxldCBpbmxpbmtzOntba2V5OnN0cmluZ106QXJyYXk8VEZpbGU+fSA9IHt9XHJcblx0XHRsZXQgb3V0bGlua3M6e1trZXk6c3RyaW5nXTpBcnJheTxURmlsZT59ID0ge31cclxuXHRcdGZvcihsZXQgdGZpbGUgb2YgdGZpbGVzKXtcclxuXHRcdFx0b3V0bGlua3NbdGZpbGVzLmluZGV4T2YodGZpbGUpXSA9IHRoaXMucGx1Z2luLmNoYWluLmdldF9vdXRsaW5rcyh0ZmlsZSx0cnVlKTtcclxuXHRcdFx0aW5saW5rc1t0ZmlsZXMuaW5kZXhPZih0ZmlsZSldID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X2lubGlua3ModGZpbGUsdHJ1ZSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGxldCBlZGdlcyA9IFtdO1xyXG5cdFx0Zm9yKGxldCB0ZmlsZSBvZiB0ZmlsZXMpe1xyXG5cdFx0XHRsZXQgaSA9IHRmaWxlcy5pbmRleE9mKHRmaWxlKTtcclxuXHRcdFx0Zm9yKGxldCBvdXRsaW5rIG9mIG91dGxpbmtzW2ldKXtcclxuXHRcdFx0XHRpZih0ZmlsZXMuY29udGFpbnMob3V0bGluaykpe1xyXG5cdFx0XHRcdFx0aWYodGZpbGVzLmluZGV4T2Yob3V0bGluayk8PWkpe2NvbnRpbnVlO31cclxuXHRcdFx0XHRcdGlmKG1lcmdlX2lub3V0KXtcclxuXHRcdFx0XHRcdFx0aWYoaW5saW5rc1tpXS5jb250YWlucyhvdXRsaW5rKSl7XHJcblx0XHRcdFx0XHRcdFx0ZWRnZXMucHVzaChbdGZpbGUsb3V0bGluayx0cnVlXSk7XHJcblx0XHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHRcdGVkZ2VzLnB1c2goW3RmaWxlLG91dGxpbmssZmFsc2VdKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdGVkZ2VzLnB1c2goW3RmaWxlLG91dGxpbmssZmFsc2VdKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvcihsZXQgaW5saW5rIG9mIGlubGlua3NbaV0pe1xyXG5cdFx0XHRcdGlmKHRmaWxlcy5jb250YWlucyhpbmxpbmspKXtcclxuXHRcdFx0XHRcdGlmKHRmaWxlcy5pbmRleE9mKGlubGluayk8PWkpe2NvbnRpbnVlO31cclxuXHRcdFx0XHRcdGlmKG1lcmdlX2lub3V0KXtcclxuXHRcdFx0XHRcdFx0aWYoIW91dGxpbmtzW2ldLmNvbnRhaW5zKGlubGluaykpe1xyXG5cdFx0XHRcdFx0XHRcdGVkZ2VzLnB1c2goW2lubGluayx0ZmlsZSxmYWxzZV0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdFx0ZWRnZXMucHVzaChbaW5saW5rLHRmaWxlLGZhbHNlXSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZWRnZXM7XHJcblx0fVxyXG5cclxuXHRzdWJncmFwaF9jcm9zcyhub2RlOk5vdGVOb2RlLHRmaWxlczpBcnJheTxURmlsZT4sc3ViZ3JhcGg9JycsbGluZT0nLS0+Jyx0ZmlsZXNfZmlyc3Q9ZmFsc2Upe1xyXG5cdFx0bGV0IG1zZyA9ICcnO1xyXG5cdFx0bGV0IGl0ZW1zID0gdGZpbGVzLm1hcCh4PT54KTtcclxuXHRcdGxldCBzdGFiID0gJ1xcdCc7XHJcblx0XHRpZihzdWJncmFwaCE9Jycpe1xyXG5cdFx0XHRtc2cgPSBtc2cgKyBgXFxuXFx0c3ViZ3JhcGggJHtzdWJncmFwaH1cXG5gO1xyXG5cdFx0XHRzdGFiID0gJ1xcdFxcdCc7XHJcblxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRsZXQgZWRnZXMgPSB0aGlzLmVkZ2VzX29mX3RmaWxlcyh0ZmlsZXMpO1xyXG5cdFx0Zm9yKGxldCBlZGdlIG9mIGVkZ2VzKXtcclxuXHRcdFx0bGV0IHNpZCA9IG5vZGUuZ2V0X25vZGUoZWRnZVswXSBhcyBhbnkpO1xyXG5cdFx0XHRsZXQgZGlkID0gbm9kZS5nZXRfbm9kZShlZGdlWzFdIGFzIGFueSk7XHJcblx0XHRcdGlmKGVkZ2VbMl0pe1xyXG5cdFx0XHRcdG1zZyA9IG1zZyArIGAke3N0YWJ9JHtzaWR9PC0uLT4ke2RpZH1cXG5gO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRtc2cgPSBtc2cgKyBgJHtzdGFifSR7c2lkfS0uLT4ke2RpZH1cXG5gO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGlmKHN1YmdyYXBoIT0nJyl7XHJcblx0XHRcdG1zZyA9IG1zZytcIlxcdGVuZFxcblwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1zZztcclxuXHR9XHJcblxyXG5cdGdldF9mbG93Y2hhcnQodGZpbGU6VEZpbGUsTj0yLGNfY2hhaW49JyNGMDU0NTQnLGNfaW5saW5rPScjNzc2QjVEJyxjX291dGxpbms9JyMyMjI4MzEnLGNfYW5jaG9yPScjNDBBNTc4Jyl7XHJcblx0XHRpZighdGZpbGUpe1xyXG5cdFx0XHRsZXQgbGVhZiA9IHRoaXMucGx1Z2luLmNoYWluLmdldF9sYXN0X2FjdGl2YXRlX2xlYWYoKTtcclxuXHRcdFx0aWYobGVhZil7XHJcblx0XHRcdFx0dGZpbGUgPSBsZWFmLnZpZXcuZmlsZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmKCF0ZmlsZSl7XHJcblx0XHRcdHJldHVybiAnTm8gRmlsZS4nXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IG5vZGUgPSBuZXcgTm90ZU5vZGUodGZpbGUsdGhpcy5wbHVnaW4pO1xyXG5cclxuXHRcdGxldCBuYyA9IHRoaXMucGx1Z2luO1xyXG5cclxuXHRcdGxldCBtc2cgPSBcIlxcYFxcYFxcYG1lcm1haWRcXG5mbG93Y2hhcnQgVERcXG5cIjtcclxuXHRcdGxldCBjaGFpbiA9IG5jLmNoYWluLmdldF9jaGFpbih0ZmlsZSxOLE4pXHJcblx0XHRtc2cgPSBtc2cgKyB0aGlzLnN1YmdyYXBoX2NoYWluKG5vZGUsY2hhaW4sJ1x1N0IxNFx1OEJCMFx1OTRGRScpO1xyXG5cclxuXHRcdGxldCBpbmxpbmtzID0gbmMuY2hhaW4uZ2V0X2lubGlua3ModGZpbGUsdHJ1ZSkuZmlsdGVyKCh4OlRGaWxlKT0+IWNoYWluLmNvbnRhaW5zKHgpKTtcclxuXHRcdGxldCBvdXRsaW5rcyA9IG5jLmNoYWluLmdldF9vdXRsaW5rcyh0ZmlsZSx0cnVlKS5maWx0ZXIoKHg6VEZpbGUpPT4hY2hhaW4uY29udGFpbnMoeCkpO1xyXG5cclxuXHRcdG1zZyA9IG1zZyArIHRoaXMuc3ViZ3JhcGhfbGlua3Mobm9kZSxpbmxpbmtzLCdcdTUxNjVcdTk0RkUnLCctLT4nLHRydWUpO1xyXG5cclxuXHRcdG1zZyA9IG1zZyArIHRoaXMuc3ViZ3JhcGhfbGlua3Mobm9kZSxvdXRsaW5rcywnXHU1MUZBXHU5NEZFJywnLS0+Jyk7XHJcblxyXG5cdFx0bXNnID0gbXNnICsgbm9kZS5ub3RlczJjbGFzcygpO1xyXG5cdFx0bXNnID0gbXNnICsgW1xyXG5cdFx0XHQnY2xhc3NEZWYgXHU3QjE0XHU4QkIwXHU5NEZFQyBmaWxsOicrY19jaGFpbixcclxuXHRcdFx0J2NsYXNzRGVmIFx1NTE2NVx1OTRGRUMgZmlsbDonK2NfaW5saW5rLFxyXG5cdFx0XHQnY2xhc3NEZWYgXHU1MUZBXHU5NEZFQyBmaWxsOicrY19vdXRsaW5rLFxyXG5cdFx0XHRgY2xhc3NEZWYgQW5jaG9yIGZpbGw6JHtjX2FuY2hvcn0sc3Rva2U6JHtjX2FuY2hvcn1gLFxyXG5cdFx0XHQnY2xhc3MgXHU3QjE0XHU4QkIwXHU5NEZFIFx1N0IxNFx1OEJCMFx1OTRGRUMnLFxyXG5cdFx0XHQnY2xhc3MgXHU1MTY1XHU5NEZFIFx1NTE2NVx1OTRGRUMnLFxyXG5cdFx0XHQnY2xhc3MgXHU1MUZBXHU5NEZFIFx1NTFGQVx1OTRGRUMnLFxyXG5cdFx0XHQnJ1xyXG5cdFx0XS5qb2luKCdcXG4nKVxyXG5cdFx0bXNnID0gbXNnK1wiXFxgXFxgXFxgXCI7XHJcblx0XHRtc2cgPSBtc2cucmVwbGFjZShcclxuXHRcdFx0YGNsYXNzICR7bm9kZS5nZXRfaWQodGZpbGUpfSBpbnRlcm5hbC1saW5rO2AsXHJcblx0XHRcdGBjbGFzcyAke25vZGUuZ2V0X2lkKHRmaWxlKX0gQW5jaG9yO2BcclxuXHRcdCk7XHJcblx0XHRyZXR1cm4gbXNnO1xyXG5cdH1cclxuXHJcblx0Zmxvd2NoYXJ0X2ZvbGRlcih0ZmlsZTpURmlsZSxzdWJncmFwaD0nRm9sZGVyJyxjb2xvcj0nI0YwNTQ1NCcsY19hbmNob3I9JyM0MEE1NzgnKXtcclxuXHRcdGlmKCF0ZmlsZSl7XHJcblx0XHRcdGxldCBsZWFmID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X2xhc3RfYWN0aXZhdGVfbGVhZigpO1xyXG5cdFx0XHRpZihsZWFmKXtcclxuXHRcdFx0XHR0ZmlsZSA9IGxlYWYudmlldy5maWxlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoIXRmaWxlKXtcclxuXHRcdFx0cmV0dXJuICdObyBGaWxlLidcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgdGZpbGVzID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X2Jyb3RoZXJzKHRmaWxlKTtcclxuXHRcdHJldHVybiB0aGlzLmZsb3djaGFydF9jcm9zcyh0ZmlsZSx0ZmlsZXMsc3ViZ3JhcGgsY29sb3IsY19hbmNob3IpO1xyXG5cdH1cclxuXHJcblx0Zmxvd2NoYXJ0X25vdGVjaGFpbih0ZmlsZTpURmlsZSxOPTEwLHN1YmdyYXBoPSdOb3RlQ2hhaW4nLGNvbG9yPScjRjA1NDU0JyxjX2FuY2hvcj0nIzQwQTU3OCcpe1xyXG5cdFx0aWYoIXRmaWxlKXtcclxuXHRcdFx0bGV0IGxlYWYgPSB0aGlzLnBsdWdpbi5jaGFpbi5nZXRfbGFzdF9hY3RpdmF0ZV9sZWFmKCk7XHJcblx0XHRcdGlmKGxlYWYpe1xyXG5cdFx0XHRcdHRmaWxlID0gbGVhZi52aWV3LmZpbGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZighdGZpbGUpe1xyXG5cdFx0XHRyZXR1cm4gJ05vIEZpbGUuJ1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCB0ZmlsZXMgPSB0aGlzLnBsdWdpbi5jaGFpbi5nZXRfY2hhaW4odGZpbGUsTixOKTtcclxuXHRcdHJldHVybiB0aGlzLmZsb3djaGFydF9jcm9zcyh0ZmlsZSx0ZmlsZXMsc3ViZ3JhcGgsY29sb3IsY19hbmNob3IpO1xyXG5cdH1cclxuXHJcblx0Zmxvd2NoYXJ0X2Nyb3NzKGFuY2hvcjpURmlsZSx0ZmlsZXM6QXJyYXk8VEZpbGU+LHN1YmdyYXBoPScnLGNvbG9yPScjRjA1NDU0JyxjX2FuY2hvcj0nIzQwQTU3OCcpe1xyXG5cdFx0bGV0IG5vZGUgPSBuZXcgTm90ZU5vZGUodGZpbGVzWzBdLHRoaXMucGx1Z2luKTtcclxuXHRcdGxldCBtc2cgPSBcIlxcYFxcYFxcYG1lcm1haWRcXG5mbG93Y2hhcnQgVERcXG5cIjtcclxuXHRcdG1zZyA9IG1zZyArIHRoaXMuc3ViZ3JhcGhfY3Jvc3Mobm9kZSx0ZmlsZXMsc3ViZ3JhcGgpO1xyXG5cdFx0bXNnID0gbXNnICsgbm9kZS5ub3RlczJjbGFzcygpO1xyXG5cdFx0bXNnID0gbXNnICsgW1xyXG5cdFx0XHRgY2xhc3NEZWYgJHtzdWJncmFwaH1DIGZpbGw6JHtjb2xvcn1gLFxyXG5cdFx0XHRgY2xhc3NEZWYgQW5jaG9yIGZpbGw6JHtjX2FuY2hvcn0sc3Rva2U6JHtjX2FuY2hvcn1gLFxyXG5cdFx0XHRgY2xhc3MgJHtzdWJncmFwaH0gJHtzdWJncmFwaH1DYCxcclxuXHRcdFx0JydcclxuXHRcdF0uam9pbignXFxuJylcclxuXHRcdG1zZyA9IG1zZytcIlxcYFxcYFxcYFwiO1xyXG5cdFx0bXNnID0gbXNnLnJlcGxhY2UoXHJcblx0XHRcdGBjbGFzcyAke25vZGUuZ2V0X2lkKGFuY2hvcil9IGludGVybmFsLWxpbms7YCxcclxuXHRcdFx0YGNsYXNzICR7bm9kZS5nZXRfaWQoYW5jaG9yKX0gQW5jaG9yO2BcclxuXHRcdCk7XHJcblx0XHRyZXR1cm4gbXNnO1xyXG5cdH1cclxuXHJcblx0Z2V0X3N1YmdyYWhfbmFtZXMoZ3JvdXBfbmFtZTpzdHJpbmcsdGZpbGVzOkFycmF5PFRGaWxlPixuYW1lPSdncm91cCcpe1xyXG5cdFx0bGV0IG5jID0gdGhpcy5wbHVnaW47XHJcblx0XHRsZXQgaXRlbXM6e1trZXk6c3RyaW5nXTpzdHJpbmd9ID0ge31cclxuXHRcdGZvcihsZXQgY2ZpbGUgb2YgdGZpbGVzKXtcclxuXHRcdFx0bGV0IGNncm91cCA9IG5jLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIoY2ZpbGUsbmFtZSlcclxuXHRcdFx0aWYoY2dyb3VwICYmIEFycmF5LmlzQXJyYXkoY2dyb3VwKSl7XHJcblx0XHRcdFx0Zm9yKGxldCBjZyBvZiBjZ3JvdXApe1xyXG5cdFx0XHRcdFx0bGV0IHRtcCA9IGNnLnNwbGl0KCcvJyk7XHJcblx0XHRcdFx0XHRpZih0bXBbMF09PWdyb3VwX25hbWUpe1xyXG5cdFx0XHRcdFx0XHRpZih0bXAubGVuZ3RoPT0xKXtcclxuXHRcdFx0XHRcdFx0XHRpdGVtc1t0ZmlsZXMuaW5kZXhPZihjZmlsZSldID0gJyc7XHJcblx0XHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHRcdGl0ZW1zW3RmaWxlcy5pbmRleE9mKGNmaWxlKV0gPSB0bXBbMV07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0YnJlYWtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBpdGVtc1xyXG5cdH1cclxuXHJcblx0Zmxvd2NoYXJ0X2dyb3VwcyhhbmNob3I6VEZpbGUsbmFtZT0nZ3JvdXAnKXtcclxuXHRcdGxldCBuYyA9IHRoaXMucGx1Z2luO1xyXG5cclxuXHRcdGxldCB0ZmlsZXMgPSBuYy5jaGFpbi5nZXRfYnJvdGhlcnMoYW5jaG9yKTtcclxuXHRcdHRmaWxlcyA9IG5jLmNoYWluLmdldF9ncm91cF9saW5rcyh0ZmlsZXMsMSlcclxuXHJcblx0XHRsZXQgbm9kZSA9IG5jLm1lcm1haWQuZ2V0X25vdGVfbm9kZShhbmNob3IpO1xyXG5cclxuXHRcdFxyXG5cdFx0bGV0IGdyb3VwID0gbmMuZWRpdG9yLmdldF9mcm9udG1hdHRlcihhbmNob3IsbmFtZSk7XHJcblx0XHRpZighZ3JvdXB8fCFBcnJheS5pc0FycmF5KGdyb3VwKSl7cmV0dXJuIFtdO31cclxuXHRcdGxldCByZXM6QXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cdFx0Zm9yKGxldCBnIG9mIGdyb3VwKXtcclxuXHRcdFx0ZyA9IGcuc3BsaXQoJy8nKVswXVxyXG5cdFx0XHRsZXQgaXRlbXMgPSB0aGlzLmdldF9zdWJncmFoX25hbWVzKGcsdGZpbGVzLG5hbWUpO1xyXG5cdFx0XHRsZXQgc3VicyA9IG5ldyBTZXQoT2JqZWN0LnZhbHVlcyhpdGVtcykpXHJcblxyXG5cdFx0XHRsZXQgbXNnID0gYFxcYFxcYFxcYG1lcm1haWRcXG4tLS1cXG50aXRsZTogJHtnfVxcbi0tLVxcbmZsb3djaGFydCBURFxcbmA7XHJcblx0XHRcdGZvcihsZXQgc3ViIG9mIHN1YnMpe1xyXG5cdFx0XHRcdGlmKHN1Yj09Jycpe1xyXG5cdFx0XHRcdFx0Zm9yKGxldCBpZHggaW4gaXRlbXMpe1xyXG5cdFx0XHRcdFx0XHRpZihpdGVtc1tpZHhdPT1zdWIpe1xyXG5cdFx0XHRcdFx0XHRcdG1zZyA9IG1zZysnXFxuJytub2RlLmdldF9ub2RlKHRmaWxlc1tpZHhdKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0bXNnID0gbXNnKydcXG5zdWJncmFwaCAnK3N1YisnXFxuJ1xyXG5cdFx0XHRcdFx0Zm9yKGxldCBpZHggaW4gaXRlbXMpe1xyXG5cdFx0XHRcdFx0XHRpZihpdGVtc1tpZHhdPT1zdWIpe1xyXG5cdFx0XHRcdFx0XHRcdG1zZyA9IG1zZysnXFxuXFx0Jytub2RlLmdldF9ub2RlKHRmaWxlc1tpZHhdKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdG1zZyA9IG1zZysnXFxuZW5kJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRtc2cgPSBtc2crJ1xcbicrdGhpcy5zdWJncmFwaF9jcm9zcyhub2RlLE9iamVjdC5rZXlzKGl0ZW1zKS5tYXAoeD0+dGZpbGVzW3hdKSk7XHJcblx0XHRcdG1zZyA9IG1zZysnXFxuJytub2RlLm5vdGVzMmNsYXNzKCk7XHJcblx0XHRcdG1zZyA9IG1zZytcIlxcblxcYFxcYFxcYFwiO1xyXG5cdFx0XHRyZXMucHVzaChtc2cpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcblxyXG5cdGdldF9yZWxhdGlvbnNoaXBfZ3JhcGgodGZpbGU6VEZpbGUsIE49MSwga2V5PSdsaW5rJyxzaG93X2FsbF9ub2RlPXRydWUpIHtcclxuXHRcdGxldCBuYyA9IHRoaXMucGx1Z2luO1xyXG5cdFx0bGV0IG5vZGUgPSBuZXcgTm90ZU5vZGUodGZpbGUsdGhpcy5wbHVnaW4pO1xyXG5cdFx0bGV0IG1zZyA9IFwiYGBgbWVybWFpZFxcbmZsb3djaGFydCBURFxcblwiO1xyXG5cclxuXHRcdC8vIFx1ODNCN1x1NTNENiBOIFx1NUM0Mlx1OTRGRVx1NjNBNVx1NzY4NFx1N0IxNFx1OEJCMFxyXG5cdFx0bGV0IHRmaWxlcyA9IG5jLmNoYWluLmdldF9ncm91cF9saW5rcyhbdGZpbGVdLCBOKTtcclxuXHRcdGlmKHNob3dfYWxsX25vZGUpe1xyXG5cdFx0XHRmb3IobGV0IHRmaWxlIG9mIHRmaWxlcyl7XHJcblx0XHRcdFx0bXNnICs9YCR7bm9kZS5nZXRfbm9kZSh0ZmlsZSl9XFxuYFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vIFx1NzUyOFx1NEU4RVx1OERERlx1OEUyQVx1NURGMlx1NTkwNFx1NzQwNlx1NzY4NFx1N0IxNFx1OEJCMFxyXG5cdFx0bGV0IHByb2Nlc3NlZEZpbGVzID0gbmV3IFNldDxURmlsZT4oKTtcclxuXHJcblx0XHRmb3IgKGxldCBjdXJyZW50RmlsZSBvZiB0ZmlsZXMpIHtcclxuXHRcdFx0aWYgKHByb2Nlc3NlZEZpbGVzLmhhcyhjdXJyZW50RmlsZSkpIGNvbnRpbnVlOyAvLyBcdTU5ODJcdTY3OUNcdTVERjJcdTU5MDRcdTc0MDZcdUZGMENcdThERjNcdThGQzdcclxuXHRcdFx0cHJvY2Vzc2VkRmlsZXMuYWRkKGN1cnJlbnRGaWxlKTsgLy8gXHU2ODA3XHU4QkIwXHU0RTNBXHU1REYyXHU1OTA0XHU3NDA2XHJcblxyXG5cdFx0XHRsZXQgbGlua3MgPSBuYy5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKGN1cnJlbnRGaWxlLCBrZXkpO1xyXG5cdFx0XHRpZiAobGlua3MpIHtcclxuXHRcdFx0XHRmb3IgKGxldCBbcmVsYXRpb24sIGxpbmtlZE5vdGVdIG9mIE9iamVjdC5lbnRyaWVzKGxpbmtzKSkge1xyXG5cdFx0XHRcdFx0aWYobGlua2VkTm90ZSBpbnN0YW5jZW9mIEFycmF5KXtcclxuXHRcdFx0XHRcdFx0Zm9yKGxldCBpdGVtIG9mIGxpbmtlZE5vdGUpe1xyXG5cdFx0XHRcdFx0XHRcdGxldCBsaW5rZWRURmlsZSA9IG5jLmNoYWluLmdldF90ZmlsZShpdGVtIGFzIHN0cmluZyk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGxpbmtlZFRGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuXHRcdFx0XHRcdFx0XHRcdG1zZyArPSBgXFx0JHtub2RlLmdldF9ub2RlKGN1cnJlbnRGaWxlKX0gLS0+fCR7cmVsYXRpb259fCAke25vZGUuZ2V0X25vZGUobGlua2VkVEZpbGUpfVxcbmA7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdFx0bGV0IGxpbmtlZFRGaWxlID0gbmMuY2hhaW4uZ2V0X3RmaWxlKGxpbmtlZE5vdGUgYXMgc3RyaW5nKTtcclxuXHRcdFx0XHRcdFx0aWYgKGxpbmtlZFRGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuXHRcdFx0XHRcdFx0XHRtc2cgKz0gYFxcdCR7bm9kZS5nZXRfbm9kZShjdXJyZW50RmlsZSl9IC0tPnwke3JlbGF0aW9ufXwgJHtub2RlLmdldF9ub2RlKGxpbmtlZFRGaWxlKX1cXG5gO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRtc2cgPSBtc2cgKyBub2RlLm5vdGVzMmNsYXNzKCk7XHJcblx0XHRtc2cgKz0gXCJgYGBcIjtcclxuXHRcdGxldCBjX2FuY2hvcj0nIzQwQTU3OCdcclxuXHRcdG1zZyA9IG1zZy5yZXBsYWNlKFxyXG5cdFx0XHRgY2xhc3MgJHtub2RlLmdldF9pZCh0ZmlsZSl9IGludGVybmFsLWxpbms7YCxcclxuXHRcdFx0YGNsYXNzRGVmIEFuY2hvciBmaWxsOiR7Y19hbmNob3J9LHN0b2tlOiR7Y19hbmNob3J9XFxuY2xhc3MgJHtub2RlLmdldF9pZCh0ZmlsZSl9IEFuY2hvcjtgXHJcblx0XHQpO1xyXG5cdFx0cmV0dXJuIG1zZztcclxuXHR9XHJcblxyXG5cdGdldF9tZWhybWFpZF9ncmFwaCh0ZmlsZTpURmlsZSwgTj0xLCBrZXk9J21lcm1haWQnLGNfYW5jaG9yPScjZDRjNGI3JyxmaWVsZD0nYXZhdGEnKSB7XHJcblxyXG5cdFx0aWYoIXRmaWxlKXtcclxuXHRcdFx0bGV0IGxlYWYgPSB0aGlzLnBsdWdpbi5jaGFpbi5nZXRfbGFzdF9hY3RpdmF0ZV9sZWFmKCk7XHJcblx0XHRcdGlmKGxlYWYpe1xyXG5cdFx0XHRcdHRmaWxlID0gbGVhZi52aWV3LmZpbGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZighdGZpbGUpe1xyXG5cdFx0XHRyZXR1cm4gJ05vIEZpbGUuJ1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBuYyA9IHRoaXMucGx1Z2luO1xyXG5cdFx0bGV0IG5vZGUgPSBuZXcgTm90ZU5vZGUodGZpbGUsdGhpcy5wbHVnaW4pO1xyXG5cdFx0bGV0IG1zZyA9IFwiYGBgbWVocm1haWRcXG5mbG93Y2hhcnQgVERcXG5cIjtcclxuXHJcblx0XHQvLyBcdTgzQjdcdTUzRDYgTiBcdTVDNDJcdTk0RkVcdTYzQTVcdTc2ODRcdTdCMTRcdThCQjBcclxuXHRcdGxldCB0ZmlsZXM7XHJcblx0XHRpZihOPT0tMSl7XHJcblx0XHRcdHRmaWxlcyA9IG5jLmNoYWluLmdldF9icm90aGVycyh0ZmlsZSk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0dGZpbGVzID0gbmMuY2hhaW4uZ2V0X2dyb3VwX2xpbmtzKFt0ZmlsZV0sIE4pO1xyXG5cdFx0fVxyXG5cdFx0dGZpbGVzID0gbmMuY2hhaW4uc29ydF90ZmlsZXNfYnlfY2hhaW4odGZpbGVzKSBhcyBURmlsZVtdO1xyXG5cclxuXHRcdGZvciAobGV0IGN1cnJlbnRGaWxlIG9mIHRmaWxlcykge1xyXG5cdFx0XHRsZXQgc3JjID0gYFtbJHtjdXJyZW50RmlsZS5iYXNlbmFtZX1dXWBcclxuXHRcdFx0bGV0IGxpbmtzID0gbmMuZWRpdG9yLmdldF9mcm9udG1hdHRlcihjdXJyZW50RmlsZSwga2V5KTtcclxuXHRcdFx0aWYgKGxpbmtzICYmIEFycmF5LmlzQXJyYXkobGlua3MpKSB7XHJcblx0XHRcdFx0Zm9yKGxldCBsaW5rIG9mIGxpbmtzKXtcclxuXHRcdFx0XHRcdGlmKGxpbmtbJ2VkZ2UnXSE9bnVsbCAmJiBsaW5rWydub2RlJ10hPW51bGwpe1xyXG5cdFx0XHRcdFx0XHRsZXQgY2VkZ2UgPSBsaW5rWydlZGdlJ107XHJcblx0XHRcdFx0XHRcdGxldCBjbm9kZSA9IGxpbmtbJ25vZGUnXTtcclxuXHRcdFx0XHRcdFx0aWYoY2VkZ2U9PScnKXtcclxuXHRcdFx0XHRcdFx0XHRjZWRnZSA9ICcnXHJcblx0XHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHRcdGNlZGdlID0gYHxcIiR7Y2VkZ2V9XCJ8YFxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGxldCBsaW5lID0gJy0tPic7XHJcblx0XHRcdFx0XHRcdGlmKGxpbmtbJ2xpbmUnXSl7XHJcblx0XHRcdFx0XHRcdFx0bGluZSA9IGxpbmtbJ2xpbmUnXVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmKGxpbmVbMF09PSc8JyAmJiBsaW5lW2xpbmUubGVuZ3RoLTFdIT0nPicpe1xyXG5cdFx0XHRcdFx0XHRcdGxpbmUgPSBsaW5lLnNsaWNlKDEpKyc+J1xyXG5cdFx0XHRcdFx0XHRcdGlmKGNub2RlIGluc3RhbmNlb2YgQXJyYXkpe1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9yKGxldCBpdGVtIG9mIGNub2RlKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bXNnICs9IGAke25vZGUuZ2V0X21laHJtYWlkX25vZGUoaXRlbSxmaWVsZCl9ICR7bGluZX0gJHtjZWRnZX0gJHtub2RlLmdldF9tZWhybWFpZF9ub2RlKHNyYyxmaWVsZCl9XFxuYDtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdFx0XHRcdG1zZyArPSBgJHtub2RlLmdldF9tZWhybWFpZF9ub2RlKGNub2RlLGZpZWxkKX0gJHtsaW5lfSAke2NlZGdlfSAke25vZGUuZ2V0X21laHJtYWlkX25vZGUoc3JjLGZpZWxkKX1cXG5gO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdFx0aWYoY25vZGUgaW5zdGFuY2VvZiBBcnJheSl7XHJcblx0XHRcdFx0XHRcdFx0XHRmb3IobGV0IGl0ZW0gb2YgY25vZGUpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRtc2cgKz0gYCR7bm9kZS5nZXRfbWVocm1haWRfbm9kZShzcmMsZmllbGQpfSAke2xpbmV9ICR7Y2VkZ2V9ICR7bm9kZS5nZXRfbWVocm1haWRfbm9kZShpdGVtLGZpZWxkKX1cXG5gO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHRcdFx0bXNnICs9IGAke25vZGUuZ2V0X21laHJtYWlkX25vZGUoc3JjLGZpZWxkKX0gJHtsaW5lfSAke2NlZGdlfSAke25vZGUuZ2V0X21laHJtYWlkX25vZGUoY25vZGUsZmllbGQpfVxcbmA7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdFx0aWYobGlua1snZ3JvdXAnXSl7XHJcblx0XHRcdFx0XHRcdFx0bXNnICs9IGBzdWJncmFwaCAke2xpbmtbJ2dyb3VwJ119XFxuXFx0JHtub2RlLmdldF9tZWhybWFpZF9ub2RlKHNyYyxmaWVsZCl9XFxuZW5kXFxuYFxyXG5cdFx0XHRcdFx0XHRcdGlmKGxpbmtbJ2NvbG9yJ10pe1xyXG5cdFx0XHRcdFx0XHRcdFx0bXNnICs9IGBjbGFzc0RlZiAke2xpbmtbJ2dyb3VwJ119Q2xhc3MgZmlsbDoke2xpbmtbJ2NvbG9yJ119XFxuYFxyXG5cdFx0XHRcdFx0XHRcdFx0bXNnICs9IGBjbGFzcyAke2xpbmtbJ2dyb3VwJ119ICR7bGlua1snZ3JvdXAnXX1DbGFzc1xcbmBcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGxldCBzcmMgPSBgW1ske3RmaWxlLmJhc2VuYW1lfV1dYFxyXG5cdFx0bXNnICs9IGAke25vZGUuZ2V0X21laHJtYWlkX25vZGUoc3JjKX1cXG5gXHJcblx0XHRpZihjX2FuY2hvcil7XHJcblx0XHRcdG1zZyArPSBgY2xhc3NEZWYgQW5jaG9yIGZpbGw6JHtjX2FuY2hvcn0sc3Rva2U6JHtjX2FuY2hvcn1cXG5jbGFzcyAke25vZGUuZ2V0X21laHJtYWlkX25vZGUoc3JjKX0gQW5jaG9yO1xcbmBcclxuXHRcdH1cclxuXHRcdG1zZyArPSBcImBgYFwiO1xyXG5cdFx0cmV0dXJuIG1zZztcclxuXHR9XHJcblxyXG5cdFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRWNoYXJ0R3JhcGh7XHJcblx0cGx1Z2luOk5vdGVDaGFpblBsdWdpbjtcclxuXHRhcHA6QXBwO1xyXG5cdGVkaXRvcjpOQ0VkaXRvcjtcclxuXHJcblx0Y29uc3RydWN0b3IocGx1Z2luOk5vdGVDaGFpblBsdWdpbikge1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0XHR0aGlzLmFwcCA9IHBsdWdpbi5hcHA7XHJcblx0XHR0aGlzLmVkaXRvciA9IHBsdWdpbi5lZGl0b3I7XHJcblx0fVxyXG5cclxuXHJcblx0c3ViZ3JhcGhfY2hhaW4obm9kZTpOb3RlTm9kZSx0ZmlsZXM6QXJyYXk8VEZpbGU+LHN1YmdyYXBoPScnLGxpbmU9JzwtLT4nKXtcclxuXHJcblx0XHRsZXQgbXNnID0gJyc7XHJcblx0XHRsZXQgaXRlbXMgPSB0ZmlsZXMubWFwKHg9PngpO1xyXG5cdFx0bGV0IHN0YWIgPSAnXFx0JztcclxuXHRcdGlmKHN1YmdyYXBoIT0nJyl7XHJcblx0XHRcdG1zZyA9IG1zZyArIGBcXG5cXHRzdWJncmFwaCAke3N1YmdyYXBofVxcbmA7XHJcblx0XHRcdHN0YWIgPSAnXFx0XFx0JztcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgaSA9IDA7XHJcblx0XHR3aGlsZShpPGl0ZW1zLmxlbmd0aC0xKXtcclxuXHRcdFx0bGV0IHByZXYgPSBub2RlLmdldF9ub2RlKGl0ZW1zW2ldKTtcclxuXHRcdFx0bGV0IG5leHQgPSBub2RlLmdldF9ub2RlKGl0ZW1zW2krMV0pO1xyXG5cdFx0XHRtc2cgPSBtc2crYCR7c3RhYn0ke3ByZXZ9JHtsaW5lfSR7bmV4dH1cXG5gO1xyXG5cdFx0XHRpID0gaSsxO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKHN1YmdyYXBoIT0nJyl7XHJcblx0XHRcdG1zZyA9IG1zZytcIlxcdGVuZFxcblwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1zZztcclxuXHR9XHJcblxyXG5cdHN1YmdyYXBoX2xpbmtzKG5vZGU6Tm90ZU5vZGUsdGZpbGVzOkFycmF5PFRGaWxlPixzdWJncmFwaD0nJyxsaW5lPSctLT4nLHRmaWxlc19maXJzdD1mYWxzZSl7XHJcblx0XHRsZXQgbXNnID0gJyc7XHJcblx0XHRsZXQgaXRlbXMgPSB0ZmlsZXMubWFwKHg9PngpO1xyXG5cdFx0bGV0IHN0YWIgPSAnXFx0JztcclxuXHRcdGlmKHN1YmdyYXBoIT0nJyl7XHJcblx0XHRcdG1zZyA9IG1zZyArIGBcXG5cXHRzdWJncmFwaCAke3N1YmdyYXBofVxcbmA7XHJcblx0XHRcdHN0YWIgPSAnXFx0XFx0JztcclxuXHJcblx0XHR9XHJcblx0XHRsZXQgaSA9IDA7XHJcblx0XHRsZXQgc2lkID0gbm9kZS5nZXRfbm9kZShub2RlLnRmaWxlKTtcclxuXHRcdHdoaWxlKGk8aXRlbXMubGVuZ3RoKXtcclxuXHRcdFx0bGV0IGlkID0gbm9kZS5nZXRfbm9kZShpdGVtc1tpXSk7XHJcblx0XHRcdGlmKHRmaWxlc19maXJzdCl7XHJcblx0XHRcdFx0bXNnID0gbXNnK2Ake3N0YWJ9JHtpZH0ke2xpbmV9JHtzaWR9XFxuYDtcclxuXHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdG1zZyA9IG1zZytgJHtzdGFifSR7c2lkfSR7bGluZX0ke2lkfVxcbmA7XHJcblx0XHRcdH1cclxuXHRcdFx0aSA9IGkrMTtcclxuXHRcdH1cclxuXHRcdGlmKHN1YmdyYXBoIT0nJyl7XHJcblx0XHRcdG1zZyA9IG1zZytcIlxcdGVuZFxcblwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1zZztcclxuXHR9XHJcblxyXG5cdHN1YmdyYXBoX2Nyb3NzKG5vZGU6Tm90ZU5vZGUsdGZpbGVzOkFycmF5PFRGaWxlPixzdWJncmFwaD0nJyxsaW5lPSctLT4nLHRmaWxlc19maXJzdD1mYWxzZSl7XHJcblx0XHRsZXQgbXNnID0gJyc7XHJcblx0XHRsZXQgaXRlbXMgPSB0ZmlsZXMubWFwKHg9PngpO1xyXG5cdFx0bGV0IHN0YWIgPSAnXFx0JztcclxuXHRcdGlmKHN1YmdyYXBoIT0nJyl7XHJcblx0XHRcdG1zZyA9IG1zZyArIGBcXG5cXHRzdWJncmFwaCAke3N1YmdyYXBofVxcbmA7XHJcblx0XHRcdHN0YWIgPSAnXFx0XFx0JztcclxuXHJcblx0XHR9XHJcblx0XHRmb3IobGV0IHRmaWxlIG9mIHRmaWxlcyl7XHJcblx0XHRcdGxldCBzaWQgPSBub2RlLmdldF9ub2RlKHRmaWxlKTtcclxuXHRcdFx0bGV0IG9saW5rcyA9IHRoaXMucGx1Z2luLmNoYWluLmdldF9vdXRsaW5rcyh0ZmlsZSx0cnVlKTtcclxuXHRcdFx0Zm9yKGxldCBvbGluayBvZiBvbGlua3Mpe1xyXG5cdFx0XHRcdGlmKG9saW5rPT10ZmlsZSl7Y29udGludWV9XHJcblx0XHRcdFx0aWYodGZpbGVzLmNvbnRhaW5zKG9saW5rKSl7XHJcblx0XHRcdFx0XHRsZXQgaWQgPSBub2RlLmdldF9ub2RlKG9saW5rKTtcclxuXHRcdFx0XHRcdG1zZyA9IG1zZyArIGAke3N0YWJ9JHtzaWR9JHtsaW5lfSR7aWR9XFxuYDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0aWYoc3ViZ3JhcGghPScnKXtcclxuXHRcdFx0bXNnID0gbXNnK1wiXFx0ZW5kXFxuXCI7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbXNnO1xyXG5cdH1cclxuXHJcblx0Z2V0X2Zsb3djaGFydCh0ZmlsZTpURmlsZSxOPTIsY19jaGFpbj0nI0YwNTQ1NCcsY19pbmxpbms9JyM3NzZCNUQnLGNfb3V0bGluaz0nIzIyMjgzMScsY19hbmNob3I9JyM0MEE1NzgnKXtcclxuXHRcdGlmKCF0ZmlsZSl7XHJcblx0XHRcdGxldCBsZWFmID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X2xhc3RfYWN0aXZhdGVfbGVhZigpO1xyXG5cdFx0XHRpZihsZWFmKXtcclxuXHRcdFx0XHR0ZmlsZSA9IGxlYWYudmlldy5maWxlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoIXRmaWxlKXtcclxuXHRcdFx0cmV0dXJuICdObyBGaWxlLidcclxuXHRcdH1cclxuXHRcdFxyXG5cclxuXHRcdGxldCBub2RlID0gbmV3IE5vdGVOb2RlKHRmaWxlLHRoaXMucGx1Z2luKTtcclxuXHJcblx0XHRsZXQgbmMgPSB0aGlzLnBsdWdpbjtcclxuXHJcblx0XHRsZXQgbXNnID0gXCJcXGBcXGBcXGBtZXJtYWlkXFxuZmxvd2NoYXJ0IFREXFxuXCI7XHJcblx0XHRsZXQgY2hhaW4gPSBuYy5jaGFpbi5nZXRfY2hhaW4odGZpbGUsTixOKVxyXG5cdFx0bXNnID0gbXNnICsgdGhpcy5zdWJncmFwaF9jaGFpbihub2RlLGNoYWluLCdcdTdCMTRcdThCQjBcdTk0RkUnKTtcclxuXHJcblx0XHRsZXQgaW5saW5rcyA9IG5jLmNoYWluLmdldF9pbmxpbmtzKHRmaWxlLHRydWUpLmZpbHRlcigoeDpURmlsZSk9PiFjaGFpbi5jb250YWlucyh4KSk7XHJcblx0XHRsZXQgb3V0bGlua3MgPSBuYy5jaGFpbi5nZXRfb3V0bGlua3ModGZpbGUsdHJ1ZSkuZmlsdGVyKCh4OlRGaWxlKT0+IWNoYWluLmNvbnRhaW5zKHgpKTtcclxuXHJcblx0XHRtc2cgPSBtc2cgKyB0aGlzLnN1YmdyYXBoX2xpbmtzKG5vZGUsaW5saW5rcywnXHU1MTY1XHU5NEZFJywnLS0+Jyx0cnVlKTtcclxuXHJcblx0XHRtc2cgPSBtc2cgKyB0aGlzLnN1YmdyYXBoX2xpbmtzKG5vZGUsb3V0bGlua3MsJ1x1NTFGQVx1OTRGRScsJy0tPicpO1xyXG5cclxuXHRcdG1zZyA9IG1zZyArIG5vZGUubm90ZXMyY2xhc3MoKTtcclxuXHRcdG1zZyA9IG1zZyArIFtcclxuXHRcdFx0J2NsYXNzRGVmIFx1N0IxNFx1OEJCMFx1OTRGRUMgZmlsbDonK2NfY2hhaW4sXHJcblx0XHRcdCdjbGFzc0RlZiBcdTUxNjVcdTk0RkVDIGZpbGw6JytjX2lubGluayxcclxuXHRcdFx0J2NsYXNzRGVmIFx1NTFGQVx1OTRGRUMgZmlsbDonK2Nfb3V0bGluayxcclxuXHRcdFx0YGNsYXNzRGVmIEFuY2hvciBmaWxsOiR7Y19hbmNob3J9LHN0b2tlOiR7Y19hbmNob3J9YCxcclxuXHRcdFx0J2NsYXNzIFx1N0IxNFx1OEJCMFx1OTRGRSBcdTdCMTRcdThCQjBcdTk0RkVDJyxcclxuXHRcdFx0J2NsYXNzIFx1NTE2NVx1OTRGRSBcdTUxNjVcdTk0RkVDJyxcclxuXHRcdFx0J2NsYXNzIFx1NTFGQVx1OTRGRSBcdTUxRkFcdTk0RkVDJyxcclxuXHRcdFx0JydcclxuXHRcdF0uam9pbignXFxuJylcclxuXHRcdG1zZyA9IG1zZytcIlxcYFxcYFxcYFwiO1xyXG5cdFx0bXNnID0gbXNnLnJlcGxhY2UoXHJcblx0XHRcdGBjbGFzcyAke25vZGUuZ2V0X2lkKHRmaWxlKX0gaW50ZXJuYWwtbGluaztgLFxyXG5cdFx0XHRgY2xhc3MgJHtub2RlLmdldF9pZCh0ZmlsZSl9IEFuY2hvcjtgXHJcblx0XHQpO1xyXG5cdFx0cmV0dXJuIG1zZztcclxuXHR9XHJcblxyXG5cdGZsb3djaGFydF9mb2xkZXIodGZpbGU6VEZpbGUsc3ViZ3JhcGg9J0ZvbGRlcicsY29sb3I9JyNGMDU0NTQnLGNfYW5jaG9yPScjNDBBNTc4Jyl7XHJcblx0XHRpZighdGZpbGUpe1xyXG5cdFx0XHRsZXQgbGVhZiA9IHRoaXMucGx1Z2luLmNoYWluLmdldF9sYXN0X2FjdGl2YXRlX2xlYWYoKTtcclxuXHRcdFx0aWYobGVhZil7XHJcblx0XHRcdFx0dGZpbGUgPSBsZWFmLnZpZXcuZmlsZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmKCF0ZmlsZSl7XHJcblx0XHRcdHJldHVybiAnTm8gRmlsZS4nXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHRmaWxlcyA9IHRoaXMucGx1Z2luLmNoYWluLmdldF9icm90aGVycyh0ZmlsZSk7XHJcblx0XHRyZXR1cm4gdGhpcy5mbG93Y2hhcnRfY3Jvc3ModGZpbGUsdGZpbGVzLHN1YmdyYXBoLGNvbG9yLGNfYW5jaG9yKTtcclxuXHR9XHJcblxyXG5cdGZsb3djaGFydF9ub3RlY2hhaW4odGZpbGU6VEZpbGUsTj0xMCxzdWJncmFwaD0nTm90ZUNoYWluJyxjb2xvcj0nI0YwNTQ1NCcsY19hbmNob3I9JyM0MEE1NzgnKXtcclxuXHRcdGlmKCF0ZmlsZSl7XHJcblx0XHRcdGxldCBsZWFmID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X2xhc3RfYWN0aXZhdGVfbGVhZigpO1xyXG5cdFx0XHRpZihsZWFmKXtcclxuXHRcdFx0XHR0ZmlsZSA9IGxlYWYudmlldy5maWxlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoIXRmaWxlKXtcclxuXHRcdFx0cmV0dXJuICdObyBGaWxlLidcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgdGZpbGVzID0gdGhpcy5wbHVnaW4uY2hhaW4uZ2V0X2NoYWluKHRmaWxlLE4sTik7XHJcblx0XHRyZXR1cm4gdGhpcy5mbG93Y2hhcnRfY3Jvc3ModGZpbGUsdGZpbGVzLHN1YmdyYXBoLGNvbG9yLGNfYW5jaG9yKTtcclxuXHR9XHJcblxyXG5cdGZsb3djaGFydF9jcm9zcyhhbmNob3I6VEZpbGUsdGZpbGVzOkFycmF5PFRGaWxlPixzdWJncmFwaD0nJyxjb2xvcj0nI0YwNTQ1NCcsY19hbmNob3I9JyM0MEE1NzgnKXtcclxuXHRcdGxldCBub2RlID0gbmV3IE5vdGVOb2RlKHRmaWxlc1swXSx0aGlzLnBsdWdpbik7XHJcblx0XHRsZXQgbXNnID0gXCJcXGBcXGBcXGBtZXJtYWlkXFxuZmxvd2NoYXJ0IFREXFxuXCI7XHJcblx0XHRtc2cgPSBtc2cgKyB0aGlzLnN1YmdyYXBoX2Nyb3NzKG5vZGUsdGZpbGVzLHN1YmdyYXBoKTtcclxuXHRcdG1zZyA9IG1zZyArIG5vZGUubm90ZXMyY2xhc3MoKTtcclxuXHRcdG1zZyA9IG1zZyArIFtcclxuXHRcdFx0YGNsYXNzRGVmICR7c3ViZ3JhcGh9QyBmaWxsOiR7Y29sb3J9YCxcclxuXHRcdFx0YGNsYXNzRGVmIEFuY2hvciBmaWxsOiR7Y19hbmNob3J9LHN0b2tlOiR7Y19hbmNob3J9YCxcclxuXHRcdFx0YGNsYXNzICR7c3ViZ3JhcGh9ICR7c3ViZ3JhcGh9Q2AsXHJcblx0XHRcdCcnXHJcblx0XHRdLmpvaW4oJ1xcbicpXHJcblx0XHRtc2cgPSBtc2crXCJcXGBcXGBcXGBcIjtcclxuXHRcdG1zZyA9IG1zZy5yZXBsYWNlKFxyXG5cdFx0XHRgY2xhc3MgJHtub2RlLmdldF9pZChhbmNob3IpfSBpbnRlcm5hbC1saW5rO2AsXHJcblx0XHRcdGBjbGFzcyAke25vZGUuZ2V0X2lkKGFuY2hvcil9IEFuY2hvcjtgXHJcblx0XHQpO1xyXG5cdFx0cmV0dXJuIG1zZztcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDYW52YXNHcmFwaHtcclxuXHRwbHVnaW46Tm90ZUNoYWluUGx1Z2luO1xyXG5cdGFwcDpBcHA7XHJcblx0ZWRpdG9yOk5DRWRpdG9yO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSB7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMuYXBwID0gcGx1Z2luLmFwcDtcclxuXHRcdHRoaXMuZWRpdG9yID0gcGx1Z2luLmVkaXRvcjtcclxuXHR9XHJcblxyXG5cdGdlbl9yYW5kb21fc3RyaW5nKGxlbmd0aDpudW1iZXIpIHtcclxuXHRcdGxldCBjaGFyYWN0ZXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcclxuXHRcdGxldCByYW5kb21TdHJpbmcgPSAnJztcclxuXHRcdFxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0ICBsZXQgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzLmxlbmd0aCk7XHJcblx0XHQgIHJhbmRvbVN0cmluZyArPSBjaGFyYWN0ZXJzLmNoYXJBdChyYW5kb21JbmRleCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHJldHVybiByYW5kb21TdHJpbmc7XHJcblx0ICB9XHJcblxyXG5cdG5ld19ub3RlX25vZGUodGZpbGU6VEZpbGUpe1xyXG5cdFx0bGV0IG5vZGUgPSBuZXcgTm90ZU5vZGUodGZpbGUsdGhpcy5wbHVnaW4pO1xyXG5cdFx0cmV0dXJuIG5vZGU7XHJcblx0fVxyXG5cclxuXHRnZW5fbm9kZShOTjpOb3RlTm9kZSx0ZmlsZTpUQWJzdHJhY3RGaWxlfHN0cmluZyx4PTAseT0wLHdpZHRoPTQwMCxoZWlnaHQ9NDAwKXtcclxuXHRcdGxldCByc3A6e1trZXk6c3RyaW5nXTphbnl9ID0ge307XHJcblx0XHRpZih0eXBlb2YodGZpbGUpID09ICdzdHJpbmcnKXtcclxuXHRcdFx0cnNwWyd0eXBlJ10gPSAndGV4dCc7XHJcblx0XHRcdHJzcFsndGV4dCddID0gdGZpbGU7XHJcblx0XHRcdHJzcFsnaWQnXSA9IE5OLmdldF9jYW52YXNfbm9kZShyc3BbJ3RleHQnXSk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0cnNwWyd0eXBlJ10gPSAnZmlsZSc7XHJcblx0XHRcdGlmKHRmaWxlIGluc3RhbmNlb2YgVEZvbGRlcil7XHJcblx0XHRcdFx0cnNwWydmaWxlJ10gPSB0ZmlsZS5wYXRoKycvJyt0ZmlsZS5uYW1lKycubWQnO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRyc3BbJ2ZpbGUnXSA9IHRmaWxlLnBhdGg7XHJcblx0XHRcdH1cclxuXHRcdFx0cnNwWydpZCddID0gTk4uZ2V0X2NhbnZhc19ub2RlKHJzcFsnZmlsZSddKTtcclxuXHRcdH1cclxuXHJcblx0XHRyc3BbJ3gnXSA9IHg7XHJcblx0XHRyc3BbJ3knXSA9IHk7XHJcblx0XHRyc3BbJ2hlaWdodCddID0gaGVpZ2h0O1xyXG5cdFx0cnNwWyd3aWR0aCddID0gd2lkdGg7XHJcblxyXG5cdFx0cmV0dXJuIHJzcDtcclxuXHR9XHJcblxyXG5cdHJjX29mX3NlcXVlbmNlKGk6bnVtYmVyLHI6bnVtYmVyLGM6bnVtYmVyKXtcclxuXHRcdC8qXHJcblx0XHRcdTU5ODIgciBcdTg4NEMgYyBcdTUyMTdcdTYzOTJcdTVFOEZcdUZGMENcdTdCMkMgaSBcdTRFMkFcdTUzNjFcdTcyNDdcdTVCRjlcdTVFOTRcdTc2ODRcdTg4NENcdTUyMTdcdTUzRjdcdTY2MkZcdTU5MUFcdTVDMTFcclxuXHRcdCovXHJcblx0XHRsZXQgcm93ID0gTWF0aC5mbG9vcigoaSAtIDEpIC8gYykgKyAxO1xyXG5cdFx0bGV0IGNvbCA9IHJvdyAlIDIgPT09IDEgPyAoaSAtIDEpICUgYyArIDEgOiBjIC0gKChpIC0gMSkgJSBjKTtcclxuXHRcdHJldHVybiBbcm93LCBjb2xdO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgbm90ZV90b19jYW52YXModGZpbGU6VEZpbGUsbnJvdz0xLG5jb2w9MSx3aWR0aD00MDAsaGVpZ2h0PTQwMCx3bWFyaW49MTAwLGhtYXJnaW49MTAwLHdyaXRlPXRydWUpe1xyXG5cdFx0bGV0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQucmVhZCh0ZmlsZSk7XHJcblx0XHRsZXQgdGl0bGVzID0gWy4uLmNvbnRlbnQubWF0Y2hBbGwoL14oIyspXFxzKyguKykvZ20pXTsgLy8gXHU1MzM5XHU5MTREXHU2MjQwXHU2NzA5XHU2ODA3XHU5ODk4XHJcblxyXG5cdFx0aWYobnJvdypuY29sPHRpdGxlcy5sZW5ndGgpe1xyXG5cdFx0XHRuY29sID0gTWF0aC5jZWlsKHRpdGxlcy5sZW5ndGgvbnJvdyk7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IG5vZGVzID0gW107XHJcblx0XHRsZXQgaSA9IDA7XHJcblx0XHRsZXQgTk4gPSB0aGlzLm5ld19ub3RlX25vZGUodGZpbGUpO1xyXG5cdFx0Zm9yKGxldCBtYXRjaCBvZiB0aXRsZXMpe1xyXG5cdFx0XHRpID0gaSsxO1xyXG5cdFx0XHRsZXQgdGl0bGUgPSBgIVtbJHt0ZmlsZS5iYXNlbmFtZX0jJHttYXRjaFsyXX1dXWA7XHJcblx0XHRcdGxldCBwb3MgPSB0aGlzLnJjX29mX3NlcXVlbmNlKGksIG5yb3csIG5jb2wpO1xyXG5cdFx0XHRsZXQgbm9kZSA9IHRoaXMuZ2VuX25vZGUoXHJcblx0XHRcdFx0Tk49Tk4sXHJcblx0XHRcdFx0dGl0bGUsXHJcblx0XHRcdFx0cG9zWzFdKih3aWR0aCt3bWFyaW4pLFxyXG5cdFx0XHRcdHBvc1swXSooaGVpZ2h0K2htYXJnaW4pLFxyXG5cdFx0XHRcdHdpZHRoPXdpZHRoLFxyXG5cdFx0XHRcdGhlaWdodD1oZWlnaHRcclxuXHRcdFx0KVxyXG5cdFx0XHRub2Rlcy5wdXNoKG5vZGUpO1xyXG5cdFx0fVxyXG5cdFx0bGV0IHJlcyA9IHtcclxuXHRcdFx0XCJub2Rlc1wiOm5vZGVzLFxyXG5cdFx0XHRcImVkZ2VzXCI6W11cclxuXHRcdH1cclxuXHRcdGlmKHdyaXRlKXtcclxuXHRcdFx0bGV0IHBhdGggPSB0aGlzLnBhdGhfbWQyY2FudmFzKHRmaWxlKTtcclxuXHRcdFx0YXdhaXQgdGhpcy53cml0ZV9jYW52YXNfZmlsZShyZXMscGF0aCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgd3JpdGVfY2FudmFzX2ZpbGUoY2FudmFzOnt9LHBhdGg6c3RyaW5nKXtcclxuXHRcdGxldCBtc2cgPSBKU09OLnN0cmluZ2lmeShjYW52YXMpO1xyXG5cdFx0bGV0IGNhbnZhc0ZpbGUgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGgpO1xyXG5cdFx0aWYgKGNhbnZhc0ZpbGUpIHtcclxuXHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0Lm1vZGlmeShjYW52YXNGaWxlIGFzIFRGaWxlLCBtc2cpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gXHU1OTgyXHU2NzlDXHU3NTNCXHU1RTAzXHU2NTg3XHU0RUY2XHU0RTBEXHU1QjU4XHU1NzI4XHVGRjBDXHU1MjFCXHU1RUZBXHU2NUIwXHU2NTg3XHU0RUY2XHU1RTc2XHU1MTk5XHU1MTY1XHU1MTg1XHU1QkI5XHJcblx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5jcmVhdGUocGF0aCwgbXNnKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHBhdGhfbWQyY2FudmFzKHRmaWxlOlRGaWxlKXtcclxuXHRcdHJldHVybiB0ZmlsZS5wYXRoLnJlcGxhY2UoJy5tZCcsJy5jYW52YXMnKVxyXG5cdH1cclxufSIsICJpbXBvcnQgeyBcclxuXHRBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsUGx1Z2luXHJcbn0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW1wb3J0IE5vdGVDaGFpblBsdWdpbiBmcm9tICcuLi9tYWluJztcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5DU2V0dGluZ3Mge1xyXG5cdGZpZWxkX29mX2Rpc3BsYXlfdGV4dDpzdHJpbmc7XHJcblx0ZmllbGRfb2ZfY29uZmx1ZW5jZV90YWJfZm9ybWF0OnN0cmluZztcclxuXHRmaWVsZF9vZl9iYWNrZ3JvdW5kX2NvbG9yOnN0cmluZztcclxuXHRQcmV2Q2hhaW46c3RyaW5nO1xyXG5cdE5leHRDaGFpbjpzdHJpbmc7XHJcblx0YXV0b19ub3RlY2hhaW46Ym9vbGVhbjtcclxuXHRub3RpY2Vfd2hpbGVfbW9kaWZ5X2NoYWluOmJvb2xlYW47XHJcblx0cmVmcmVzaERhdGFWaWV3OmJvb2xlYW47XHJcblx0cmVmcmVzaFRhc2tzOmJvb2xlYW4sXHJcblx0aXNTb3J0RmlsZUV4cGxvcmVyOmJvb2xlYW4sXHJcblx0aXNGb2xkZXJGaXJzdDpib29sZWFuLFxyXG5cdGlzZHJhZ2VkOmJvb2xlYW4sXHJcblx0c3VnZ2VzdGVyTm90ZXNNb2RlOnN0cmluZyxcclxuXHR3b3JkY291dDpib29sZWFuLFxyXG5cdHdvcmRjb3VudHhmb2xkZXI6c3RyaW5nLFxyXG5cdG1vZGFsX2RlZmF1bHRfd2lkdGg6IG51bWJlcixcclxuICAgIG1vZGFsX2RlZmF1bHRfaGVpZ2h0OiBudW1iZXIsXHJcblx0YXZhdGE6c3RyaW5nLFxyXG5cdHRwbF90YWdzX2ZvbGRlcjpzdHJpbmcsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBOQ1NldHRpbmdzID0ge1xyXG5cdFByZXZDaGFpbiA6IFwiMTBcIixcclxuXHROZXh0Q2hhaW4gOiBcIjEwXCIsXHJcblx0ZmllbGRfb2ZfZGlzcGxheV90ZXh0OiAnbm90ZWNoYWluLmRpc3BsYXknLFxyXG5cdGZpZWxkX29mX2NvbmZsdWVuY2VfdGFiX2Zvcm1hdDogJ25vdGVjaGFpbi5sZXZlbCcsXHJcblx0ZmllbGRfb2ZfYmFja2dyb3VuZF9jb2xvcjonbm90ZWNoYWluLnN0eWxlJyxcclxuXHRhdXRvX25vdGVjaGFpbiA6IGZhbHNlLFxyXG5cdG5vdGljZV93aGlsZV9tb2RpZnlfY2hhaW46ZmFsc2UsXHJcblx0cmVmcmVzaERhdGFWaWV3IDogdHJ1ZSxcclxuXHRyZWZyZXNoVGFza3MgOiB0cnVlLFxyXG5cdGlzU29ydEZpbGVFeHBsb3JlciA6IHRydWUsXHJcblx0aXNGb2xkZXJGaXJzdCA6IHRydWUsXHJcblx0aXNkcmFnZWQ6IHRydWUsXHJcblx0c3VnZ2VzdGVyTm90ZXNNb2RlOicnLFxyXG5cdHdvcmRjb3V0OnRydWUsXHJcblx0d29yZGNvdW50eGZvbGRlcjonJyxcclxuXHRtb2RhbF9kZWZhdWx0X3dpZHRoOiA4MDAsXHJcbiAgICBtb2RhbF9kZWZhdWx0X2hlaWdodDogNjAwLFxyXG5cdGF2YXRhOidhdmF0YScsXHJcblx0dHBsX3RhZ3NfZm9sZGVyOidcdTgxMUFcdTY3MkNcdTdCMTRcdThCQjBcXG5TY3JpcHROb3RlJyxcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBOQ1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IE5vdGVDaGFpblBsdWdpbjtcclxuXHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTm90ZUNoYWluUGx1Z2luKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcclxuXHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ19pc1NvcnRGaWxlRXhwbG9yZXIpXHJcblx0XHRcdFx0LmFkZFRvZ2dsZSh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pc1NvcnRGaWxlRXhwbG9yZXIpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmlzU29ydEZpbGVFeHBsb3JlciA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uZXhwbG9yZXIuc29ydCgpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ19pc0ZvbGRlckZpcnN0KVxyXG5cdFx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNGb2xkZXJGaXJzdClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNGb2xkZXJGaXJzdCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uZXhwbG9yZXIuc29ydCgpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZSh0aGlzLnBsdWdpbi5zdHJpbmdzLnNldHRpbmdfaXNkcmFnZWQpXHJcblx0XHRcdFx0LmFkZFRvZ2dsZSh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pc2RyYWdlZClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNkcmFnZWQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLmV4cGxvcmVyLnNvcnQoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSh0aGlzLnBsdWdpbi5zdHJpbmdzLnNldHRpbmdfUHJldkNoYWluKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuUHJldkNoYWluKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLlByZXZDaGFpbiA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSh0aGlzLnBsdWdpbi5zdHJpbmdzLnNldHRpbmdfc3VnZ2VzdGVyTm90ZXNNb2RlKVxyXG5cdFx0XHQuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4gZHJvcGRvd25cclxuXHRcdFx0XHQuYWRkT3B0aW9uKCdpdGVtX2dldF9icm90aGVycycsdGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX2dldF9icm90aGVycylcclxuXHRcdFx0XHQuYWRkT3B0aW9uKCdpdGVtX3VuY2xlX25vdGVzJyx0aGlzLnBsdWdpbi5zdHJpbmdzLml0ZW1fdW5jbGVfbm90ZXMpXHJcblx0XHRcdFx0LmFkZE9wdGlvbignaXRlbV9ub3RlY2hhaW4nLHRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9ub3RlY2hhaW4pXHJcblx0XHRcdFx0LmFkZE9wdGlvbignaXRlbV9zYW1lX2ZvbGRlcicsdGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX3NhbWVfZm9sZGVyKVxyXG5cdFx0XHRcdC5hZGRPcHRpb24oJ2l0ZW1faW5saW5rc19vdXRsaW5rcycsdGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX2lubGlua3Nfb3V0bGlua3MpXHJcblx0XHRcdFx0LmFkZE9wdGlvbignaXRlbV9pbmxpbnMnLHRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9pbmxpbnMpXHJcblx0XHRcdFx0LmFkZE9wdGlvbignaXRlbV9vdXRsaW5rcycsdGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX291dGxpbmtzKVxyXG5cdFx0XHRcdC5hZGRPcHRpb24oJ2l0ZW1fYWxsX25vZXMnLHRoaXMucGx1Z2luLnN0cmluZ3MuaXRlbV9hbGxfbm9lcylcclxuXHRcdFx0XHQuYWRkT3B0aW9uKCdpdGVtX3JlY2VudCcsdGhpcy5wbHVnaW4uc3RyaW5ncy5pdGVtX3JlY2VudClcclxuXHRcdFx0XHQuYWRkT3B0aW9uKCcnLCcnKVxyXG5cclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3VnZ2VzdGVyTm90ZXNNb2RlKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnN1Z2dlc3Rlck5vdGVzTW9kZSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSh0aGlzLnBsdWdpbi5zdHJpbmdzLnNldHRpbmdfTmV4dENoYWluKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuTmV4dENoYWluKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLk5leHRDaGFpbiA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbCkgIFxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ19hdXRvX25vdGVjaGFpbilcclxuXHRcdFx0XHQuYWRkVG9nZ2xlKHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9fbm90ZWNoYWluKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvX25vdGVjaGFpbiA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZSh0aGlzLnBsdWdpbi5zdHJpbmdzLnNldHRpbmdfZmllbGRfb2ZfZGlzcGxheV90ZXh0KVxyXG5cdFx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZpZWxkX29mX2Rpc3BsYXlfdGV4dClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZmllbGRfb2ZfZGlzcGxheV90ZXh0ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLmV4cGxvcmVyLnNldF9kaXNwbGF5X3RleHQoKVxyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pKTtcclxuXHRcdFxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdFx0XHQuc2V0TmFtZSh0aGlzLnBsdWdpbi5zdHJpbmdzLnNldHRpbmdfY29uZmx1ZW5jZV90YWJfZm9ybWF0KVxyXG5cdFx0XHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWVsZF9vZl9jb25mbHVlbmNlX3RhYl9mb3JtYXQpXHJcblx0XHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWVsZF9vZl9jb25mbHVlbmNlX3RhYl9mb3JtYXQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5leHBsb3Jlci5zZXRfZGlzcGxheV90ZXh0KClcclxuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdFx0LnNldE5hbWUodGhpcy5wbHVnaW4uc3RyaW5ncy5zZXR0aW5nX2ZpZWxkX29mX2JhY2tncm91bmRfY29sb3IpXHJcblx0XHRcdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZpZWxkX29mX2JhY2tncm91bmRfY29sb3IpXHJcblx0XHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWVsZF9vZl9iYWNrZ3JvdW5kX2NvbG9yID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uZXhwbG9yZXIuc2V0X2ZpbGVpdGVtX3N0eWxlKClcclxuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdFx0fSkpO1xyXG5cclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbCkgIFxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ19ub3RpY2Vfd2hpbGVfbW9kaWZ5X2NoYWluKVxyXG5cdFx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90aWNlX3doaWxlX21vZGlmeV9jaGFpbilcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90aWNlX3doaWxlX21vZGlmeV9jaGFpbiA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbCkgIFxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ19yZWZyZXNoRGF0YVZpZXcpXHJcblx0XHRcdFx0LmFkZFRvZ2dsZSh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWZyZXNoRGF0YVZpZXcpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZnJlc2hEYXRhVmlldyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ19yZWZyZXNoVGFza3MpXHJcblx0XHRcdFx0LmFkZFRvZ2dsZSh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWZyZXNoVGFza3MpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZnJlc2hUYXNrcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZSh0aGlzLnBsdWdpbi5zdHJpbmdzLnNldHRpbmdfd29yZGNvdXQpXHJcblx0XHRcdFx0LmFkZFRvZ2dsZSh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy53b3JkY291dClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZGNvdXQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLndvcmRjb3V0LnJlZ2lzdGVyKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ193b3JkY291dF94Zm9sZGVyKVxyXG5cdFx0XHRcdC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy53b3JkY291bnR4Zm9sZGVyKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy53b3JkY291bnR4Zm9sZGVyID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ19hdmF0YSlcclxuXHRcdFx0XHQuYWRkVGV4dEFyZWEodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXZhdGEpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmF2YXRhID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKHRoaXMucGx1Z2luLnN0cmluZ3Muc2V0dGluZ190ZW1wbGF0ZXJfdGFnKVxyXG5cdFx0XHRcdC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50cGxfdGFnc19mb2xkZXIpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRwbF90YWdzX2ZvbGRlciA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IFxyXG5cdE5vdGljZSwgVEZpbGVcclxufSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbXBvcnQgTm90ZUNoYWluUGx1Z2luIGZyb20gJy4uL21haW4nO1xyXG5cclxuXHJcbmNvbnN0IGNtZF9sb25nZm9ybTJub3RlY2hhaW4gPSAocGx1Z2luOk5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuXHRpZDogXCJsb25nZm9ybTJub3RlY2hhaW5cIixcclxuICAgIG5hbWU6IHBsdWdpbi5zdHJpbmdzLmNtZF9sb25nZm9ybTJub3RlY2hhaW4sXHJcblx0aWNvbjonZ2l0LXB1bGwtcmVxdWVzdC1jcmVhdGUtYXJyb3cnLFxyXG5cdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRsZXQgY3VyciA9IHBsdWdpbi5jaGFpbi5jdXJyZW50X25vdGU7XHJcblx0XHRpZihjdXJyID09IG51bGwgfHwgY3Vyci5wYXJlbnQ9PW51bGwpe3JldHVybjt9XHJcblx0XHRjdXJyID0gYXdhaXQgcGx1Z2luLmNoYWluLmdldF9mb2xkZXJfbm90ZShjdXJyLnBhcmVudCxmYWxzZSk7XHJcblx0XHRpZihjdXJyPT1udWxsKXtyZXR1cm47fVxyXG5cclxuXHRcdHBsdWdpbi5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKFxyXG5cdFx0XHRjdXJyLFxyXG5cdFx0XHRhc3luYyAoZm0pID0+e1xyXG5cdFx0XHRcdGFzeW5jIGZ1bmN0aW9uIHNldF9jb25mbHVlbmNlX2xldmVsKHNjZW5lczphbnksbGV2ZWw9MCl7XHJcblx0XHRcdFx0XHRpZihBcnJheS5pc0FycmF5KHNjZW5lcykpe1xyXG5cdFx0XHRcdFx0XHRmb3IobGV0IHNjZW5lIG9mIHNjZW5lcyl7XHJcblx0XHRcdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShzY2VuZSkpe1xyXG5cdFx0XHRcdFx0XHRcdFx0c2V0X2NvbmZsdWVuY2VfbGV2ZWwoc2NlbmUsbGV2ZWwrMSk7XHJcblx0XHRcdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXRfY29uZmx1ZW5jZV9sZXZlbChzY2VuZSxsZXZlbCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9ZWxzZSBpZih0eXBlb2Ygc2NlbmVzID09PSAnc3RyaW5nJyl7XHJcblx0XHRcdFx0XHRcdGxldCBub3RlID0gcGx1Z2luLmNoYWluLmdldF90ZmlsZShzY2VuZXMpO1xyXG5cdFx0XHRcdFx0XHRpZihub3RlKXtcclxuXHRcdFx0XHRcdFx0XHRsZXQgc2xldmVsID0gJ1xcdCcucmVwZWF0KGxldmVsKTtcclxuXHRcdFx0XHRcdFx0XHRsZXQgcHJlbGV2ZWwgPSBwbHVnaW4uZWRpdG9yLmdldF9mcm9udG1hdHRlcihub3RlLHBsdWdpbi5zZXR0aW5ncy5maWVsZF9vZl9jb25mbHVlbmNlX3RhYl9mb3JtYXQpO1xyXG5cdFx0XHRcdFx0XHRcdGlmKHByZWxldmVsPT1zbGV2ZWwgfHwgKHByZWxldmVsPT1udWxsICYmIHNsZXZlbD09JycpKXtyZXR1cm47fVxyXG5cdFx0XHRcdFx0XHRcdGF3YWl0IHBsdWdpbi5lZGl0b3Iuc2V0X2Zyb250bWF0dGVyKFxyXG5cdFx0XHRcdFx0XHRcdFx0bm90ZSxwbHVnaW4uc2V0dGluZ3MuZmllbGRfb2ZfY29uZmx1ZW5jZV90YWJfZm9ybWF0LFxyXG5cdFx0XHRcdFx0XHRcdFx0c2xldmVsXHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZighY3Vycil7cmV0dXJuO31cclxuXHJcblx0XHRcdFx0aWYoZm1bJ2xvbmdmb3JtJ109PW51bGwpe3JldHVybjt9XHJcblx0XHRcdFx0bGV0IHNjZW5lcyA9IHBsdWdpbi51dGlscy5jb25jYXRfYXJyYXkoZm0ubG9uZ2Zvcm0uc2NlbmVzKTtcclxuXHRcdFx0XHRhd2FpdCBzZXRfY29uZmx1ZW5jZV9sZXZlbChmbS5sb25nZm9ybS5zY2VuZXMpO1xyXG5cdFx0XHRcdGxldCBpZ25vcmVkRmlsZXMgPSBwbHVnaW4udXRpbHMuY29uY2F0X2FycmF5KGZtLmxvbmdmb3JtLmlnbm9yZWRGaWxlcyk7XHJcblx0XHRcdFx0YXdhaXQgc2V0X2NvbmZsdWVuY2VfbGV2ZWwoZm0ubG9uZ2Zvcm0uaWdub3JlZEZpbGVzKTtcclxuXHJcblx0XHRcdFx0aWdub3JlZEZpbGVzID0gaWdub3JlZEZpbGVzLmZpbHRlcigoZjpzdHJpbmcpPT4hc2NlbmVzLmNvbnRhaW5zKGYpKTtcclxuXHRcdFx0XHRsZXQgbm90ZXMgPSBwbHVnaW4udXRpbHMuY29uY2F0X2FycmF5KFtzY2VuZXMsaWdub3JlZEZpbGVzXSk7XHJcblx0XHRcdFx0aWYoIW5vdGVzIHx8IG5vdGVzLmxlbmd0aD09MCl7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKCFub3Rlcy5jb250YWlucyhjdXJyLmJhc2VuYW1lKSl7XHJcblx0XHRcdFx0XHRub3Rlcy51bnNoaWZ0KGN1cnIuYmFzZW5hbWUpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bm90ZXMgPSBub3Rlcy5tYXAoKGY6c3RyaW5nKT0+cGx1Z2luLmNoYWluLmdldF90ZmlsZShmKSk7XHJcblx0XHRcdFx0aWYoY3Vyci5wYXJlbnQ9PW51bGwpe3JldHVybn07XHJcblx0XHRcdFx0bGV0IHRmaWxlcyA9IHBsdWdpbi5jaGFpbi5nZXRfdGZpbGVzX29mX2ZvbGRlcihjdXJyLnBhcmVudCkuZmlsdGVyKChmOmFueSk9PiFub3Rlcy5jb250YWlucyhmKSk7XHJcblx0XHRcdFx0bm90ZXMgPSBwbHVnaW4udXRpbHMuY29uY2F0X2FycmF5KFt0ZmlsZXMsbm90ZXNdKTtcclxuXHRcdFx0XHRhd2FpdCBwbHVnaW4uY2hhaW4uY2hhaW5fY29uY2F0X3RmaWxlcyhub3Rlcyk7XHJcblx0XHRcdFx0cGx1Z2luLmV4cGxvcmVyLnNvcnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0KVxyXG5cdH1cclxufSk7XHJcblxyXG5jb25zdCBjbWRfbG9uZ2Zvcm00bm90ZWNoYWluID0gKHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcblx0aWQ6IFwibG9uZ2Zvcm00bm90ZWNoYWluXCIsXHJcbiAgICBuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfbG9uZ2Zvcm00bm90ZWNoYWluLFxyXG5cdGljb246J2dpdC1wdWxsLXJlcXVlc3QtZHJhZnQnLFxyXG5cdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRsZXQgbmMgPSBwbHVnaW47XHJcblx0XHRsZXQgY3VyciA9IHBsdWdpbi5jaGFpbi5jdXJyZW50X25vdGU7XHJcblx0XHRpZihjdXJyPT1udWxsIHx8IGN1cnIucGFyZW50PT1udWxsKXtyZXR1cm47fVxyXG5cdFx0XHJcblxyXG5cdFx0bGV0IHBhdGggPSBjdXJyLnBhcmVudC5wYXRoKycvJytjdXJyLnBhcmVudC5uYW1lKycubWQnO1xyXG5cdFx0bGV0IGRzdCA9IGF3YWl0IG5jLmNoYWluLmdldF90ZmlsZShwYXRoKTtcclxuXHRcdGlmKGRzdD09bnVsbCl7XHJcblx0XHRcdGRzdCA9IGF3YWl0IHBsdWdpbi5hcHAudmF1bHQuY3JlYXRlKFxyXG5cdFx0XHRcdGN1cnIucGFyZW50LnBhdGgrJy8nK2N1cnIucGFyZW50Lm5hbWUrJy5tZCcsIFxyXG5cdFx0XHRcdCcnXHJcblx0XHRcdClcclxuXHRcdH1cclxuXHRcdGF3YWl0IHBsdWdpbi5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKFxyXG5cdFx0XHRkc3QsXHJcblx0XHRcdGZtID0+e1xyXG5cdFx0XHRcdGlmKGZtWydsb25nZm9ybSddPT1udWxsKXtcclxuXHRcdFx0XHRcdGZtWydsb25nZm9ybSddID0ge1xyXG5cdFx0XHRcdFx0XHQnZm9ybWF0Jzonc2NlbmVzJyxcclxuXHRcdFx0XHRcdFx0J3RpdGxlJzpkc3QucGFyZW50Lm5hbWUsXHJcblx0XHRcdFx0XHRcdCd3b3JrZmxvdyc6J0RlZmF1bHQgV29ya2Zsb3cnLFxyXG5cdFx0XHRcdFx0XHQnc2NlbmVGb2xkZXInOicvJyxcclxuXHRcdFx0XHRcdFx0J3NjZW5lcyc6W10sXHJcblx0XHRcdFx0XHRcdCdpZ25vcmVkRmlsZXMnOltdLFxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYoZHN0PT1udWxsKXtyZXR1cm47fVxyXG5cdFx0XHRcdGlmKGRzdC5wYXJlbnQ9PW51bGwpe3JldHVybn07XHJcblx0XHRcdFx0aWYoZm1bJ2xvbmdmb3JtJ109PW51bGwpe3JldHVybjt9XHJcblx0XHRcdFx0bGV0IG5vdGVzID0gcGx1Z2luLmNoYWluLmdldF90ZmlsZXNfb2ZfZm9sZGVyKGRzdC5wYXJlbnQpO1xyXG5cdFx0XHRcdG5vdGVzID0gcGx1Z2luLmNoYWluLnNvcnRfdGZpbGVzX2J5X2NoYWluKG5vdGVzKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRsZXQgbGV2ZWxzID0gbm90ZXMubWFwKChmOlRGaWxlKT0+cGx1Z2luLmNoYWluLmdldF9jb25mbHVlbmNlX2xldmVsKGYpKTtcclxuXHRcdFx0XHRub3RlcyA9IG5vdGVzLm1hcCgoeDpURmlsZSk9PnguYmFzZW5hbWUpO1xyXG5cdFx0XHRcdGlmKG5vdGVzLmxlbmd0aD4wKXtcclxuXHRcdFx0XHRcdGxldCBzb3VyY2UgPSBgc2NlbmVzOlxcbmA7XHJcblx0XHRcdFx0XHRmb3IobGV0IGkgaW4gbm90ZXMpe1xyXG5cdFx0XHRcdFx0XHRsZXQgbm90ZSA9IG5vdGVzW2ldO1xyXG5cdFx0XHRcdFx0XHRsZXQgbGV2ZWwgPSBsZXZlbHNbaV07XHJcblx0XHRcdFx0XHRcdHNvdXJjZSArPSAnICAnO1xyXG5cdFx0XHRcdFx0XHRmb3IobGV0IGo9LTE7ajxsZXZlbDtqKyspe1xyXG5cdFx0XHRcdFx0XHRcdHNvdXJjZSArPSBgLSBgO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHNvdXJjZSArPSBgJHtub3RlfVxcbmA7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0bGV0IGNvbmZpZyA9IHBsdWdpbi5lYXN5YXBpLmVkaXRvci55YW1sanMubG9hZChzb3VyY2UpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRub3RlcyA9IGNvbmZpZ1snc2NlbmVzJ107XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGZtLmxvbmdmb3JtLnNjZW5lcyA9IG5vdGVzO1xyXG5cdFx0XHR9XHJcblx0XHQpXHJcblx0XHRhd2FpdCBuYy5jaGFpbi5vcGVuX25vdGUoZHN0KTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbmNvbnN0IGNtZF9zb3J0X2ZpbGVfZXhwbG9yZXIgPSAocGx1Z2luOk5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuXHRpZDogXCJzb3J0X2ZpbGVfZXhwbG9yZXJcIixcclxuICAgIG5hbWU6IHBsdWdpbi5zdHJpbmdzLmNtZF9zb3J0X2ZpbGVfZXhwbG9yZXIsXHJcblx0aWNvbjonbHVjaWRlLXJlZnJlc2gtY3cnLFxyXG5cdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRhd2FpdCBwbHVnaW4uZXhwbG9yZXIuc29ydCgwLHRydWUpO1xyXG5cdFx0YXdhaXQgcGx1Z2luLmV4cGxvcmVyLnNldF9maWxlaXRlbV9zdHlsZSgpO1xyXG5cdFx0YXdhaXQgcGx1Z2luLmV4cGxvcmVyLnNldF9kaXNwbGF5X3RleHQoKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuY29uc3QgY21kX29wZW5fbm90ZXNfc21hcnRlciA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAnb3Blbl9ub3Rlc19zbWFydGVyJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfb3Blbl9ub3Rlc19zbWFydGVyLFxyXG5cdGljb246J2Jpbm9jdWxhcnMnLFxyXG5cdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRwbHVnaW4ub3Blbl9ub3RlX3NtYXJ0ZXIoKTtcclxuXHR9XHJcbn0pXHJcblxyXG5jb25zdCBjbWRfb3Blbl9ub3RlID0gKHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcblx0aWQ6ICdzdWdnZXN0b3Jfb3Blbl9ub3RlJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfb3Blbl9ub3RlLFxyXG5cdGljb2w6ICdzcXVhcmUtYXJyb3ctb3V0LXVwLXJpZ2h0JyxcclxuXHRjYWxsYmFjazogKCkgPT4ge1xyXG5cdFx0cGx1Z2luLmNoYWluLnN1Z2d1c3Rlcl9vcGVuX25vdGUoKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuY29uc3QgY21kX29wZW5fcHJldl9ub3RlID0gKHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcblx0aWQ6ICdvcGVuX3ByZXZfbm90ZXMnLFxyXG5cdG5hbWU6IHBsdWdpbi5zdHJpbmdzLmNtZF9vcGVuX3ByZXZfbm90ZSxcclxuXHRpY29uOiAnZmlsZS1vdXRwdXQnLFxyXG5cdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRwbHVnaW4uY2hhaW4ub3Blbl9wcmV2X25vdGVzKCk7XHJcblx0fVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF9vcGVuX25leHRfbm90ZSA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAnb3Blbl9uZXh0X25vdGVzJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfb3Blbl9uZXh0X25vdGUsXHJcblx0aWNvbjogJ2ZpbGUtaW5wdXQnLFxyXG5cdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRwbHVnaW4uY2hhaW4ub3Blbl9uZXh0X25vdGVzKCk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5jb25zdCBjbGVhcl9pbmxpbmtzID0gKHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcblx0aWQ6ICdjbGVhcl9pbmxpbmtzJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbGVhcl9pbmxpbmtzLFxyXG5cdGljb246J3VubGluaycsXHJcblx0Y2FsbGJhY2s6ICgpID0+IHtcclxuXHRcdHBsdWdpbi5jbGVhcl9pbmxpbmtzKCk7XHJcblx0fVxyXG59KTtcclxuXHJcbmNvbnN0IG1vdmVfZmlsZV90b19hbm90aGVyX2ZvbGRlciA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAnbW92ZV9maWxlX3RvX2Fub3RoZXJfZm9sZGVyJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5tb3ZlX2ZpbGVfdG9fYW5vdGhlcl9mb2xkZXIsXHJcblx0aWNvbjonZm9sZGVyLXRyZWUnLFxyXG5cdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRwbHVnaW4uY2hhaW4uY21kX21vdmVfZmlsZV90b19hbm90aGVyX2ZvbGRlcigpO1xyXG5cdH1cclxufSk7XHJcblxyXG5jb25zdCByZXBsYWNlX25vdGVzX3dpdGhfcmVneCA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAncmVwbGFjZV9ub3Rlc193aXRoX3JlZ3gnLFxyXG5cdG5hbWU6IHBsdWdpbi5zdHJpbmdzLnJlcGxhY2Vfbm90ZXNfd2l0aF9yZWd4LFxyXG5cdGljb246J3JlZ2V4JyxcclxuXHRjYWxsYmFjazogKCkgPT4ge1xyXG5cdFx0cGx1Z2luLnJlcGxhY2Vfbm90ZXNfd2l0aF9yZWd4KCk7XHJcblx0fVxyXG59KTtcclxuXHJcbmNvbnN0IGNoYWluX2luc2VydF9ub2RlID0gKHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcblx0aWQ6ICdjaGFpbl9pbnNlcnRfbm9kZScsXHJcblx0bmFtZTogcGx1Z2luLnN0cmluZ3MuY2hhaW5faW5zZXJ0X25vZGUsXHJcblx0aWNvbjogJ2dpdC1icmFuY2gtcGx1cycsXHJcblx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGF3YWl0IHBsdWdpbi5jbWRfY2hhaW5faW5zZXJ0X25vZGUoKTtcclxuXHRcdGF3YWl0IHBsdWdpbi5leHBsb3Jlci5zb3J0KDUwMCk7XHJcblx0fVxyXG59KTtcclxuXHJcbmNvbnN0IGNoYWluX3NldF9zZXFfbm90ZSA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAnY2hhaW5fc2V0X3NlcV9ub3RlJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jaGFpbl9zZXRfc2VxX25vdGUsXHJcblx0aWNvbjond2luZC1hcnJvdy1kb3duJyxcclxuXHRjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG5cdFx0YXdhaXQgcGx1Z2luLmNoYWluLmNoYWluX3N1Z2dlc3Rlcl90ZmlsZXMoKTtcclxuXHRcdHBsdWdpbi5leHBsb3Jlci5zb3J0KCk7XHJcblx0fVxyXG59KTtcclxuXHJcbmNvbnN0IGNoYWluX21vdmVfdXBfbm9kZSA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAnY2hhaW5fbW92ZV91cF9ub2RlJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jaGFpbl9tb3ZlX3VwX25vZGUsXHJcblx0aWNvbjogJ2Fycm93LXVwLWZyb20tbGluZScsXHJcblx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGxldCB0ZmlsZSA9IHBsdWdpbi5jaGFpbi5jdXJyZW50X25vdGU7XHJcblx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdGxldCBhbmNob3IgPSBwbHVnaW4uY2hhaW4uZ2V0X3ByZXZfbm90ZSh0ZmlsZSk7XHJcblx0XHRcdGlmKGFuY2hvcil7XHJcblx0XHRcdFx0YXdhaXQgcGx1Z2luLmNoYWluLmNoYWluX2luc2VydF9ub2RlX2JlZm9yZShcclxuXHRcdFx0XHRcdHRmaWxlLGFuY2hvclxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0YXdhaXQgcGx1Z2luLmV4cGxvcmVyLnNvcnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5jb25zdCBjaGFpbl9tb3ZlX2Rvd25fbm9kZSA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAnY2hhaW5fbW92ZV9kb253X25vZGUnLFxyXG5cdG5hbWU6IHBsdWdpbi5zdHJpbmdzLmNoYWluX21vdmVfZG93bl9ub2RlLFxyXG5cdGljb246ICdhcnJvdy1kb3duLWZyb20tbGluZScsXHJcblx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGxldCB0ZmlsZSA9IHBsdWdpbi5jaGFpbi5jdXJyZW50X25vdGU7XHJcblx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdGxldCBhbmNob3IgPSBwbHVnaW4uY2hhaW4uZ2V0X25leHRfbm90ZSh0ZmlsZSk7XHJcblx0XHRcdGlmKGFuY2hvcil7XHJcblx0XHRcdFx0YXdhaXQgcGx1Z2luLmNoYWluLmNoYWluX2luc2VydF9ub2RlX2FmdGVyKFxyXG5cdFx0XHRcdFx0dGZpbGUsYW5jaG9yXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRhd2FpdCBwbHVnaW4uZXhwbG9yZXIuc29ydCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbmNvbnN0IGNyZWF0ZV9uZXdfbm90ZSA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAnY3JlYXRlX25ld19ub3RlJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jcmVhdGVfbmV3X25vdGUsXHJcblx0aWNvbjogJ2ZpbGUtcGx1cycsXHJcblx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGxldCB0YXJnZXRzIDp7W2tleTpzdHJpbmddOnN0cmluZ30gPSB7fVxyXG5cdFx0dGFyZ2V0c1twbHVnaW4uc3RyaW5ncy5pdGVtX2NoYWluX2luc2VydF9ub2RlX2FmdGVyXSA9ICdjaGFpbl9pbnNlcnRfbm9kZV9hZnRlcic7XHJcblx0XHR0YXJnZXRzW3BsdWdpbi5zdHJpbmdzLml0ZW1fY2hhaW5faW5zZXJ0X25vZGVfYXNfdGFpbF0gPSAnY2hhaW5faW5zZXJ0X25vZGVfYXNfdGFpbCc7XHJcblx0XHR0YXJnZXRzW3BsdWdpbi5zdHJpbmdzLml0ZW1fY2hhaW5faW5zZXJ0X25vZGVfYmVmb3JlXSA9ICdjaGFpbl9pbnNlcnRfbm9kZV9iZWZvcmUnO1xyXG5cdFx0dGFyZ2V0c1twbHVnaW4uc3RyaW5ncy5pdGVtX2NoYWluX2luc2VydF9ub2RlX2FzX2hlYWRdID0gJ2NoYWluX2luc2VydF9ub2RlX2FzX2hlYWQnO1xyXG5cdFx0dGFyZ2V0c1twbHVnaW4uc3RyaW5ncy5pdGVtX2l0ZW1fY2hhaW5faW5zZXJ0X251bGxdID0gJ251bGwnO1xyXG5cclxuXHRcdGxldCB0YXJnZXQgPSBhd2FpdCBwbHVnaW4uZGlhbG9nX3N1Z2dlc3QoXHJcblx0XHRcdHBsdWdpbi51dGlscy5hcnJheV9wcmVmaXhfaWQoT2JqZWN0LmtleXModGFyZ2V0cykpLCBcclxuXHRcdFx0T2JqZWN0LnZhbHVlcyh0YXJnZXRzKSwgXHJcblx0XHRcdHRydWVcclxuXHRcdCk7XHJcblx0XHRpZighdGFyZ2V0KXtyZXR1cm47fVxyXG5cdFx0bGV0IG5hbWUgPSBhd2FpdCBwbHVnaW4uZGlhbG9nX3Byb21wdChwbHVnaW4uc3RyaW5ncy5wcm9tcHRfbm90ZW5hbWUpO1xyXG5cdFx0aWYobmFtZSl7XHJcblx0XHRcdGxldCBjdXJyID0gcGx1Z2luLmNoYWluLmN1cnJlbnRfbm90ZTtcclxuXHRcdFx0aWYoY3VyciAmJiBjdXJyLnBhcmVudCl7XHJcblx0XHRcdFx0bGV0IHBhdGggPSBjdXJyLnBhcmVudC5wYXRoKycvJytuYW1lKycubWQnO1xyXG5cdFx0XHRcdGxldCBkc3QgPSBhd2FpdCBwbHVnaW4uY2hhaW4uZ2V0X3RmaWxlKHBhdGgpO1xyXG5cdFx0XHRcdGlmKGRzdD09bnVsbCl7XHJcblx0XHRcdFx0XHRkc3QgPSBhd2FpdCBwbHVnaW4uYXBwLnZhdWx0LmNyZWF0ZShcclxuXHRcdFx0XHRcdFx0Y3Vyci5wYXJlbnQucGF0aCsnLycrbmFtZSsnLm1kJyxcclxuXHRcdFx0XHRcdFx0JydcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdGlmKCEodGFyZ2V0PT09J251bGwnKSl7XHJcblx0XHRcdFx0XHRcdGF3YWl0IChwbHVnaW4uY2hhaW4gYXMgYW55KVt0YXJnZXRdKGRzdCxjdXJyKTtcclxuXHRcdFx0XHRcdFx0aWYodGFyZ2V0PT0nY2hhaW5faW5zZXJ0X25vZGVfYWZ0ZXInfHx0YXJnZXQ9PSdjaGFpbl9pbnNlcnRfbm9kZV9iZWZvcmUnKXtcclxuXHRcdFx0XHRcdFx0XHRhd2FpdCBwbHVnaW4uZWRpdG9yLnNldF9mcm9udG1hdHRlcl9hbGlnbl9maWxlKFxyXG5cdFx0XHRcdFx0XHRcdFx0Y3Vycixkc3QscGx1Z2luLnNldHRpbmdzLmZpZWxkX29mX2NvbmZsdWVuY2VfdGFiX2Zvcm1hdFxyXG5cdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YXdhaXQgcGx1Z2luLmNoYWluLm9wZW5fbm90ZShkc3QpO1xyXG5cdFx0XHRcdFx0YXdhaXQgcGx1Z2luLmV4cGxvcmVyLnNvcnQoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cdFxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5jb25zdCBjbWRfcmV2ZWFsX25vdGUgPSAocGx1Z2luOk5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuXHRpZDogJ2NtZF9yZXZlYWxfbm90ZScsXHJcblx0bmFtZTogcGx1Z2luLnN0cmluZ3MuY21kX3JldmVhbF9ub3RlLFxyXG5cdGljb246ICdsb2NhdGUnLFxyXG5cdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRsZXQgbmMgPSBwbHVnaW47XHJcblx0XHRsZXQgbm90ZSA9IG5jLmNoYWluLmN1cnJlbnRfbm90ZTtcclxuXHRcdGlmKG5vdGUpe1xyXG5cdFx0XHRhd2FpdCAocGx1Z2luLmFwcCBhcyBhbnkpLmNvbW1hbmRzLmV4ZWN1dGVDb21tYW5kQnlJZCgnZmlsZS1leHBsb3JlcjpvcGVuJylcclxuXHRcdFx0YXdhaXQgKG5jLmV4cGxvcmVyLmZpbGVfZXhwbG9yZXIgYXMgYW55KS50cmVlLnNldENvbGxhcHNlQWxsKHRydWUpO1xyXG5cdFx0XHRhd2FpdCAobmMuZXhwbG9yZXIuZmlsZV9leHBsb3JlciBhcyBhbnkpLnJldmVhbEluRm9sZGVyKG5vdGUpO1xyXG5cdFx0XHRhd2FpdCBzbGVlcCgxMDApO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IGNvbnRhaW5lckVsID0gbmMuZXhwbG9yZXIuZmlsZV9leHBsb3Jlci5jb250YWluZXJFbDtcclxuXHRcdFx0bGV0IHBhbmVsID0gY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcignLm5hdi1maWxlcy1jb250YWluZXInKTtcclxuXHRcdFx0bGV0IGl0ZW1FbD1jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wYXRoPVwiJHtub3RlLnBhdGh9XCJdYCk7XHJcblx0XHRcdGlmKHBhbmVsICYmIGl0ZW1FbCAmJiAoaXRlbUVsIGFzIGFueSkub2Zmc2V0VG9wKXtcclxuXHRcdFx0XHRsZXQgeHRvcCA9IHBhbmVsLnNjcm9sbFRvcCsoKGl0ZW1FbCBhcyBhbnkpLm9mZnNldFRvcC0ocGFuZWwuc2Nyb2xsVG9wK3BhbmVsLmNsaWVudEhlaWdodC8yKSlcclxuXHRcdFx0XHRwYW5lbC5zY3JvbGxUbyh7IHRvcDogeHRvcCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5jb25zdCBjbWRfb3Blbl9hbmRfcmV2ZWFsX25vdGUgPSAocGx1Z2luOk5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuXHRpZDogJ2NtZF9vcGVuX2FuZF9yZXZlYWxfbm90ZScsXHJcblx0bmFtZTogcGx1Z2luLnN0cmluZ3MuY21kX29wZW5fYW5kX3JldmVhbF9ub3RlLFxyXG5cdGljb246J21hcC1waW4taG91c2UnLFxyXG5cdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRsZXQgbmMgPSBwbHVnaW47XHJcblx0XHRsZXQgbm90ZSA9IGF3YWl0IG5jLmNoYWluLnN1Z2d1c3Rlcl9ub3RlKCk7XHJcblx0XHRpZihub3RlKXtcclxuXHRcdFx0YXdhaXQgbmMuY2hhaW4ub3Blbl9ub3RlKG5vdGUpO1xyXG5cdFx0XHRhd2FpdCAobmMuZXhwbG9yZXIuZmlsZV9leHBsb3JlciBhcyBhbnkpLnRyZWUuc2V0Q29sbGFwc2VBbGwodHJ1ZSk7XHJcblx0XHRcdGF3YWl0IChuYy5leHBsb3Jlci5maWxlX2V4cGxvcmVyIGFzIGFueSkucmV2ZWFsSW5Gb2xkZXIobm90ZSk7XHJcblx0XHRcdGF3YWl0IHNsZWVwKDEwMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgY29udGFpbmVyRWwgPSBuYy5leHBsb3Jlci5maWxlX2V4cGxvcmVyLmNvbnRhaW5lckVsO1xyXG5cdFx0XHRsZXQgcGFuZWwgPSBjb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcubmF2LWZpbGVzLWNvbnRhaW5lcicpO1xyXG5cdFx0XHRsZXQgaXRlbUVsPWNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXBhdGg9XCIke25vdGUucGF0aH1cIl1gKTtcclxuXHRcdFx0aWYocGFuZWwgJiYgaXRlbUVsICYmIChpdGVtRWwgYXMgYW55KS5vZmZzZXRUb3Ape1xyXG5cdFx0XHRcdGxldCB4dG9wID0gcGFuZWwuc2Nyb2xsVG9wKygoaXRlbUVsIGFzIGFueSkub2Zmc2V0VG9wLShwYW5lbC5zY3JvbGxUb3ArcGFuZWwuY2xpZW50SGVpZ2h0LzIpKVxyXG5cdFx0XHRcdHBhbmVsLnNjcm9sbFRvKHsgdG9wOiB4dG9wLCBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuY29uc3QgY21kX29wZW5fcHJldl9ub3RlX29mX3JpZ2h0X2xlYWYgPSAocGx1Z2luOk5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuXHRpZDogJ2NtZF9vcGVuX3ByZXZfbm90ZV9vZl9yaWdodF9sZWFmJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfb3Blbl9wcmV2X25vdGVfb2ZfcmlnaHRfbGVhZixcclxuXHRpY29uOiAnZmlsZS1vdXRwdXQnLFxyXG5cdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRsZXQgbmMgPSBwbHVnaW47XHJcblx0XHRsZXQgbGVhZiA9IG5jLmNoYWluLmdldF9sYXN0X2FjdGl2YXRlX2xlYWYoKTtcclxuXHRcdGlmKGxlYWYpe1xyXG5cdFx0XHRsZXQgcHJldiA9IG5jLmNoYWluLmdldF9wcmV2X25vdGUoKGxlYWYudmlldyBhcyBhbnkpLmZpbGUpO1xyXG5cdFx0XHRpZihwcmV2KXtcclxuXHRcdFx0XHRhd2FpdCBsZWFmLm9wZW5GaWxlKHByZXYse2FjdGl2ZTpmYWxzZX0pO1xyXG5cdFx0XHRcdGF3YWl0IG5jLmFwcC53b3Jrc3BhY2UudHJpZ2dlcignZmlsZS1vcGVuJywgbGVhZik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuY29uc3QgY21kX29wZW5fbmV4dF9ub3RlX29mX3JpZ2h0X2xlYWYgPSAocGx1Z2luOk5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuXHRpZDogJ2NtZF9vcGVuX25leHRfbm90ZV9vZl9yaWdodF9sZWFmJyxcclxuXHRuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfb3Blbl9uZXh0X25vdGVfb2ZfcmlnaHRfbGVhZixcclxuXHRpY29uOiAnZmlsZS1pbnB1dCcsXHJcblx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGxldCBuYyA9IHBsdWdpbjtcclxuXHRcdGxldCBsZWFmID0gbmMuY2hhaW4uZ2V0X2xhc3RfYWN0aXZhdGVfbGVhZigpO1xyXG5cdFx0aWYobGVhZil7XHJcblx0XHRcdGxldCBuZXh0ID0gbmMuY2hhaW4uZ2V0X25leHRfbm90ZSgobGVhZi52aWV3IGFzIGFueSkuZmlsZSk7XHJcblx0XHRcdGlmKG5leHQpe1xyXG5cdFx0XHRcdGF3YWl0IGxlYWYub3BlbkZpbGUobmV4dCx7YWN0aXZlOmZhbHNlfSk7XHJcblx0XHRcdFx0YXdhaXQgbmMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKCdmaWxlLW9wZW4nLCBsZWFmKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5jb25zdCBjbWRfZmlsZV9vcGVuX3dpdGhfc3lzdGVtX2FwcCA9IChwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG5cdGlkOiAnY21kX2ZpbGVfb3Blbl93aXRoX3N5c3RlbV9hcHAnLFxyXG5cdG5hbWU6IHBsdWdpbi5zdHJpbmdzLmNtZF9maWxlX29wZW5fd2l0aF9zeXN0ZW1fYXBwLFxyXG5cdGljb246J2Jvb2stb3BlbicsXHJcblx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGxldCBuYyA9IHBsdWdpbjtcclxuXHRcdGlmKChuYy5hcHAgYXMgYW55KS5pc01vYmlsZSl7cmV0dXJuO31cclxuXHRcdGxldCB0ZmlsZSA9IG5jLmNoYWluLmN1cnJlbnRfbm90ZTtcclxuXHRcdGlmKHRmaWxlKXtcclxuXHRcdFx0bGV0IGl0ZW1zID0gYXdhaXQgbmMuY2hhaW4uZ2V0X2ZpbGVfbGlua3ModGZpbGUpO1xyXG5cclxuXHRcdFx0bGV0IGtleXMgPSBPYmplY3Qua2V5cyhpdGVtcyk7XHJcblx0XHRcdGxldCBrZXkgPSBhd2FpdCBuYy5kaWFsb2dfc3VnZ2VzdChcclxuXHRcdFx0XHRuYy51dGlscy5hcnJheV9wcmVmaXhfaWQoa2V5cyksXHJcblx0XHRcdFx0a2V5c1xyXG5cdFx0XHQpXHJcblx0XHRcdFxyXG5cdFx0XHRpZihrZXkpe1xyXG5cdFx0XHRcdGxldCBpdGVtID0gaXRlbXNba2V5XTtcclxuXHRcdFx0XHRsZXQgZWxlY3Ryb24gPSByZXF1aXJlKCdlbGVjdHJvbicpXHJcblx0XHRcdFx0ZWxlY3Ryb24ucmVtb3RlLnNoZWxsLm9wZW5QYXRoKGl0ZW0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF9maWxlX3Nob3dfaW5fc3lzdGVtX2V4cGxvcmVyID0gKHBsdWdpbjpOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcblx0aWQ6ICdjbWRfZmlsZV9zaG93X2luX3N5c3RlbV9leHBsb3JlcicsXHJcblx0bmFtZTogcGx1Z2luLnN0cmluZ3MuY21kX2ZpbGVfc2hvd19pbl9zeXN0ZW1fZXhwbG9yZXIsXHJcblx0aWNvbjonYm9vay1vcGVuLXRleHQnLFxyXG5cdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRsZXQgbmMgPSBwbHVnaW47XHJcblx0XHRpZigobmMuYXBwIGFzIGFueSkuaXNNb2JpbGUpe3JldHVybjt9XHJcblx0XHRsZXQgdGZpbGUgPSBuYy5jaGFpbi5jdXJyZW50X25vdGU7XHJcblx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdGxldCBpdGVtcyA9IGF3YWl0IG5jLmNoYWluLmdldF9maWxlX2xpbmtzKHRmaWxlKTtcclxuXHRcdFx0bGV0IGtleXMgPSBPYmplY3Qua2V5cyhpdGVtcyk7XHJcblx0XHRcdGxldCBrZXkgPSBhd2FpdCBuYy5kaWFsb2dfc3VnZ2VzdChcclxuXHRcdFx0XHRuYy51dGlscy5hcnJheV9wcmVmaXhfaWQoa2V5cyksXHJcblx0XHRcdFx0a2V5c1xyXG5cdFx0XHQpXHJcblx0XHRcdFxyXG5cdFx0XHRpZihrZXkpe1xyXG5cdFx0XHRcdGxldCBpdGVtID0gaXRlbXNba2V5XVxyXG5cdFx0XHRcdGxldCBlbGVjdHJvbiA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcclxuXHRcdFx0XHRlbGVjdHJvbi5yZW1vdGUuc2hlbGwuc2hvd0l0ZW1JbkZvbGRlcihpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5jb25zdCBjbWRfZmlsZV9yZW5hbWUgPSAocGx1Z2luOk5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuXHRpZDogJ2NtZF9maWxlX3JlbmFtZScsXHJcblx0bmFtZTogcGx1Z2luLnN0cmluZ3MuY21kX2ZpbGVfcmVuYW1lLFxyXG5cdGljb246ICdwZW4tbGluZScsXHJcblx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGxldCBuYyA9IHBsdWdpbjtcclxuXHRcdGlmKChuYy5hcHAgYXMgYW55KS5pc01vYmlsZSl7cmV0dXJuO31cclxuXHRcdGxldCB0ZmlsZSA9IG5jLmNoYWluLmN1cnJlbnRfbm90ZTtcclxuXHJcblx0XHRpZih0ZmlsZSl7XHJcblx0XHRcdGxldCBpdGVtczp7W2tleTpzdHJpbmddOmFueX0gPSB7fVxyXG5cdFx0XHRsZXQgbGlua3MgPSBuYy5jaGFpbi5nZXRfaW5saW5rcyh0ZmlsZSxmYWxzZSk7XHJcblx0XHRcdGZvcihsZXQgaSBvZiBsaW5rcyl7XHJcblx0XHRcdFx0aWYoaS5leHRlbnNpb249PT0nbWQnKXtcclxuXHRcdFx0XHRcdGl0ZW1zWydcdTIxMzlcdUZFMEYgJytpLmJhc2VuYW1lXSA9IGk7XHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRpdGVtc1snXHUyMTM5XHVGRTBGICcraS5uYW1lXSA9IGk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGxpbmtzID0gbmMuY2hhaW4uZ2V0X291dGxpbmtzKHRmaWxlLGZhbHNlKTtcclxuXHRcdFx0Zm9yKGxldCBpIG9mIGxpbmtzKXtcclxuXHRcdFx0XHRpZihpLmV4dGVuc2lvbj09PSdtZCcpe1xyXG5cdFx0XHRcdFx0aXRlbXNbJ1x1RDgzQ1x1REQ3RVx1RkUwRiAnK2kuYmFzZW5hbWVdID0gaTtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdGl0ZW1zWydcdUQ4M0NcdUREN0VcdUZFMEYgJytpLm5hbWVdID0gaTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxldCBrZXlzID0gT2JqZWN0LmtleXMoaXRlbXMpO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IGtleSA9IGF3YWl0IG5jLmRpYWxvZ19zdWdnZXN0KFxyXG5cdFx0XHRcdG5jLnV0aWxzLmFycmF5X3ByZWZpeF9pZChrZXlzKSxcclxuXHRcdFx0XHRrZXlzLFxyXG5cdFx0XHQpXHJcblxyXG5cdFx0XHRpZihrZXkpe1xyXG5cdFx0XHRcdGxldCBub3RlID0gaXRlbXNba2V5XTtcclxuXHRcdFx0XHRsZXQgcmVzID0gYXdhaXQgbmMuZGlhbG9nX3Byb21wdCgnTmV3IE5hbWUnLCcnLG5vdGUuYmFzZW5hbWUpO1xyXG5cdFx0XHRcdGlmKHJlcyAmJiAhKHJlcz09PW5vdGUuYmFzZW5hbWUpICYmICEocmVzPT09JycpKXtcclxuXHRcdFx0XHRcdGxldCBucGF0aCA9IG5vdGUucGFyZW50LnBhdGgrJy8nK3JlcysnLicrbm90ZS5leHRlbnNpb247XHJcblx0XHRcdFx0XHRsZXQgZHN0ID0gbmMuY2hhaW4uZ2V0X3RmaWxlKHJlcysnLicrbm90ZS5leHRlbnNpb24pO1xyXG5cdFx0XHRcdFx0aWYoZHN0KXtcclxuXHRcdFx0XHRcdFx0bmV3IE5vdGljZSgnRXhpc3Q6JytyZXMrbm90ZS5leHRlbnNpb24sMzAwMCk7XHJcblx0XHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdFx0bmMuYXBwLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUobm90ZSxucGF0aCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF9tZXJtYWlkX2Zsb3djaGFydF9saW5rID0gKHBsdWdpbjogTm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG4gICAgaWQ6ICdjbWRfbWVybWFpZF9mbG93Y2hhcnRfbGluaycsXHJcbiAgICBuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfbWVybWFpZF9mbG93Y2hhcnRfbGluayxcclxuXHRpY29uOidmaWxlLWhlYXJ0JyxcclxuICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IFwiYGBgZGF0YXZpZXdqc1xcbmxldCBuYz1hcHAucGx1Z2lucy5nZXRQbHVnaW4oJ25vdGUtY2hhaW4nKTtcXG5sZXQgbXNnID1uYy5tZXJtYWlkLmdldF9mbG93Y2hhcnQobnVsbCwyKTtcXG5kdi5zcGFuKG1zZylcXG5gYGBcIjtcclxuICAgICAgICBhd2FpdCBwbHVnaW4uY2hhaW4ub3Blbl9ub3RlX2luX21vZGFsKGNvbnRlbnQpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF9tZXJtYWlkX2Zsb3djaGFydF9mb2xkZXIgPSAocGx1Z2luOiBOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcbiAgICBpZDogJ2NtZF9tZXJtYWlkX2Zsb3djaGFydF9mb2xkZXInLFxyXG4gICAgbmFtZTogcGx1Z2luLnN0cmluZ3MuY21kX21lcm1haWRfZmxvd2NoYXJ0X2ZvbGRlcixcclxuXHRpY29uOidmb2xkZXItaGVhcnQnLFxyXG4gICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gXCJgYGBkYXRhdmlld2pzXFxubGV0IG5jPWFwcC5wbHVnaW5zLmdldFBsdWdpbignbm90ZS1jaGFpbicpO1xcbmxldCBtc2cgPW5jLm1lcm1haWQuZmxvd2NoYXJ0X2ZvbGRlcihudWxsLCdGb2xkZXInKTtcXG5kdi5zcGFuKG1zZylcXG5gYGBcIjtcclxuICAgICAgICBhd2FpdCBwbHVnaW4uY2hhaW4ub3Blbl9ub3RlX2luX21vZGFsKGNvbnRlbnQpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF9tZXJtYWlkX2Zsb3djaGFydF9hdXRvID0gKHBsdWdpbjogTm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG4gICAgaWQ6ICdjbWRfbWVybWFpZF9mbG93Y2hhcnRfYXV0bycsXHJcbiAgICBuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfbWVybWFpZF9mbG93Y2hhcnRfYXV0byxcclxuXHRpY29uOidoZWFydCcsXHJcbiAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBcImBgYGRhdGF2aWV3anNcXG5sZXQgbmM9YXBwLnBsdWdpbnMuZ2V0UGx1Z2luKCdub3RlLWNoYWluJyk7XFxubGV0IG1zZyA9bmMubWVybWFpZC5nZXRfbWVocm1haWRfZ3JhcGgobnVsbCw0LCdtZXJtYWlkJyk7XFxuZHYuc3Bhbihtc2cpXFxuYGBgXCI7XHJcbiAgICAgICAgYXdhaXQgcGx1Z2luLmNoYWluLm9wZW5fbm90ZV9pbl9tb2RhbChjb250ZW50KTtcclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBjbWRfZXhlY3V0ZV90ZW1wbGF0ZV9tb2RhbCA9IChwbHVnaW46IE5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuICAgIGlkOiAnY21kX2V4ZWN1dGVfdGVtcGxhdGVfbW9kYWwnLFxyXG4gICAgbmFtZTogcGx1Z2luLnN0cmluZ3MuY21kX2V4ZWN1dGVfdGVtcGxhdGVfbW9kYWwsXHJcblx0aWNvbjonZmlsZS10ZXJtaW5hbCcsXHJcbiAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG5cdFx0bGV0IHRwbCA9IChwbHVnaW4uYXBwIGFzIGFueSkucGx1Z2lucy5wbHVnaW5zWyd0ZW1wbGF0ZXItb2JzaWRpYW4nXVxyXG5cdFx0aWYoIXRwbCl7cmV0dXJufVxyXG5cclxuXHRcdFxyXG5cdFx0bGV0IHRmaWxlczpBcnJheTxURmlsZT49W107XHJcblx0XHRsZXQgZm9sZGVyID0gcGx1Z2luLmFwcC52YXVsdC5nZXRGb2xkZXJCeVBhdGgodHBsLnNldHRpbmdzLnRlbXBsYXRlc19mb2xkZXIpO1xyXG5cdFx0aWYoZm9sZGVyKXtcclxuXHRcdFx0bGV0IHhmaWxlcyA9IHBsdWdpbi5jaGFpbi5nZXRfdGZpbGVzX29mX2ZvbGRlcihmb2xkZXIsdHJ1ZSlcclxuXHRcdFx0bGV0IHRmaWxlID0gcGx1Z2luLmNoYWluLmdldF90ZmlsZShmb2xkZXIucGF0aCsnLycrZm9sZGVyLm5hbWUrJy5tZCcpO1xyXG5cdFx0XHRsZXQgaW5maWxlcyA9IHBsdWdpbi5jaGFpbi5nZXRfbGlua3ModGZpbGUpO1xyXG5cdFx0XHRmb3IobGV0IGYgb2YgaW5maWxlcyl7XHJcblx0XHRcdFx0aWYoIXhmaWxlcy5jb250YWlucyhmKSl7XHJcblx0XHRcdFx0XHR4ZmlsZXMucHVzaChmKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHR4ZmlsZXMgPSBwbHVnaW4uY2hhaW4uc29ydF90ZmlsZXNfYnlfY2hhaW4oeGZpbGVzKTtcclxuXHRcdFx0Zm9yKGxldCBmIG9mIHhmaWxlcyl7XHJcblx0XHRcdFx0dGZpbGVzLnB1c2goZik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGxldCBpdGVtcyA9IHBsdWdpbi5zZXR0aW5ncy50cGxfdGFnc19mb2xkZXIudHJpbSgpLnNwbGl0KCdcXG4nKTtcclxuXHRcdGlmKGl0ZW1zLmxlbmd0aD4wKXtcclxuXHRcdFx0Zm9yKGxldCBpdGVtIG9mIGl0ZW1zKXtcclxuXHRcdFx0XHRsZXQgeGZpbGVzID0gcGx1Z2luLmNoYWluLmdldF9ncm91cChpdGVtKTtcclxuXHRcdFx0XHRmb3IobGV0IGYgb2YgeGZpbGVzKXtcclxuXHRcdFx0XHRcdGlmKCF0ZmlsZXMuY29udGFpbnMoZikpe1xyXG5cdFx0XHRcdFx0XHR0ZmlsZXMucHVzaChmKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0XHJcblxyXG5cdFx0bGV0IHRmaWxlID0gYXdhaXQgcGx1Z2luLmNoYWluLnN1Z2d1c3Rlcl9ub3RlKHRmaWxlcyBhcyBhbnksMCx0cnVlKVxyXG5cdFx0aWYodGZpbGUpe1xyXG5cdFx0XHRsZXQgcmVzID0gYXdhaXQgcGx1Z2luLnV0aWxzLnBhcnNlX3RlbXBsYXRlcihwbHVnaW4uYXBwLHRmaWxlLmJhc2VuYW1lKTtcclxuXHRcdFx0bGV0IHR4dCA9IHJlcy5qb2luKCdcXG4nKS50cmltKClcclxuXHRcdFx0bGV0IHZpZXcgPSAocGx1Z2luLmFwcC53b3Jrc3BhY2UgYXMgYW55KS5nZXRBY3RpdmVGaWxlVmlldygpXHJcblx0XHRcdGlmKHZpZXcpe1xyXG5cdFx0XHRcdHZpZXcuZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24odHh0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF90b29nbGVfY3NzX2Jsb2NrX2luX25vdGUgPSAocGx1Z2luOiBOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcbiAgICBpZDogJ2NtZF90b29nbGVfY3NzX2Jsb2NrX2luX25vdGUnLFxyXG4gICAgbmFtZTogcGx1Z2luLnN0cmluZ3MuY21kX3Rvb2dsZV9jc3NfYmxvY2tfaW5fbm90ZSxcclxuXHRpY29uOidhdG9tJyxcclxuICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRhd2FpdCBwbHVnaW4udXRpbHMudG9vZ2xlX25vdGVfY3NzKHBsdWdpbi5hcHAsZG9jdW1lbnQsJy8nKVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF9zZXRfZnJvbnRtYXR0ZXIgPSAocGx1Z2luOiBOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcbiAgICBpZDogJ2NtZF9zZXRfZnJvbnRtYXR0ZXInLFxyXG4gICAgbmFtZTogcGx1Z2luLnN0cmluZ3MuY21kX3NldF9mcm9udG1hdHRlcixcclxuXHRpY29uOiAnZGF0YWJhc2UnLFxyXG4gICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGxldCBmaWxlcyA9IHBsdWdpbi5jaGFpbi5nZXRfc2VsZWN0ZWRfZmlsZXModHJ1ZSlcclxuXHRcdGlmKGZpbGVzLmxlbmd0aD09MCl7cmV0dXJufVxyXG5cdFx0bGV0IGZpZWxkID0gYXdhaXQgcGx1Z2luLmRpYWxvZ19wcm9tcHQoJ0Zyb250bWF0dGVyIG5hbWUnKVxyXG5cdFx0aWYoIWZpZWxkKXtyZXR1cm59XHJcblx0XHRsZXQgcHJldiA9IHBsdWdpbi5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKGZpbGVzWzBdLGZpZWxkKVxyXG5cdFx0aWYocHJldil7XHJcblx0XHRcdGlmKEFycmF5LmlzQXJyYXkocHJldikpe1xyXG5cdFx0XHRcdHByZXYgPSBwcmV2Lm1hcCh4PT54LnRvU3RyaW5nKCkpLmpvaW4oJ1xcbicpXHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHByZXYgPSBwcmV2LnRvU3RyaW5nKClcclxuXHRcdFx0fVxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHByZXYgPSAnJ1xyXG5cdFx0fVxyXG5cdFx0bGV0IHZhbHVlID0gYXdhaXQgcGx1Z2luLmRpYWxvZ19wcm9tcHQoJ0Zyb250bWF0dGVyIHZhbHVlJywnJyxwcmV2KVxyXG5cdFx0dmFsdWUgPSB2YWx1ZS50cmltKClcclxuXHRcdGlmKCF2YWx1ZSl7cmV0dXJufVxyXG5cdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFxcbi9nLCdcXG4nKS5yZXBsYWNlKC9cXFxcdC9nLCdcXHQnKVxyXG5cdFx0dmFsdWUgPSB2YWx1ZS5zcGxpdCgnXFxuJylcclxuXHRcdHZhbHVlID0gdmFsdWUubWFwKCh4OnN0cmluZyk9PntcclxuXHRcdFx0aWYoeC5tYXRjaCgvXi0/XFxkKyQvKSl7XHJcblx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KHgpXHJcblx0XHRcdH1lbHNlIGlmKHgubWF0Y2goL14tP1xcZCsoXFwuXFxkKik/JC8pKXtcclxuXHRcdFx0XHRyZXR1cm4gcGFyc2VGbG9hdCh4KVxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRyZXR1cm4geFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0aWYodmFsdWUubGVuZ3RoPT0xKXtcclxuXHRcdFx0dmFsdWUgPSB2YWx1ZVswXVxyXG5cdFx0fVxyXG5cdFx0Zm9yKGxldCB0ZmlsZSBvZiBmaWxlcyl7XHJcblx0XHRcdGF3YWl0IHBsdWdpbi5lZGl0b3Iuc2V0X2Zyb250bWF0dGVyKHRmaWxlLGZpZWxkLHZhbHVlLDEpXHJcblx0XHR9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuY29uc3QgY21kX21vdmVfbmV4dF9sZXZlbCA9IChwbHVnaW46IE5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuICAgIGlkOiAnbW92ZV9uZXh0X2xldmVsJyxcclxuICAgIG5hbWU6IHBsdWdpbi5zdHJpbmdzLmNtZF9tb3ZlX25leHRfbGV2ZWwsXHJcblx0aG90a2V5czogW3sgbW9kaWZpZXJzOiBbJ01vZCcsICdTaGlmdCddLCBrZXk6ICdMJyB9XSxcclxuXHRpY29uOiAnYXJyb3ctcmlnaHQtZnJvbS1saW5lJyxcclxuICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRsZXQga2V5ID0gcGx1Z2luLnNldHRpbmdzLmZpZWxkX29mX2NvbmZsdWVuY2VfdGFiX2Zvcm1hdFxyXG5cdFx0aWYoIWtleSl7cmV0dXJufVxyXG5cdFx0bGV0IHRmaWxlcyA9IHBsdWdpbi5jaGFpbi5nZXRfc2VsZWN0ZWRfZmlsZXMoKVxyXG5cdFx0Zm9yKGxldCB0ZmlsZSBvZiB0ZmlsZXMpe1xyXG5cdFx0XHRsZXQgbGV2ZWwgPSBwbHVnaW4uZWRpdG9yLmdldF9mcm9udG1hdHRlcih0ZmlsZSxrZXkpXHJcblx0XHRcdGlmKCFsZXZlbCl7XHJcblx0XHRcdFx0YXdhaXQgcGx1Z2luLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXIodGZpbGUsa2V5LFwiXFx0XCIsMSlcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0YXdhaXQgcGx1Z2luLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXIodGZpbGUsa2V5LGxldmVsK1wiXFx0XCIsMSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF9tb3ZlX25vbmVfbGV2ZWwgPSAocGx1Z2luOiBOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcbiAgICBpZDogJ21vdmVfbm9uZV9sZXZlbCcsXHJcbiAgICBuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfbW92ZV9ub25lX2xldmVsLFxyXG5cdGhvdGtleXM6IFt7IG1vZGlmaWVyczogWydNb2QnLCAnU2hpZnQnXSwga2V5OiAnSycgfV0sXHJcblx0aWNvbjonYWxpZ24tanVzdGlmeScsXHJcbiAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG5cdFx0bGV0IGtleSA9IHBsdWdpbi5zZXR0aW5ncy5maWVsZF9vZl9jb25mbHVlbmNlX3RhYl9mb3JtYXRcclxuXHRcdGlmKCFrZXkpe3JldHVybn1cclxuXHRcdGxldCB0ZmlsZXMgPSBwbHVnaW4uY2hhaW4uZ2V0X3NlbGVjdGVkX2ZpbGVzKClcclxuXHRcdGZvcihsZXQgdGZpbGUgb2YgdGZpbGVzKXtcclxuXHRcdFx0bGV0IGxldmVsID0gcGx1Z2luLmVkaXRvci5nZXRfZnJvbnRtYXR0ZXIodGZpbGUsa2V5KVxyXG5cdFx0XHRpZihsZXZlbCl7XHJcblx0XHRcdFx0YXdhaXQgcGx1Z2luLmVkaXRvci5zZXRfZnJvbnRtYXR0ZXIodGZpbGUsa2V5LFwiXCIsMSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGNtZF9tb3ZlX3ByZXZfbGV2ZWwgPSAocGx1Z2luOiBOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcbiAgICBpZDogJ21vdmVfcHJldl9sZXZlbCcsXHJcbiAgICBuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfbW92ZV9wcmV2X2xldmVsLFxyXG5cdGhvdGtleXM6IFt7IG1vZGlmaWVyczogWydNb2QnLCAnU2hpZnQnXSwga2V5OiAnSicgfV0sXHJcblx0aWNvbjonYXJyb3ctbGVmdC1mcm9tLWxpbmUnLFxyXG4gICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdGxldCBrZXkgPSBwbHVnaW4uc2V0dGluZ3MuZmllbGRfb2ZfY29uZmx1ZW5jZV90YWJfZm9ybWF0XHJcblx0XHRpZigha2V5KXtyZXR1cm59XHJcblx0XHRsZXQgdGZpbGVzID0gcGx1Z2luLmNoYWluLmdldF9zZWxlY3RlZF9maWxlcygpXHJcblx0XHRmb3IobGV0IHRmaWxlIG9mIHRmaWxlcyl7XHJcblx0XHRcdGxldCBsZXZlbCA9IHBsdWdpbi5lZGl0b3IuZ2V0X2Zyb250bWF0dGVyKHRmaWxlLGtleSlcclxuXHRcdFx0aWYobGV2ZWwpe1xyXG5cdFx0XHRcdGF3YWl0IHBsdWdpbi5lZGl0b3Iuc2V0X2Zyb250bWF0dGVyKHRmaWxlLGtleSxsZXZlbC5zbGljZSgxKSwxKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuY29uc3QgY21kX2luc2VydF9jb21tYW5kX2lkID0gKHBsdWdpbjogTm90ZUNoYWluUGx1Z2luKSA9PiAoe1xyXG4gICAgaWQ6ICdpbnNlcnRfY29tbWFuZF9pZCcsXHJcbiAgICBuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfaW5zZXJ0X2NvbW1hbmRfaWQsXHJcblx0aWNvbjondGVybWluYWwnLFxyXG4gICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdFxyXG5cdFx0bGV0IGVkaXRvciA9IChwbHVnaW4uYXBwIGFzIGFueSkud29ya3NwYWNlLmdldEFjdGl2ZUZpbGVWaWV3KCk/LmVkaXRvcjtcclxuXHRcdGlmKCFlZGl0b3Ipe3JldHVybjt9XHJcblxyXG5cdFx0bGV0IGlkcyA6e1trZXk6c3RyaW5nXTpzdHJpbmd9ID0ge31cclxuXHRcdE9iamVjdC5rZXlzKFxyXG5cdFx0XHQocGx1Z2luLmFwcCBhcyBhbnkpLmNvbW1hbmRzLmNvbW1hbmRzXHJcblx0XHQpLmZvckVhY2goKHgpPT57XHJcblx0XHRcdGlkc1socGx1Z2luLmFwcCBhcyBhbnkpLmNvbW1hbmRzLmNvbW1hbmRzW3hdLm5hbWVdPXg7fVxyXG5cdFx0KVxyXG5cclxuXHRcdGxldCBuYW1lcyA9IE9iamVjdC5rZXlzKGlkcylcclxuXHJcblx0XHRsZXQgbXNnID0gcGx1Z2luLnV0aWxzLmFycmF5X3ByZWZpeF9pZChuYW1lcyk7XHJcblx0XHRsZXQgY21kID0gYXdhaXQgcGx1Z2luLmRpYWxvZ19zdWdnZXN0KG1zZyxuYW1lcyk7XHJcblx0XHRpZihjbWQpe1xyXG5cdFx0XHRlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihpZHNbY21kXSk7XHJcblx0XHR9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuY29uc3QgY21kX29wZW5fbm90ZV9pbl9tb2RhbCA9IChwbHVnaW46IE5vdGVDaGFpblBsdWdpbikgPT4gKHtcclxuICAgIGlkOiAnY21kX29wZW5fbm90ZV9pbl9tb2RhbCcsXHJcbiAgICBuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfb3Blbl9ub3RlX2luX21vZGFsLFxyXG5cdGljb246J0xhcHRvcCcsXHJcbiAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHJcblx0XHRsZXQgbm90ZSA9IGF3YWl0IHBsdWdpbi5jaGFpbi5zdWdndXN0ZXJfbm90ZSgpO1xyXG5cdFx0aWYobm90ZSl7XHJcblx0XHRcdHBsdWdpbi5jaGFpbi5vcGVuX25vdGVfaW5fbW9kYWwobm90ZS5wYXRoKTtcclxuXHRcdH1cclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBjbWRfb3Blbl9ub3RlX2luX3ZpZXcgPSAocGx1Z2luOiBOb3RlQ2hhaW5QbHVnaW4pID0+ICh7XHJcbiAgICBpZDogJ2NtZF9vcGVuX25vdGVfaW5fdmlldycsXHJcbiAgICBuYW1lOiBwbHVnaW4uc3RyaW5ncy5jbWRfb3Blbl9ub3RlX2luX3ZpZXcsXHJcblx0aWNvbjonUGFuZWxzIFRvcCBMZWZ0JyxcclxuICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRsZXQgbm90ZSA9IGF3YWl0IHBsdWdpbi5jaGFpbi5zdWdndXN0ZXJfbm90ZSgpO1xyXG5cdFx0aWYobm90ZSl7XHJcblx0XHRcdHBsdWdpbi5jaGFpbi5vcGVuX25vdGVfaW5fdmlldyhub3RlLnBhdGgpO1xyXG5cdFx0fVxyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG5cclxuY29uc3QgY29tbWFuZEJ1aWxkZXJzID0gW1xyXG5cdGNtZF9vcGVuX25vdGUsXHJcblx0Y21kX3JldmVhbF9ub3RlLFxyXG5cdGNtZF9vcGVuX2FuZF9yZXZlYWxfbm90ZSxcclxuXHRjbWRfb3Blbl9wcmV2X25vdGUsXHJcblx0Y21kX29wZW5fbmV4dF9ub3RlLFxyXG5cdGNtZF9vcGVuX3ByZXZfbm90ZV9vZl9yaWdodF9sZWFmLFxyXG5cdGNtZF9vcGVuX25leHRfbm90ZV9vZl9yaWdodF9sZWFmLFxyXG5cdGNtZF9vcGVuX25vdGVzX3NtYXJ0ZXIsXHJcblx0Y21kX2xvbmdmb3JtMm5vdGVjaGFpbixcclxuXHRjbWRfbG9uZ2Zvcm00bm90ZWNoYWluLFxyXG5cdGNtZF9zb3J0X2ZpbGVfZXhwbG9yZXIsXHJcblx0Y2xlYXJfaW5saW5rcyxcclxuXHRyZXBsYWNlX25vdGVzX3dpdGhfcmVneCxcclxuXHRtb3ZlX2ZpbGVfdG9fYW5vdGhlcl9mb2xkZXIsXHJcblx0Y2hhaW5faW5zZXJ0X25vZGUsXHJcblx0Y2hhaW5fc2V0X3NlcV9ub3RlLFxyXG5cdGNyZWF0ZV9uZXdfbm90ZSxcclxuXHRjaGFpbl9tb3ZlX3VwX25vZGUsXHJcblx0Y2hhaW5fbW92ZV9kb3duX25vZGUsXHJcblx0Y21kX2ZpbGVfcmVuYW1lLFxyXG5cdGNtZF9tZXJtYWlkX2Zsb3djaGFydF9saW5rLFxyXG5cdGNtZF9tZXJtYWlkX2Zsb3djaGFydF9mb2xkZXIsXHJcblx0Y21kX21lcm1haWRfZmxvd2NoYXJ0X2F1dG8sXHJcblx0Y21kX2V4ZWN1dGVfdGVtcGxhdGVfbW9kYWwsXHJcblx0Y21kX3Rvb2dsZV9jc3NfYmxvY2tfaW5fbm90ZSxcclxuXHRjbWRfc2V0X2Zyb250bWF0dGVyLFxyXG5cdGNtZF9tb3ZlX25leHRfbGV2ZWwsXHJcblx0Y21kX21vdmVfbm9uZV9sZXZlbCxcclxuXHRjbWRfbW92ZV9wcmV2X2xldmVsLFxyXG5cdGNtZF9pbnNlcnRfY29tbWFuZF9pZCxcclxuXHRjbWRfb3Blbl9ub3RlX2luX21vZGFsLFxyXG5cdGNtZF9vcGVuX25vdGVfaW5fdmlld1xyXG5dO1xyXG5cclxuY29uc3QgY29tbWFuZEJ1aWxkZXJzRGVza3RvcCA9IFtcclxuXHRjbWRfZmlsZV9vcGVuX3dpdGhfc3lzdGVtX2FwcCxcclxuXHRjbWRfZmlsZV9zaG93X2luX3N5c3RlbV9leHBsb3JlcixcclxuXHJcbl1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRDb21tYW5kcyhwbHVnaW46Tm90ZUNoYWluUGx1Z2luKSB7XHJcbiAgICBjb21tYW5kQnVpbGRlcnMuZm9yRWFjaCgoYykgPT4ge1xyXG4gICAgICAgIHBsdWdpbi5hZGRDb21tYW5kKGMocGx1Z2luKSk7XHJcbiAgICB9KTtcclxuXHRpZigocGx1Z2luLmFwcCBhcyBhbnkpLmlzTW9iaWxlPT1mYWxzZSl7XHJcblx0XHRjb21tYW5kQnVpbGRlcnNEZXNrdG9wLmZvckVhY2goKGMpID0+IHtcclxuXHRcdFx0cGx1Z2luLmFkZENvbW1hbmQoYyhwbHVnaW4pKTtcclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgRnV6enlTdWdnZXN0TW9kYWwgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHR5cGUgeyBGdXp6eU1hdGNoICwgQXBwfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbi8vIFx1NkRGQlx1NTJBMFx1N0M3Qlx1NTc4Qlx1NThGMFx1NjYwRVxyXG5pbnRlcmZhY2UgU3VnZ2VzdGVyQ2hvb3NlciB7XHJcblx0dmFsdWVzOiB7XHJcblx0XHRpdGVtOiBzdHJpbmc7XHJcblx0XHRtYXRjaDogeyBzY29yZTogbnVtYmVyOyBtYXRjaGVzOiB1bmtub3duW10gfTtcclxuXHR9W107XHJcblx0c2VsZWN0ZWRJdGVtOiBudW1iZXI7XHJcblx0W2tleTogc3RyaW5nXTogdW5rbm93bjtcclxufVxyXG5cclxuLy8gXHU2MjY5XHU1QzU1RnV6enlTdWdnZXN0TW9kYWxcdTc2ODRcdTdDN0JcdTU3OEJcclxuaW50ZXJmYWNlIEV4dGVuZGVkRnV6enlTdWdnZXN0TW9kYWwgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxzdHJpbmc+IHtcclxuXHRjaG9vc2VyOiBTdWdnZXN0ZXJDaG9vc2VyO1xyXG59XHJcblxyXG50eXBlIE9wdGlvbnMgPSB7XHJcblx0bGltaXQ6IEZ1enp5U3VnZ2VzdE1vZGFsPHN0cmluZz5bXCJsaW1pdFwiXTtcclxuXHRlbXB0eVN0YXRlVGV4dDogRnV6enlTdWdnZXN0TW9kYWw8c3RyaW5nPltcImVtcHR5U3RhdGVUZXh0XCJdO1xyXG5cdHBsYWNlaG9sZGVyOiBQYXJhbWV0ZXJzPFxyXG5cdFx0RnV6enlTdWdnZXN0TW9kYWw8c3RyaW5nPltcInNldFBsYWNlaG9sZGVyXCJdXHJcblx0PlswXSBleHRlbmRzIHN0cmluZ1xyXG5cdFx0PyBzdHJpbmdcclxuXHRcdDogbmV2ZXI7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29weSBmcm9tIFF1aWNrQWRkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnB1dFN1Z2dlc3RlciBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPHN0cmluZz4ge1xyXG5cdHByaXZhdGUgcmVzb2x2ZVByb21pc2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG5cdHByaXZhdGUgcmVqZWN0UHJvbWlzZTogKHJlYXNvbj86IHVua25vd24pID0+IHZvaWQ7XHJcblx0cHVibGljIHByb21pc2U6IFByb21pc2U8c3RyaW5nPjtcclxuXHRwcml2YXRlIHJlc29sdmVkOiBib29sZWFuO1xyXG5cdHB1YmxpYyBuZXdfdmFsdWU6IGJvb2xlYW47XHJcblx0aW5wdXRFbDogYW55O1xyXG5cclxuXHRwdWJsaWMgc3RhdGljIFN1Z2dlc3QoXHJcblx0XHRhcHA6IEFwcCxcclxuXHRcdGRpc3BsYXlJdGVtczogc3RyaW5nW10sXHJcblx0XHRpdGVtczogc3RyaW5nW10sXHJcblx0XHRvcHRpb25zOiBQYXJ0aWFsPE9wdGlvbnM+ID0ge30sXHJcblx0XHRuZXdfdmFsdWU6Ym9vbGVhbj1mYWxzZVxyXG5cdCkge1xyXG5cdFx0Y29uc3QgbmV3U3VnZ2VzdGVyID0gbmV3IElucHV0U3VnZ2VzdGVyKFxyXG5cdFx0XHRhcHAsXHJcblx0XHRcdGRpc3BsYXlJdGVtcyxcclxuXHRcdFx0aXRlbXMsXHJcblx0XHRcdG9wdGlvbnMsXHJcblx0XHRcdG5ld192YWx1ZVxyXG5cdFx0KTtcclxuXHRcdHJldHVybiBuZXdTdWdnZXN0ZXIucHJvbWlzZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuXHRcdGFwcDogQXBwLFxyXG5cdFx0cHJpdmF0ZSBkaXNwbGF5SXRlbXM6IHN0cmluZ1tdLFxyXG5cdFx0cHJpdmF0ZSBpdGVtczogc3RyaW5nW10sXHJcblx0XHRvcHRpb25zOiBQYXJ0aWFsPE9wdGlvbnM+ID0ge30sXHJcblx0XHRuZXdfdmFsdWU6IGJvb2xlYW4gPSBmYWxzZVxyXG5cdCkge1xyXG5cdFx0c3VwZXIoYXBwKTtcclxuXHRcdHRoaXMubmV3X3ZhbHVlID0gbmV3X3ZhbHVlXHJcblxyXG5cdFx0dGhpcy5wcm9taXNlID0gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRoaXMucmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xyXG5cdFx0XHR0aGlzLnJlamVjdFByb21pc2UgPSByZWplY3Q7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcblx0XHRcdGlmIChldmVudC5jb2RlICE9PSBcIlRhYlwiKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBcdTRGN0ZcdTc1MjhcdTdDN0JcdTU3OEJcdTY1QURcdThBMDBcdTY3NjVcdThCQkZcdTk1RUVjaG9vc2VyXHJcblx0XHRcdGNvbnN0IHNlbGYgPSB0aGlzIGFzIHVua25vd24gYXMgRXh0ZW5kZWRGdXp6eVN1Z2dlc3RNb2RhbDtcclxuXHRcdFx0Y29uc3QgeyB2YWx1ZXMsIHNlbGVjdGVkSXRlbSB9ID0gc2VsZi5jaG9vc2VyO1xyXG5cclxuXHRcdFx0Y29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5pbnB1dEVsO1xyXG5cdFx0XHR0aGlzLmlucHV0RWwudmFsdWUgPSB2YWx1ZXNbc2VsZWN0ZWRJdGVtXS5pdGVtID8/IHZhbHVlO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0aWYgKG9wdGlvbnMucGxhY2Vob2xkZXIpIHRoaXMuc2V0UGxhY2Vob2xkZXIob3B0aW9ucy5wbGFjZWhvbGRlcik7XHJcblx0XHRpZiAob3B0aW9ucy5saW1pdCkgdGhpcy5saW1pdCA9IG9wdGlvbnMubGltaXQ7XHJcblx0XHRpZiAob3B0aW9ucy5lbXB0eVN0YXRlVGV4dClcclxuXHRcdFx0dGhpcy5lbXB0eVN0YXRlVGV4dCA9IG9wdGlvbnMuZW1wdHlTdGF0ZVRleHQ7XHJcblxyXG5cdFx0dGhpcy5vcGVuKCk7XHJcblx0fVxyXG5cclxuXHRnZXRJdGVtVGV4dChpdGVtOiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdFx0aWYgKGl0ZW0gPT09IHRoaXMuaW5wdXRFbC52YWx1ZSkgcmV0dXJuIGl0ZW07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGlzcGxheUl0ZW1zW3RoaXMuaXRlbXMuaW5kZXhPZihpdGVtKV07XHJcblx0fVxyXG5cclxuXHRnZXRJdGVtcygpOiBzdHJpbmdbXSB7XHJcblx0XHRpZiAodGhpcy5pbnB1dEVsLnZhbHVlID09PSBcIlwifHwhdGhpcy5uZXdfdmFsdWUpIHJldHVybiB0aGlzLml0ZW1zO1xyXG5cdFx0cmV0dXJuIFsuLi50aGlzLml0ZW1zLHRoaXMuaW5wdXRFbC52YWx1ZV07XHJcblx0fVxyXG5cclxuXHRzZWxlY3RTdWdnZXN0aW9uKFxyXG5cdFx0dmFsdWU6IEZ1enp5TWF0Y2g8c3RyaW5nPixcclxuXHRcdGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnRcclxuXHQpIHtcclxuXHRcdHRoaXMucmVzb2x2ZWQgPSB0cnVlO1xyXG5cdFx0c3VwZXIuc2VsZWN0U3VnZ2VzdGlvbih2YWx1ZSwgZXZ0KTtcclxuXHR9XHJcblxyXG5cdG9uQ2hvb3NlSXRlbShpdGVtOiBzdHJpbmcsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcclxuXHRcdHRoaXMucmVzb2x2ZWQgPSB0cnVlO1xyXG5cdFx0dGhpcy5yZXNvbHZlUHJvbWlzZShpdGVtKTtcclxuXHR9XHJcblxyXG5cdG9uQ2xvc2UoKSB7XHJcblx0XHRzdXBlci5vbkNsb3NlKCk7XHJcblx0XHRpZiAoIXRoaXMucmVzb2x2ZWQpIHRoaXMucmVqZWN0UHJvbWlzZShcIm5vIGlucHV0IGdpdmVuLlwiKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkaWFsb2dfc3VnZ2VzdChkaXNwbGF5SXRlbXM6QXJyYXk8c3RyaW5nPixpdGVtczpBcnJheTxhbnk+LHBsYWNlaG9sZGVyPScnLG5ld192YWx1ZT1mYWxzZSkge1xyXG5cdHRyeXtcclxuXHRcdHJldHVybiBhd2FpdCBJbnB1dFN1Z2dlc3Rlci5TdWdnZXN0KFxyXG5cdFx0XHR0aGlzLmFwcCxcclxuXHRcdFx0ZGlzcGxheUl0ZW1zLFxyXG5cdFx0XHRpdGVtcyxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcclxuXHRcdFx0fSxcclxuXHRcdFx0bmV3X3ZhbHVlXHJcblx0XHQpXHJcblx0fWNhdGNoKGVycm9yKXtcclxuXHRcdFxyXG5cdFx0cmV0dXJuIG51bGxcclxuXHR9XHJcblx0XHJcbn1cclxuIiwgImltcG9ydCB0eXBlIHsgQXBwfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50LCBNb2RhbCwgVGV4dENvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuLyoqXHJcbiAqIENvcHkgZnJvbSBRdWlja0FkZFxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0UHJvbXB0IGV4dGVuZHMgTW9kYWwge1xyXG5cdHB1YmxpYyB3YWl0Rm9yQ2xvc2U6IFByb21pc2U8c3RyaW5nPjtcclxuXHJcblx0cHJpdmF0ZSByZXNvbHZlUHJvbWlzZTogKGlucHV0OiBzdHJpbmcpID0+IHZvaWQ7XHJcblx0cHJpdmF0ZSByZWplY3RQcm9taXNlOiAocmVhc29uPzogdW5rbm93bikgPT4gdm9pZDtcclxuXHRwcml2YXRlIGRpZFN1Ym1pdCA9IGZhbHNlO1xyXG5cdHByaXZhdGUgaW5wdXRDb21wb25lbnQ6IFRleHRDb21wb25lbnQ7XHJcblx0cHJpdmF0ZSBpbnB1dDogc3RyaW5nO1xyXG5cdHByaXZhdGUgcmVhZG9ubHkgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuXHJcblx0cHVibGljIHN0YXRpYyBQcm9tcHQoXHJcblx0XHRhcHA6IEFwcCxcclxuXHRcdGhlYWRlcjogc3RyaW5nLFxyXG5cdFx0cGxhY2Vob2xkZXI/OiBzdHJpbmcsXHJcblx0XHR2YWx1ZT86IHN0cmluZ1xyXG5cdCk6IFByb21pc2U8c3RyaW5nPiB7XHJcblx0XHRjb25zdCBuZXdQcm9tcHRNb2RhbCA9IG5ldyBJbnB1dFByb21wdChcclxuXHRcdFx0YXBwLFxyXG5cdFx0XHRoZWFkZXIsXHJcblx0XHRcdHBsYWNlaG9sZGVyLFxyXG5cdFx0XHR2YWx1ZVxyXG5cdFx0KTtcclxuXHRcdHJldHVybiBuZXdQcm9tcHRNb2RhbC53YWl0Rm9yQ2xvc2U7XHJcblx0fVxyXG5cclxuXHRwcm90ZWN0ZWQgY29uc3RydWN0b3IoXHJcblx0XHRhcHA6IEFwcCxcclxuXHRcdHByaXZhdGUgaGVhZGVyOiBzdHJpbmcsXHJcblx0XHRwbGFjZWhvbGRlcj86IHN0cmluZyxcclxuXHRcdHZhbHVlPzogc3RyaW5nXHJcblx0KSB7XHJcblx0XHRzdXBlcihhcHApO1xyXG5cdFx0dGhpcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyID8/IFwiXCI7XHJcblx0XHR0aGlzLmlucHV0ID0gdmFsdWUgPz8gXCJcIjtcclxuXHJcblx0XHR0aGlzLndhaXRGb3JDbG9zZSA9IG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHR0aGlzLnJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcclxuXHRcdFx0dGhpcy5yZWplY3RQcm9taXNlID0gcmVqZWN0O1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5kaXNwbGF5KCk7XHJcblx0XHR0aGlzLm9wZW4oKTtcclxuXHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGRpc3BsYXkoKSB7XHJcblx0XHR0aGlzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwicXVpY2tBZGRNb2RhbFwiLCBcInFhSW5wdXRQcm9tcHRcIik7XHJcblx0XHR0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xyXG5cdFx0dGhpcy50aXRsZUVsLnRleHRDb250ZW50ID0gdGhpcy5oZWFkZXI7XHJcblxyXG5cdFx0Y29uc3QgbWFpbkNvbnRlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCk7XHJcblx0XHR0aGlzLmlucHV0Q29tcG9uZW50ID0gdGhpcy5jcmVhdGVJbnB1dEZpZWxkKFxyXG5cdFx0XHRtYWluQ29udGVudENvbnRhaW5lcixcclxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlcixcclxuXHRcdFx0dGhpcy5pbnB1dFxyXG5cdFx0KTtcclxuXHRcdHRoaXMuY3JlYXRlQnV0dG9uQmFyKG1haW5Db250ZW50Q29udGFpbmVyKTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBjcmVhdGVJbnB1dEZpZWxkKFxyXG5cdFx0Y29udGFpbmVyOiBIVE1MRWxlbWVudCxcclxuXHRcdHBsYWNlaG9sZGVyPzogc3RyaW5nLFxyXG5cdFx0dmFsdWU/OiBzdHJpbmdcclxuXHQpIHtcclxuXHRcdGNvbnN0IHRleHRDb21wb25lbnQgPSBuZXcgVGV4dENvbXBvbmVudChjb250YWluZXIpO1xyXG5cclxuXHRcdCh0ZXh0Q29tcG9uZW50IGFzIGFueSkuaW5wdXRFbC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG5cdFx0KHRleHRDb21wb25lbnQgYXMgYW55KVxyXG5cdFx0XHQuc2V0UGxhY2Vob2xkZXIocGxhY2Vob2xkZXIgPz8gXCJcIilcclxuXHRcdFx0LnNldFZhbHVlKHZhbHVlID8/IFwiXCIpXHJcblx0XHRcdC5vbkNoYW5nZSgodmFsdWU6c3RyaW5nKSA9PiAodGhpcy5pbnB1dCA9IHZhbHVlKSlcclxuXHRcdFx0LmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5zdWJtaXRFbnRlckNhbGxiYWNrKTtcclxuXHJcblx0XHRyZXR1cm4gdGV4dENvbXBvbmVudDtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgY3JlYXRlQnV0dG9uKFxyXG5cdFx0Y29udGFpbmVyOiBIVE1MRWxlbWVudCxcclxuXHRcdHRleHQ6IHN0cmluZyxcclxuXHRcdGNhbGxiYWNrOiAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB1bmtub3duXHJcblx0KSB7XHJcblx0XHRjb25zdCBidG4gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGNvbnRhaW5lcik7XHJcblx0XHRidG4uc2V0QnV0dG9uVGV4dCh0ZXh0KS5vbkNsaWNrKGNhbGxiYWNrKTtcclxuXHJcblx0XHRyZXR1cm4gYnRuO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBjcmVhdGVCdXR0b25CYXIobWFpbkNvbnRlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50KSB7XHJcblx0XHRjb25zdCBidXR0b25CYXJDb250YWluZXI6IEhUTUxEaXZFbGVtZW50ID1cclxuXHRcdFx0bWFpbkNvbnRlbnRDb250YWluZXIuY3JlYXRlRGl2KCk7XHJcblx0XHR0aGlzLmNyZWF0ZUJ1dHRvbihcclxuXHRcdFx0YnV0dG9uQmFyQ29udGFpbmVyLFxyXG5cdFx0XHRcIk9rXCIsXHJcblx0XHRcdHRoaXMuc3VibWl0Q2xpY2tDYWxsYmFja1xyXG5cdFx0KS5zZXRDdGEoKS5idXR0b25FbC5zdHlsZS5tYXJnaW5SaWdodCA9IFwiMFwiO1xyXG5cdFx0dGhpcy5jcmVhdGVCdXR0b24oXHJcblx0XHRcdGJ1dHRvbkJhckNvbnRhaW5lcixcclxuXHRcdFx0XCJDYW5jZWxcIixcclxuXHRcdFx0dGhpcy5jYW5jZWxDbGlja0NhbGxiYWNrXHJcblx0XHQpO1xyXG5cclxuXHRcdGJ1dHRvbkJhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcblx0XHRidXR0b25CYXJDb250YWluZXIuc3R5bGUuZmxleERpcmVjdGlvbiA9IFwicm93LXJldmVyc2VcIjtcclxuXHRcdGJ1dHRvbkJhckNvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiZmxleC1zdGFydFwiO1xyXG5cdFx0YnV0dG9uQmFyQ29udGFpbmVyLnN0eWxlLm1hcmdpblRvcCA9IFwiMXJlbVwiO1xyXG5cdFx0YnV0dG9uQmFyQ29udGFpbmVyLnN0eWxlLmdhcCA9IFwiMC41cmVtXCI7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHN1Ym1pdENsaWNrQ2FsbGJhY2sgPSAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB0aGlzLnN1Ym1pdCgpO1xyXG5cdHByaXZhdGUgY2FuY2VsQ2xpY2tDYWxsYmFjayA9IChldnQ6IE1vdXNlRXZlbnQpID0+IHRoaXMuY2FuY2VsKCk7XHJcblxyXG5cdHByaXZhdGUgc3VibWl0RW50ZXJDYWxsYmFjayA9IChldnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuXHRcdGlmICghZXZ0LmlzQ29tcG9zaW5nICYmIGV2dC5rZXkgPT09IFwiRW50ZXJcIikge1xyXG5cdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0dGhpcy5zdWJtaXQoKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRwcml2YXRlIHN1Ym1pdCgpIHtcclxuXHRcdHRoaXMuZGlkU3VibWl0ID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmNsb3NlKCk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGNhbmNlbCgpIHtcclxuXHRcdHRoaXMuY2xvc2UoKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcmVzb2x2ZUlucHV0KCkge1xyXG5cdFx0aWYgKCF0aGlzLmRpZFN1Ym1pdCkgdGhpcy5yZWplY3RQcm9taXNlKFwiTm8gaW5wdXQgZ2l2ZW4uXCIpO1xyXG5cdFx0ZWxzZSB0aGlzLnJlc29sdmVQcm9taXNlKHRoaXMuaW5wdXQpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSByZW1vdmVJbnB1dExpc3RlbmVyKCkge1xyXG5cdFx0dGhpcy5pbnB1dENvbXBvbmVudC5pbnB1dEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXHJcblx0XHRcdFwia2V5ZG93blwiLFxyXG5cdFx0XHR0aGlzLnN1Ym1pdEVudGVyQ2FsbGJhY2tcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRvbk9wZW4oKSB7XHJcblx0XHRzdXBlci5vbk9wZW4oKTtcclxuXHJcblx0XHR0aGlzLmlucHV0Q29tcG9uZW50LmlucHV0RWwuZm9jdXMoKTtcclxuXHRcdHRoaXMuaW5wdXRDb21wb25lbnQuaW5wdXRFbC5zZWxlY3QoKTtcclxuXHR9XHJcblxyXG5cdG9uQ2xvc2UoKSB7XHJcblx0XHRzdXBlci5vbkNsb3NlKCk7XHJcblx0XHR0aGlzLnJlc29sdmVJbnB1dCgpO1xyXG5cdFx0dGhpcy5yZW1vdmVJbnB1dExpc3RlbmVyKCk7XHJcblx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRpYWxvZ19wcm9tcHQoaGVhZGVyOiBzdHJpbmc9J0lucHV0JywgcGxhY2Vob2xkZXI6IHN0cmluZz0nJyx2YWx1ZTpzdHJpbmc9JycpIHtcclxuXHR0cnl7XHJcblx0XHRyZXR1cm4gYXdhaXQgSW5wdXRQcm9tcHQuUHJvbXB0KFxyXG5cdFx0XHR0aGlzLmFwcCxcclxuXHRcdFx0aGVhZGVyLFxyXG5cdFx0XHRwbGFjZWhvbGRlcixcclxuICAgICAgICAgICAgdmFsdWVcclxuXHRcdClcclxuXHR9Y2F0Y2h7XHJcblx0XHRyZXR1cm4gbnVsbFxyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgRnV6enlTdWdnZXN0TW9kYWwgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHR5cGUgeyBGdXp6eU1hdGNoICwgQXBwfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbi8vIFx1NkRGQlx1NTJBMFx1N0M3Qlx1NTc4Qlx1NThGMFx1NjYwRVxyXG5pbnRlcmZhY2UgU3VnZ2VzdGVyQ2hvb3NlciB7XHJcblx0dmFsdWVzOiB7XHJcblx0XHRpdGVtOiBzdHJpbmc7XHJcblx0XHRtYXRjaDogeyBzY29yZTogbnVtYmVyOyBtYXRjaGVzOiB1bmtub3duW10gfTtcclxuXHR9W107XHJcblx0c2VsZWN0ZWRJdGVtOiBudW1iZXI7XHJcblx0W2tleTogc3RyaW5nXTogdW5rbm93bjtcclxufVxyXG5cclxuLy8gXHU2MjY5XHU1QzU1RnV6enlTdWdnZXN0TW9kYWxcdTc2ODRcdTdDN0JcdTU3OEJcclxuaW50ZXJmYWNlIEV4dGVuZGVkRnV6enlTdWdnZXN0TW9kYWwgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxzdHJpbmc+IHtcclxuXHRjaG9vc2VyOiBTdWdnZXN0ZXJDaG9vc2VyO1xyXG59XHJcblxyXG50eXBlIE9wdGlvbnMgPSB7XHJcblx0bGltaXQ6IEZ1enp5U3VnZ2VzdE1vZGFsPHN0cmluZz5bXCJsaW1pdFwiXTtcclxuXHRlbXB0eVN0YXRlVGV4dDogRnV6enlTdWdnZXN0TW9kYWw8c3RyaW5nPltcImVtcHR5U3RhdGVUZXh0XCJdO1xyXG5cdHBsYWNlaG9sZGVyOiBQYXJhbWV0ZXJzPFxyXG5cdFx0RnV6enlTdWdnZXN0TW9kYWw8c3RyaW5nPltcInNldFBsYWNlaG9sZGVyXCJdXHJcblx0PlswXSBleHRlbmRzIHN0cmluZ1xyXG5cdFx0PyBzdHJpbmdcclxuXHRcdDogbmV2ZXI7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29weSBmcm9tIFF1aWNrQWRkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnB1dFN1Z2dlc3RlciBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPHN0cmluZz4ge1xyXG5cdHByaXZhdGUgcmVzb2x2ZVByb21pc2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG5cdHByaXZhdGUgcmVqZWN0UHJvbWlzZTogKHJlYXNvbj86IHVua25vd24pID0+IHZvaWQ7XHJcblx0cHVibGljIHByb21pc2U6IFByb21pc2U8c3RyaW5nPjtcclxuXHRwcml2YXRlIHJlc29sdmVkOiBib29sZWFuO1xyXG5cdGlucHV0RWw6IGFueTtcclxuXHJcblx0cHVibGljIHN0YXRpYyBTdWdnZXN0KFxyXG5cdFx0YXBwOiBBcHAsXHJcblx0XHRkaXNwbGF5SXRlbXM6IHN0cmluZ1tdLFxyXG5cdFx0aXRlbXM6IHN0cmluZ1tdLFxyXG5cdFx0b3B0aW9uczogUGFydGlhbDxPcHRpb25zPiA9IHt9XHJcblx0KSB7XHJcblx0XHRjb25zdCBuZXdTdWdnZXN0ZXIgPSBuZXcgSW5wdXRTdWdnZXN0ZXIoXHJcblx0XHRcdGFwcCxcclxuXHRcdFx0ZGlzcGxheUl0ZW1zLFxyXG5cdFx0XHRpdGVtcyxcclxuXHRcdFx0b3B0aW9uc1xyXG5cdFx0KTtcclxuXHRcdHJldHVybiBuZXdTdWdnZXN0ZXIucHJvbWlzZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuXHRcdGFwcDogQXBwLFxyXG5cdFx0cHJpdmF0ZSBkaXNwbGF5SXRlbXM6IHN0cmluZ1tdLFxyXG5cdFx0cHJpdmF0ZSBpdGVtczogc3RyaW5nW10sXHJcblx0XHRvcHRpb25zOiBQYXJ0aWFsPE9wdGlvbnM+ID0ge31cclxuXHQpIHtcclxuXHRcdHN1cGVyKGFwcCk7XHJcblxyXG5cdFx0dGhpcy5wcm9taXNlID0gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRoaXMucmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xyXG5cdFx0XHR0aGlzLnJlamVjdFByb21pc2UgPSByZWplY3Q7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcblx0XHRcdGlmIChldmVudC5jb2RlICE9PSBcIlRhYlwiKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBcdTRGN0ZcdTc1MjhcdTdDN0JcdTU3OEJcdTY1QURcdThBMDBcdTY3NjVcdThCQkZcdTk1RUVjaG9vc2VyXHJcblx0XHRcdGNvbnN0IHNlbGYgPSB0aGlzIGFzIHVua25vd24gYXMgRXh0ZW5kZWRGdXp6eVN1Z2dlc3RNb2RhbDtcclxuXHRcdFx0Y29uc3QgeyB2YWx1ZXMsIHNlbGVjdGVkSXRlbSB9ID0gc2VsZi5jaG9vc2VyO1xyXG5cclxuXHRcdFx0Y29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5pbnB1dEVsO1xyXG5cdFx0XHR0aGlzLmlucHV0RWwudmFsdWUgPSB2YWx1ZXNbc2VsZWN0ZWRJdGVtXS5pdGVtID8/IHZhbHVlO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0aWYgKG9wdGlvbnMucGxhY2Vob2xkZXIpIHRoaXMuc2V0UGxhY2Vob2xkZXIob3B0aW9ucy5wbGFjZWhvbGRlcik7XHJcblx0XHRpZiAob3B0aW9ucy5saW1pdCkgdGhpcy5saW1pdCA9IG9wdGlvbnMubGltaXQ7XHJcblx0XHRpZiAob3B0aW9ucy5lbXB0eVN0YXRlVGV4dClcclxuXHRcdFx0dGhpcy5lbXB0eVN0YXRlVGV4dCA9IG9wdGlvbnMuZW1wdHlTdGF0ZVRleHQ7XHJcblxyXG5cdFx0dGhpcy5vcGVuKCk7XHJcblx0fVxyXG5cclxuXHRnZXRJdGVtVGV4dChpdGVtOiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdFx0aWYgKGl0ZW0gPT09IHRoaXMuaW5wdXRFbC52YWx1ZSkgcmV0dXJuIGl0ZW07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGlzcGxheUl0ZW1zW3RoaXMuaXRlbXMuaW5kZXhPZihpdGVtKV07XHJcblx0fVxyXG5cclxuXHRnZXRJdGVtcygpOiBzdHJpbmdbXSB7XHJcblx0XHRpZiAodGhpcy5pbnB1dEVsLnZhbHVlID09PSBcIlwiKSByZXR1cm4gdGhpcy5pdGVtcztcclxuXHRcdHJldHVybiBbdGhpcy5pbnB1dEVsLnZhbHVlLCAuLi50aGlzLml0ZW1zXTtcclxuXHR9XHJcblxyXG5cdHNlbGVjdFN1Z2dlc3Rpb24oXHJcblx0XHR2YWx1ZTogRnV6enlNYXRjaDxzdHJpbmc+LFxyXG5cdFx0ZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudFxyXG5cdCkge1xyXG5cdFx0dGhpcy5yZXNvbHZlZCA9IHRydWU7XHJcblx0XHRzdXBlci5zZWxlY3RTdWdnZXN0aW9uKHZhbHVlLCBldnQpO1xyXG5cdH1cclxuXHJcblx0b25DaG9vc2VJdGVtKGl0ZW06IHN0cmluZywgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG5cdFx0dGhpcy5yZXNvbHZlZCA9IHRydWU7XHJcblx0XHR0aGlzLnJlc29sdmVQcm9taXNlKGl0ZW0pO1xyXG5cdH1cclxuXHJcblx0b25DbG9zZSgpIHtcclxuXHRcdHN1cGVyLm9uQ2xvc2UoKTtcclxuXHJcblx0XHRpZiAoIXRoaXMucmVzb2x2ZWQpIHRoaXMucmVqZWN0UHJvbWlzZShcIm5vIGlucHV0IGdpdmVuLlwiKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkaWFsb2dfc3VnZ2VzdChkaXNwbGF5SXRlbXM6QXJyYXk8c3RyaW5nPixpdGVtczpBcnJheTxhbnk+LHBsYWNlaG9sZGVyPScnKSB7XHJcblx0dHJ5e1xyXG5cdFx0cmV0dXJuIGF3YWl0IElucHV0U3VnZ2VzdGVyLlN1Z2dlc3QoXHJcblx0XHRcdHRoaXMuYXBwLFxyXG5cdFx0XHRkaXNwbGF5SXRlbXMsXHJcblx0XHRcdGl0ZW1zLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxyXG5cdFx0XHR9XHJcblx0XHQpXHJcblx0fWNhdGNoKGVycm9yKXtcclxuXHRcdFxyXG5cdFx0cmV0dXJuIG51bGxcclxuXHR9XHJcblx0XHJcbn1cclxuIiwgImltcG9ydCB0eXBlIHsgQXBwfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50LCBNb2RhbCwgVGV4dENvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuLyoqXHJcbiAqIENvcHkgZnJvbSBRdWlja0FkZFxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0UHJvbXB0IGV4dGVuZHMgTW9kYWwge1xyXG5cdHB1YmxpYyB3YWl0Rm9yQ2xvc2U6IFByb21pc2U8c3RyaW5nPjtcclxuXHJcblx0cHJpdmF0ZSByZXNvbHZlUHJvbWlzZTogKGlucHV0OiBzdHJpbmcpID0+IHZvaWQ7XHJcblx0cHJpdmF0ZSByZWplY3RQcm9taXNlOiAocmVhc29uPzogdW5rbm93bikgPT4gdm9pZDtcclxuXHRwcml2YXRlIGRpZFN1Ym1pdCA9IGZhbHNlO1xyXG5cdHByaXZhdGUgaW5wdXRDb21wb25lbnQ6IFRleHRDb21wb25lbnQ7XHJcblx0cHJpdmF0ZSBpbnB1dDogc3RyaW5nO1xyXG5cdHByaXZhdGUgcmVhZG9ubHkgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuXHJcblx0cHVibGljIHN0YXRpYyBQcm9tcHQoXHJcblx0XHRhcHA6IEFwcCxcclxuXHRcdGhlYWRlcjogc3RyaW5nLFxyXG5cdFx0cGxhY2Vob2xkZXI/OiBzdHJpbmcsXHJcblx0XHR2YWx1ZT86IHN0cmluZ1xyXG5cdCk6IFByb21pc2U8c3RyaW5nPiB7XHJcblx0XHRjb25zdCBuZXdQcm9tcHRNb2RhbCA9IG5ldyBJbnB1dFByb21wdChcclxuXHRcdFx0YXBwLFxyXG5cdFx0XHRoZWFkZXIsXHJcblx0XHRcdHBsYWNlaG9sZGVyLFxyXG5cdFx0XHR2YWx1ZVxyXG5cdFx0KTtcclxuXHRcdHJldHVybiBuZXdQcm9tcHRNb2RhbC53YWl0Rm9yQ2xvc2U7XHJcblx0fVxyXG5cclxuXHRwcm90ZWN0ZWQgY29uc3RydWN0b3IoXHJcblx0XHRhcHA6IEFwcCxcclxuXHRcdHByaXZhdGUgaGVhZGVyOiBzdHJpbmcsXHJcblx0XHRwbGFjZWhvbGRlcj86IHN0cmluZyxcclxuXHRcdHZhbHVlPzogc3RyaW5nXHJcblx0KSB7XHJcblx0XHRzdXBlcihhcHApO1xyXG5cdFx0dGhpcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyID8/IFwiXCI7XHJcblx0XHR0aGlzLmlucHV0ID0gdmFsdWUgPz8gXCJcIjtcclxuXHJcblx0XHR0aGlzLndhaXRGb3JDbG9zZSA9IG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHR0aGlzLnJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcclxuXHRcdFx0dGhpcy5yZWplY3RQcm9taXNlID0gcmVqZWN0O1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5kaXNwbGF5KCk7XHJcblx0XHR0aGlzLm9wZW4oKTtcclxuXHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGRpc3BsYXkoKSB7XHJcblx0XHR0aGlzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwicXVpY2tBZGRNb2RhbFwiLCBcInFhSW5wdXRQcm9tcHRcIik7XHJcblx0XHR0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xyXG5cdFx0dGhpcy50aXRsZUVsLnRleHRDb250ZW50ID0gdGhpcy5oZWFkZXI7XHJcblxyXG5cdFx0Y29uc3QgbWFpbkNvbnRlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCk7XHJcblx0XHR0aGlzLmlucHV0Q29tcG9uZW50ID0gdGhpcy5jcmVhdGVJbnB1dEZpZWxkKFxyXG5cdFx0XHRtYWluQ29udGVudENvbnRhaW5lcixcclxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlcixcclxuXHRcdFx0dGhpcy5pbnB1dFxyXG5cdFx0KTtcclxuXHRcdHRoaXMuY3JlYXRlQnV0dG9uQmFyKG1haW5Db250ZW50Q29udGFpbmVyKTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBjcmVhdGVJbnB1dEZpZWxkKFxyXG5cdFx0Y29udGFpbmVyOiBIVE1MRWxlbWVudCxcclxuXHRcdHBsYWNlaG9sZGVyPzogc3RyaW5nLFxyXG5cdFx0dmFsdWU/OiBzdHJpbmdcclxuXHQpIHtcclxuXHRcdGNvbnN0IHRleHRDb21wb25lbnQgPSBuZXcgVGV4dENvbXBvbmVudChjb250YWluZXIpO1xyXG5cdFx0KHRleHRDb21wb25lbnQgYXMgYW55KS5pbnB1dEVsLmNsYXNzTGlzdC5hZGQoXCJpbnB1dC1maWVsZFwiKTsgXHJcblx0XHQodGV4dENvbXBvbmVudCBhcyBhbnkpXHJcblx0XHRcdC5zZXRQbGFjZWhvbGRlcihwbGFjZWhvbGRlciA/PyBcIlwiKVxyXG5cdFx0XHQuc2V0VmFsdWUodmFsdWUgPz8gXCJcIilcclxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZTpzdHJpbmcpID0+ICh0aGlzLmlucHV0ID0gdmFsdWUpKVxyXG5cdFx0XHQuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLnN1Ym1pdEVudGVyQ2FsbGJhY2spO1xyXG5cclxuXHRcdHJldHVybiB0ZXh0Q29tcG9uZW50O1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBjcmVhdGVCdXR0b24oXHJcblx0XHRjb250YWluZXI6IEhUTUxFbGVtZW50LFxyXG5cdFx0dGV4dDogc3RyaW5nLFxyXG5cdFx0Y2FsbGJhY2s6IChldnQ6IE1vdXNlRXZlbnQpID0+IHVua25vd25cclxuXHQpIHtcclxuXHRcdGNvbnN0IGJ0biA9IG5ldyBCdXR0b25Db21wb25lbnQoY29udGFpbmVyKTtcclxuXHRcdGJ0bi5zZXRCdXR0b25UZXh0KHRleHQpLm9uQ2xpY2soY2FsbGJhY2spO1xyXG5cclxuXHRcdHJldHVybiBidG47XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGNyZWF0ZUJ1dHRvbkJhcihtYWluQ29udGVudENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdGNvbnN0IGJ1dHRvbkJhckNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQgPVxyXG5cdFx0XHRtYWluQ29udGVudENvbnRhaW5lci5jcmVhdGVEaXYoKTtcclxuXHRcdHRoaXMuY3JlYXRlQnV0dG9uKFxyXG5cdFx0XHRidXR0b25CYXJDb250YWluZXIsXHJcblx0XHRcdFwiT2tcIixcclxuXHRcdFx0dGhpcy5zdWJtaXRDbGlja0NhbGxiYWNrXHJcblx0XHQpLnNldEN0YSgpO1xyXG5cdFx0dGhpcy5jcmVhdGVCdXR0b24oXHJcblx0XHRcdGJ1dHRvbkJhckNvbnRhaW5lcixcclxuXHRcdFx0XCJDYW5jZWxcIixcclxuXHRcdFx0dGhpcy5jYW5jZWxDbGlja0NhbGxiYWNrXHJcblx0XHQpO1xyXG5cclxuXHRcdGJ1dHRvbkJhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiYnV0dG9uLWJhclwiKTtcclxuXHRcdFxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBzdWJtaXRDbGlja0NhbGxiYWNrID0gKGV2dDogTW91c2VFdmVudCkgPT4gdGhpcy5zdWJtaXQoKTtcclxuXHRwcml2YXRlIGNhbmNlbENsaWNrQ2FsbGJhY2sgPSAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB0aGlzLmNhbmNlbCgpO1xyXG5cclxuXHRwcml2YXRlIHN1Ym1pdEVudGVyQ2FsbGJhY2sgPSAoZXZ0OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcblx0XHRpZiAoIWV2dC5pc0NvbXBvc2luZyAmJiBldnQua2V5ID09PSBcIkVudGVyXCIpIHtcclxuXHRcdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdHRoaXMuc3VibWl0KCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0cHJpdmF0ZSBzdWJtaXQoKSB7XHJcblx0XHR0aGlzLmRpZFN1Ym1pdCA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5jbG9zZSgpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBjYW5jZWwoKSB7XHJcblx0XHR0aGlzLmNsb3NlKCk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHJlc29sdmVJbnB1dCgpIHtcclxuXHRcdGlmICghdGhpcy5kaWRTdWJtaXQpIHRoaXMucmVqZWN0UHJvbWlzZShcIk5vIGlucHV0IGdpdmVuLlwiKTtcclxuXHRcdGVsc2UgdGhpcy5yZXNvbHZlUHJvbWlzZSh0aGlzLmlucHV0KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcmVtb3ZlSW5wdXRMaXN0ZW5lcigpIHtcclxuXHRcdHRoaXMuaW5wdXRDb21wb25lbnQuaW5wdXRFbC5yZW1vdmVFdmVudExpc3RlbmVyKFxyXG5cdFx0XHRcImtleWRvd25cIixcclxuXHRcdFx0dGhpcy5zdWJtaXRFbnRlckNhbGxiYWNrXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0b25PcGVuKCkge1xyXG5cdFx0c3VwZXIub25PcGVuKCk7XHJcblxyXG5cdFx0dGhpcy5pbnB1dENvbXBvbmVudC5pbnB1dEVsLmZvY3VzKCk7XHJcblx0XHR0aGlzLmlucHV0Q29tcG9uZW50LmlucHV0RWwuc2VsZWN0KCk7XHJcblx0fVxyXG5cclxuXHRvbkNsb3NlKCkge1xyXG5cdFx0c3VwZXIub25DbG9zZSgpO1xyXG5cdFx0dGhpcy5yZXNvbHZlSW5wdXQoKTtcclxuXHRcdHRoaXMucmVtb3ZlSW5wdXRMaXN0ZW5lcigpO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkaWFsb2dfcHJvbXB0KGhlYWRlcjogc3RyaW5nPSdJbnB1dCcsIHBsYWNlaG9sZGVyOiBzdHJpbmc9JycsdmFsdWU6c3RyaW5nPScnKSB7XHJcblx0dHJ5e1xyXG5cdFx0cmV0dXJuIGF3YWl0IElucHV0UHJvbXB0LlByb21wdChcclxuXHRcdFx0dGhpcy5hcHAsXHJcblx0XHRcdGhlYWRlcixcclxuXHRcdFx0cGxhY2Vob2xkZXIsXHJcbiAgICAgICAgICAgIHZhbHVlXHJcblx0XHQpXHJcblx0fWNhdGNoe1xyXG5cdFx0cmV0dXJuIG51bGxcclxuXHR9XHJcbn1cclxuIiwgIlxyXG5cclxuXHJcbmltcG9ydCB7IEFwcCwgVmlldywgV29ya3NwYWNlTGVhZixURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmltcG9ydCB7RWFzeUFQSX0gZnJvbSAnc3JjL2Vhc3lhcGkvZWFzeWFwaSdcclxuXHJcbmV4cG9ydCBjbGFzcyBFYXN5RWRpdG9yIHtcclxuICAgIHlhbWxqcyA9IHJlcXVpcmUoJ2pzLXlhbWwnKTtcclxuICAgIGFwcDogQXBwO1xyXG4gICAgYXBpOiBFYXN5QVBJO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBhcGk6RWFzeUFQSSkge1xyXG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xyXG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBhc3luYyBnZXRfc2VsZWN0aW9uKGNhbmNlbF9zZWxlY3Rpb249ZmFsc2Upe1xyXG4gICAgICAgIGxldCBlZGl0b3IgPSAodGhpcy5hcHAud29ya3NwYWNlIGFzIGFueSkuZ2V0QWN0aXZlRmlsZVZpZXcoKT8uZWRpdG9yO1xyXG4gICAgICAgIGlmKGVkaXRvcil7XHJcbiAgICAgICAgICAgIGxldCBzZWwgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmKGNhbmNlbF9zZWxlY3Rpb24pe1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcdTAwQTBcclxuICAgICAgICAgICAgICAgIGF3YWl0IGVkaXRvci5zZXRTZWxlY3Rpb24oY3Vyc29yLCBjdXJzb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzZWw7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0X2NvZGVfc2VjdGlvbih0ZmlsZTpURmlsZSxjdHlwZT0nJyxpZHg9MCxhc19zaW1wbGU9dHJ1ZSl7XHJcbiAgICAgICAgbGV0IGR2bWV0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRmaWxlKTtcclxuICAgICAgICBsZXQgY3R4ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY2FjaGVkUmVhZCh0ZmlsZSk7XHJcbiAgICAgICAgbGV0IHNlY3Rpb24gPSBkdm1ldGE/LnNlY3Rpb25zPy5maWx0ZXIoeD0+eC50eXBlPT0nY29kZScpLmZpbHRlcih4PT57XHJcbiAgICAgICAgICAgIGxldCBjID0gY3R4LnNsaWNlKHgucG9zaXRpb24uc3RhcnQub2Zmc2V0LHgucG9zaXRpb24uZW5kLm9mZnNldCkudHJpbSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gYy5zdGFydHNXaXRoKCdgYGAnK2N0eXBlKSB8fCBjLnN0YXJ0c1dpdGgoJ35+ficrY3R5cGUpO1xyXG4gICAgICAgIH0pW2lkeF1cclxuICAgICAgICBpZihzZWN0aW9uKXtcclxuICAgICAgICAgICAgbGV0IGMgPSBjdHguc2xpY2UoXHJcbiAgICAgICAgICAgICAgICBzZWN0aW9uLnBvc2l0aW9uLnN0YXJ0Lm9mZnNldCxcclxuICAgICAgICAgICAgICAgIHNlY3Rpb24ucG9zaXRpb24uZW5kLm9mZnNldFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoYXNfc2ltcGxlKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjLnNsaWNlKDQrY3R5cGUubGVuZ3RoLGMubGVuZ3RoLTQpXHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOmMsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbjpzZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGN0eDpjdHhcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0X2hlYWRpbmdfc2VjdGlvbih0ZmlsZTpURmlsZSxoZWFkaW5nOnN0cmluZyxpZHg9MCwgd2l0aF9oZWFkaW5nPXRydWUpe1xyXG4gICAgICAgIGxldCBkdm1ldGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0ZmlsZSk7XHJcbiAgICAgICAgbGV0IGN0eCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNhY2hlZFJlYWQodGZpbGUpO1xyXG4gICAgICAgIGlmKCFkdm1ldGE/LmhlYWRpbmdzKXtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc2VjdGlvbiA9IGR2bWV0YT8uaGVhZGluZ3M/LmZpbHRlcih4PT54LmhlYWRpbmc9PWhlYWRpbmcpW2lkeF1cclxuICAgICAgICBpZihzZWN0aW9uKXtcclxuICAgICAgICAgICAgbGV0IGlkeCA9IGR2bWV0YS5oZWFkaW5ncy5pbmRleE9mKHNlY3Rpb24pKzE7XHJcbiAgICAgICAgICAgIHdoaWxlKGlkeDxkdm1ldGEuaGVhZGluZ3MubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgIGxldCBjc2VjID0gZHZtZXRhLmhlYWRpbmdzW2lkeF07XHJcbiAgICAgICAgICAgICAgICBpZihjc2VjLmxldmVsPD1zZWN0aW9uLmxldmVsKXtcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWR4ID0gaWR4KzE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoaWR4PGR2bWV0YS5oZWFkaW5ncy5sZW5ndGgpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGNzZWMgPSBkdm1ldGEuaGVhZGluZ3NbaWR4XTtcclxuICAgICAgICAgICAgICAgIGxldCBjID0gY3R4LnNsaWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIHdpdGhfaGVhZGluZz9zZWN0aW9uLnBvc2l0aW9uLnN0YXJ0Lm9mZnNldCA6IHNlY3Rpb24ucG9zaXRpb24uZW5kLm9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICBjc2VjLnBvc2l0aW9uLnN0YXJ0Lm9mZnNldFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGxldCBjID0gY3R4LnNsaWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIHdpdGhfaGVhZGluZz9zZWN0aW9uLnBvc2l0aW9uLnN0YXJ0Lm9mZnNldCA6IHNlY3Rpb24ucG9zaXRpb24uZW5kLm9mZnNldCxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRfY3VycmVudF9zZWN0aW9uKCl7XHJcblx0XHRsZXQgZWRpdG9yID0gdGhpcy5hcGkuY2VkaXRvcjtcclxuXHRcdGxldCB0ZmlsZSA9IHRoaXMuYXBpLmNmaWxlO1xyXG5cdFx0aWYoIWVkaXRvciB8fCAhdGZpbGUpe3JldHVybiBudWxsfVxyXG5cdFx0bGV0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuXHRcdGxldCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRmaWxlKVxyXG5cdFx0aWYoIWNhY2hlKXtyZXR1cm4gbnVsbH1cclxuXHRcdGlmKGN1cnNvcil7XHJcblx0XHRcdGxldCBzZWN0aW9uID0gY2FjaGU/LnNlY3Rpb25zPy5maWx0ZXIoXHJcblx0XHRcdFx0eD0+e3JldHVybiB4LnBvc2l0aW9uLnN0YXJ0LmxpbmU8PWN1cnNvci5saW5lICYmIHgucG9zaXRpb24uZW5kLmxpbmU+PWN1cnNvci5saW5lfVxyXG5cdFx0XHQpWzBdXHJcbiAgICAgICAgICAgIGxldCBjdHggPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKHRmaWxlKTtcclxuICAgICAgICAgICAgaWYoIXNlY3Rpb24pe3JldHVybiAnJ31cclxuXHRcdFx0cmV0dXJuIGN0eC5zbGljZShcclxuICAgICAgICAgICAgICAgIHNlY3Rpb24ucG9zaXRpb24uc3RhcnQub2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5wb3NpdGlvbi5lbmQub2Zmc2V0XHJcbiAgICAgICAgICAgIClcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG4gICAgZGljdF9zZXRfdmFsdWUoZGF0YTphbnksa2V5OnN0cmluZyx2YWx1ZTphbnkpe1xyXG5cdFx0bGV0IGl0ZW1zID0ga2V5LnRyaW0oKS5zcGxpdCgnLicpXHJcblx0XHRpZighaXRlbXMpe3JldHVybn1cclxuXHRcdGxldCBjdXJyID0gZGF0YVxyXG5cdFx0Zm9yKGxldCBpdGVtIG9mIGl0ZW1zLnNsaWNlKDAsaXRlbXMubGVuZ3RoLTEpKXtcclxuXHRcdFx0bGV0IGt2ID0gaXRlbS5tYXRjaCgvXiguKj8pKFxcWy0/XFxkK1xcXSk/JC8pIC8vIFx1NTMzOVx1OTE0RFx1NjU3MFx1N0VDNFx1N0QyMlx1NUYxNSwgXHU1OTgyIGtleVswXSBcdTYyMTYga2V5XHJcblx0XHRcdGlmKCFrdil7cmV0dXJufVxyXG5cdFx0XHRsZXQgayA9IGt2WzFdIC8vIFx1OTUyRVx1NTQwRFxyXG5cdFx0XHRpZihrdlsyXSl7IC8vIFx1NjcwOVx1N0QyMlx1NUYxNVxyXG5cdFx0XHRcdGxldCBpID0gcGFyc2VJbnQoa3ZbMl0uc2xpY2UoMSxrdlsyXS5sZW5ndGgtMSkpIC8vIFx1N0QyMlx1NUYxNVxyXG5cdFx0XHRcdGlmKCEoayBpbiBjdXJyKSl7IC8vIFx1OTUyRVx1NEUwRFx1NUI1OFx1NTcyOFxyXG5cdFx0XHRcdFx0Y3VycltrXSA9IFt7fV0gLy8gXHU1MjFCXHU1RUZBXHU3QTdBXHU2NTcwXHU3RUM0XHJcblx0XHRcdFx0XHRjdXJyID0gY3VycltrXVswXVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShjdXJyW2tdKSl7XHJcblx0XHRcdFx0XHRcdGxldCB0bXAgPSB7fVxyXG5cdFx0XHRcdFx0XHRpZihpPDApe1xyXG5cdFx0XHRcdFx0XHRcdGN1cnJba10uc3BsaWNlKC1pLTEsMCx0bXApXHJcblx0XHRcdFx0XHRcdH1lbHNlIGlmKGk8Y3VycltrXS5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHRcdGN1cnJba11baV09dG1wXHJcblx0XHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHRcdGN1cnJba10ucHVzaCh0bXApXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Y3VyciA9IHRtcFxyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdGN1cnJba10gPSBbe31dXHJcblx0XHRcdFx0XHRcdGN1cnIgPSBjdXJyW2tdWzBdXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRpZighKGsgaW4gY3Vycikpe1xyXG5cdFx0XHRcdFx0Y3VycltrXSA9IHt9XHJcblx0XHRcdFx0XHRjdXJyID0gY3VycltrXVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aWYodHlwZW9mKGN1cnJba10pIT0nb2JqZWN0Jyl7XHJcblx0XHRcdFx0XHRcdGN1cnJba10gPSB7fVxyXG5cdFx0XHRcdFx0XHRjdXJyID0gY3VycltrXVxyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdGN1cnIgPSBjdXJyW2tdXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRsZXQga3YgPSBpdGVtc1tpdGVtcy5sZW5ndGgtMV0ubWF0Y2goL14oLio/KShcXFstP1xcZCtcXF0pPyQvKVxyXG5cdFx0aWYoIWt2KXtyZXR1cm59XHJcblx0XHRsZXQgayA9IGt2WzFdXHJcblx0XHRpZihrdlsyXSl7XHJcblx0XHRcdGxldCBpID0gcGFyc2VJbnQoa3ZbMl0uc2xpY2UoMSxrdlsyXS5sZW5ndGgtMSkpXHJcblx0XHRcdGlmKGsgaW4gY3Vycil7XHJcblx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShjdXJyW2tdKSl7XHJcblx0XHRcdFx0XHRpZihpPDApe1xyXG5cdFx0XHRcdFx0XHRjdXJyW2tdLnNwbGljZSgtaS0xLDAsdmFsdWUpXHJcblx0XHRcdFx0XHR9ZWxzZSBpZihpPGN1cnJba10ubGVuZ3RoKXtcclxuXHRcdFx0XHRcdFx0Y3VycltrXVtpXSA9IHZhbHVlXHJcblx0XHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdFx0Y3VycltrXS5wdXNoKHZhbHVlKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0Y3VycltrXSA9IHZhbHVlXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRjdXJyW2tdID0gW3ZhbHVlXVxyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0Y3VycltrXSA9IHZhbHVlXHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4iLCAiXHJcblxyXG5cclxuaW1wb3J0IHsgQXBwLCBWaWV3LCBXb3Jrc3BhY2VMZWFmLFRGaWxlLFRGb2xkZXIgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbXBvcnQge0Vhc3lBUEl9IGZyb20gJ3NyYy9lYXN5YXBpL2Vhc3lhcGknXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsZSB7XHJcbiAgICBhcHA6IEFwcDtcclxuICAgIGFwaTogRWFzeUFQSTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgYXBpOkVhc3lBUEkpIHtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZV9zdHJ1Y3R1cmUodGZvbGRlcjpURm9sZGVyLCBkZXB0aCA9IDAsIGlzUm9vdCA9IHRydWUsb25seV9mb2xkZXI9ZmFsc2Usb25seV9tZD10cnVlKSB7XHJcbiAgICAgICAgbGV0IHN0cnVjdHVyZSA9ICcnO1xyXG4gICAgICAgIGNvbnN0IGluZGVudFVuaXQgPSAnICAgICc7IC8vIFx1NTE3M1x1OTUyRVx1NEZFRVx1NjUzOVx1NzBCOVx1RkYxQVx1NkJDRlx1NUM0Mlx1N0YyOVx1OEZEQiA0IFx1N0E3QVx1NjgzQ1xyXG4gICAgICAgIGNvbnN0IHZlcnRpY2FsTGluZSA9ICdcdTI1MDIgICAnOyAvLyBcdTU3ODJcdTc2RjRcdThGREVcdTYzQTVcdTdFQkZcdTVCQzZcdTVFQTZcdTU4OUVcdTVGM0FcclxuICAgICAgICBjb25zdCBpbmRlbnQgPSB2ZXJ0aWNhbExpbmUucmVwZWF0KE1hdGgubWF4KGRlcHRoIC0gMSwgMCkpICsgaW5kZW50VW5pdC5yZXBlYXQoZGVwdGggPiAwID8gMSA6IDApO1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGZvbGRlci5jaGlsZHJlbiB8fCBbXTtcclxuICAgIFxyXG4gICAgICAgIC8vIFx1NjYzRVx1NzkzQVx1NjgzOVx1NzZFRVx1NUY1NVx1NTQwRFx1NzlGMFxyXG4gICAgICAgIGlmIChpc1Jvb3QpIHtcclxuICAgICAgICAgICAgc3RydWN0dXJlICs9IGAke3Rmb2xkZXIubmFtZX0vXFxuYDtcclxuICAgICAgICAgICAgaXNSb290ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID09PSBjaGlsZHJlbi5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBjb25zdCBwcmVmaXggPSBpc0xhc3QgPyAnXHUyNTE0XHUyNTAwXHUyNTAwICcgOiAnXHUyNTFDXHUyNTAwXHUyNTAwICc7IC8vIFx1N0VERlx1NEUwMFx1N0IyNlx1NTNGN1x1OThDRVx1NjgzQ1xyXG4gICAgXHJcbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NzZFRVx1NUY1NVx1ODI4Mlx1NzBCOVx1RkYxQVx1NTg5RVx1NTJBMFx1NTc4Mlx1NzZGNFx1OEZERVx1NjNBNVx1N0VCRlx1NUJDNlx1NUVBNlxyXG4gICAgICAgICAgICAgICAgc3RydWN0dXJlICs9IGAke2luZGVudH0ke3ByZWZpeH0ke2NoaWxkLm5hbWV9L1xcbmA7XHJcbiAgICAgICAgICAgICAgICBzdHJ1Y3R1cmUgKz0gdGhpcy5nZW5lcmF0ZV9zdHJ1Y3R1cmUoY2hpbGQsIGRlcHRoICsgMSwgaXNSb290LG9ubHlfZm9sZGVyLG9ubHlfbWQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYoIW9ubHlfZm9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTY1ODdcdTRFRjZcdTgyODJcdTcwQjlcdUZGMUFcdTVCRjlcdTlGNTBcdTdCMjZcdTUzRjdcdTRFMEVcdTc2RUVcdTVGNTVcclxuICAgICAgICAgICAgICAgIGlmKG9ubHlfbWQgJiYgKGNoaWxkIGFzIFRGaWxlKS5leHRlbnNpb24hPSdtZCcpe3JldHVybn1cclxuICAgICAgICAgICAgICAgIHN0cnVjdHVyZSArPSBgJHtpbmRlbnR9JHtwcmVmaXh9JHtjaGlsZC5uYW1lfVxcbmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gc3RydWN0dXJlO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCAiaW1wb3J0IHsgQXBwLCBURmlsZSxtb21lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgRWFzeUFQSSB9IGZyb20gXCIuL2Vhc3lhcGlcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmFuZG9tIHtcclxuICAgIGFwcDpBcHA7XHJcbiAgICBlYTpFYXN5QVBJO1xyXG4gICAgY29uc3RydWN0b3IoYXBwOkFwcCxlYTpFYXN5QVBJKXtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLmVhID0gZWE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICogXHU5NjhGXHU2NzNBXHU4M0I3XHU1M0Q2IE0gXHU0RTJBXHU1MDNDXHVGRjBDXHU0RjREXHU0RThFIDBcdUZGNUVOIFx1NEU0Qlx1OTVGNFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBOIC0gXHU2NzAwXHU1OTI3XHU1MDNDXHVGRjA4XHU0RTBEXHU1MzA1XHU1NDJCXHVGRjA5XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IE0gLSBcdTk3MDBcdTg5ODFcdTgzQjdcdTUzRDZcdTc2ODRcdTk2OEZcdTY3M0FcdTY1NzBcdTY1NzBcdTkxQ0ZcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcGVhdCAtIFx1NjYyRlx1NTQyNlx1NTE0MVx1OEJCOFx1OTFDRFx1NTkwRFx1NTAzQ1xyXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXX0gLSBcdTUzMDVcdTU0MkIgTSBcdTRFMkFcdTk2OEZcdTY3M0FcdTY1NzBcdTc2ODRcdTY1NzBcdTdFQzRcclxuICAgKi9cclxuICAgIHJhbmRvbV9udW1iZXIoTjpudW1iZXIsIE06bnVtYmVyLCByZXBlYXQgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmIChNIDw9IDApIHJldHVybiBbXTtcclxuICAgICAgICBpZiAoIXJlcGVhdCAmJiBNID4gTikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcdTVGNTNcdTRFMERcdTUxNDFcdThCQjhcdTkxQ0RcdTU5MERcdTY1RjZcdUZGMENNIFx1NEUwRFx1ODBGRFx1NTkyN1x1NEU4RSBOXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgIGlmIChyZXBlYXQpIHtcclxuICAgICAgICAgICAgLy8gXHU1MTQxXHU4QkI4XHU5MUNEXHU1OTBEXHU1MDNDXHU3Njg0XHU2MEM1XHU1MUI1XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBcdTRFMERcdTUxNDFcdThCQjhcdTkxQ0RcdTU5MERcdTUwM0NcdTc2ODRcdTYwQzVcdTUxQjVcclxuICAgICAgICAgICAgY29uc3QgbnVtYmVycyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IE4gfSwgKF8sIGkpID0+IGkpO1xyXG5cclxuICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4IEZpc2hlci1ZYXRlcyBcdTZEMTdcdTcyNENcdTdCOTdcdTZDRDVcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IG51bWJlcnMubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgW251bWJlcnNbaV0sIG51bWJlcnNbal1dID0gW251bWJlcnNbal0sIG51bWJlcnNbaV1dO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBcdTUzRDZcdTUyNEQgTSBcdTRFMkFcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4ubnVtYmVycy5zbGljZSgwLCBNKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1N0VCRlx1NjAyN1x1NTQwQ1x1NEY1OVx1NzUxRlx1NjIxMFx1NTY2OCAoTENHKVxyXG4gICAgbGNnKHNlZWQ6bnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgYSA9IDE2NjQ1MjU7XHJcbiAgICAgICAgY29uc3QgYyA9IDEwMTM5MDQyMjM7XHJcbiAgICAgICAgY29uc3QgbSA9IE1hdGgucG93KDIsIDMyKTtcclxuICAgICAgICByZXR1cm4gKGEgKiBzZWVkICsgYykgJSBtO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1N0ZBXHU0RThFXHU2NUU1XHU2NzFGXHU3NTFGXHU2MjEwXHU1NkZBXHU1QjlBXHU5NjhGXHU2NzNBXHU2NTcwXHU1RThGXHU1MjE3XHJcbiAgICAgKiBAcGFyYW0ge21vbWVudH0gdCAtIFx1NjVGNlx1OTVGNFx1NUJGOVx1OEM2MVx1RkYwOFx1NEY3Rlx1NzUyOG1vbWVudC5qc1x1RkYwOVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IE4gLSBcdTk2OEZcdTY3M0FcdTY1NzBcdTgzMDNcdTU2RjRcdTRFMEFcdTk2NTBcdUZGMDgwXHU1MjMwTi0xXHVGRjA5XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gTSAtIFx1OTcwMFx1ODk4MVx1NzY4NFx1OTY4Rlx1NjczQVx1NjU3MFx1NjU3MFx1OTFDRlxyXG4gICAgICogQHJldHVybnMge251bWJlcltdfSAtIFx1NjM5Mlx1NUU4Rlx1NTQwRVx1NzY4NFx1OTY4Rlx1NjczQVx1NjU3MFx1NjU3MFx1N0VDNFxyXG4gICAgICovXHJcbiAgICByYW5kb21fbnVtYmVyX2Zvcl9kYXRlKHQ6bW9tZW50Lk1vbWVudCwgTjpudW1iZXIsIE06bnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKE0gPD0gMCkgcmV0dXJuIFtdO1xyXG4gICAgICAgIGlmIChNID49IE4pIHJldHVybiBBcnJheS5mcm9tKHtsZW5ndGg6IE59LCAoXywgaSkgPT4gaSk7XHJcblxyXG4gICAgICAgIC8vIFx1NEY3Rlx1NzUyOFx1NUU3NFx1NjcwOFx1NjVFNVx1NEY1Q1x1NEUzQVx1NzlDRFx1NUI1MFx1RkYwQ1x1Nzg2RVx1NEZERFx1NTQwQ1x1NEUwMFx1NTkyOVx1NzUxRlx1NjIxMFx1NzZGOFx1NTQwQ1x1NzY4NFx1NUU4Rlx1NTIxN1xyXG4gICAgICAgIGNvbnN0IGRhdGVTdHIgPSB0LmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xyXG4gICAgICAgIGxldCBzZWVkID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGVTdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc2VlZCA9IChzZWVkIDw8IDUpIC0gc2VlZCArIGRhdGVTdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgc2VlZCB8PSAwOyAvLyBcdThGNkNcdTYzNjJcdTRFM0EzMlx1NEY0RFx1NjU3NFx1NjU3MFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gXHU0RjdGXHU3NTI4RmlzaGVyLVlhdGVzXHU3Qjk3XHU2Q0Q1XHU3NTFGXHU2MjEwXHU5NjhGXHU2NzNBXHU2MzkyXHU1MjE3XHJcbiAgICAgICAgY29uc3QgbnVtYmVycyA9IEFycmF5LmZyb20oe2xlbmd0aDogTn0sIChfLCBpKSA9PiBpKTtcclxuICAgICAgICBsZXQgY3VycmVudFNlZWQgPSBzZWVkO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSBOIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICBjdXJyZW50U2VlZCA9IHRoaXMubGNnKGN1cnJlbnRTZWVkKTtcclxuICAgICAgICAgICAgY29uc3QgaiA9IE1hdGguYWJzKGN1cnJlbnRTZWVkKSAlIChpICsgMSk7XHJcbiAgICAgICAgICAgIFtudW1iZXJzW2ldLCBudW1iZXJzW2pdXSA9IFtudW1iZXJzW2pdLCBudW1iZXJzW2ldXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFx1NTNENlx1NTI0RE1cdTRFMkFcdTVFNzZcdTYzOTJcdTVFOEZcclxuICAgICAgICByZXR1cm4gbnVtYmVycy5zbGljZSgwLCBNKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU2ODM5XHU2MzZFXHU1QjU3XHU3QjI2XHU0RTMyXHU4RkQ0XHU1NkRFIDB+TiBcdTRFNEJcdTk1RjRcdTc2ODRcdTY1NzRcdTY1NzBcclxuICAgIHN0cmluZ190b19yYW5kb21fbnVtYmVyKHN0cjpzdHJpbmcsIE46bnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGhhc2ggPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgaGFzaCB8PSAwOyAvLyBcdThGNkNcdTYzNjJcdTRFM0EzMlx1NEY0RFx1NjU3NFx1NjU3MFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoaGFzaCkgJSBOO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NEVDRVx1NjU3MFx1N0VDNFx1NEUyRFx1OTY4Rlx1NjczQVx1ODNCN1x1NTNENiBOIFx1NEUyQVx1NTE0M1x1N0QyMFxyXG4gICAgcmFuZG9tX2VsZW1lbnRzKGFycjphbnlbXSwgbjpudW1iZXIgKSB7XHJcbiAgICAgICAgLy8gXHU1OTBEXHU1MjM2XHU2NTcwXHU3RUM0XHU5MDdGXHU1MTREXHU0RkVFXHU2NTM5XHU1MzlGXHU2NTcwXHU3RUM0XHJcbiAgICAgICAgY29uc3Qgc2h1ZmZsZWQgPSBbLi4uYXJyXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gc2h1ZmZsZWQubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XHJcbiAgICAgICAgICAgIFtzaHVmZmxlZFtpXSwgc2h1ZmZsZWRbal1dID0gW3NodWZmbGVkW2pdLCBzaHVmZmxlZFtpXV07IC8vIFx1NEVBNFx1NjM2MlxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2h1ZmZsZWQuc2xpY2UoMCwgbik7IC8vIFx1NTNENlx1NTI0RE5cdTRFMkFcclxuICAgIH1cclxuXHJcblx0X2dldF90ZmlsZXNfKGZpbHRlcjpudWxsfEZ1bmN0aW9uKXtcclxuXHRcdGxldCB0ZmlsZXMgPSB0aGlzLmVhLm5jLmNoYWluLmdldF9hbGxfdGZpbGVzKCk7XHJcblx0XHRpZihmaWx0ZXIpe1xyXG5cdFx0XHR0ZmlsZXMgPSB0ZmlsZXMuZmlsdGVyKCh4OlRGaWxlKT0+ZmlsdGVyKHgpKVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRmaWxlcztcclxuXHR9XHJcblx0cmFuZG9tX25vdGVzKG49MyxmaWx0ZXI9bnVsbCl7XHJcblx0XHRsZXQgdGZpbGVzID0gdGhpcy5fZ2V0X3RmaWxlc18oZmlsdGVyKTtcclxuXHRcdGxldCBpZHggPSB0aGlzLnJhbmRvbV9udW1iZXIodGZpbGVzLmxlbmd0aCxuKVxyXG5cdFx0dGZpbGVzID0gaWR4Lm1hcChpPT50ZmlsZXNbaV0pXHJcblx0XHRyZXR1cm4gdGZpbGVzXHJcblx0fVxyXG5cclxuICAgIHJhbmRvbV9kYWlseV9ub3RlcyhuPTMsYmVmb3JlX3RvZGF5PXRydWUsZmlsdGVyPW51bGwpe1xyXG5cdFx0bGV0IHQgPSBtb21lbnQobW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJykgKVxyXG5cdFx0bGV0IGRub3RlID0gdGhpcy5lYS5uYy5jaGFpbi5nZXRfbGFzdF9kYWlseV9ub3RlKClcclxuXHRcdGlmKGRub3RlKXtcclxuXHRcdFx0dCA9IG1vbWVudChkbm90ZS5iYXNlbmFtZSlcclxuXHRcdH1cclxuXHRcdGxldCB0ZmlsZXMgPSB0aGlzLl9nZXRfdGZpbGVzXyhmaWx0ZXIpO1xyXG5cclxuXHRcdGlmKGJlZm9yZV90b2RheSl7XHJcblx0XHRcdHRmaWxlcyA9IHRmaWxlcy5maWx0ZXIoXHJcblx0XHRcdFx0KGY6VEZpbGUpPT5mLnN0YXQuY3RpbWU8dC51bml4KCkqMTAwMFxyXG5cdFx0XHQpXHJcblx0XHR9XHJcblx0XHRsZXQgaWR4ID0gdGhpcy5yYW5kb21fbnVtYmVyX2Zvcl9kYXRlKHQsdGZpbGVzLmxlbmd0aCxuKVxyXG5cdFx0dGZpbGVzID0gaWR4Lm1hcChpPT50ZmlsZXNbaV0pXHJcblx0XHRyZXR1cm4gdGZpbGVzXHJcbiAgICB9XHJcbn0iLCAiXHJcblxyXG5pbXBvcnQgeyBBcHAsIFZpZXcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbXBvcnQge2RpYWxvZ19zdWdnZXN0fSBmcm9tICcuL2d1aS9pbnB1dFN1Z2dlc3RlcidcclxuaW1wb3J0IHtkaWFsb2dfcHJvbXB0fSBmcm9tICcuL2d1aS9pbnB1dFByb21wdCdcclxuaW1wb3J0IHsgRWFzeUVkaXRvciB9IGZyb20gJy4vZWRpdG9yJztcclxuaW1wb3J0IHsgRmlsZSB9IGZyb20gJy4vZmlsZSc7XHJcbmltcG9ydCB7IFJhbmRvbSB9IGZyb20gJy4vcmFuZG9tJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFYXN5QVBJIHtcclxuICAgIGFwcDogQXBwO1xyXG4gICAgZGlhbG9nX3N1Z2dlc3Q6IEZ1bmN0aW9uXHJcblx0ZGlhbG9nX3Byb21wdDogRnVuY3Rpb25cclxuICAgIGVkaXRvcjogRWFzeUVkaXRvclxyXG4gICAgZmlsZTogRmlsZVxyXG4gICAgcmFuZG9tOiBSYW5kb21cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dfc3VnZ2VzdCA9IGRpYWxvZ19zdWdnZXN0O1xyXG5cdFx0dGhpcy5kaWFsb2dfcHJvbXB0ID0gZGlhbG9nX3Byb21wdDtcclxuICAgICAgICB0aGlzLmVkaXRvciA9IG5ldyBFYXN5RWRpdG9yKGFwcCx0aGlzKTtcclxuICAgICAgICB0aGlzLmZpbGUgPSBuZXcgRmlsZShhcHAsdGhpcyk7XHJcbiAgICAgICAgdGhpcy5yYW5kb20gPSBuZXcgUmFuZG9tKGFwcCx0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfcGx1Z2luKG5hbWU6c3RyaW5nKXtcclxuICAgICAgICByZXR1cm4gKHRoaXMuYXBwIGFzIGFueSkucGx1Z2lucz8ucGx1Z2luc1tuYW1lXVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYygpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldF9wbHVnaW4oJ25vdGUtY2hhaW4nKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2ZpbGUoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2ZvbGRlcigpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNmaWxlPy5wYXJlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGN2aWV3KCl7XHJcbiAgICAgICAgbGV0IHZpZXcgPSAodGhpcy5hcHAud29ya3NwYWNlIGFzIGFueSkuZ2V0QWN0aXZlRmlsZVZpZXcoKVxyXG5cdFx0cmV0dXJuIHZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNlZGl0b3IoKXtcclxuICAgICAgICBsZXQgZWRpdG9yID0gdGhpcy5jdmlldz8uZWRpdG9yO1xyXG4gICAgICAgIHJldHVybiBlZGl0b3I7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIE1hcmtkb3duUmVuZGVyZXIsIFRGaWxlLFZpZXdTdGF0ZVJlc3VsdCxFdmVudFJlZn0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgTm90ZUNoYWluUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTm90ZUNvbnRlbnRWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xyXG5cdGNvbnRlbnQ6IHN0cmluZztcclxuXHRwbHVnaW46IE5vdGVDaGFpblBsdWdpbjtcclxuXHRzb3VyY2VQYXRoOiBzdHJpbmc7XHJcblx0cHJpdmF0ZSBmaWxlTW9kaWZ5SGFuZGxlcjogRXZlbnRSZWYgfCBudWxsID0gbnVsbDtcclxuXHRwcml2YXRlIGRlYm91bmNlVGltZXI6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IE5vdGVDaGFpblBsdWdpbikge1xyXG5cdFx0c3VwZXIobGVhZik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMuaWNvbiA9ICdnZXRJY29uJztcclxuXHR9XHJcblxyXG5cdGdldFZpZXdUeXBlKCkge1xyXG5cdFx0cmV0dXJuICdub3RlLWNvbnRlbnQtdmlldyc7XHJcblx0fVxyXG5cclxuXHRnZXREaXNwbGF5VGV4dCgpIHtcclxuXHRcdHJldHVybiAnTm90ZSBQcmV2aWV3JzsgXHJcblx0fVxyXG5cclxuXHRnZXRTdGF0ZSgpOiBhbnkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y29udGVudDogdGhpcy5jb250ZW50LFxyXG5cdFx0XHRzb3VyY2VQYXRoOiB0aGlzLnNvdXJjZVBhdGhcclxuXHRcdH07XHJcblx0fVxyXG5cdFxyXG5cdGFzeW5jIHNldFN0YXRlKHN0YXRlOiBhbnksIHJlc3VsdDogVmlld1N0YXRlUmVzdWx0KTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHR0aGlzLmNvbnRlbnQgPSBzdGF0ZS5jb250ZW50O1xyXG5cdFx0dGhpcy5zb3VyY2VQYXRoID0gc3RhdGUuc291cmNlUGF0aDtcclxuXHRcclxuXHRcdGF3YWl0IHRoaXMuc2V0Q29udGVudCh0aGlzLmNvbnRlbnQsIHRoaXMuc291cmNlUGF0aCk7XHJcblx0fVxyXG5cclxuXHRnZXRJY29uKCkge1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb25PcGVuKCkge1xyXG5cdFx0Y29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcclxuXHRcdGNvbnRhaW5lci5lbXB0eSgpO1xyXG5cdFx0Y29uc3QgZGl2ID0gY29udGFpbmVyLmNyZWF0ZURpdigpO1xyXG5cdFx0ZGl2LmFkZENsYXNzKCdtYXJrZG93bi1yZW5kZXJlZCcpO1xyXG5cclxuXHRcdC8vIFx1OTRGRVx1NjNBNVx1NzBCOVx1NTFGQlx1NTkwNFx1NzQwNlxyXG5cdFx0ZGl2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGUpID0+IHtcclxuXHRcdFx0Y29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcblx0XHRcdGlmICh0YXJnZXQudGFnTmFtZSA9PT0gJ0EnICYmIHRhcmdldC5oYXNDbGFzcygnaW50ZXJuYWwtbGluaycpKSB7XHJcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdGNvbnN0IGxpbmsgPSB0YXJnZXQuZ2V0QXR0cignaHJlZicpO1xyXG5cdFx0XHRcdGlmIChsaW5rKSB7XHJcblx0XHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KGxpbmssIHRoaXMuc291cmNlUGF0aCwgdHJ1ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRNYXJrZG93blJlbmRlcmVyLnJlbmRlcih0aGlzLmFwcCwgXCJcIiwgZGl2LCAnJywgdGhpcyk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzZXRDb250ZW50KGNvbnRlbnQ6IHN0cmluZywgc291cmNlUGF0aDogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG5cdFx0dGhpcy5zb3VyY2VQYXRoID0gc291cmNlUGF0aDtcclxuXHJcblx0XHRjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdO1xyXG5cdFx0Y29udGFpbmVyLmVtcHR5KCk7XHJcblx0XHRjb25zdCBkaXYgPSBjb250YWluZXIuY3JlYXRlRGl2KCk7XHJcblx0XHRkaXYuYWRkQ2xhc3MoJ21hcmtkb3duLXJlbmRlcmVkJyk7XHJcblxyXG4gICAgICAgIGF3YWl0IE1hcmtkb3duUmVuZGVyZXIucmVuZGVyKHRoaXMuYXBwLCBjb250ZW50LCBkaXYsIHNvdXJjZVBhdGgsIHRoaXMpO1xyXG5cclxuXHRcdFxyXG5cdFx0Ly8gXHU5NEZFXHU2M0E1XHU3MEI5XHU1MUZCXHU1OTA0XHU3NDA2XHJcblx0XHRkaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xyXG5cdFx0XHRjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuXHRcdFx0aWYgKHRhcmdldC50YWdOYW1lID09PSAnQScgJiYgdGFyZ2V0Lmhhc0NsYXNzKCdpbnRlcm5hbC1saW5rJykpIHtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0Y29uc3QgbGluayA9IHRhcmdldC5nZXRBdHRyKCdocmVmJyk7XHJcblx0XHRcdFx0aWYgKGxpbmspIHtcclxuXHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQobGluaywgdGhpcy5zb3VyY2VQYXRoLCB0cnVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdFxyXG5cclxuICAgICAgICAvLyBcdTI3MDUgXHU0RkVFXHU1OTBEIFBhZ2UgUHJldmlldyBcdTRFMERcdTc1MUZcdTY1NDhcclxuICAgICAgICBkaXYucXVlcnlTZWxlY3RvckFsbCgnYS5pbnRlcm5hbC1saW5rJykuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaHJlZiA9IGVsLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgICAgICAgICBpZiAoaHJlZikge1xyXG4gICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnLCBocmVmKTtcclxuICAgICAgICAgICAgICAgIGVsLnNldEF0dHIoJ2FyaWEtbGFiZWwnLCBocmVmKTtcclxuICAgICAgICAgICAgICAgIGVsLmFkZENsYXNzKCdob3Zlci1saW5rJyk7IC8vIFx1MjcwNSBcdTY4MzhcdTVGQzNcclxuICAgICAgICBcclxuXHRcdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKFwiaG92ZXItbGlua1wiLCB7XHJcblx0XHRcdFx0XHRcdGV2ZW50OiBlLFxyXG5cdFx0XHRcdFx0XHRzb3VyY2U6ICdtYXJrZG93bicsXHJcblx0XHRcdFx0XHRcdGhvdmVyUGFyZW50OiBlbCxcclxuXHRcdFx0XHRcdFx0dGFyZ2V0RWw6IGVsLFxyXG5cdFx0XHRcdFx0XHRsaW5rdGV4dDogaHJlZixcclxuXHRcdFx0XHRcdFx0c291cmNlUGF0aDogdGhpcy5zb3VyY2VQYXRoLFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuXHJcblx0XHQvLyBcdTI3MDUgXHU2NTg3XHU0RUY2XHU1M0Q4XHU1MzE2XHU3NkQxXHU1NDJDXHJcblx0XHRpZiAodGhpcy5maWxlTW9kaWZ5SGFuZGxlcikge1xyXG5cdFx0XHR0aGlzLmFwcC52YXVsdC5vZmZyZWYodGhpcy5maWxlTW9kaWZ5SGFuZGxlcik7XHJcblx0XHRcdHRoaXMuZmlsZU1vZGlmeUhhbmRsZXIgPSBudWxsO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHNvdXJjZVBhdGgpO1xyXG5cdFx0aWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG5cdFx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdFx0dGhpcy5hcHAudmF1bHQub24oJ21vZGlmeScsIChtb2RpZmllZEZpbGU6IFRGaWxlKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAobW9kaWZpZWRGaWxlLnBhdGggPT09IHNvdXJjZVBhdGgpIHtcclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuZGVib3VuY2VUaW1lcikge1xyXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5kZWJvdW5jZVRpbWVyKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR0aGlzLmRlYm91bmNlVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5hcHAudmF1bHQucmVhZChtb2RpZmllZEZpbGUpLnRoZW4oKG5ld0NvbnRlbnQpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2V0Q29udGVudChuZXdDb250ZW50LCBzb3VyY2VQYXRoKTtcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmRlYm91bmNlVGltZXIgPSBudWxsO1xyXG5cdFx0XHRcdFx0XHR9LCA1MDAwKTsgLy8gNVx1NzlEMlx1OTYzMlx1NjI5NlxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBvbkNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0Ly8gXHU2Q0U4XHU5NTAwXHU0RThCXHU0RUY2XHU3NkQxXHU1NDJDXHJcblx0XHRpZiAodGhpcy5maWxlTW9kaWZ5SGFuZGxlcikge1xyXG5cdFx0XHR0aGlzLmFwcC52YXVsdC5vZmZyZWYodGhpcy5maWxlTW9kaWZ5SGFuZGxlcik7XHJcblx0XHRcdHRoaXMuZmlsZU1vZGlmeUhhbmRsZXIgPSBudWxsO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWU8sU0FBUyxZQUFZLEtBQVEsTUFBWTtBQUVoRDtBQUVPLFNBQVMsZ0JBQWdCLE9BQWlCLFNBQU8sR0FBRTtBQUN0RCxNQUFJLE1BQU0sSUFBSSxNQUFNO0FBQ3BCLE1BQUksSUFBSSxNQUFNLE9BQU8sU0FBUyxFQUFFO0FBQ2hDLFdBQVEsSUFBRSxHQUFFLElBQUUsTUFBTSxRQUFPLEtBQUk7QUFDM0IsUUFBSSxNQUFPLElBQUksUUFBUSxTQUFTLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDakQsUUFBSSxLQUFLLEdBQUcsZ0JBQVMsTUFBTSxDQUFDLEdBQUc7QUFBQSxFQUNuQztBQUNBLFNBQU87QUFDWDtBQUVPLFNBQVMsYUFBYSxPQUFpQjtBQUMxQyxNQUFHLFNBQU8sTUFBSztBQUFDLFdBQU8sQ0FBQztBQUFBLEVB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RyxDQUFDO0FBQ2xELFlBQVEsS0FBSyxNQUFNLHFCQUFxQixLQUFLO0FBQzdDLFFBQUcsTUFBTSxTQUFPLEdBQUU7QUFDakIsVUFBSSxPQUFPLE1BQU0sS0FBSztBQUFBLFFBQ3JCLEtBQUssTUFBTTtBQUFBLFVBQ1YsTUFBTSxJQUFJLENBQUMsU0FBZSxLQUFLLE1BQU0sZ0JBQWdCLElBQUksQ0FBQztBQUFBLFFBQzNEO0FBQUEsUUFDQTtBQUFBLE1BQ0Q7QUFDQSxVQUFHLE1BQUs7QUFDUCxjQUFNLEtBQUssTUFBTSxVQUFVLElBQUk7QUFBQSxNQUNoQztBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBQ0Q7IiwKICAibmFtZXMiOiBbImRvY3VtZW50IiwgImltcG9ydF9vYnNpZGlhbiIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJzdHJpbmciLCAibW9kdWxlIiwgInJlcXVpcmVfY29tbW9uIiwgIm1vZHVsZSIsICJyZXF1aXJlX2V4Y2VwdGlvbiIsICJtb2R1bGUiLCAicmVxdWlyZV9zbmlwcGV0IiwgIm1vZHVsZSIsICJyZXF1aXJlX3R5cGUiLCAibW9kdWxlIiwgInJlcXVpcmVfc2NoZW1hIiwgIm1vZHVsZSIsICJyZXF1aXJlX3N0ciIsICJtb2R1bGUiLCAicmVxdWlyZV9zZXEiLCAibW9kdWxlIiwgInJlcXVpcmVfbWFwIiwgIm1vZHVsZSIsICJyZXF1aXJlX2ZhaWxzYWZlIiwgIm1vZHVsZSIsICJyZXF1aXJlX251bGwiLCAibW9kdWxlIiwgInJlcXVpcmVfYm9vbCIsICJtb2R1bGUiLCAicmVxdWlyZV9pbnQiLCAibW9kdWxlIiwgInJlcXVpcmVfZmxvYXQiLCAibW9kdWxlIiwgInJlcXVpcmVfanNvbiIsICJtb2R1bGUiLCAicmVxdWlyZV9jb3JlIiwgIm1vZHVsZSIsICJyZXF1aXJlX3RpbWVzdGFtcCIsICJtb2R1bGUiLCAicmVxdWlyZV9tZXJnZSIsICJtb2R1bGUiLCAicmVxdWlyZV9iaW5hcnkiLCAibW9kdWxlIiwgInJlcXVpcmVfb21hcCIsICJtb2R1bGUiLCAicmVxdWlyZV9wYWlycyIsICJtb2R1bGUiLCAicmVxdWlyZV9zZXQiLCAibW9kdWxlIiwgInJlcXVpcmVfZGVmYXVsdCIsICJtb2R1bGUiLCAicmVxdWlyZV9sb2FkZXIiLCAibW9kdWxlIiwgInJlcXVpcmVfZHVtcGVyIiwgIm1vZHVsZSIsICJzdHJpbmciLCAicmVxdWlyZV9qc195YW1sIiwgIm1vZHVsZSIsICJpbXBvcnRfb2JzaWRpYW4iLCAic2VjdGlvbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImYiLCAicmVjZW50IiwgImxlYWYiLCAidGZpbGUiLCAicHJldiIsICJ0ZmlsZSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZHJhZ01hbmFnZXIiLCAieCIsICJlIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAidGZpbGUiLCAic3JjIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAic2NlbmVzIiwgInRmaWxlIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAidmFsdWUiLCAiaW1wb3J0X29ic2lkaWFuIiwgIklucHV0U3VnZ2VzdGVyIiwgImRpYWxvZ19zdWdnZXN0IiwgImltcG9ydF9vYnNpZGlhbiIsICJJbnB1dFByb21wdCIsICJ2YWx1ZSIsICJkaWFsb2dfcHJvbXB0IiwgImlkeCIsICJrdiIsICJrIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZGlhbG9nX3N1Z2dlc3QiLCAiZGlhbG9nX3Byb21wdCIsICJpbXBvcnRfb2JzaWRpYW4iLCAidHh0IiwgInN0eWxlIiwgIm5vdGVzIl0KfQo=
