/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  array_prefix_id: () => array_prefix_id,
  check_value: () => check_value,
  concat_array: () => concat_array,
  get_customjs_func: () => get_customjs_func,
  get_plugins: () => get_plugins,
  get_str_func: () => get_str_func,
  get_tp_func: () => get_tp_func,
  get_tp_user_func: () => get_tp_user_func,
  parse_templater: () => parse_templater,
  templater$1: () => templater$1,
  toogle_note_css: () => toogle_note_css
});
function get_plugins(app, name) {
}
function array_prefix_id(items, offset = 1) {
  let res = new Array();
  let N = items.length.toString().length;
  for (let i = 0; i < items.length; i++) {
    let id = (i + offset).toString().padStart(N, "0");
    res.push(`${id} \u{1F525} ${items[i]}`);
  }
  return res;
}
function concat_array(items) {
  if (items == null) {
    return [];
  }
  if (typeof items === "string") {
    return [items];
  }
  if (!(items instanceof Array)) {
    return [items];
  }
  let res = [];
  for (let item of items) {
    if (typeof item === "string") {
      res.push(item);
    } else if (item instanceof Array) {
      res = res.concat(this.concat_array(item));
    } else {
      res.push(item);
    }
  }
  return res;
}
async function check_value(t, k, v, dt, T) {
  let i = 0;
  while (t[k] == null || !(t[k] === v)) {
    await sleep(dt);
    i = dt + dt;
    if (i > T) {
      break;
    }
  }
  if (t[k] && t[k] === v) {
    return true;
  } else {
    return false;
  }
}
function get_tp_func(app, target) {
  let templater = app.plugins.getPlugin(
    "templater-obsidian"
  );
  if (!templater) {
    return null;
  }
  let items = target.split(".");
  if (items[0].localeCompare("tp") != 0 || items.length != 3) {
    return void 0;
  }
  let modules = templater.templater.functions_generator.internal_functions.modules_array.filter(
    (item) => item.name.localeCompare(items[1]) == 0
  );
  if (modules.length == 0) {
    return void 0;
  }
  return modules[0].static_functions.get(items[2]);
}
async function get_tp_user_func(app, target) {
  if (!target.match(/^tp\.user\.\w+$/)) {
    return null;
  }
  let templater = app.plugins.getPlugin(
    "templater-obsidian"
  );
  if (!templater) {
    return null;
  }
  let items = target.split(".");
  if (items[0].localeCompare("tp") != 0 || items[1].localeCompare("user") != 0 || items.length != 3) {
    return void 0;
  }
  let funcs = await templater.templater.functions_generator.user_functions.user_script_functions.generate_user_script_functions();
  return funcs.get(items[2]);
}
async function get_customjs_func(target) {
  if (!target.match(/^(cJS|customJS|customjs|customJs)(\.\w+)+$/)) {
    return null;
  }
  let items = target.split(".");
  if (window.hasOwnProperty("cJS")) {
    let cJS = window["cJS"];
    let tmp = await cJS();
    for (let field of items.slice(1)) {
      tmp = tmp[field];
      if (!tmp) {
        return null;
      }
    }
    return tmp;
  }
}
async function get_str_func(app, target) {
  let ufunc = await get_tp_func(app, target);
  if (ufunc) {
    return ufunc;
  }
  ufunc = await get_tp_user_func(app, target);
  if (ufunc) {
    return ufunc;
  }
  ufunc = await get_customjs_func(target);
  if (ufunc) {
    return ufunc;
  }
  return null;
}
async function templater$1(app, template, active_file, target_file, extra = null) {
  const config = {
    template_file: template,
    active_file,
    target_file,
    extra,
    run_mode: "DynamicProcessor"
  };
  const plugins = app.plugins.plugins;
  const exists = plugins["templater-obsidian"];
  if (!exists) {
    new import_obsidian2.Notice("Templater is not installed. Please install it.");
    return;
  }
  const { templater } = plugins["templater-obsidian"];
  const functions = await templater.functions_generator.internal_functions.generate_object(config);
  functions.user = {};
  const userScriptFunctions = await templater.functions_generator.user_functions.user_script_functions.generate_user_script_functions(config);
  userScriptFunctions.forEach(
    (value, key) => {
      functions.user[key] = value;
    }
  );
  if (template) {
    const userSystemFunctions = await templater.functions_generator.user_functions.user_system_functions.generate_system_functions(config);
    userSystemFunctions.forEach(
      (value, key) => {
        functions.user[key] = value;
      }
    );
  }
  return async (command) => {
    return await templater.parser.parse_commands(command, functions);
  };
}
async function parse_templater(app, template, extract = true, extra = null) {
  let nc = app.plugins.getPlugin("note-chain");
  if (!nc) {
    return;
  }
  let file = nc.chain.get_tfile(template);
  if (file) {
    template = file;
  }
  let blocks;
  let template_file = null;
  if (template instanceof import_obsidian2.TFile) {
    template_file = template;
    if (extract) {
      blocks = await nc.editor.extract_templater_block(template);
    } else {
      let item = await app.vault.cachedRead(template);
      blocks = [item];
    }
  } else {
    if (extract) {
      blocks = await nc.editor.extract_templater_block(template);
    } else {
      blocks = [template];
    }
  }
  if (!template_file) {
    template_file = "";
  }
  let active_file = app.workspace.getActiveFile();
  let notes = app.vault.getMarkdownFiles();
  if (notes.length == 0) {
    return;
  }
  let target_file = notes[0];
  let templateFunc = await templater$1(app, template_file, active_file, target_file, extra = extra);
  if (templateFunc) {
    let res = [];
    for (let block of blocks) {
      let item = await templateFunc(block);
      res.push(item);
    }
    return res;
  } else {
    return [];
  }
}
async function toogle_note_css(app, document2, name, refresh = false) {
  let nc = app.plugins.getPlugin("note-chain");
  let tfile = nc.chain.get_tfile(name);
  if (!tfile) {
    let tfiles;
    if (name == "/") {
      tfiles = nc.chain.get_all_tfiles();
    } else {
      let folder = nc.chain.get_all_folders().filter((x) => x.name == name);
      if (folder.length == 0) {
        return;
      }
      tfiles = nc.utils.concat_array(
        folder.map((x) => nc.chain.get_tfiles_of_folder(x))
      );
    }
    if (tfiles.length == 0) {
      return;
    }
    tfile = await nc.chain.sugguster_note(tfiles);
    if (!tfile) {
      return;
    }
  }
  let link = document2.getElementById(tfile.basename);
  if (link && !refresh) {
    link.remove();
  } else {
    let css = await nc.editor.extract_code_block(tfile, "css");
    let inner = css.join("\n");
    if (link) {
      link.innerHTML = inner;
    } else {
      if (inner != "") {
        let styleElement = document2.createElement("style");
        styleElement.innerHTML = inner;
        styleElement.id = tfile.basename;
        document2.head.appendChild(styleElement);
      }
    }
  }
}
var import_obsidian2;
var init_utils = __esm({
  "src/utils.ts"() {
    import_obsidian2 = require("obsidian");
  }
});

// node_modules/lexorank/lib/lexoRank/lexoHelper.js
var require_lexoHelper = __commonJS({
  "node_modules/lexorank/lib/lexoRank/lexoHelper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lexoHelper = void 0;
    exports.lexoHelper = {
      arrayCopy
    };
    function arrayCopy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
      let destination = destinationIndex;
      const finalLength = sourceIndex + length;
      for (let i = sourceIndex; i < finalLength; i++) {
        destinationArray[destination] = sourceArray[i];
        ++destination;
      }
    }
  }
});

// node_modules/lexorank/lib/utils/stringBuilder.js
var require_stringBuilder = __commonJS({
  "node_modules/lexorank/lib/utils/stringBuilder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var StringBuilder = class {
      constructor(str = "") {
        this.str = str;
      }
      get length() {
        return this.str.length;
      }
      set length(value) {
        this.str = this.str.substring(0, value);
      }
      append(str) {
        this.str = this.str + str;
        return this;
      }
      remove(startIndex, length) {
        this.str = this.str.substr(0, startIndex) + this.str.substr(startIndex + length);
        return this;
      }
      insert(index, value) {
        this.str = this.str.substr(0, index) + value + this.str.substr(index);
        return this;
      }
      toString() {
        return this.str;
      }
    };
    exports.default = StringBuilder;
  }
});

// node_modules/lexorank/lib/lexoRank/lexoInteger.js
var require_lexoInteger = __commonJS({
  "node_modules/lexorank/lib/lexoRank/lexoInteger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LexoInteger = void 0;
    var lexoHelper_1 = require_lexoHelper();
    var stringBuilder_1 = require_stringBuilder();
    var LexoInteger = class {
      constructor(system, sign, mag) {
        this.sys = system;
        this.sign = sign;
        this.mag = mag;
      }
      static parse(strFull, system) {
        let str = strFull;
        let sign = 1;
        if (strFull.indexOf(system.getPositiveChar()) === 0) {
          str = strFull.substring(1);
        } else if (strFull.indexOf(system.getNegativeChar()) === 0) {
          str = strFull.substring(1);
          sign = -1;
        }
        const mag = new Array(str.length);
        let strIndex = mag.length - 1;
        for (let magIndex = 0; strIndex >= 0; ++magIndex) {
          mag[magIndex] = system.toDigit(str.charAt(strIndex));
          --strIndex;
        }
        return LexoInteger.make(system, sign, mag);
      }
      static zero(sys) {
        return new LexoInteger(sys, 0, LexoInteger.ZERO_MAG);
      }
      static one(sys) {
        return LexoInteger.make(sys, 1, LexoInteger.ONE_MAG);
      }
      static make(sys, sign, mag) {
        let actualLength;
        for (actualLength = mag.length; actualLength > 0 && mag[actualLength - 1] === 0; --actualLength) {
        }
        if (actualLength === 0) {
          return LexoInteger.zero(sys);
        }
        if (actualLength === mag.length) {
          return new LexoInteger(sys, sign, mag);
        }
        const nmag = new Array(actualLength).fill(0);
        lexoHelper_1.lexoHelper.arrayCopy(mag, 0, nmag, 0, actualLength);
        return new LexoInteger(sys, sign, nmag);
      }
      static add(sys, l, r) {
        const estimatedSize = Math.max(l.length, r.length);
        const result = new Array(estimatedSize).fill(0);
        let carry = 0;
        for (let i = 0; i < estimatedSize; ++i) {
          const lnum = i < l.length ? l[i] : 0;
          const rnum = i < r.length ? r[i] : 0;
          let sum = lnum + rnum + carry;
          for (carry = 0; sum >= sys.getBase(); sum -= sys.getBase()) {
            ++carry;
          }
          result[i] = sum;
        }
        return LexoInteger.extendWithCarry(result, carry);
      }
      static extendWithCarry(mag, carry) {
        if (carry > 0) {
          const extendedMag = new Array(mag.length + 1).fill(0);
          lexoHelper_1.lexoHelper.arrayCopy(mag, 0, extendedMag, 0, mag.length);
          extendedMag[extendedMag.length - 1] = carry;
          return extendedMag;
        }
        return mag;
      }
      static subtract(sys, l, r) {
        const rComplement = LexoInteger.complement(sys, r, l.length);
        const rSum = LexoInteger.add(sys, l, rComplement);
        rSum[rSum.length - 1] = 0;
        return LexoInteger.add(sys, rSum, LexoInteger.ONE_MAG);
      }
      static multiply(sys, l, r) {
        const result = new Array(l.length + r.length).fill(0);
        for (let li = 0; li < l.length; ++li) {
          for (let ri = 0; ri < r.length; ++ri) {
            const resultIndex = li + ri;
            for (result[resultIndex] += l[li] * r[ri]; result[resultIndex] >= sys.getBase(); result[resultIndex] -= sys.getBase()) {
              ++result[resultIndex + 1];
            }
          }
        }
        return result;
      }
      static complement(sys, mag, digits) {
        if (digits <= 0) {
          throw new Error("Expected at least 1 digit");
        }
        const nmag = new Array(digits).fill(sys.getBase() - 1);
        for (let i = 0; i < mag.length; ++i) {
          nmag[i] = sys.getBase() - 1 - mag[i];
        }
        return nmag;
      }
      static compare(l, r) {
        if (l.length < r.length) {
          return -1;
        }
        if (l.length > r.length) {
          return 1;
        }
        for (let i = l.length - 1; i >= 0; --i) {
          if (l[i] < r[i]) {
            return -1;
          }
          if (l[i] > r[i]) {
            return 1;
          }
        }
        return 0;
      }
      add(other) {
        this.checkSystem(other);
        if (this.isZero()) {
          return other;
        }
        if (other.isZero()) {
          return this;
        }
        if (this.sign !== other.sign) {
          let pos;
          if (this.sign === -1) {
            pos = this.negate();
            const val = pos.subtract(other);
            return val.negate();
          }
          pos = other.negate();
          return this.subtract(pos);
        }
        const result = LexoInteger.add(this.sys, this.mag, other.mag);
        return LexoInteger.make(this.sys, this.sign, result);
      }
      subtract(other) {
        this.checkSystem(other);
        if (this.isZero()) {
          return other.negate();
        }
        if (other.isZero()) {
          return this;
        }
        if (this.sign !== other.sign) {
          let negate;
          if (this.sign === -1) {
            negate = this.negate();
            const sum = negate.add(other);
            return sum.negate();
          }
          negate = other.negate();
          return this.add(negate);
        }
        const cmp = LexoInteger.compare(this.mag, other.mag);
        if (cmp === 0) {
          return LexoInteger.zero(this.sys);
        }
        return cmp < 0 ? LexoInteger.make(this.sys, this.sign === -1 ? 1 : -1, LexoInteger.subtract(this.sys, other.mag, this.mag)) : LexoInteger.make(this.sys, this.sign === -1 ? -1 : 1, LexoInteger.subtract(this.sys, this.mag, other.mag));
      }
      multiply(other) {
        this.checkSystem(other);
        if (this.isZero()) {
          return this;
        }
        if (other.isZero()) {
          return other;
        }
        if (this.isOneish()) {
          return this.sign === other.sign ? LexoInteger.make(this.sys, 1, other.mag) : LexoInteger.make(this.sys, -1, other.mag);
        }
        if (other.isOneish()) {
          return this.sign === other.sign ? LexoInteger.make(this.sys, 1, this.mag) : LexoInteger.make(this.sys, -1, this.mag);
        }
        const newMag = LexoInteger.multiply(this.sys, this.mag, other.mag);
        return this.sign === other.sign ? LexoInteger.make(this.sys, 1, newMag) : LexoInteger.make(this.sys, -1, newMag);
      }
      negate() {
        return this.isZero() ? this : LexoInteger.make(this.sys, this.sign === 1 ? -1 : 1, this.mag);
      }
      shiftLeft(times = 1) {
        if (times === 0) {
          return this;
        }
        if (times < 0) {
          return this.shiftRight(Math.abs(times));
        }
        const nmag = new Array(this.mag.length + times).fill(0);
        lexoHelper_1.lexoHelper.arrayCopy(this.mag, 0, nmag, times, this.mag.length);
        return LexoInteger.make(this.sys, this.sign, nmag);
      }
      shiftRight(times = 1) {
        if (this.mag.length - times <= 0) {
          return LexoInteger.zero(this.sys);
        }
        const nmag = new Array(this.mag.length - times).fill(0);
        lexoHelper_1.lexoHelper.arrayCopy(this.mag, times, nmag, 0, nmag.length);
        return LexoInteger.make(this.sys, this.sign, nmag);
      }
      complement() {
        return this.complementDigits(this.mag.length);
      }
      complementDigits(digits) {
        return LexoInteger.make(this.sys, this.sign, LexoInteger.complement(this.sys, this.mag, digits));
      }
      isZero() {
        return this.sign === 0 && this.mag.length === 1 && this.mag[0] === 0;
      }
      isOne() {
        return this.sign === 1 && this.mag.length === 1 && this.mag[0] === 1;
      }
      getMag(index) {
        return this.mag[index];
      }
      compareTo(other) {
        if (this === other) {
          return 0;
        }
        if (!other) {
          return 1;
        }
        if (this.sign === -1) {
          if (other.sign === -1) {
            const cmp = LexoInteger.compare(this.mag, other.mag);
            if (cmp === -1) {
              return 1;
            }
            return cmp === 1 ? -1 : 0;
          }
          return -1;
        }
        if (this.sign === 1) {
          return other.sign === 1 ? LexoInteger.compare(this.mag, other.mag) : 1;
        }
        if (other.sign === -1) {
          return 1;
        }
        return other.sign === 1 ? -1 : 0;
      }
      getSystem() {
        return this.sys;
      }
      format() {
        if (this.isZero()) {
          return "" + this.sys.toChar(0);
        }
        const sb = new stringBuilder_1.default();
        const var2 = this.mag;
        const var3 = var2.length;
        for (let var4 = 0; var4 < var3; ++var4) {
          const digit = var2[var4];
          sb.insert(0, this.sys.toChar(digit));
        }
        if (this.sign === -1) {
          sb.insert(0, this.sys.getNegativeChar());
        }
        return sb.toString();
      }
      equals(other) {
        if (this === other) {
          return true;
        }
        if (!other) {
          return false;
        }
        return this.sys.getBase() === other.sys.getBase() && this.compareTo(other) === 0;
      }
      toString() {
        return this.format();
      }
      isOneish() {
        return this.mag.length === 1 && this.mag[0] === 1;
      }
      checkSystem(other) {
        if (this.sys.getBase() !== other.sys.getBase()) {
          throw new Error("Expected numbers of same numeral sys");
        }
      }
    };
    exports.LexoInteger = LexoInteger;
    LexoInteger.ZERO_MAG = [0];
    LexoInteger.ONE_MAG = [1];
    LexoInteger.NEGATIVE_SIGN = -1;
    LexoInteger.ZERO_SIGN = 0;
    LexoInteger.POSITIVE_SIGN = 1;
  }
});

// node_modules/lexorank/lib/lexoRank/lexoDecimal.js
var require_lexoDecimal = __commonJS({
  "node_modules/lexorank/lib/lexoRank/lexoDecimal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LexoDecimal = void 0;
    var lexoInteger_1 = require_lexoInteger();
    var stringBuilder_1 = require_stringBuilder();
    var LexoDecimal = class {
      constructor(mag, sig) {
        this.mag = mag;
        this.sig = sig;
      }
      static half(sys) {
        const mid = sys.getBase() / 2 | 0;
        return LexoDecimal.make(lexoInteger_1.LexoInteger.make(sys, 1, [mid]), 1);
      }
      static parse(str, system) {
        const partialIndex = str.indexOf(system.getRadixPointChar());
        if (str.lastIndexOf(system.getRadixPointChar()) !== partialIndex) {
          throw new Error("More than one " + system.getRadixPointChar());
        }
        if (partialIndex < 0) {
          return LexoDecimal.make(lexoInteger_1.LexoInteger.parse(str, system), 0);
        }
        const intStr = str.substring(0, partialIndex) + str.substring(partialIndex + 1);
        return LexoDecimal.make(lexoInteger_1.LexoInteger.parse(intStr, system), str.length - 1 - partialIndex);
      }
      static from(integer) {
        return LexoDecimal.make(integer, 0);
      }
      static make(integer, sig) {
        if (integer.isZero()) {
          return new LexoDecimal(integer, 0);
        }
        let zeroCount = 0;
        for (let i = 0; i < sig && integer.getMag(i) === 0; ++i) {
          ++zeroCount;
        }
        const newInteger = integer.shiftRight(zeroCount);
        const newSig = sig - zeroCount;
        return new LexoDecimal(newInteger, newSig);
      }
      getSystem() {
        return this.mag.getSystem();
      }
      add(other) {
        let tmag = this.mag;
        let tsig = this.sig;
        let omag = other.mag;
        let osig;
        for (osig = other.sig; tsig < osig; ++tsig) {
          tmag = tmag.shiftLeft();
        }
        while (tsig > osig) {
          omag = omag.shiftLeft();
          ++osig;
        }
        return LexoDecimal.make(tmag.add(omag), tsig);
      }
      subtract(other) {
        let thisMag = this.mag;
        let thisSig = this.sig;
        let otherMag = other.mag;
        let otherSig;
        for (otherSig = other.sig; thisSig < otherSig; ++thisSig) {
          thisMag = thisMag.shiftLeft();
        }
        while (thisSig > otherSig) {
          otherMag = otherMag.shiftLeft();
          ++otherSig;
        }
        return LexoDecimal.make(thisMag.subtract(otherMag), thisSig);
      }
      multiply(other) {
        return LexoDecimal.make(this.mag.multiply(other.mag), this.sig + other.sig);
      }
      floor() {
        return this.mag.shiftRight(this.sig);
      }
      ceil() {
        if (this.isExact()) {
          return this.mag;
        }
        const floor = this.floor();
        return floor.add(lexoInteger_1.LexoInteger.one(floor.getSystem()));
      }
      isExact() {
        if (this.sig === 0) {
          return true;
        }
        for (let i = 0; i < this.sig; ++i) {
          if (this.mag.getMag(i) !== 0) {
            return false;
          }
        }
        return true;
      }
      getScale() {
        return this.sig;
      }
      setScale(nsig, ceiling = false) {
        if (nsig >= this.sig) {
          return this;
        }
        if (nsig < 0) {
          nsig = 0;
        }
        const diff = this.sig - nsig;
        let nmag = this.mag.shiftRight(diff);
        if (ceiling) {
          nmag = nmag.add(lexoInteger_1.LexoInteger.one(nmag.getSystem()));
        }
        return LexoDecimal.make(nmag, nsig);
      }
      compareTo(other) {
        if (this === other) {
          return 0;
        }
        if (!other) {
          return 1;
        }
        let tMag = this.mag;
        let oMag = other.mag;
        if (this.sig > other.sig) {
          oMag = oMag.shiftLeft(this.sig - other.sig);
        } else if (this.sig < other.sig) {
          tMag = tMag.shiftLeft(other.sig - this.sig);
        }
        return tMag.compareTo(oMag);
      }
      format() {
        const intStr = this.mag.format();
        if (this.sig === 0) {
          return intStr;
        }
        const sb = new stringBuilder_1.default(intStr);
        const head = sb[0];
        const specialHead = head === this.mag.getSystem().getPositiveChar() || head === this.mag.getSystem().getNegativeChar();
        if (specialHead) {
          sb.remove(0, 1);
        }
        while (sb.length < this.sig + 1) {
          sb.insert(0, this.mag.getSystem().toChar(0));
        }
        sb.insert(sb.length - this.sig, this.mag.getSystem().getRadixPointChar());
        if (sb.length - this.sig === 0) {
          sb.insert(0, this.mag.getSystem().toChar(0));
        }
        if (specialHead) {
          sb.insert(0, head);
        }
        return sb.toString();
      }
      equals(other) {
        if (this === other) {
          return true;
        }
        if (!other) {
          return false;
        }
        return this.mag.equals(other.mag) && this.sig === other.sig;
      }
      toString() {
        return this.format();
      }
    };
    exports.LexoDecimal = LexoDecimal;
  }
});

// node_modules/lexorank/lib/lexoRank/lexoRankBucket.js
var require_lexoRankBucket = __commonJS({
  "node_modules/lexorank/lib/lexoRank/lexoRankBucket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var lexoInteger_1 = require_lexoInteger();
    var lexoRank_1 = require_lexoRank();
    var LexoRankBucket = class {
      constructor(val) {
        this.value = lexoInteger_1.LexoInteger.parse(val, lexoRank_1.LexoRank.NUMERAL_SYSTEM);
      }
      static get BUCKET_0() {
        if (!this._BUCKET_0) {
          this._BUCKET_0 = new LexoRankBucket("0");
        }
        return this._BUCKET_0;
      }
      static get BUCKET_1() {
        if (!this._BUCKET_1) {
          this._BUCKET_1 = new LexoRankBucket("1");
        }
        return this._BUCKET_1;
      }
      static get BUCKET_2() {
        if (!this._BUCKET_2) {
          this._BUCKET_2 = new LexoRankBucket("2");
        }
        return this._BUCKET_2;
      }
      static get VALUES() {
        if (!this._VALUES) {
          this._VALUES = [LexoRankBucket.BUCKET_0, LexoRankBucket.BUCKET_1, LexoRankBucket.BUCKET_2];
        }
        return this._VALUES;
      }
      static max() {
        return LexoRankBucket.VALUES[LexoRankBucket.VALUES.length - 1];
      }
      static from(str) {
        const val = lexoInteger_1.LexoInteger.parse(str, lexoRank_1.LexoRank.NUMERAL_SYSTEM);
        const var2 = LexoRankBucket.VALUES;
        const var3 = var2.length;
        for (let var4 = 0; var4 < var3; ++var4) {
          const bucket = var2[var4];
          if (bucket.value.equals(val)) {
            return bucket;
          }
        }
        throw new Error("Unknown bucket: " + str);
      }
      static resolve(bucketId) {
        const var1 = LexoRankBucket.VALUES;
        const var2 = var1.length;
        for (let var3 = 0; var3 < var2; ++var3) {
          const bucket = var1[var3];
          if (bucket.equals(LexoRankBucket.from(bucketId.toString()))) {
            return bucket;
          }
        }
        throw new Error("No bucket found with id " + bucketId);
      }
      format() {
        return this.value.format();
      }
      next() {
        if (this.equals(LexoRankBucket.BUCKET_0)) {
          return LexoRankBucket.BUCKET_1;
        }
        if (this.equals(LexoRankBucket.BUCKET_1)) {
          return LexoRankBucket.BUCKET_2;
        }
        return this.equals(LexoRankBucket.BUCKET_2) ? LexoRankBucket.BUCKET_0 : LexoRankBucket.BUCKET_2;
      }
      prev() {
        if (this.equals(LexoRankBucket.BUCKET_0)) {
          return LexoRankBucket.BUCKET_2;
        }
        if (this.equals(LexoRankBucket.BUCKET_1)) {
          return LexoRankBucket.BUCKET_0;
        }
        return this.equals(LexoRankBucket.BUCKET_2) ? LexoRankBucket.BUCKET_1 : LexoRankBucket.BUCKET_0;
      }
      equals(other) {
        if (this === other) {
          return true;
        }
        if (!other) {
          return false;
        }
        return this.value.equals(other.value);
      }
    };
    exports.default = LexoRankBucket;
  }
});

// node_modules/lexorank/lib/numeralSystems/lexoNumeralSystem.js
var require_lexoNumeralSystem = __commonJS({
  "node_modules/lexorank/lib/numeralSystems/lexoNumeralSystem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/lexorank/lib/numeralSystems/lexoNumeralSystem10.js
var require_lexoNumeralSystem10 = __commonJS({
  "node_modules/lexorank/lib/numeralSystems/lexoNumeralSystem10.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LexoNumeralSystem10 = void 0;
    var LexoNumeralSystem10 = class {
      getBase() {
        return 10;
      }
      getPositiveChar() {
        return "+";
      }
      getNegativeChar() {
        return "-";
      }
      getRadixPointChar() {
        return ".";
      }
      toDigit(ch) {
        if (ch >= "0" && ch <= "9") {
          return ch.charCodeAt(0) - 48;
        }
        throw new Error("Not valid digit: " + ch);
      }
      toChar(digit) {
        return String.fromCharCode(digit + 48);
      }
    };
    exports.LexoNumeralSystem10 = LexoNumeralSystem10;
  }
});

// node_modules/lexorank/lib/numeralSystems/lexoNumeralSystem36.js
var require_lexoNumeralSystem36 = __commonJS({
  "node_modules/lexorank/lib/numeralSystems/lexoNumeralSystem36.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LexoNumeralSystem36 = void 0;
    var LexoNumeralSystem36 = class {
      constructor() {
        this.DIGITS = "0123456789abcdefghijklmnopqrstuvwxyz".split("");
      }
      getBase() {
        return 36;
      }
      getPositiveChar() {
        return "+";
      }
      getNegativeChar() {
        return "-";
      }
      getRadixPointChar() {
        return ":";
      }
      toDigit(ch) {
        if (ch >= "0" && ch <= "9") {
          return ch.charCodeAt(0) - 48;
        }
        if (ch >= "a" && ch <= "z") {
          return ch.charCodeAt(0) - 97 + 10;
        }
        throw new Error("Not valid digit: " + ch);
      }
      toChar(digit) {
        return this.DIGITS[digit];
      }
    };
    exports.LexoNumeralSystem36 = LexoNumeralSystem36;
  }
});

// node_modules/lexorank/lib/numeralSystems/lexoNumeralSystem64.js
var require_lexoNumeralSystem64 = __commonJS({
  "node_modules/lexorank/lib/numeralSystems/lexoNumeralSystem64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LexoNumeralSystem64 = void 0;
    var LexoNumeralSystem64 = class {
      constructor() {
        this.DIGITS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ^_abcdefghijklmnopqrstuvwxyz".split("");
      }
      getBase() {
        return 64;
      }
      getPositiveChar() {
        return "+";
      }
      getNegativeChar() {
        return "-";
      }
      getRadixPointChar() {
        return ":";
      }
      toDigit(ch) {
        if (ch >= "0" && ch <= "9") {
          return ch.charCodeAt(0) - 48;
        }
        if (ch >= "A" && ch <= "Z") {
          return ch.charCodeAt(0) - 65 + 10;
        }
        if (ch === "^") {
          return 36;
        }
        if (ch === "_") {
          return 37;
        }
        if (ch >= "a" && ch <= "z") {
          return ch.charCodeAt(0) - 97 + 38;
        }
        throw new Error("Not valid digit: " + ch);
      }
      toChar(digit) {
        return this.DIGITS[digit];
      }
    };
    exports.LexoNumeralSystem64 = LexoNumeralSystem64;
  }
});

// node_modules/lexorank/lib/numeralSystems/index.js
var require_numeralSystems = __commonJS({
  "node_modules/lexorank/lib/numeralSystems/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_lexoNumeralSystem(), exports);
    __exportStar(require_lexoNumeralSystem10(), exports);
    __exportStar(require_lexoNumeralSystem36(), exports);
    __exportStar(require_lexoNumeralSystem64(), exports);
  }
});

// node_modules/lexorank/lib/lexoRank/lexoRank.js
var require_lexoRank = __commonJS({
  "node_modules/lexorank/lib/lexoRank/lexoRank.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LexoRank = void 0;
    var lexoDecimal_1 = require_lexoDecimal();
    var lexoRankBucket_1 = require_lexoRankBucket();
    var stringBuilder_1 = require_stringBuilder();
    var numeralSystems_1 = require_numeralSystems();
    var LexoRank2 = class {
      constructor(bucket, decimal) {
        this.value = bucket.format() + "|" + LexoRank2.formatDecimal(decimal);
        this.bucket = bucket;
        this.decimal = decimal;
      }
      static get NUMERAL_SYSTEM() {
        if (!this._NUMERAL_SYSTEM) {
          this._NUMERAL_SYSTEM = new numeralSystems_1.LexoNumeralSystem36();
        }
        return this._NUMERAL_SYSTEM;
      }
      static get ZERO_DECIMAL() {
        if (!this._ZERO_DECIMAL) {
          this._ZERO_DECIMAL = lexoDecimal_1.LexoDecimal.parse("0", LexoRank2.NUMERAL_SYSTEM);
        }
        return this._ZERO_DECIMAL;
      }
      static get ONE_DECIMAL() {
        if (!this._ONE_DECIMAL) {
          this._ONE_DECIMAL = lexoDecimal_1.LexoDecimal.parse("1", LexoRank2.NUMERAL_SYSTEM);
        }
        return this._ONE_DECIMAL;
      }
      static get EIGHT_DECIMAL() {
        if (!this._EIGHT_DECIMAL) {
          this._EIGHT_DECIMAL = lexoDecimal_1.LexoDecimal.parse("8", LexoRank2.NUMERAL_SYSTEM);
        }
        return this._EIGHT_DECIMAL;
      }
      static get MIN_DECIMAL() {
        if (!this._MIN_DECIMAL) {
          this._MIN_DECIMAL = LexoRank2.ZERO_DECIMAL;
        }
        return this._MIN_DECIMAL;
      }
      static get MAX_DECIMAL() {
        if (!this._MAX_DECIMAL) {
          this._MAX_DECIMAL = lexoDecimal_1.LexoDecimal.parse("1000000", LexoRank2.NUMERAL_SYSTEM).subtract(LexoRank2.ONE_DECIMAL);
        }
        return this._MAX_DECIMAL;
      }
      static get MID_DECIMAL() {
        if (!this._MID_DECIMAL) {
          this._MID_DECIMAL = LexoRank2.between(LexoRank2.MIN_DECIMAL, LexoRank2.MAX_DECIMAL);
        }
        return this._MID_DECIMAL;
      }
      static get INITIAL_MIN_DECIMAL() {
        if (!this._INITIAL_MIN_DECIMAL) {
          this._INITIAL_MIN_DECIMAL = lexoDecimal_1.LexoDecimal.parse("100000", LexoRank2.NUMERAL_SYSTEM);
        }
        return this._INITIAL_MIN_DECIMAL;
      }
      static get INITIAL_MAX_DECIMAL() {
        if (!this._INITIAL_MAX_DECIMAL) {
          this._INITIAL_MAX_DECIMAL = lexoDecimal_1.LexoDecimal.parse(LexoRank2.NUMERAL_SYSTEM.toChar(LexoRank2.NUMERAL_SYSTEM.getBase() - 2) + "00000", LexoRank2.NUMERAL_SYSTEM);
        }
        return this._INITIAL_MAX_DECIMAL;
      }
      static min() {
        return LexoRank2.from(lexoRankBucket_1.default.BUCKET_0, LexoRank2.MIN_DECIMAL);
      }
      static middle() {
        const minLexoRank = LexoRank2.min();
        return minLexoRank.between(LexoRank2.max(minLexoRank.bucket));
      }
      static max(bucket = lexoRankBucket_1.default.BUCKET_0) {
        return LexoRank2.from(bucket, LexoRank2.MAX_DECIMAL);
      }
      static initial(bucket) {
        return bucket === lexoRankBucket_1.default.BUCKET_0 ? LexoRank2.from(bucket, LexoRank2.INITIAL_MIN_DECIMAL) : LexoRank2.from(bucket, LexoRank2.INITIAL_MAX_DECIMAL);
      }
      static between(oLeft, oRight) {
        if (oLeft.getSystem().getBase() !== oRight.getSystem().getBase()) {
          throw new Error("Expected same system");
        }
        let left = oLeft;
        let right = oRight;
        let nLeft;
        if (oLeft.getScale() < oRight.getScale()) {
          nLeft = oRight.setScale(oLeft.getScale(), false);
          if (oLeft.compareTo(nLeft) >= 0) {
            return LexoRank2.mid(oLeft, oRight);
          }
          right = nLeft;
        }
        if (oLeft.getScale() > right.getScale()) {
          nLeft = oLeft.setScale(right.getScale(), true);
          if (nLeft.compareTo(right) >= 0) {
            return LexoRank2.mid(oLeft, oRight);
          }
          left = nLeft;
        }
        let nRight;
        for (let scale = left.getScale(); scale > 0; right = nRight) {
          const nScale1 = scale - 1;
          const nLeft1 = left.setScale(nScale1, true);
          nRight = right.setScale(nScale1, false);
          const cmp = nLeft1.compareTo(nRight);
          if (cmp === 0) {
            return LexoRank2.checkMid(oLeft, oRight, nLeft1);
          }
          if (nLeft1.compareTo(nRight) > 0) {
            break;
          }
          scale = nScale1;
          left = nLeft1;
        }
        let mid = LexoRank2.middleInternal(oLeft, oRight, left, right);
        let nScale;
        for (let mScale = mid.getScale(); mScale > 0; mScale = nScale) {
          nScale = mScale - 1;
          const nMid = mid.setScale(nScale);
          if (oLeft.compareTo(nMid) >= 0 || nMid.compareTo(oRight) >= 0) {
            break;
          }
          mid = nMid;
        }
        return mid;
      }
      static parse(str) {
        const parts = str.split("|");
        const bucket = lexoRankBucket_1.default.from(parts[0]);
        const decimal = lexoDecimal_1.LexoDecimal.parse(parts[1], LexoRank2.NUMERAL_SYSTEM);
        return new LexoRank2(bucket, decimal);
      }
      static from(bucket, decimal) {
        if (decimal.getSystem().getBase() !== LexoRank2.NUMERAL_SYSTEM.getBase()) {
          throw new Error("Expected different system");
        }
        return new LexoRank2(bucket, decimal);
      }
      static middleInternal(lbound, rbound, left, right) {
        const mid = LexoRank2.mid(left, right);
        return LexoRank2.checkMid(lbound, rbound, mid);
      }
      static checkMid(lbound, rbound, mid) {
        if (lbound.compareTo(mid) >= 0) {
          return LexoRank2.mid(lbound, rbound);
        }
        return mid.compareTo(rbound) >= 0 ? LexoRank2.mid(lbound, rbound) : mid;
      }
      static mid(left, right) {
        const sum = left.add(right);
        const mid = sum.multiply(lexoDecimal_1.LexoDecimal.half(left.getSystem()));
        const scale = left.getScale() > right.getScale() ? left.getScale() : right.getScale();
        if (mid.getScale() > scale) {
          const roundDown = mid.setScale(scale, false);
          if (roundDown.compareTo(left) > 0) {
            return roundDown;
          }
          const roundUp = mid.setScale(scale, true);
          if (roundUp.compareTo(right) < 0) {
            return roundUp;
          }
        }
        return mid;
      }
      static formatDecimal(decimal) {
        const formatVal = decimal.format();
        const val = new stringBuilder_1.default(formatVal);
        let partialIndex = formatVal.indexOf(LexoRank2.NUMERAL_SYSTEM.getRadixPointChar());
        const zero = LexoRank2.NUMERAL_SYSTEM.toChar(0);
        if (partialIndex < 0) {
          partialIndex = formatVal.length;
          val.append(LexoRank2.NUMERAL_SYSTEM.getRadixPointChar());
        }
        while (partialIndex < 6) {
          val.insert(0, zero);
          ++partialIndex;
        }
        while (val[val.length - 1] === zero) {
          val.length = val.length - 1;
        }
        return val.toString();
      }
      genPrev() {
        if (this.isMax()) {
          return new LexoRank2(this.bucket, LexoRank2.INITIAL_MAX_DECIMAL);
        }
        const floorInteger = this.decimal.floor();
        const floorDecimal = lexoDecimal_1.LexoDecimal.from(floorInteger);
        let nextDecimal = floorDecimal.subtract(LexoRank2.EIGHT_DECIMAL);
        if (nextDecimal.compareTo(LexoRank2.MIN_DECIMAL) <= 0) {
          nextDecimal = LexoRank2.between(LexoRank2.MIN_DECIMAL, this.decimal);
        }
        return new LexoRank2(this.bucket, nextDecimal);
      }
      genNext() {
        if (this.isMin()) {
          return new LexoRank2(this.bucket, LexoRank2.INITIAL_MIN_DECIMAL);
        }
        const ceilInteger = this.decimal.ceil();
        const ceilDecimal = lexoDecimal_1.LexoDecimal.from(ceilInteger);
        let nextDecimal = ceilDecimal.add(LexoRank2.EIGHT_DECIMAL);
        if (nextDecimal.compareTo(LexoRank2.MAX_DECIMAL) >= 0) {
          nextDecimal = LexoRank2.between(this.decimal, LexoRank2.MAX_DECIMAL);
        }
        return new LexoRank2(this.bucket, nextDecimal);
      }
      between(other) {
        if (!this.bucket.equals(other.bucket)) {
          throw new Error("Between works only within the same bucket");
        }
        const cmp = this.decimal.compareTo(other.decimal);
        if (cmp > 0) {
          return new LexoRank2(this.bucket, LexoRank2.between(other.decimal, this.decimal));
        }
        if (cmp === 0) {
          throw new Error("Try to rank between issues with same rank this=" + this + " other=" + other + " this.decimal=" + this.decimal + " other.decimal=" + other.decimal);
        }
        return new LexoRank2(this.bucket, LexoRank2.between(this.decimal, other.decimal));
      }
      getBucket() {
        return this.bucket;
      }
      getDecimal() {
        return this.decimal;
      }
      inNextBucket() {
        return LexoRank2.from(this.bucket.next(), this.decimal);
      }
      inPrevBucket() {
        return LexoRank2.from(this.bucket.prev(), this.decimal);
      }
      isMin() {
        return this.decimal.equals(LexoRank2.MIN_DECIMAL);
      }
      isMax() {
        return this.decimal.equals(LexoRank2.MAX_DECIMAL);
      }
      format() {
        return this.value;
      }
      equals(other) {
        if (this === other) {
          return true;
        }
        if (!other) {
          return false;
        }
        return this.value === other.value;
      }
      toString() {
        return this.value;
      }
      compareTo(other) {
        if (this === other) {
          return 0;
        }
        if (!other) {
          return 1;
        }
        return this.value.localeCompare(other.value);
      }
    };
    exports.LexoRank = LexoRank2;
  }
});

// node_modules/lexorank/lib/lexoRank/index.js
var require_lexoRank2 = __commonJS({
  "node_modules/lexorank/lib/lexoRank/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_lexoRank(), exports);
    __exportStar(require_lexoRankBucket(), exports);
    __exportStar(require_lexoDecimal(), exports);
    __exportStar(require_lexoInteger(), exports);
  }
});

// node_modules/lexorank/lib/index.js
var require_lib = __commonJS({
  "node_modules/lexorank/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_lexoRank2(), exports);
    __exportStar(require_numeralSystems(), exports);
  }
});

// node_modules/js-yaml/lib/common.js
var require_common = __commonJS({
  "node_modules/js-yaml/lib/common.js"(exports, module2) {
    "use strict";
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence))
        return sequence;
      else if (isNothing(sequence))
        return [];
      return [sequence];
    }
    function extend(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    module2.exports.isNothing = isNothing;
    module2.exports.isObject = isObject;
    module2.exports.toArray = toArray;
    module2.exports.repeat = repeat;
    module2.exports.isNegativeZero = isNegativeZero;
    module2.exports.extend = extend;
  }
});

// node_modules/js-yaml/lib/exception.js
var require_exception = __commonJS({
  "node_modules/js-yaml/lib/exception.js"(exports, module2) {
    "use strict";
    function formatError(exception, compact) {
      var where = "", message = exception.reason || "(unknown reason)";
      if (!exception.mark)
        return message;
      if (exception.mark.name) {
        where += 'in "' + exception.mark.name + '" ';
      }
      where += "(" + (exception.mark.line + 1) + ":" + (exception.mark.column + 1) + ")";
      if (!compact && exception.mark.snippet) {
        where += "\n\n" + exception.mark.snippet;
      }
      return message + " " + where;
    }
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = formatError(this, false);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString(compact) {
      return this.name + ": " + formatError(this, compact);
    };
    module2.exports = YAMLException;
  }
});

// node_modules/js-yaml/lib/snippet.js
var require_snippet = __commonJS({
  "node_modules/js-yaml/lib/snippet.js"(exports, module2) {
    "use strict";
    var common = require_common();
    function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
      var head = "";
      var tail = "";
      var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
      if (position - lineStart > maxHalfLength) {
        head = " ... ";
        lineStart = position - maxHalfLength + head.length;
      }
      if (lineEnd - position > maxHalfLength) {
        tail = " ...";
        lineEnd = position + maxHalfLength - tail.length;
      }
      return {
        str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
        pos: position - lineStart + head.length
        // relative position
      };
    }
    function padStart(string, max) {
      return common.repeat(" ", max - string.length) + string;
    }
    function makeSnippet(mark, options) {
      options = Object.create(options || null);
      if (!mark.buffer)
        return null;
      if (!options.maxLength)
        options.maxLength = 79;
      if (typeof options.indent !== "number")
        options.indent = 1;
      if (typeof options.linesBefore !== "number")
        options.linesBefore = 3;
      if (typeof options.linesAfter !== "number")
        options.linesAfter = 2;
      var re = /\r?\n|\r|\0/g;
      var lineStarts = [0];
      var lineEnds = [];
      var match;
      var foundLineNo = -1;
      while (match = re.exec(mark.buffer)) {
        lineEnds.push(match.index);
        lineStarts.push(match.index + match[0].length);
        if (mark.position <= match.index && foundLineNo < 0) {
          foundLineNo = lineStarts.length - 2;
        }
      }
      if (foundLineNo < 0)
        foundLineNo = lineStarts.length - 1;
      var result = "", i, line;
      var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
      var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
      for (i = 1; i <= options.linesBefore; i++) {
        if (foundLineNo - i < 0)
          break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo - i],
          lineEnds[foundLineNo - i],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
          maxLineLength
        );
        result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
      }
      line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
      result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
      for (i = 1; i <= options.linesAfter; i++) {
        if (foundLineNo + i >= lineEnds.length)
          break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo + i],
          lineEnds[foundLineNo + i],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
          maxLineLength
        );
        result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      }
      return result.replace(/\n$/, "");
    }
    module2.exports = makeSnippet;
  }
});

// node_modules/js-yaml/lib/type.js
var require_type = __commonJS({
  "node_modules/js-yaml/lib/type.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "multi",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "representName",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.options = options;
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.representName = options["representName"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.multi = options["multi"] || false;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    module2.exports = Type;
  }
});

// node_modules/js-yaml/lib/schema.js
var require_schema = __commonJS({
  "node_modules/js-yaml/lib/schema.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception();
    var Type = require_type();
    function compileList(schema, name) {
      var result = [];
      schema[name].forEach(function(currentType) {
        var newIndex = result.length;
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
            newIndex = previousIndex;
          }
        });
        result[newIndex] = currentType;
      });
      return result;
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;
      function collectType(type) {
        if (type.multi) {
          result.multi[type.kind].push(type);
          result.multi["fallback"].push(type);
        } else {
          result[type.kind][type.tag] = result["fallback"][type.tag] = type;
        }
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      return this.extend(definition);
    }
    Schema.prototype.extend = function extend(definition) {
      var implicit = [];
      var explicit = [];
      if (definition instanceof Type) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit)
          implicit = implicit.concat(definition.implicit);
        if (definition.explicit)
          explicit = explicit.concat(definition.explicit);
      } else {
        throw new YAMLException("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type.multi) {
          throw new YAMLException("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema.prototype);
      result.implicit = (this.implicit || []).concat(implicit);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    module2.exports = Schema;
  }
});

// node_modules/js-yaml/lib/type/str.js
var require_str = __commonJS({
  "node_modules/js-yaml/lib/type/str.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  }
});

// node_modules/js-yaml/lib/type/seq.js
var require_seq = __commonJS({
  "node_modules/js-yaml/lib/type/seq.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  }
});

// node_modules/js-yaml/lib/type/map.js
var require_map = __commonJS({
  "node_modules/js-yaml/lib/type/map.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  }
});

// node_modules/js-yaml/lib/schema/failsafe.js
var require_failsafe = __commonJS({
  "node_modules/js-yaml/lib/schema/failsafe.js"(exports, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      explicit: [
        require_str(),
        require_seq(),
        require_map()
      ]
    });
  }
});

// node_modules/js-yaml/lib/type/null.js
var require_null = __commonJS({
  "node_modules/js-yaml/lib/type/null.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlNull(data) {
      if (data === null)
        return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/type/bool.js
var require_bool = __commonJS({
  "node_modules/js-yaml/lib/type/bool.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlBoolean(data) {
      if (data === null)
        return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    module2.exports = new Type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/type/int.js
var require_int = __commonJS({
  "node_modules/js-yaml/lib/type/int.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var Type = require_type();
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null)
        return false;
      var max = data.length, index = 0, hasDigits = false, ch;
      if (!max)
        return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max)
          return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (ch !== "0" && ch !== "1")
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isHexCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "o") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isOctCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
      }
      if (ch === "_")
        return false;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_")
        return false;
      return true;
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch;
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-")
          sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0")
        return 0;
      if (ch === "0") {
        if (value[1] === "b")
          return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x")
          return sign * parseInt(value.slice(2), 16);
        if (value[1] === "o")
          return sign * parseInt(value.slice(2), 8);
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  }
});

// node_modules/js-yaml/lib/type/float.js
var require_float = __commonJS({
  "node_modules/js-yaml/lib/type/float.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var Type = require_type();
    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null)
        return false;
      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/schema/json.js
var require_json = __commonJS({
  "node_modules/js-yaml/lib/schema/json.js"(exports, module2) {
    "use strict";
    module2.exports = require_failsafe().extend({
      implicit: [
        require_null(),
        require_bool(),
        require_int(),
        require_float()
      ]
    });
  }
});

// node_modules/js-yaml/lib/schema/core.js
var require_core = __commonJS({
  "node_modules/js-yaml/lib/schema/core.js"(exports, module2) {
    "use strict";
    module2.exports = require_json();
  }
});

// node_modules/js-yaml/lib/type/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/js-yaml/lib/type/timestamp.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    var YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    function resolveYamlTimestamp(data) {
      if (data === null)
        return false;
      if (YAML_DATE_REGEXP.exec(data) !== null)
        return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
        return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null)
        match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null)
        throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-")
          delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta)
        date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    module2.exports = new Type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  }
});

// node_modules/js-yaml/lib/type/merge.js
var require_merge = __commonJS({
  "node_modules/js-yaml/lib/type/merge.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  }
});

// node_modules/js-yaml/lib/type/binary.js
var require_binary = __commonJS({
  "node_modules/js-yaml/lib/type/binary.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null)
        return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64)
          continue;
        if (code < 0)
          return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      return new Uint8Array(result);
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(obj) {
      return Object.prototype.toString.call(obj) === "[object Uint8Array]";
    }
    module2.exports = new Type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  }
});

// node_modules/js-yaml/lib/type/omap.js
var require_omap = __commonJS({
  "node_modules/js-yaml/lib/type/omap.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null)
        return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]")
          return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey)
              pairHasKey = true;
            else
              return false;
          }
        }
        if (!pairHasKey)
          return false;
        if (objectKeys.indexOf(pairKey) === -1)
          objectKeys.push(pairKey);
        else
          return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    module2.exports = new Type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  }
});

// node_modules/js-yaml/lib/type/pairs.js
var require_pairs = __commonJS({
  "node_modules/js-yaml/lib/type/pairs.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _toString = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null)
        return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== "[object Object]")
          return false;
        keys = Object.keys(pair);
        if (keys.length !== 1)
          return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null)
        return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    module2.exports = new Type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  }
});

// node_modules/js-yaml/lib/type/set.js
var require_set = __commonJS({
  "node_modules/js-yaml/lib/type/set.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null)
        return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null)
            return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    module2.exports = new Type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  }
});

// node_modules/js-yaml/lib/schema/default.js
var require_default = __commonJS({
  "node_modules/js-yaml/lib/schema/default.js"(exports, module2) {
    "use strict";
    module2.exports = require_core().extend({
      implicit: [
        require_timestamp(),
        require_merge()
      ],
      explicit: [
        require_binary(),
        require_omap(),
        require_pairs(),
        require_set()
      ]
    });
  }
});

// node_modules/js-yaml/lib/loader.js
var require_loader = __commonJS({
  "node_modules/js-yaml/lib/loader.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var makeSnippet = require_snippet();
    var DEFAULT_SCHEMA = require_default();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode(
        (c - 65536 >> 10) + 55296,
        (c - 65536 & 1023) + 56320
      );
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    var i;
    function State(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.firstTabInLine = -1;
      this.documents = [];
    }
    function generateError(state, message) {
      var mark = {
        name: state.filename,
        buffer: state.input.slice(0, -1),
        // omit trailing \0
        position: state.position,
        line: state.line,
        column: state.position - state.lineStart
      };
      mark.snippet = makeSnippet(mark);
      return new YAMLException(message, mark);
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.lineStart = startLineStart || state.lineStart;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        if (keyNode === "__proto__") {
          Object.defineProperty(_result, keyNode, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: valueNode
          });
        } else {
          _result[keyNode] = valueNode;
        }
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
      state.firstTabInLine = -1;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          if (ch === 9 && state.firstTabInLine === -1) {
            state.firstTabInLine = state.position;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        } else if (ch === 44) {
          throwError(state, "expected the node content, but found ','");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        _lineStart = state.lineStart;
        _pos = state.position;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (!atExplicitKey && state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else {
          _keyLine = state.line;
          _keyLineStart = state.lineStart;
          _keyPos = state.position;
          if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            break;
          }
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (atExplicitKey) {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
          }
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33)
        return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      try {
        tagName = decodeURIComponent(tagName);
      } catch (err) {
        throwError(state, "tag name is malformed: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38)
        return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42)
        return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag === null) {
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      } else if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type = state.implicitTypes[typeIndex];
          if (type.resolve(state.result)) {
            state.result = type.construct(state.result);
            state.tag = type.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (state.tag !== "!") {
        if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
        } else {
          type = null;
          typeList = state.typeMap.multi[state.kind || "fallback"];
          for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
            if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
              type = typeList[typeIndex];
              break;
            }
          }
        }
        if (!type) {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
        if (state.result !== null && type.kind !== state.kind) {
          throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
        }
        if (!type.resolve(state.result, state.tag)) {
          throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type.construct(state.result, state.tag);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = /* @__PURE__ */ Object.create(null);
      state.anchorMap = /* @__PURE__ */ Object.create(null);
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch))
            break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0)
          readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    module2.exports.loadAll = loadAll;
    module2.exports.load = load;
  }
});

// node_modules/js-yaml/lib/dumper.js
var require_dumper = __commonJS({
  "node_modules/js-yaml/lib/dumper.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var DEFAULT_SCHEMA = require_default();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_BOM = 65279;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null)
        return {};
      result = {};
      keys = Object.keys(map);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    var QUOTING_TYPE_SINGLE = 1;
    var QUOTING_TYPE_DOUBLE = 2;
    function State(options) {
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
      this.forceQuotes = options["forceQuotes"] || false;
      this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n")
          result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str) {
      var index, length, type;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
    }
    function isNsCharOrWhitespace(c) {
      return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev, inblock) {
      var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
      var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
      return (
        // ns-plain-safe
        (inblock ? (
          // c = flow-in
          cIsNsCharOrWhitespace
        ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
      );
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function isPlainSafeLast(c) {
      return !isWhitespace(c) && c !== CHAR_COLON;
    }
    function codePointAt(string, pos) {
      var first = string.charCodeAt(pos), second;
      if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
        second = string.charCodeAt(pos + 1);
        if (second >= 56320 && second <= 57343) {
          return (first - 55296) * 1024 + second - 56320 + 65536;
        }
      }
      return first;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
      var i;
      var char = 0;
      var prevChar = null;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
      if (singleLineOnly || forceQuotes) {
        for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
          char = codePointAt(string, i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
      } else {
        for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
          char = codePointAt(string, i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        if (plain && !forceQuotes && !testAmbiguousType(string)) {
          return STYLE_PLAIN;
        }
        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      if (!forceQuotes) {
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    function writeScalar(state, string, level, iskey, inblock) {
      state.dump = function() {
        if (string.length === 0) {
          return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
        }
        if (!state.noCompatMode) {
          if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
            return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
          }
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(
          string,
          singleLineOnly,
          state.indent,
          lineWidth,
          testAmbiguity,
          state.quotingType,
          state.forceQuotes && !iskey,
          inblock
        )) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ")
        return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char = 0;
      var escapeSeq;
      for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
        char = codePointAt(string, i);
        escapeSeq = ESCAPE_SEQUENCES[char];
        if (!escapeSeq && isPrintable(char)) {
          result += string[i];
          if (char >= 65536)
            result += string[i + 1];
        } else {
          result += escapeSeq || encodeHex(char);
        }
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
          if (_result !== "")
            _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
          if (!compact || _result !== "") {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (_result !== "")
          pairBuffer += ", ";
        if (state.condenseFlow)
          pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024)
          pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || _result !== "") {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          if (explicit) {
            if (type.multi && type.representName) {
              state.tag = type.representName(object);
            } else {
              state.tag = type.tag;
            }
          } else {
            state.tag = "?";
          }
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey, isblockseq) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      var inblock = block;
      var tagStr;
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          if (block && state.dump.length !== 0) {
            if (state.noArrayIndent && !isblockseq && level > 0) {
              writeBlockSequence(state, level - 1, state.dump, compact);
            } else {
              writeBlockSequence(state, level, state.dump, compact);
            }
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey, inblock);
          }
        } else if (type === "[object Undefined]") {
          return false;
        } else {
          if (state.skipInvalid)
            return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          tagStr = encodeURI(
            state.tag[0] === "!" ? state.tag.slice(1) : state.tag
          ).replace(/!/g, "%21");
          if (state.tag[0] === "!") {
            tagStr = "!" + tagStr;
          } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
            tagStr = "!!" + tagStr.slice(18);
          } else {
            tagStr = "!<" + tagStr + ">";
          }
          state.dump = tagStr + " " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs)
        getDuplicateReferences(input, state);
      var value = input;
      if (state.replacer) {
        value = state.replacer.call({ "": value }, "", value);
      }
      if (writeNode(state, 0, value, true, true))
        return state.dump + "\n";
      return "";
    }
    module2.exports.dump = dump;
  }
});

// node_modules/js-yaml/index.js
var require_js_yaml = __commonJS({
  "node_modules/js-yaml/index.js"(exports, module2) {
    "use strict";
    var loader = require_loader();
    var dumper = require_dumper();
    function renamed(from, to) {
      return function() {
        throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
      };
    }
    module2.exports.Type = require_type();
    module2.exports.Schema = require_schema();
    module2.exports.FAILSAFE_SCHEMA = require_failsafe();
    module2.exports.JSON_SCHEMA = require_json();
    module2.exports.CORE_SCHEMA = require_core();
    module2.exports.DEFAULT_SCHEMA = require_default();
    module2.exports.load = loader.load;
    module2.exports.loadAll = loader.loadAll;
    module2.exports.dump = dumper.dump;
    module2.exports.YAMLException = require_exception();
    module2.exports.types = {
      binary: require_binary(),
      float: require_float(),
      map: require_map(),
      null: require_null(),
      pairs: require_pairs(),
      set: require_set(),
      timestamp: require_timestamp(),
      bool: require_bool(),
      int: require_int(),
      merge: require_merge(),
      omap: require_omap(),
      seq: require_seq(),
      str: require_str()
    };
    module2.exports.safeLoad = renamed("safeLoad", "load");
    module2.exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
    module2.exports.safeDump = renamed("safeDump", "dump");
  }
});

// ../easyapi/node_modules/js-yaml/lib/common.js
var require_common2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/common.js"(exports, module2) {
    "use strict";
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence))
        return sequence;
      else if (isNothing(sequence))
        return [];
      return [sequence];
    }
    function extend(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    module2.exports.isNothing = isNothing;
    module2.exports.isObject = isObject;
    module2.exports.toArray = toArray;
    module2.exports.repeat = repeat;
    module2.exports.isNegativeZero = isNegativeZero;
    module2.exports.extend = extend;
  }
});

// ../easyapi/node_modules/js-yaml/lib/exception.js
var require_exception2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/exception.js"(exports, module2) {
    "use strict";
    function formatError(exception, compact) {
      var where = "", message = exception.reason || "(unknown reason)";
      if (!exception.mark)
        return message;
      if (exception.mark.name) {
        where += 'in "' + exception.mark.name + '" ';
      }
      where += "(" + (exception.mark.line + 1) + ":" + (exception.mark.column + 1) + ")";
      if (!compact && exception.mark.snippet) {
        where += "\n\n" + exception.mark.snippet;
      }
      return message + " " + where;
    }
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = formatError(this, false);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString(compact) {
      return this.name + ": " + formatError(this, compact);
    };
    module2.exports = YAMLException;
  }
});

// ../easyapi/node_modules/js-yaml/lib/snippet.js
var require_snippet2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/snippet.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
      var head = "";
      var tail = "";
      var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
      if (position - lineStart > maxHalfLength) {
        head = " ... ";
        lineStart = position - maxHalfLength + head.length;
      }
      if (lineEnd - position > maxHalfLength) {
        tail = " ...";
        lineEnd = position + maxHalfLength - tail.length;
      }
      return {
        str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
        pos: position - lineStart + head.length
        // relative position
      };
    }
    function padStart(string, max) {
      return common.repeat(" ", max - string.length) + string;
    }
    function makeSnippet(mark, options) {
      options = Object.create(options || null);
      if (!mark.buffer)
        return null;
      if (!options.maxLength)
        options.maxLength = 79;
      if (typeof options.indent !== "number")
        options.indent = 1;
      if (typeof options.linesBefore !== "number")
        options.linesBefore = 3;
      if (typeof options.linesAfter !== "number")
        options.linesAfter = 2;
      var re = /\r?\n|\r|\0/g;
      var lineStarts = [0];
      var lineEnds = [];
      var match;
      var foundLineNo = -1;
      while (match = re.exec(mark.buffer)) {
        lineEnds.push(match.index);
        lineStarts.push(match.index + match[0].length);
        if (mark.position <= match.index && foundLineNo < 0) {
          foundLineNo = lineStarts.length - 2;
        }
      }
      if (foundLineNo < 0)
        foundLineNo = lineStarts.length - 1;
      var result = "", i, line;
      var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
      var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
      for (i = 1; i <= options.linesBefore; i++) {
        if (foundLineNo - i < 0)
          break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo - i],
          lineEnds[foundLineNo - i],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
          maxLineLength
        );
        result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
      }
      line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
      result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
      for (i = 1; i <= options.linesAfter; i++) {
        if (foundLineNo + i >= lineEnds.length)
          break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo + i],
          lineEnds[foundLineNo + i],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
          maxLineLength
        );
        result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      }
      return result.replace(/\n$/, "");
    }
    module2.exports = makeSnippet;
  }
});

// ../easyapi/node_modules/js-yaml/lib/type.js
var require_type2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception2();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "multi",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "representName",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.options = options;
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.representName = options["representName"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.multi = options["multi"] || false;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    module2.exports = Type;
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema.js
var require_schema2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception2();
    var Type = require_type2();
    function compileList(schema, name) {
      var result = [];
      schema[name].forEach(function(currentType) {
        var newIndex = result.length;
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
            newIndex = previousIndex;
          }
        });
        result[newIndex] = currentType;
      });
      return result;
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;
      function collectType(type) {
        if (type.multi) {
          result.multi[type.kind].push(type);
          result.multi["fallback"].push(type);
        } else {
          result[type.kind][type.tag] = result["fallback"][type.tag] = type;
        }
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      return this.extend(definition);
    }
    Schema.prototype.extend = function extend(definition) {
      var implicit = [];
      var explicit = [];
      if (definition instanceof Type) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit)
          implicit = implicit.concat(definition.implicit);
        if (definition.explicit)
          explicit = explicit.concat(definition.explicit);
      } else {
        throw new YAMLException("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type.multi) {
          throw new YAMLException("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema.prototype);
      result.implicit = (this.implicit || []).concat(implicit);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    module2.exports = Schema;
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/str.js
var require_str2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/str.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    module2.exports = new Type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/seq.js
var require_seq2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/seq.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    module2.exports = new Type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/map.js
var require_map2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/map.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    module2.exports = new Type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema/failsafe.js
var require_failsafe2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema/failsafe.js"(exports, module2) {
    "use strict";
    var Schema = require_schema2();
    module2.exports = new Schema({
      explicit: [
        require_str2(),
        require_seq2(),
        require_map2()
      ]
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/null.js
var require_null2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/null.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    function resolveYamlNull(data) {
      if (data === null)
        return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/bool.js
var require_bool2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/bool.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    function resolveYamlBoolean(data) {
      if (data === null)
        return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    module2.exports = new Type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/int.js
var require_int2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/int.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    var Type = require_type2();
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null)
        return false;
      var max = data.length, index = 0, hasDigits = false, ch;
      if (!max)
        return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max)
          return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (ch !== "0" && ch !== "1")
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isHexCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "o") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isOctCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
      }
      if (ch === "_")
        return false;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_")
        return false;
      return true;
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch;
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-")
          sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0")
        return 0;
      if (ch === "0") {
        if (value[1] === "b")
          return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x")
          return sign * parseInt(value.slice(2), 16);
        if (value[1] === "o")
          return sign * parseInt(value.slice(2), 8);
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/float.js
var require_float2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/float.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    var Type = require_type2();
    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null)
        return false;
      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema/json.js
var require_json2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema/json.js"(exports, module2) {
    "use strict";
    module2.exports = require_failsafe2().extend({
      implicit: [
        require_null2(),
        require_bool2(),
        require_int2(),
        require_float2()
      ]
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema/core.js
var require_core2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema/core.js"(exports, module2) {
    "use strict";
    module2.exports = require_json2();
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/timestamp.js
var require_timestamp2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/timestamp.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    var YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    function resolveYamlTimestamp(data) {
      if (data === null)
        return false;
      if (YAML_DATE_REGEXP.exec(data) !== null)
        return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
        return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null)
        match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null)
        throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-")
          delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta)
        date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    module2.exports = new Type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/merge.js
var require_merge2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/merge.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/binary.js
var require_binary2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/binary.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null)
        return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64)
          continue;
        if (code < 0)
          return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      return new Uint8Array(result);
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(obj) {
      return Object.prototype.toString.call(obj) === "[object Uint8Array]";
    }
    module2.exports = new Type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/omap.js
var require_omap2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/omap.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null)
        return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]")
          return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey)
              pairHasKey = true;
            else
              return false;
          }
        }
        if (!pairHasKey)
          return false;
        if (objectKeys.indexOf(pairKey) === -1)
          objectKeys.push(pairKey);
        else
          return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    module2.exports = new Type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/pairs.js
var require_pairs2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/pairs.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var _toString = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null)
        return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== "[object Object]")
          return false;
        keys = Object.keys(pair);
        if (keys.length !== 1)
          return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null)
        return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    module2.exports = new Type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/type/set.js
var require_set2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/type/set.js"(exports, module2) {
    "use strict";
    var Type = require_type2();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null)
        return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null)
            return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    module2.exports = new Type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/schema/default.js
var require_default2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/schema/default.js"(exports, module2) {
    "use strict";
    module2.exports = require_core2().extend({
      implicit: [
        require_timestamp2(),
        require_merge2()
      ],
      explicit: [
        require_binary2(),
        require_omap2(),
        require_pairs2(),
        require_set2()
      ]
    });
  }
});

// ../easyapi/node_modules/js-yaml/lib/loader.js
var require_loader2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/loader.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    var YAMLException = require_exception2();
    var makeSnippet = require_snippet2();
    var DEFAULT_SCHEMA = require_default2();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode(
        (c - 65536 >> 10) + 55296,
        (c - 65536 & 1023) + 56320
      );
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    var i;
    function State(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.firstTabInLine = -1;
      this.documents = [];
    }
    function generateError(state, message) {
      var mark = {
        name: state.filename,
        buffer: state.input.slice(0, -1),
        // omit trailing \0
        position: state.position,
        line: state.line,
        column: state.position - state.lineStart
      };
      mark.snippet = makeSnippet(mark);
      return new YAMLException(message, mark);
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.lineStart = startLineStart || state.lineStart;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        if (keyNode === "__proto__") {
          Object.defineProperty(_result, keyNode, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: valueNode
          });
        } else {
          _result[keyNode] = valueNode;
        }
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
      state.firstTabInLine = -1;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          if (ch === 9 && state.firstTabInLine === -1) {
            state.firstTabInLine = state.position;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        } else if (ch === 44) {
          throwError(state, "expected the node content, but found ','");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        _lineStart = state.lineStart;
        _pos = state.position;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (!atExplicitKey && state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else {
          _keyLine = state.line;
          _keyLineStart = state.lineStart;
          _keyPos = state.position;
          if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            break;
          }
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (atExplicitKey) {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
          }
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33)
        return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      try {
        tagName = decodeURIComponent(tagName);
      } catch (err) {
        throwError(state, "tag name is malformed: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38)
        return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42)
        return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag === null) {
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      } else if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type = state.implicitTypes[typeIndex];
          if (type.resolve(state.result)) {
            state.result = type.construct(state.result);
            state.tag = type.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (state.tag !== "!") {
        if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
        } else {
          type = null;
          typeList = state.typeMap.multi[state.kind || "fallback"];
          for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
            if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
              type = typeList[typeIndex];
              break;
            }
          }
        }
        if (!type) {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
        if (state.result !== null && type.kind !== state.kind) {
          throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
        }
        if (!type.resolve(state.result, state.tag)) {
          throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type.construct(state.result, state.tag);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = /* @__PURE__ */ Object.create(null);
      state.anchorMap = /* @__PURE__ */ Object.create(null);
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch))
            break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0)
          readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    module2.exports.loadAll = loadAll;
    module2.exports.load = load;
  }
});

// ../easyapi/node_modules/js-yaml/lib/dumper.js
var require_dumper2 = __commonJS({
  "../easyapi/node_modules/js-yaml/lib/dumper.js"(exports, module2) {
    "use strict";
    var common = require_common2();
    var YAMLException = require_exception2();
    var DEFAULT_SCHEMA = require_default2();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_BOM = 65279;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null)
        return {};
      result = {};
      keys = Object.keys(map);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    var QUOTING_TYPE_SINGLE = 1;
    var QUOTING_TYPE_DOUBLE = 2;
    function State(options) {
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
      this.forceQuotes = options["forceQuotes"] || false;
      this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n")
          result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str) {
      var index, length, type;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
    }
    function isNsCharOrWhitespace(c) {
      return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev, inblock) {
      var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
      var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
      return (
        // ns-plain-safe
        (inblock ? (
          // c = flow-in
          cIsNsCharOrWhitespace
        ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
      );
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function isPlainSafeLast(c) {
      return !isWhitespace(c) && c !== CHAR_COLON;
    }
    function codePointAt(string, pos) {
      var first = string.charCodeAt(pos), second;
      if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
        second = string.charCodeAt(pos + 1);
        if (second >= 56320 && second <= 57343) {
          return (first - 55296) * 1024 + second - 56320 + 65536;
        }
      }
      return first;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
      var i;
      var char = 0;
      var prevChar = null;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
      if (singleLineOnly || forceQuotes) {
        for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
          char = codePointAt(string, i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
      } else {
        for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
          char = codePointAt(string, i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        if (plain && !forceQuotes && !testAmbiguousType(string)) {
          return STYLE_PLAIN;
        }
        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      if (!forceQuotes) {
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    function writeScalar(state, string, level, iskey, inblock) {
      state.dump = function() {
        if (string.length === 0) {
          return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
        }
        if (!state.noCompatMode) {
          if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
            return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
          }
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(
          string,
          singleLineOnly,
          state.indent,
          lineWidth,
          testAmbiguity,
          state.quotingType,
          state.forceQuotes && !iskey,
          inblock
        )) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ")
        return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char = 0;
      var escapeSeq;
      for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
        char = codePointAt(string, i);
        escapeSeq = ESCAPE_SEQUENCES[char];
        if (!escapeSeq && isPrintable(char)) {
          result += string[i];
          if (char >= 65536)
            result += string[i + 1];
        } else {
          result += escapeSeq || encodeHex(char);
        }
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
          if (_result !== "")
            _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
          if (!compact || _result !== "") {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (_result !== "")
          pairBuffer += ", ";
        if (state.condenseFlow)
          pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024)
          pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || _result !== "") {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          if (explicit) {
            if (type.multi && type.representName) {
              state.tag = type.representName(object);
            } else {
              state.tag = type.tag;
            }
          } else {
            state.tag = "?";
          }
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey, isblockseq) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      var inblock = block;
      var tagStr;
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          if (block && state.dump.length !== 0) {
            if (state.noArrayIndent && !isblockseq && level > 0) {
              writeBlockSequence(state, level - 1, state.dump, compact);
            } else {
              writeBlockSequence(state, level, state.dump, compact);
            }
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey, inblock);
          }
        } else if (type === "[object Undefined]") {
          return false;
        } else {
          if (state.skipInvalid)
            return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          tagStr = encodeURI(
            state.tag[0] === "!" ? state.tag.slice(1) : state.tag
          ).replace(/!/g, "%21");
          if (state.tag[0] === "!") {
            tagStr = "!" + tagStr;
          } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
            tagStr = "!!" + tagStr.slice(18);
          } else {
            tagStr = "!<" + tagStr + ">";
          }
          state.dump = tagStr + " " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs)
        getDuplicateReferences(input, state);
      var value = input;
      if (state.replacer) {
        value = state.replacer.call({ "": value }, "", value);
      }
      if (writeNode(state, 0, value, true, true))
        return state.dump + "\n";
      return "";
    }
    module2.exports.dump = dump;
  }
});

// ../easyapi/node_modules/js-yaml/index.js
var require_js_yaml2 = __commonJS({
  "../easyapi/node_modules/js-yaml/index.js"(exports, module2) {
    "use strict";
    var loader = require_loader2();
    var dumper = require_dumper2();
    function renamed(from, to) {
      return function() {
        throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
      };
    }
    module2.exports.Type = require_type2();
    module2.exports.Schema = require_schema2();
    module2.exports.FAILSAFE_SCHEMA = require_failsafe2();
    module2.exports.JSON_SCHEMA = require_json2();
    module2.exports.CORE_SCHEMA = require_core2();
    module2.exports.DEFAULT_SCHEMA = require_default2();
    module2.exports.load = loader.load;
    module2.exports.loadAll = loader.loadAll;
    module2.exports.dump = dumper.dump;
    module2.exports.YAMLException = require_exception2();
    module2.exports.types = {
      binary: require_binary2(),
      float: require_float2(),
      map: require_map2(),
      null: require_null2(),
      pairs: require_pairs2(),
      set: require_set2(),
      timestamp: require_timestamp2(),
      bool: require_bool2(),
      int: require_int2(),
      merge: require_merge2(),
      omap: require_omap2(),
      seq: require_seq2(),
      str: require_str2()
    };
    module2.exports.safeLoad = renamed("safeLoad", "load");
    module2.exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
    module2.exports.safeDump = renamed("safeDump", "dump");
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NoteChainPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian20 = require("obsidian");

// src/NCEditor.ts
var import_obsidian = require("obsidian");
var NCEditor = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = this.plugin.app;
    this.nretry = 10;
  }
  async set_frontmatter(tfile, key, value, nretry = this.nretry) {
    let kv = {};
    kv[key] = value;
    let flag = await this.set_multi_frontmatter(tfile, kv, nretry);
    return flag;
  }
  check_frontmatter(tfile, kv) {
    try {
      if (!tfile) {
        return false;
      }
      let meta = this.app.metadataCache.getFileCache(tfile);
      if (meta == null ? void 0 : meta.frontmatter) {
        for (let k in kv) {
          if (!(meta.frontmatter[k] == kv[k])) {
            return false;
          }
        }
        return true;
      }
      return false;
    } catch (error) {
      return false;
    }
  }
  async wait_frontmatter(tfile, kv, timeout = 3e3) {
    if (this.check_frontmatter(tfile, kv))
      return true;
    return new Promise((resolve) => {
      let timer = setTimeout(() => {
        this.app.metadataCache.offref(off);
        resolve(false);
      }, timeout);
      const off = this.app.metadataCache.on("changed", (file) => {
        if (file.path === tfile.path && this.check_frontmatter(tfile, kv)) {
          clearTimeout(timer);
          this.app.metadataCache.offref(off);
          resolve(true);
        }
      });
    });
  }
  async set_multi_frontmatter(tfile, kv, nretry = this.nretry) {
    if (Array.isArray(tfile)) {
      for (let item of tfile) {
        let ok = await this.set_multi_frontmatter(item, kv, nretry);
        if (!ok)
          return false;
      }
      return true;
    }
    if (typeof tfile === "string") {
      tfile = this.plugin.chain.get_tfile(tfile);
    }
    if (!tfile || !(tfile instanceof import_obsidian.TFile)) {
      return false;
    }
    if (this.check_frontmatter(tfile, kv))
      return true;
    for (let attempt = 0; attempt < nretry; attempt++) {
      await this.app.fileManager.processFrontMatter(tfile, (fm) => {
        for (let k in kv) {
          this.plugin.easyapi.editor.set_obj_value(fm, k, kv[k]);
        }
      });
      let ok = await this.wait_frontmatter(tfile, kv, 1e3);
      if (ok)
        return true;
    }
    return false;
  }
  get_frontmatter(tfile, key) {
    try {
      if (!tfile) {
        return null;
      }
      let meta = this.app.metadataCache.getFileCache(tfile);
      if (meta == null ? void 0 : meta.frontmatter) {
        if (meta.frontmatter[key]) {
          return meta.frontmatter[key];
        }
        let keys = key.split(".");
        let cfm = meta.frontmatter;
        for (let k of keys) {
          let items = k.match(/^(.*?)(\[-?\d+\])?$/);
          if (!items) {
            return null;
          }
          if (items[1]) {
            cfm = cfm[items[1]];
          }
          if (!cfm) {
            return null;
          }
          if (Array.isArray(cfm) && items[2]) {
            let i = parseInt(items[2].slice(1, items[2].length - 1));
            if (i < 0) {
              i = i + cfm.length;
            }
            cfm = cfm[i];
          }
        }
        return cfm;
      }
    } catch (error) {
      return null;
    }
  }
  get_vault_name() {
    let items = this.plugin.app.vault.adapter.basePath.split("\\");
    items = items[items.length - 1].split("/");
    return items[items.length - 1];
  }
  get_frontmatter_config(tfile, key) {
    if (tfile instanceof import_obsidian.TFile) {
      if (tfile.extension == "md") {
        let config = this.get_frontmatter(tfile, key);
        if (config) {
          return config;
        }
      } else {
        let file = this.plugin.chain.get_tfile(
          tfile.path.slice(0, tfile.path.length - tfile.extension.length) + "md"
        );
        if (file) {
          let config = this.get_frontmatter(file, key);
          if (config) {
            return config;
          }
        }
      }
    } else {
      let file = this.plugin.chain.get_tfile(tfile.path + "/" + tfile.name + ".md");
      if (file) {
        let config = this.get_frontmatter(file, key + "_folder");
        if (config) {
          return config;
        }
        config = this.get_frontmatter(file, key);
        if (config) {
          return config;
        }
      }
    }
    let dir = tfile.parent;
    while (dir) {
      let cfile;
      if (dir.parent) {
        cfile = this.plugin.chain.get_tfile(
          dir.path + "/" + dir.name + ".md"
        );
      } else {
        cfile = this.plugin.chain.get_tfile(
          this.get_vault_name()
        );
      }
      let config = this.get_frontmatter(cfile, key);
      if (config) {
        return config;
      }
      dir = dir.parent;
    }
    return null;
  }
  regexp_link(tfile, mode) {
    if (mode === "link") {
      return new RegExp(`\\[\\[${tfile.basename}\\|?.*\\]\\]`, "g");
    }
    if (mode === "para") {
      return new RegExp(`.*\\[\\[${tfile.basename}\\|?.*\\]\\].*`, "g");
    }
  }
  async replace(tfile, regex, target) {
    if (typeof regex === "string") {
      await this.app.vault.process(tfile, (data) => {
        if (data.indexOf(regex) > -1) {
          return data.replace(regex, target);
        }
        return data;
      });
    } else if (regex instanceof RegExp) {
      await this.app.vault.process(tfile, (data) => {
        if (data.match(regex)) {
          return data.replace(regex, target);
        }
        return data;
      });
    }
  }
  async remove_metadata(tfile) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let headerRegex = /^---\s*([\s\S]*?)\s*---/;
    let match = headerRegex.exec(tfile);
    if (match) {
      tfile = tfile.slice(match[0].length).trim();
    }
    return tfile;
  }
  async extract_code_block(tfile, btype) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let blocks = [];
    let reg = new RegExp(`\`\`\`${btype}\\n([\\s\\S]*?)
\`\`\``, "g");
    ;
    let matches;
    while ((matches = reg.exec(tfile)) !== null) {
      blocks.push(matches[1].trim());
    }
    reg = new RegExp(`~~~${btype}\\n([\\s\\S]*?)
~~~`, "g");
    ;
    while ((matches = reg.exec(tfile)) !== null) {
      blocks.push(matches[1].trim());
    }
    return blocks;
  }
  async extract_templater_block(tfile, reg = /<%\*\s*([\s\S]*?)\s*-?%>/g) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let cssCodeBlocks = [];
    let matches;
    while ((matches = reg.exec(tfile)) !== null) {
      cssCodeBlocks.push(matches[0].trim());
    }
    let tpls = await this.extract_code_block(tfile, "js //templater");
    for (let tpl of tpls) {
      cssCodeBlocks.push(`<%*
${tpl}
-%>`);
    }
    return cssCodeBlocks;
  }
  async extract_yaml_block(tfile) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let headerRegex = /^---\s*([\s\S]*?)\s*---/;
    let match = headerRegex.exec(tfile);
    if (match) {
      return match[0];
    }
    return "";
  }
  _extract_block_id_(para) {
    let reg = /\s+\^[a-zA-Z0-9]+\r?\n?$/;
    let match = reg.exec(para);
    if (match) {
      return match[0].trim();
    } else {
      return "";
    }
  }
  _generate_random_string_(length) {
    let characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let result = "";
    for (let i = 0; i < length; i++) {
      let randomIndex = Math.floor(Math.random() * characters.length);
      result += characters[randomIndex];
    }
    return result;
  }
  async extract_all_blocks(tfile) {
    if (tfile instanceof import_obsidian.TFile) {
      tfile = await this.plugin.app.vault.cachedRead(tfile);
    }
    if (typeof tfile != "string") {
      return "";
    }
    let ctx = tfile;
    let blocks = [];
    let head = await this.plugin.editor.extract_yaml_block(ctx);
    if (head != "") {
      blocks.push(["YAML", head]);
      ctx = ctx.slice(head.length);
    }
    let kvgets = {
      "\u7A7A\u767D\u6BB5\u843D": /^(\s*\n)*/,
      "\u4EE3\u7801\u5757": /^[ \t]*```[\s\S]*?\n[ \t]*```[ \t]*\n(\s*\^[a-zA-Z0-9]+\r?[\n$])?/,
      "tpl\u4EE3\u7801\u5757": /^<%\*[\s\S]*?\n-?\*?%>[ \t]*\n(\s+\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u4EFB\u52A1": /^[ \t]*- \[.\].*\n?(\s+\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u65E0\u5E8F\u5217\u8868": /^[ \t]*- .*\n?(\s+\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u6709\u5E8F\u5217\u8868": /^[ \t]*\d\. .*\n?(\s+[ \t]*\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u5F15\u7528": /^(>.*\n)+(\s*\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u6807\u9898": /^#+ .*\n(\s*\^[a-zA-Z0-9]+\r?[\n$])?/,
      "\u6BB5\u843D": /^(.*\n?)(\s*\^[a-zA-Z0-9]+\r?[\n$])?/
    };
    while (ctx.length > 0) {
      let flag = true;
      for (let key of Object.keys(kvgets)) {
        let reg = kvgets[key];
        let match = reg.exec(ctx);
        if (match) {
          let curr = match[0];
          if (curr.length > 0) {
            let bid = this._extract_block_id_(curr);
            if (key == "\u6BB5\u843D" && blocks.length > 0 && blocks[blocks.length - 1][0] == "\u6BB5\u843D") {
              blocks[blocks.length - 1][1] = blocks[blocks.length - 1][1] + curr;
              blocks[blocks.length - 1][2] = bid;
            } else {
              blocks.push([key, curr, bid]);
            }
            flag = false;
            ctx = ctx.slice(curr.length);
            break;
          }
        }
      }
      if (flag) {
        break;
      }
    }
    if (ctx.length > 0) {
      let bid = this._extract_block_id_(ctx);
      blocks.push(["\u6BB5\u843D", ctx, bid]);
    }
    return blocks;
  }
  async append_block_ids(tfile) {
    let blocks = await this.extract_all_blocks(tfile);
    let items = [];
    for (let block of blocks) {
      if (["\u7A7A\u767D\u6BB5\u843D", "YAML"].contains(block[0])) {
        items.push(block[1]);
      } else if (!block[2]) {
        let bid = this._generate_random_string_(6);
        if (["\u4EFB\u52A1", "\u65E0\u5E8F\u5217\u8868", "\u6709\u5E8F\u5217\u8868"].contains(block[0])) {
          items.push(block[1].slice(0, -1) + " ^" + bid + "\n");
        } else {
          if (block[1].endsWith("\n")) {
            items.push(block[1] + "^" + bid + "\n");
          } else {
            items.push(block[1] + "\n^" + bid + "\n");
          }
        }
      } else {
        items.push(block[1]);
      }
    }
    let res = items.join("");
    await this.app.vault.modify(tfile, res);
    return res;
  }
  async remove_block_ids(tfile) {
    let blocks = await this.extract_all_blocks(tfile);
    let items = [];
    for (let block of blocks) {
      if (["\u7A7A\u767D\u6BB5\u843D", "YAML"].contains(block[0])) {
        items.push(block[1]);
      } else {
        let reg = /\s+\^[a-zA-Z0-9]+\r?\n?$/;
        let match = reg.exec(block[1]);
        if (match) {
          items.push(block[1].replace(reg, "\n"));
        } else {
          items.push(block[1]);
        }
      }
    }
    let res = items.join("");
    await this.app.vault.modify(tfile, res);
    return res;
  }
  async get_current_section() {
    var _a, _b;
    let view = this.app.workspace.getActiveFileView();
    let editor = view.editor;
    let tfile = view.file;
    if (!view || !editor || !tfile) {
      return null;
    }
    let cursor = editor.getCursor();
    let cache = this.app.metadataCache.getFileCache(tfile);
    if (!cache) {
      return;
    }
    if (!cursor) {
      let ctx = await this.app.vault.cachedRead(tfile);
      let items = (_a = cache == null ? void 0 : cache.sections) == null ? void 0 : _a.map(
        (section2) => ctx.slice(section2.position.start.offset, section2.position.end.offset)
      );
      if (!items) {
        return null;
      }
      let section = await this.plugin.dialog_suggest(items, cache.sections);
      return section;
    } else {
      let sections = (_b = cache == null ? void 0 : cache.sections) == null ? void 0 : _b.filter(
        (x) => {
          return x.position.start.line <= cursor.line && x.position.end.line >= cursor.line;
        }
      )[0];
      return sections;
    }
  }
  async set_frontmatter_align_file(src, dst, field) {
    if (field) {
      let value = this.get_frontmatter(src, field);
      if (value) {
        await this.set_frontmatter(dst, field, value, 1);
      }
    }
  }
};

// src/NoteChain.ts
var import_obsidian4 = require("obsidian");
init_utils();

// src/NCModal.ts
var import_obsidian3 = require("obsidian");
var NoteContentModal = class extends import_obsidian3.Modal {
  constructor(app, content, plugin, sourcePath) {
    super(app);
    this.content = content;
    this.plugin = plugin;
    this.sourcePath = sourcePath;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.modalEl.style.display = "flex";
    this.modalEl.style.overflow = "auto";
    const container = contentEl.createDiv({ cls: "note-content-container" });
    container.addClass("markdown-rendered");
    container.style.display = "table-cell";
    container.style.verticalAlign = "middle";
    container.style.padding = "20px";
    const component = new import_obsidian3.Component();
    import_obsidian3.MarkdownRenderer.render(this.app, this.content, container, this.sourcePath, component).then((x) => {
      this.addClickListener(container);
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  addClickListener(container) {
    container.addEventListener("click", (event) => {
      let target = event.target;
      if (target.tagName === "A" && target.hasClass("internal-link")) {
        event.preventDefault();
        let href = target.getAttribute("href");
        if (href) {
          this.openNoteInMainView(href);
        }
      }
    });
    container.querySelectorAll("a.internal-link").forEach((el) => {
      const href = el.getAttribute("href");
      if (href) {
        el.setAttribute("data-href", href);
        el.setAttr("aria-label", href);
        el.addClass("hover-link");
        el.addEventListener("mouseenter", (e) => {
          this.app.workspace.trigger("hover-link", {
            event: e,
            source: "markdown",
            hoverParent: el,
            targetEl: el,
            linktext: href,
            sourcePath: this.sourcePath
          });
        });
      }
    });
  }
  async openNoteInMainView(linkText) {
    try {
      await this.app.workspace.openLinkText(linkText, "", false, { active: true });
      this.close();
    } catch (error) {
      new import_obsidian3.Notice(`Error opening note: ${error.message}`);
    }
  }
};
var NoteEditorModal = class extends import_obsidian3.Modal {
  // 添加编辑模式属性
  constructor(app, filePath, isEditMode = false) {
    super(app);
    this.filePath = filePath;
    this.isEditMode = isEditMode;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.isEditMode) {
      let file = this.app.vault.getAbstractFileByPath(this.filePath);
      if (file) {
        const leaf = this.app.workspace.getLeaf(true);
        await leaf.openFile(file, { state: { mode: "source" } });
        this.close();
      } else {
        new import_obsidian3.Notice(`File not found: ${this.filePath}`);
      }
    } else {
      new import_obsidian3.Notice("Not in edit mode.");
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/NoteChain.ts
var import_lexorank = __toESM(require_lib());
var NoteChain = class {
  constructor(plugin, editor, prev = "PrevNote", next = "NextNote", nid = "lexorank", fid = "lexorank_folder") {
    this.plugin = plugin;
    this.app = plugin.app;
    if (editor) {
      this.editor = editor;
    } else {
      this.editor = new NCEditor(plugin);
    }
    window.nc = this.plugin;
    this.NoteEditorModal = NoteEditorModal;
    this.LexoRank = import_lexorank.LexoRank;
    this.prev = prev;
    this.next = next;
    this.nid = nid;
    this.fid = fid;
    this.init_children();
  }
  children_as_chain(root = "/") {
    let items = [];
    for (let k of this.children[root]) {
      items.push(k);
      if (k instanceof import_obsidian4.TFolder) {
        let sitems = this.children_as_chain(k.path);
        for (let i of sitems) {
          items.push(i);
        }
      }
    }
    return items;
  }
  async open_note_in_modal(notePath) {
    try {
      let file = this.get_tfile(notePath);
      if (file instanceof import_obsidian4.TFile) {
        let content = await this.app.vault.read(file);
        let modal = new NoteContentModal(this.app, content, this.plugin, file.path);
        modal.open();
        return modal;
      } else {
        let modal = new NoteContentModal(this.app, notePath, this.plugin, "");
        modal.open();
        return modal;
      }
    } catch (error) {
      new import_obsidian4.Notice(`Error opening note in modal: ${error.message}`);
    }
  }
  async open_note_in_view(notePath) {
    try {
      let content = "";
      let sourcePath = "";
      let file = this.get_tfile(notePath);
      if (file instanceof import_obsidian4.TFile) {
        content = await this.app.vault.read(file);
        sourcePath = notePath;
      } else {
        content = notePath;
      }
      let leaf = this.app.workspace.getRightLeaf(false);
      if (!leaf) {
        return;
      }
      await leaf.setViewState({
        type: "note-content-view",
        active: true
      });
      const view = leaf.view;
      view.setContent(content, sourcePath);
    } catch (error) {
      new import_obsidian4.Notice(`Error opening note in modal: ${error.message}`);
    }
  }
  init_children() {
    var _a;
    this.children = {};
    for (let f of this.get_all_folders()) {
      let tfiles = f.children;
      if ((_a = this.plugin.explorer) == null ? void 0 : _a.file_explorer) {
        tfiles = this.sort_tfiles(
          tfiles,
          this.plugin.explorer.file_explorer.sortOrder
        );
      }
      this.children[f.path] = this.sort_tfiles_by_chain(tfiles);
    }
  }
  refresh_folder(tfolder) {
    if (tfolder == null ? void 0 : tfolder.children) {
      let tfiles = tfolder.children;
      if (this.plugin.explorer.file_explorer) {
        tfiles = this.sort_tfiles(
          tfiles,
          this.plugin.explorer.file_explorer.sortOrder
        );
      }
      this.children[tfolder.path] = this.sort_tfiles_by_chain(
        tfiles
      );
    }
  }
  refresh_tfile(tfile) {
    var _a;
    if ((_a = tfile.parent) == null ? void 0 : _a.children) {
      this.refresh_folder(tfile.parent);
    }
  }
  get tp_find_tfile() {
    return get_tp_func(this.app, "tp.file.find_tfile");
  }
  get tp_suggester() {
    return get_tp_func(this.app, "tp.system.suggester");
  }
  get tp_prompt() {
    return get_tp_func(this.app, "tp.system.prompt");
  }
  get_all_folders() {
    let folders = this.app.vault.getAllFolders();
    let folder = this.app.vault.getFolderByPath("/");
    if (folder && !folders.contains(folder)) {
      folders.push(folder);
    }
    return folders;
  }
  get_all_tfiles(sort_mode = "") {
    let files = this.app.vault.getMarkdownFiles();
    if (!(sort_mode === "")) {
      this.sort_tfiles(files, sort_mode = sort_mode);
    }
    return files;
  }
  get_all_tfiles_tags(tags, sort_mode = "") {
    if (!Array.isArray(tags)) {
      tags = [tags];
    }
    tags = tags.map((x) => {
      if (x.startsWith("#")) {
        return x;
      } else {
        return "#" + x;
      }
    });
    let tfiles = this.get_all_tfiles(sort_mode).filter((x) => {
      let ttags = this.get_tags(x);
      for (let tag of tags) {
        if (ttags.contains(tag)) {
          return true;
        }
      }
    });
    return tfiles;
  }
  sort_folders_by_mtime(folders, reverse = true) {
    function ufunc(f) {
      return Math.max(
        ...f.children.filter((f2) => f2.basename).map((f2) => f2.stat.mtime)
      );
    }
    let res = folders.sort((a, b) => ufunc(a) - ufunc(b));
    if (reverse) {
      res = res.reverse();
    }
    return res;
  }
  async cmd_move_file_to_another_folder(tfile = this.current_note) {
    if (tfile == null) {
      return;
    }
    let folders = this.get_all_folders();
    folders = this.sort_folders_by_mtime(
      folders
    ).filter((f) => f != tfile.parent);
    if (tfile.extension === "md") {
      folders = folders.filter((f) => this.filter_user_ignore(f));
    }
    try {
      let folder = await this.plugin.dialog_suggest(
        this.plugin.utils.array_prefix_id(
          folders.map((f) => f.path)
        ),
        folders
      );
      let dst = folder.path + "/" + tfile.basename + "." + tfile.extension;
      await this.app.fileManager.renameFile(tfile, dst);
    } catch (error) {
    }
  }
  filter_user_ignore(note) {
    if (!(this.app.vault.config.attachmentFolderPath === "./")) {
      if (note.path.startsWith(
        this.app.vault.config.attachmentFolderPath
      )) {
        return false;
      }
    }
    if (this.app.vault.userIgnoreFilters) {
      for (let x of this.app.vault.userIgnoreFilters) {
        if (note.path.startsWith(x)) {
          return false;
        }
      }
    }
    return true;
  }
  async sugguster_note(notes = null, slice = 0, onlyname = false) {
    if (notes == null) {
      notes = this.sort_tfiles(
        this.app.vault.getFiles(),
        ["mtime", "x"]
      ).filter((f) => this.filter_user_ignore(f));
    }
    try {
      let items;
      if (onlyname) {
        items = notes.map((f) => f.basename);
      } else {
        items = notes.map((f) => f.path.slice(slice));
      }
      let msg = this.plugin.utils.array_prefix_id(items);
      let note = await this.plugin.dialog_suggest(msg, notes);
      return note;
    } catch (error) {
      return null;
    }
  }
  open_note(tfile, revealFolder = false, collapse = true) {
    if (tfile) {
      this.app.workspace.getLeaf().openFile(tfile);
      if (revealFolder) {
        if (collapse) {
          this.plugin.explorer.file_explorer.tree.setCollapseAll(true);
        }
        this.plugin.explorer.file_explorer.revealInFolder(tfile);
      }
    }
  }
  async sugguster_open_note() {
    try {
      let note = await this.sugguster_note();
      this.open_note(note);
    } catch (error) {
    }
  }
  get_tfile(path, only_first = true) {
    try {
      if (path instanceof import_obsidian4.TFile) {
        return path;
      }
      path = path.split("|")[0].replace("![[", "").replace("[[", "").replace("]]", "");
      let tfile = this.app.vault.getFileByPath(path);
      if (tfile) {
        return tfile;
      }
      tfile = this.app.vault.getFileByPath(path + ".md");
      if (tfile) {
        return tfile;
      }
      let tfiles = this.app.metadataCache.uniqueFileLookup.get(path.toLowerCase());
      if (!tfiles) {
        tfiles = this.app.metadataCache.uniqueFileLookup.get(path.toLowerCase() + ".md");
        if (!tfiles) {
          return null;
        } else {
          path = path + ".md";
        }
      }
      let ctfiles = tfiles.filter((x) => x.name == path);
      if (ctfiles.length > 0) {
        if (only_first) {
          return ctfiles[0];
        } else {
          return ctfiles;
        }
      }
      if (tfiles.length > 0) {
        if (only_first) {
          return tfiles[0];
        } else {
          return tfiles;
        }
      }
      return null;
    } catch (e) {
      return null;
    }
  }
  get_tags(tfile = this.current_note) {
    var _a;
    if (!tfile) {
      return [];
    }
    let mcache = this.app.metadataCache.getFileCache(tfile);
    let tags = [];
    if (mcache == null ? void 0 : mcache.tags) {
      for (let curr of mcache.tags) {
        if (!tags.contains(curr.tag)) {
          tags.push(curr.tag);
        }
      }
    }
    if ((_a = mcache == null ? void 0 : mcache.frontmatter) == null ? void 0 : _a.tags) {
      if (Array.isArray(mcache.frontmatter.tags)) {
        for (let curr of mcache.frontmatter.tags) {
          let tag = "#" + curr;
          if (!tags.contains(tag)) {
            tags.push(tag);
          }
        }
      } else if (typeof mcache.frontmatter.tags === "string") {
        let tag = `#` + mcache.frontmatter.tags;
        if (!tags.contains(tag)) {
          tags.push(tag);
        }
      }
    }
    return tags;
  }
  get_recent_tfiles(only_md = true) {
    var _a;
    let recent = this.app.plugins.getPlugin("recent-files-obsidian");
    if (recent) {
      let files = recent.data.recentFiles.map(
        (x) => this.get_tfile(x.path)
      ).filter((x) => x);
      return files;
    } else {
      let recent2 = [];
      let files = (_a = this.app.workspace.recentFileTracker) == null ? void 0 : _a.lastOpenFiles;
      if (files && files.length > 0) {
        recent2 = files.map((x) => this.get_tfile(x)).filter((x) => x);
      }
      let tfile = this.app.workspace.getActiveFile();
      if (tfile) {
        recent2.unshift(tfile);
      }
      if (only_md) {
        recent2 = recent2.filter((x) => x.extension == "md");
      }
      return recent2;
    }
  }
  get_last_daily_note(recent_first = true) {
    let pattern = /^\d{4}-\d{2}-\d{2}$/;
    if (recent_first) {
      let recent = this.get_recent_tfiles();
      for (let tfile of recent) {
        if (tfile.basename.match(pattern)) {
          return tfile;
        }
      }
    }
    let t = (0, import_obsidian4.moment)();
    for (let i = 0; i < 20; i++) {
      let xt = t.clone().add(-i, "days");
      let fname = xt.format("YYYY-MM-DD");
      let tfile = this.get_tfile(fname);
      if (tfile) {
        return tfile;
      }
    }
    let files = this.app.vault.getMarkdownFiles().filter(
      (x) => x.basename.match(pattern)
    );
    files = this.sort_tfiles(files, "name");
    if (files.length > 0) {
      return files[files.length - 1];
    }
    return null;
  }
  get_neighbor_leaf(offset = 1) {
    let app = this.plugin.app;
    let leaves = app.workspace.getLeavesOfType("markdown");
    let activeLeaf = app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (activeLeaf) {
      let idx = leaves.map((x) => x.view == activeLeaf).indexOf(true);
      idx = idx + offset;
      if (idx < 0 || idx > leaves.length - 1) {
        return null;
      }
      return leaves[idx];
    }
  }
  get_last_activate_leaf(skip_conote = true) {
    let leaves = this.app.workspace.getLeavesOfType("markdown");
    leaves = leaves.filter((x) => x.getViewState().state.file);
    leaves = leaves.sort((a, b) => b.activeTime - a.activeTime);
    for (let leaf2 of leaves) {
      let file = leaf2.getViewState().state.file;
      if (skip_conote && this.get_tags(file).contains("#conote")) {
        continue;
      }
      return leaf2;
    }
    let leaf = null;
    for (let i of [1, -1, 0]) {
      leaf = this.plugin.chain.get_neighbor_leaf(i);
      if (leaf) {
        return leaf;
      }
    }
    return null;
  }
  get current_note() {
    return this.app.workspace.getActiveFile();
  }
  get_selected_files(current_if_no_selected = true) {
    let selector = document.querySelectorAll(
      ".tree-item-self.is-selected"
    );
    let items = Object.values(selector).map((x) => {
      var _a;
      return (_a = x.dataset) == null ? void 0 : _a.path;
    });
    let tfiles = items.map(
      (x) => this.get_tfile(x)
    ).filter(
      (x) => x.extension == "md"
    );
    if (tfiles.length > 0) {
      return tfiles;
    } else if (current_if_no_selected && this.current_note) {
      return [this.current_note];
    } else {
      return [];
    }
  }
  get_inlinks(tfile = this.current_note, only_md = true) {
    if (tfile == null) {
      return [];
    }
    let res = [];
    let inlinks = this.app.metadataCache.getBacklinksForFile(tfile);
    for (let [k, v] of inlinks.data) {
      let curr = this.app.vault.getFileByPath(k);
      if (curr) {
        res.push(curr);
      }
    }
    return res;
  }
  get_tfolders(name) {
    let folder = this.app.vault.getFolderByPath(name);
    if (folder) {
      return [folder];
    }
    return this.get_all_folders().filter((x) => x.name == name);
  }
  get_group(group) {
    let tfiles = [];
    let tags = this.get_all_tfiles_tags(group);
    for (let f of tags) {
      if (!tfiles.contains(f)) {
        tfiles.push(f);
      }
    }
    let folders = this.get_tfolders(group);
    for (let folder of folders) {
      let xfiles = this.get_tfiles_of_folder(folder, true);
      for (let f of xfiles) {
        if (!tfiles.contains(f)) {
          tfiles.push(f);
        }
      }
    }
    let tfile = this.get_tfile(group);
    if (tfile) {
      let xfiles = this.get_links(tfile, true);
      for (let f of xfiles) {
        if (!tfiles.contains(f)) {
          tfiles.push(f);
        }
      }
    }
    return tfiles;
  }
  get_outlinks(tfile = this.current_note, only_md = true) {
    if (tfile == null) {
      return [];
    }
    let mcache = this.app.metadataCache.getFileCache(tfile);
    if (!mcache) {
      return [];
    }
    let res = [];
    if (mcache.links) {
      for (let link of mcache.links) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2) && !(only_md && tfile2.extension != "md")) {
          res.push(tfile2);
        }
      }
    }
    if (mcache.frontmatterLinks) {
      for (let link of mcache.frontmatterLinks) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2) && !(only_md && tfile2.extension != "md")) {
          res.push(tfile2);
        }
      }
    }
    if (!only_md && mcache.embeds) {
      for (let link of mcache.embeds) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2)) {
          res.push(tfile2);
        }
      }
    }
    return res;
  }
  get_links(tfile = this.current_note, only_md = true) {
    let inlinks = this.get_inlinks(tfile, only_md);
    let outlinks = this.get_outlinks(tfile, only_md);
    for (let link of inlinks) {
      if (!outlinks.contains(link)) {
        outlinks.push(link);
      }
    }
    return outlinks;
  }
  get_group_inlinks(tfiles, level = 1) {
    let items = tfiles.map((x) => x);
    while (level != 0) {
      let curr = items.map((x) => x);
      for (let c of curr) {
        let links = this.get_inlinks(c, true);
        for (let link of links) {
          if (!items.contains(link)) {
            items.push(link);
          }
        }
      }
      if (curr.length == items.length) {
        break;
      }
      level = level - 1;
    }
    return items;
  }
  get_group_outlinks(tfiles, level = 1) {
    let items = tfiles.map((x) => x);
    while (level != 0) {
      let curr = items.map((x) => x);
      for (let c of curr) {
        let links = this.get_outlinks(c, true);
        for (let link of links) {
          if (!items.contains(link)) {
            items.push(link);
          }
        }
      }
      if (curr.length == items.length) {
        break;
      }
      level = level - 1;
    }
    return items;
  }
  get_group_links(tfiles, level = 1) {
    let items = tfiles.map((x) => x);
    while (level != 0) {
      let curr = items.map((x) => x);
      for (let c of curr) {
        let links = this.get_links(c, true);
        for (let link of links) {
          if (!items.contains(link)) {
            items.push(link);
          }
        }
      }
      if (curr.length == items.length) {
        break;
      }
      level = level - 1;
    }
    return items;
  }
  get_brothers(tfile = this.current_note) {
    if (tfile && tfile.parent) {
      return this.get_tfiles_of_folder(tfile.parent, false);
    } else {
      return [];
    }
  }
  get_uncles(tfile) {
    if (tfile && tfile.parent && tfile.parent.parent) {
      let folder = tfile.parent.parent;
      return folder.children.filter(
        (x) => x instanceof import_obsidian4.TFile
      );
    }
    return [];
  }
  get_tfiles_of_folder(tfolder, with_children = false) {
    if (tfolder == null) {
      return [];
    }
    let notes = [];
    for (let c of tfolder.children) {
      if (c instanceof import_obsidian4.TFile && c.extension === "md") {
        notes.push(c);
      } else if (c instanceof import_obsidian4.TFolder && with_children) {
        let tmp = this.get_tfiles_of_folder(c);
        for (let x of tmp) {
          notes.push(x);
        }
      }
    }
    return notes;
  }
  indexOfFolder(tfile, tfiles) {
    let info = this.get_folder_pre_info(tfile);
    let idx = -1;
    let anchor = this.get_tfile(info["prev"]);
    if (anchor) {
      idx = tfiles.indexOf(anchor);
    }
    let offset = info["offset"];
    if (typeof offset == "string") {
      idx = idx + parseFloat(offset);
    } else {
      idx = idx + offset;
    }
    return idx;
  }
  tfile_to_string(tfile) {
    let curr = this.current_note;
    let msg = "";
    if (tfile.parent == (curr == null ? void 0 : curr.parent)) {
      msg = tfile.basename;
    } else {
      msg = tfile.path;
    }
    if (tfile == this.current_note) {
      return `\u{1F3E0} ${msg}`;
    } else {
      return msg;
    }
  }
  async suggester_notes(tfile = this.current_note, curr_first = false, smode = "") {
    if (tfile) {
      tfile == this.current_note;
    }
    let kv = [
      this.plugin.strings.item_get_brothers,
      this.plugin.strings.item_notechain,
      this.plugin.strings.item_uncle_notes,
      this.plugin.strings.item_same_folder,
      this.plugin.strings.item_inlinks_outlinks,
      this.plugin.strings.item_inlins,
      this.plugin.strings.item_outlinks,
      this.plugin.strings.item_all_noes,
      this.plugin.strings.item_recent
    ];
    if (curr_first) {
      kv.unshift(this.plugin.strings.item_currentnote);
    } else {
      kv.push(this.plugin.strings.item_currentnote);
    }
    let mode = "";
    if (kv.contains(smode)) {
      mode = smode;
    } else {
      mode = await this.plugin.dialog_suggest(this.plugin.utils.array_prefix_id(kv), kv);
    }
    if (mode === this.plugin.strings.item_currentnote) {
      return [tfile];
    } else if (mode === this.plugin.strings.item_get_brothers) {
      return this.get_brothers(tfile);
    } else if (mode === this.plugin.strings.item_same_folder) {
      if (tfile == null ? void 0 : tfile.parent) {
        return this.get_tfiles_of_folder(tfile.parent, true);
      }
    } else if (mode === this.plugin.strings.item_inlinks_outlinks) {
      return this.get_links(tfile);
    } else if (mode === this.plugin.strings.item_inlins) {
      return this.get_inlinks(tfile);
    } else if (mode === this.plugin.strings.item_outlinks) {
      return this.get_outlinks(tfile);
    } else if (mode === this.plugin.strings.item_all_noes) {
      return this.get_all_tfiles();
    } else if (mode === this.plugin.strings.item_recent) {
      return this.get_recent_tfiles();
    } else if (mode === this.plugin.strings.item_uncle_notes) {
      if (tfile) {
        return this.get_uncles(tfile);
      }
    } else if (mode === this.plugin.strings.item_notechain) {
      return this.get_chain(
        tfile,
        Number(this.plugin.settings.PrevChain),
        Number(this.plugin.settings.NextChain)
      );
    } else {
      return [];
    }
  }
  // Chain
  get_prev_note(tfile = this.current_note, across = false) {
    if (!tfile) {
      return;
    }
    if (tfile.deleted) {
      let tfiles = this.app.vault.getMarkdownFiles();
      tfiles = tfiles.filter((f) => {
        if (!f) {
          return false;
        }
        let next = this.editor.get_frontmatter(f, this.next);
        if (typeof next != "string") {
          return false;
        }
        return `[[${tfile.basename}]]` == next;
      });
      if (tfiles.length > 0) {
        return tfiles[0];
      } else {
        return null;
      }
    } else {
      let name = this.editor.get_frontmatter(tfile, this.prev);
      let note = this.get_tfile(name);
      if (!note && across) {
        let _prev_ = function(tfile2) {
          if (tfile2.parent) {
            let tfiles = chain.children[tfile2.parent.path];
            let idx = tfiles.indexOf(tfile2);
            while (idx > 0) {
              let cnote = chain.get_1st_note(tfiles[idx - 1], true);
              if (cnote) {
                return cnote;
              } else {
                idx = idx - 1;
              }
            }
            return _prev_(tfile2.parent);
          }
          return null;
        };
        let chain = this;
        note = _prev_(tfile);
      }
      return note ? note : null;
    }
  }
  open_prev_notes(tfile = this.current_note) {
    let note = this.get_prev_note(tfile, true);
    this.open_note(note);
  }
  get_next_note(tfile = this.current_note, across = false) {
    if (!tfile) {
      return null;
    }
    if (tfile.deleted) {
      let tfiles = this.app.vault.getMarkdownFiles();
      let prev = tfiles = tfiles.filter((f) => {
        if (!f) {
          return false;
        }
        let prev2 = this.editor.get_frontmatter(f, this.prev);
        if (typeof prev2 != "string") {
          return false;
        }
        return `[[${tfile.basename}]]` == prev2;
      });
      if (tfiles.length > 0) {
        return tfiles[0];
      } else {
        return null;
      }
    } else {
      let name = this.editor.get_frontmatter(tfile, this.next);
      let note = this.get_tfile(name);
      if (!note && across) {
        let _next_ = function(tfile2) {
          if (tfile2.parent) {
            let tfiles = chain.children[tfile2.parent.path];
            let idx = tfiles.indexOf(tfile2);
            while (idx < tfiles.length - 1) {
              let cnote = chain.get_1st_note(tfiles[idx + 1], false);
              if (cnote) {
                return cnote;
              } else {
                idx = idx + 1;
              }
            }
            return _next_(tfile2.parent);
          }
          return null;
        };
        let chain = this;
        note = _next_(tfile);
      }
      return note ? note : null;
    }
  }
  get_1st_note(tfile, last = false) {
    if (tfile instanceof import_obsidian4.TFile) {
      return tfile;
    } else if (tfile instanceof import_obsidian4.TFolder) {
      let tfiles = this.children[tfile.path];
      if (tfiles.length == 0) {
        return void 0;
      }
      if (last) {
        return this.get_1st_note(tfiles[tfiles.length - 1], last);
      } else {
        return this.get_1st_note(tfiles[0]);
      }
    }
  }
  open_next_notes(tfile = this.current_note) {
    let note = this.get_next_note(tfile, true);
    this.open_note(note);
  }
  get_chain(tfile = this.current_note, prev = 10, next = 10, with_self = true, across = false) {
    if (tfile == null) {
      return [];
    }
    let res = new Array();
    if (with_self) {
      res.push(tfile);
    }
    let tmp = tfile;
    for (let i = prev; i != 0; i--) {
      let note = this.get_prev_note(tmp, across);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        break;
      } else {
        res.unshift(note);
        tmp = note;
      }
    }
    tmp = tfile;
    for (let i = next; i != 0; i--) {
      let note = this.get_next_note(tmp, across);
      if (!note) {
        break;
      } else if (res.includes(note)) {
        break;
      } else {
        res.push(note);
        tmp = note;
      }
    }
    return res;
  }
  get_first_note(tfile = this.current_note) {
    let notes = this.get_chain(tfile, -1, 0, false);
    if (notes.length > 0) {
      return notes[0];
    } else {
      return null;
    }
  }
  get_last_note(tfile = this.current_note) {
    let notes = this.get_chain(tfile, 0, -1, false);
    if (notes.length > 0) {
      return notes[notes.length - 1];
    } else {
      return null;
    }
  }
  get_neighbors(tfile = this.current_note) {
    return [
      this.get_prev_note(tfile),
      this.get_next_note(tfile)
    ];
  }
  async chain_set_prev(tfile, prev) {
    if (tfile == null || tfile == prev) {
      return;
    }
    if (this.get_prev_note(tfile) == prev) {
      if (prev == null) {
        if (this.editor.get_frontmatter(tfile, this.prev) != null) {
          await this.editor.set_frontmatter(
            tfile,
            this.prev,
            null
          );
        }
      }
      return;
    }
    let msg = `Note Chain: ${prev == null ? void 0 : prev.basename} --> \u{1F3E0}${tfile.basename}`;
    if (prev == null) {
      await this.editor.set_frontmatter(
        tfile,
        this.prev,
        null
      );
    } else {
      await this.editor.set_frontmatter(
        tfile,
        this.prev,
        this.get_link_of_file(prev)
      );
    }
    if (this.plugin.settings.notice_while_modify_chain) {
      new import_obsidian4.Notice(msg, 5e3);
    }
  }
  async chain_set_next(tfile, next) {
    if (tfile == null || tfile == next) {
      return;
    }
    if (this.get_next_note(tfile) == next) {
      if (next == null) {
        if (this.editor.get_frontmatter(tfile, this.next) != null) {
          await this.editor.set_frontmatter(
            tfile,
            this.next,
            null
          );
        }
      }
      return;
    }
    let msg = `Note Chain: \u{1F3E0}${tfile == null ? void 0 : tfile.basename} <-- ${next == null ? void 0 : next.basename}`;
    if (next == null) {
      await this.editor.set_frontmatter(
        tfile,
        this.next,
        null
      );
    } else {
      await this.editor.set_frontmatter(
        tfile,
        this.next,
        this.get_link_of_file(next)
      );
    }
    if (this.plugin.settings.notice_while_modify_chain) {
      new import_obsidian4.Notice(msg, 5e3);
    }
  }
  // 将 tfiles 移动为 anchor 的后置笔记
  async chain_set_next_files(tfiles, anchor, same_folder = true) {
    var _a, _b;
    if (!tfiles) {
      return;
    }
    tfiles = tfiles.filter((x) => (x == null ? void 0 : x.extension) == "md");
    if (tfiles.length == 0) {
      return;
    }
    if (!anchor) {
      return;
    }
    ;
    if (tfiles.contains(anchor)) {
      return;
    }
    let xtfiles = this.sort_tfiles_by_chain(tfiles);
    for (let tfile of xtfiles) {
      if (anchor.parent) {
        if (same_folder && ((_a = tfile.parent) == null ? void 0 : _a.path) != ((_b = anchor.parent) == null ? void 0 : _b.path)) {
          let dst = anchor.parent.path + "/" + tfile.name;
          try {
            await this.app.fileManager.renameFile(tfile, dst);
          } catch (error) {
          }
        }
        await this.chain_pop_node(tfile);
      }
    }
    tfiles.unshift(anchor);
    let anchor_next = this.get_next_note(anchor);
    if (anchor_next) {
      tfiles.push(anchor_next);
    }
    await this.chain_concat_tfiles(tfiles);
    for (let dst of tfiles.slice(1, tfiles.length - 1)) {
      await this.editor.set_frontmatter_align_file(
        anchor,
        dst,
        this.plugin.settings.field_of_confluence_tab_format
      );
    }
  }
  get_link_of_file(tfile) {
    if (!tfile) {
      return null;
    }
    let tfiles = this.get_tfile(tfile.name, false);
    if (tfiles.length > 1) {
      if (tfile.extension == "md") {
        return `[[${tfile.path.slice(0, tfile.path.length - tfile.extension.length - 1)}]]`;
      } else {
        return `[[${tfile.path}]]`;
      }
    } else {
      if (tfile.extension == "md") {
        return `[[${tfile.basename}]]`;
      } else {
        return `[[${tfile.name}]]`;
      }
    }
  }
  async chain_set_prev_next(tfile, prev, next) {
    if (tfile == null || prev == next || tfile == prev || tfile == next) {
      return;
    }
    if (this.get_prev_note(tfile) == prev) {
      await this.chain_set_next(tfile, next);
      return;
    }
    if (this.get_next_note(tfile) == next) {
      await this.chain_set_prev(tfile, prev);
      return;
    }
    let msg = `Note Chain: ${prev == null ? void 0 : prev.basename} --> \u{1F3E0}${tfile == null ? void 0 : tfile.basename} <-- ${next == null ? void 0 : next.basename}`;
    let fm = {};
    fm[this.prev] = this.get_link_of_file(prev);
    fm[this.next] = this.get_link_of_file(next);
    await this.plugin.editor.set_multi_frontmatter(tfile, fm);
    if (this.plugin.settings.notice_while_modify_chain) {
      new import_obsidian4.Notice(msg, 5e3);
    }
  }
  async chain_link_prev_next(prev, next) {
    await this.chain_set_prev(next, prev);
    await this.chain_set_next(prev, next);
  }
  async chain_concat_tfiles(tfiles) {
    let prev = this.get_prev_note(tfiles[0]);
    if (tfiles.contains(prev)) {
      await this.chain_set_prev(tfiles[0], null);
    }
    let next = this.get_next_note(tfiles[tfiles.length - 1]);
    if (tfiles.contains(next)) {
      await this.chain_set_next(tfiles[tfiles.length - 1], null);
    }
    if (tfiles.length <= 1) {
      return;
    }
    let N = tfiles.length;
    await this.chain_set_next(tfiles[0], tfiles[1]);
    await this.chain_set_prev(tfiles[N - 1], tfiles[N - 2]);
    for (let i = 1; i < tfiles.length - 1; i++) {
      await this.chain_set_prev_next(tfiles[i], tfiles[i - 1], tfiles[i + 1]);
    }
  }
  async chain_pop_node(tfile) {
    let notes = this.get_neighbors(tfile);
    await this.chain_link_prev_next(notes[0], notes[1]);
  }
  async chain_insert_node_as_head(tfile, anchor) {
    let head = this.get_first_note(anchor);
    await this.chain_link_prev_next(tfile, head);
  }
  async chain_insert_node_as_tail(tfile, anchor) {
    let tail = this.get_last_note(anchor);
    await this.chain_link_prev_next(tail, tfile);
  }
  async chain_insert_node_after(tfile, anchor) {
    let anchor_next = this.get_next_note(anchor);
    if (anchor_next == tfile) {
      return;
    }
    let tfile_neighbor = this.get_neighbors(tfile);
    if (tfile_neighbor[1] == anchor) {
      await this.chain_concat_tfiles(
        [tfile_neighbor[0], anchor, tfile, anchor_next]
      );
    } else {
      await this.chain_pop_node(tfile);
      await this.chain_concat_tfiles([anchor, tfile, anchor_next]);
    }
  }
  async chain_insert_node_before(tfile, anchor) {
    let anchor_prev = this.get_prev_note(anchor);
    if (anchor_prev == tfile) {
      return;
    }
    let tfile_neighbor = this.get_neighbors(tfile);
    if (tfile_neighbor[0] == anchor) {
      await this.chain_concat_tfiles(
        [anchor_prev, tfile, anchor, tfile_neighbor[1]]
      );
    } else {
      await this.chain_pop_node(tfile);
      await this.chain_concat_tfiles([anchor_prev, tfile, anchor]);
    }
  }
  async chain_insert_folder_after(tfile, anchor) {
    if (!tfile.parent || tfile.parent.parent != anchor.parent) {
      return;
    }
    let note = this.get_tfile(tfile.parent.name);
    if (!note) {
      return;
    }
    await this.plugin.editor.set_multi_frontmatter(
      note,
      {
        "FolderPrevNote": this.get_link_of_file(anchor),
        "FolderPrevNoteOffset": 0.5
      }
    );
  }
  async chain_suggester_tfiles(tfile = this.current_note, mode = "suggester") {
    let notes = this.get_brothers(tfile);
    if (notes.length == 0) {
      return;
    }
    let files = await this.suggester_sort(notes);
    await this.chain_concat_tfiles(files);
  }
  sort_tfiles(files, field) {
    if (typeof field === "string") {
      if (field === "name" || field === "alphabetical") {
        return files.sort(
          (a, b) => a.name.localeCompare(b.name)
        );
      } else if (field === "mtime" || field === "byModifiedTime") {
        return files.sort(
          (a, b) => {
            var _a, _b;
            return ((_a = a.stat) == null ? void 0 : _a.mtime) - ((_b = b.stat) == null ? void 0 : _b.mtime);
          }
        );
      } else if (field === "ctime" || field === "byCreatedTime") {
        return files.sort(
          (a, b) => {
            var _a, _b;
            return ((_a = a.stat) == null ? void 0 : _a.ctime) - ((_b = b.stat) == null ? void 0 : _b.ctime);
          }
        );
      } else if (field === "alphabeticalReverse") {
        return files.sort(
          (b, a) => a.name.localeCompare(b.name)
        );
      } else if (field === "byModifiedTimeReverse") {
        return files.sort(
          (b, a) => {
            var _a, _b;
            return ((_a = a.stat) == null ? void 0 : _a.mtime) - ((_b = b.stat) == null ? void 0 : _b.mtime);
          }
        );
      } else if (field === "byCreatedTimeReverse") {
        return files.sort(
          (b, a) => {
            var _a, _b;
            return ((_a = a.stat) == null ? void 0 : _a.ctime) - ((_b = b.stat) == null ? void 0 : _b.ctime);
          }
        );
      } else if (field === "chain") {
        return this.sort_tfiles_by_chain(files);
      }
      return files;
    } else if (typeof field === "object") {
      if (field instanceof Array) {
        let nfiles = this.sort_tfiles(files, field[0]);
        if (field.length >= 2) {
          if (field[1] === "x") {
            return nfiles.reverse();
          }
        }
        return nfiles;
      }
    }
    return files;
  }
  sort_tfiles_by_chain(tfiles) {
    let notes = tfiles.filter((f) => f instanceof import_obsidian4.TFile);
    let res = [];
    let ctfiles = [];
    while (notes.length > 0) {
      let note = notes[0];
      if (note instanceof import_obsidian4.TFile) {
        let xchain = this.get_chain(note, -1, -1);
        for (let x of xchain) {
          if (notes.contains(x)) {
            ctfiles.push(x);
            notes.remove(x);
          }
        }
      }
    }
    res.push(...ctfiles);
    let canvas = res.filter((f) => f instanceof import_obsidian4.TFile && ["canvas", "base"].contains(f.extension));
    res = res.filter((f) => f instanceof import_obsidian4.TFile && !["canvas", "base"].contains(f.extension));
    let folders = tfiles.filter((f) => f instanceof import_obsidian4.TFolder);
    if (folders.length > 0) {
      let indexOf = function(f) {
        if (f instanceof import_obsidian4.TFile) {
          return res.indexOf(f);
        } else if (f instanceof import_obsidian4.TFolder) {
          return idxs[folders.indexOf(f)];
        } else {
          return -1;
        }
      };
      let idxs = folders.map(
        (f) => this.indexOfFolder(f, ctfiles)
      );
      res.push(...folders);
      res = res.sort((a, b) => indexOf(a) - indexOf(b));
    }
    for (let tfile of canvas) {
      let rname = res.map((x) => x instanceof import_obsidian4.TFolder ? x.name : x.basename);
      let cname = tfile.basename;
      let idx = rname.indexOf(cname);
      if (idx < 0) {
        idx = rname.indexOf(cname.split(".").slice(0, -1).join("."));
      }
      if (idx < 0) {
        res.push(tfile);
      } else {
        res.splice(idx + 1, 0, tfile);
      }
    }
    return res;
  }
  sort_tfiles_folder_first(tfiles) {
    let A = tfiles.filter((f) => f instanceof import_obsidian4.TFolder).sort((a, b) => a.name.localeCompare(b.name));
    let B = tfiles.filter((f) => f instanceof import_obsidian4.TFile);
    return this.plugin.utils.concat_array([A, B]);
  }
  sort_tfiles_by_field(tfiles, field) {
    let res = tfiles.sort(
      (a, b) => {
        let av = this.editor.get_frontmatter(a, field);
        let bv = this.editor.get_frontmatter(b, field);
        if (typeof av != typeof bv) {
          return 0;
        }
        if (typeof av == "number" && typeof bv == "number") {
          return av - bv;
        }
        if (typeof av == "string" && typeof bv == "string") {
          let v = av.localeCompare(bv);
          return v;
        }
        return 0;
      }
    );
    return res;
  }
  async suggester_sort(tfiles) {
    if (!tfiles) {
      return [];
    }
    if (tfiles.length == 0) {
      return [];
    }
    ;
    let kv = {
      "chain": "chain",
      "name (a to z)": "name",
      "ctime (old to new)": "ctime",
      "mtime (old to new)": "mtime",
      "name (z to a)": ["name", "x"],
      "ctime (new to old)": ["ctime", "x"],
      "mtime (new to old)": ["mtime", "x"]
    };
    let field = await this.plugin.dialog_suggest(
      Object.keys(kv),
      Object.values(kv)
    );
    if (field == null) {
      return [];
    }
    if (field == "chain") {
      tfiles = this.sort_tfiles(tfiles, "name");
    }
    return this.sort_tfiles(tfiles, field);
  }
  view_sort_by_chain() {
    var _a;
    let view = (_a = this.app.workspace.getLeavesOfType(
      "file-explorer"
    )[0]) == null ? void 0 : _a.view;
    if (!view) {
      return;
    }
    view.sort();
    if (view.ready) {
      for (let path in view.fileItems) {
        let item = view.fileItems[path];
        if (item.vChildren) {
          let files = item.vChildren._children.map((f) => f.file);
          files = this.sort_tfiles_by_chain(files);
          let children = item.vChildren._children.sort(
            (a, b) => files.indexOf(a.file) - files.indexOf(b.file)
          );
          item.vChildren.setChildren(children);
        }
      }
      view.tree.infinityScroll.compute();
    }
  }
  async get_file_links(tfile, xlinks = true, inlinks = true, outlinks = true, onlymd = false) {
    let items = {};
    if (!tfile) {
      return items;
    }
    items["\u{1F3E0} " + tfile.basename] = this.app.vault.adapter.getFullPath(tfile.path);
    if (xlinks) {
      let tmp;
      tmp = this.editor.get_frontmatter(tfile, "github");
      if (tmp) {
        if (tmp.contains("github.com")) {
          items["\u{1F310}github"] = tmp;
        } else {
          items["\u{1F310}github"] = `https://github.com/` + tmp;
        }
      }
      tmp = this.editor.get_frontmatter(tfile, "huggingface");
      if (tmp) {
        if (tmp.contains("huggingface.co")) {
          items["\u{1F310}huggingface\u{1F917}"] = tmp;
        } else {
          items["\u{1F310}huggingface\u{1F917}"] = `https://huggingface.co/` + tmp;
        }
      }
      tmp = this.editor.get_frontmatter(tfile, "arxiv");
      if (tmp == null ? void 0 : tmp.ID) {
        items["\u{1F310}arxiv"] = `https://arxiv.org/abs/` + (tmp == null ? void 0 : tmp.ID);
      }
      let text = await this.app.vault.cachedRead(tfile);
      const regex = /\[[^(\[\])]*?\]\(.*?\)/g;
      const matches = text.match(regex);
      if (matches) {
        for (const match of matches) {
          let key = match.slice(1, match.indexOf("]("));
          let value = match.slice(match.indexOf("](")).slice(2, -1);
          if (value === "") {
            continue;
          }
          if (key === "") {
            key = value;
          }
          if (value.startsWith("http")) {
            key = "\u{1F310} " + key;
          } else if (value.startsWith("file:///")) {
            value = value.slice(8);
            key = "\u{1F4C1} " + key;
          } else {
            key = "\u{1F517} " + key;
          }
          items[key] = value;
        }
      }
    }
    if (inlinks) {
      let links = this.get_inlinks(tfile, false);
      for (let i of links) {
        if (onlymd && !(i.extension === "md")) {
          continue;
        }
        if (i.extension === "md") {
          items["\u2139\uFE0F " + i.basename] = this.app.vault.adapter.getFullPath(i.path);
        } else {
          items["\u2139\uFE0F " + i.name] = this.app.vault.adapter.getFullPath(i.path);
        }
      }
    }
    if (outlinks) {
      let links = this.get_outlinks(tfile, false);
      for (let i of links) {
        if (onlymd && !(i.extension === "md")) {
          continue;
        }
        if (i.extension === "md") {
          items["\u{1F17E}\uFE0F " + i.basename] = this.app.vault.adapter.getFullPath(i.path);
        } else {
          items["\u{1F17E}\uFE0F " + i.name] = this.app.vault.adapter.getFullPath(i.path);
        }
      }
    }
    items["\u{1F492} vault"] = this.app.vault.adapter.getFullPath(".");
    return items;
  }
  get_folder_pre_info(tfolder) {
    let note = this.get_tfile(tfolder.path + "/" + tfolder.name + ".md");
    if (!note) {
      return {
        "prev": null,
        "offset": 0
      };
    }
    let info = {
      "prev": this.editor.get_frontmatter(note, "FolderPrevNote"),
      "offset": this.editor.get_frontmatter(note, "FolderPrevNoteOffset")
    };
    if (info["offset"] == null) {
      info["offset"] = 0;
    }
    return info;
  }
  async set_folder_pre_info(tfolder, prev, offset) {
    let tfile = await this.get_folder_note(tfolder);
    let anchor = prev instanceof import_obsidian4.TFile ? prev : this.get_tfile(prev);
    if (anchor) {
      await this.plugin.editor.set_multi_frontmatter(
        tfile,
        {
          "FolderPrevNote": this.get_link_of_file(anchor),
          "FolderPrevNoteOffset": offset
        }
      );
    } else {
      await this.plugin.editor.set_multi_frontmatter(
        tfile,
        {
          "FolderPrevNote": null,
          "FolderPrevNoteOffset": offset
        }
      );
    }
  }
  async reset_offset_of_folder(tfolder) {
    var _a;
    let prev = this.get_folder_pre_info(tfolder);
    if (prev["offset"] == null) {
      return;
    }
    let tfolders = (_a = tfolder.parent) == null ? void 0 : _a.children.filter((x) => x instanceof import_obsidian4.TFolder);
    let folders = [];
    if (tfolders) {
      for (let x of tfolders) {
        let info = this.get_folder_pre_info(x);
        if (info["prev"] == prev["prev"]) {
          folders.push(x);
        }
      }
    }
    folders = folders.sort((a, b) => {
      let ainfo = this.get_folder_pre_info(a);
      let binfo = this.get_folder_pre_info(b);
      return ainfo["offset"] - binfo["offset"];
    });
    if (folders.length == 0) {
      return;
    }
    let base = Math.pow(0.1, Math.ceil(Math.log10(folders.length + 1)) + 1);
    let offset = 0.5 - base;
    for (let folder of folders) {
      offset = offset + base;
      await this.set_folder_pre_info(folder, prev["prev"], offset);
    }
  }
  async get_folder_note(tfolder, create = true) {
    let note = this.get_tfile(tfolder.path + "/" + tfolder.name + ".md");
    if (!note && create) {
      note = await this.app.vault.create(tfolder.path + "/" + tfolder.name + ".md", "");
    }
    return note;
  }
  async move_folder_as_next_note(tfolder, anchor) {
    var _a;
    if (anchor instanceof import_obsidian4.TFolder) {
      let prev = this.get_folder_pre_info(anchor);
      await this.set_folder_pre_info(tfolder, prev["prev"], prev["offset"] * 1.001);
    } else if (anchor instanceof import_obsidian4.TFile) {
      let prevs = [];
      let tfolders = (_a = tfolder.parent) == null ? void 0 : _a.children.filter((x) => x instanceof import_obsidian4.TFolder && x != tfolder);
      if (tfolders) {
        for (let x of tfolders) {
          let info = await this.get_folder_pre_info(x);
          prevs.push(info);
        }
      }
      prevs = prevs.filter((x) => x["prev"] && this.get_tfile(x["prev"]) == anchor).map((x) => x["offset"]);
      if (prevs.length == 0) {
        this.set_folder_pre_info(tfolder, anchor, 0.5);
      } else {
        this.set_folder_pre_info(tfolder, anchor, Math.min(...prevs) * 1.001);
      }
    }
    await this.reset_offset_of_folder(tfolder);
  }
  get_confluence_level(note) {
    let fm = this.editor.get_frontmatter(note, this.plugin.settings.field_of_confluence_tab_format);
    if (fm) {
      return (fm.match(/\t/g) || []).length;
    }
    return 0;
  }
  lexorank_init_keys(N) {
    if (N <= 0)
      return [];
    let min = import_lexorank.LexoRank.min();
    let max = import_lexorank.LexoRank.max();
    let result = [];
    function divide(left, right, n) {
      if (n <= 0)
        return;
      let mid = left.between(right);
      result.push(mid.toString());
      let leftCount = Math.floor((n - 1) / 2);
      let rightCount = n - 1 - leftCount;
      divide(left, mid, leftCount);
      divide(mid, right, rightCount);
    }
    divide(min, max, N);
    return result.sort();
  }
  lexorank_gen_mid(prev, next) {
    if (!prev && !next) {
      return void 0;
    }
    if (!prev) {
      return this.LexoRank.parse(next).genPrev().toString();
    }
    if (!next) {
      return this.LexoRank.parse(prev).genNext().toString();
    }
    let p = this.LexoRank.parse(prev);
    let n = this.LexoRank.parse(next);
    return p.between(n).toString();
  }
  async lexorank_set_id(tfile, key) {
    if (!key) {
      return false;
    }
    let ckey = await this.lexorank_get_id(tfile);
    if (ckey == key) {
      return false;
    }
    if (tfile instanceof import_obsidian4.TFolder) {
      let xfile = await this.get_folder_note(tfile, true);
      console.log(`set ${xfile.basename} ${this.fid} as ${key}`);
      await this.plugin.editor.set_frontmatter(xfile, this.fid, key);
    } else if (tfile instanceof import_obsidian4.TFile) {
      if (!this.plugin.wordcout.filter(tfile)) {
        return;
      }
      console.log(`set ${tfile.basename} ${this.nid} as ${key}`);
      await this.plugin.editor.set_frontmatter(tfile, this.nid, key);
    }
    return true;
  }
  async lexorank_get_id(tfile) {
    if (tfile instanceof import_obsidian4.TFolder) {
      let xfile = await this.get_folder_note(tfile, false);
      if (xfile) {
        return this.plugin.editor.get_frontmatter(xfile, this.fid);
      } else {
        return void 0;
      }
    } else if (tfile instanceof import_obsidian4.TFile) {
      if (this.plugin.wordcout.filter(tfile)) {
        return this.plugin.editor.get_frontmatter(tfile, this.nid);
      }
    }
  }
  async lexorank_init_folder(tfolder, recursive = false) {
    let tfiles = this.children[tfolder.path];
    if (tfiles) {
      tfiles = tfiles.filter((tfile) => {
        return tfile instanceof import_obsidian4.TFolder || tfile instanceof import_obsidian4.TFile && tfile.extension == "md";
      });
      let keys = this.lexorank_init_keys(tfiles.length);
      let i = 0;
      while (i < tfiles.length) {
        await this.lexorank_set_id(tfiles[i], keys[i]);
        i = i + 1;
      }
    }
    if (!recursive) {
      return;
    }
    for (let tfile of tfiles) {
      if (tfile instanceof import_obsidian4.TFolder) {
        await this.lexorank_init_folder(tfile, recursive);
      }
    }
  }
  lexorank_gen_keys(keys) {
    let i = 0;
    while (i < keys.length) {
      if (!keys[i]) {
        let prevKey = null;
        for (let j = i - 1; j >= 0; j--) {
          if (keys[j]) {
            prevKey = keys[j];
            break;
          }
        }
        let nextKey = null;
        for (let j = i + 1; j < keys.length; j++) {
          if (keys[j]) {
            nextKey = keys[j];
            break;
          }
        }
        let prevRank = prevKey ? this.LexoRank.parse(prevKey) : null;
        let nextRank = nextKey ? this.LexoRank.parse(nextKey) : null;
        let newRank;
        if (prevRank && nextRank) {
          if (prevRank.toString() === nextRank.toString()) {
            newRank = prevRank.genNext();
          } else {
            newRank = prevRank.between(nextRank);
          }
        } else if (prevRank) {
          newRank = prevRank.genNext();
        } else if (nextRank) {
          newRank = nextRank.genPrev();
        } else {
          newRank = this.LexoRank.middle();
        }
        keys[i] = newRank.toString();
        i++;
        continue;
      }
      if (i > 0 && keys[i - 1] >= keys[i]) {
        let start = i - 1;
        let end = i;
        while (end + 1 < keys.length && keys[end] >= keys[end + 1])
          end++;
        let leftKey = start > 0 ? keys[start - 1] || null : null;
        let rightKey = end + 1 < keys.length ? keys[end + 1] || null : null;
        let lastRank = leftKey ? this.LexoRank.parse(leftKey) : null;
        for (let k = start; k <= end; k++) {
          let nextRank = rightKey ? this.LexoRank.parse(rightKey) : null;
          let newRank;
          if (lastRank && nextRank) {
            if (lastRank.toString() === nextRank.toString()) {
              newRank = lastRank.genNext();
            } else {
              newRank = lastRank.between(nextRank);
            }
          } else if (lastRank) {
            newRank = lastRank.genNext();
          } else if (nextRank) {
            newRank = nextRank.genPrev();
          } else {
            newRank = this.LexoRank.middle();
          }
          keys[k] = newRank.toString();
          lastRank = this.LexoRank.parse(keys[k]);
        }
        i = end + 1;
        continue;
      }
      i++;
    }
    return keys;
  }
  lexorank_check_keys(keys) {
    let i = 0;
    while (i < keys.length - 1) {
      let curr = keys[i];
      let next = keys[i + 1];
      if (!curr || !next) {
        return false;
      }
      if (next <= curr) {
        return false;
      }
      i = i + 1;
    }
    return true;
  }
  async lexorank_get_ids(tfiles) {
    let keys = [];
    for (let i = 0; i < tfiles.length; i++) {
      let k = await this.lexorank_get_id(tfiles[i]);
      keys.push(k);
    }
    return keys;
  }
  async lexorank_set_ids(tfiles, keys) {
    var _a;
    let p = [];
    let i = 0;
    while (i < tfiles.length) {
      if (tfiles[i] instanceof import_obsidian4.TFolder || tfiles[i] instanceof import_obsidian4.TFile && tfiles[i].basename == ((_a = tfiles[i].parent) == null ? void 0 : _a.name)) {
        p.push(this.lexorank_set_id(tfiles[i], keys[i]));
      } else {
        p.push(this.lexorank_set_id(tfiles[i], keys[i]));
      }
      i++;
    }
    const results = await Promise.all(p);
    return results;
  }
  async lexorank_reset_tfiles(tfiles, rebuild = false) {
    tfiles = tfiles.filter(
      (f) => f instanceof import_obsidian4.TFolder || f instanceof import_obsidian4.TFile && f.extension === "md"
    );
    let keys;
    if (rebuild) {
      keys = this.lexorank_init_keys(tfiles.length);
    } else {
      keys = await this.lexorank_get_ids(tfiles);
      let i = 0;
      while (!this.lexorank_check_keys(keys)) {
        console.log("i", "lexorank_gen_keys--", i);
        keys = this.lexorank_gen_keys(keys);
        i = i + 1;
        if (i > 5) {
          break;
        }
      }
    }
    let p = await this.lexorank_set_ids(tfiles, keys);
    return p;
  }
  async lexorank_reset_folder(tfolder, recursive = false) {
    let tfiles = this.children[tfolder.path];
    if (!tfiles)
      return;
    await this.lexorank_reset_tfiles(tfiles);
    if (recursive) {
      for (let f of tfiles) {
        if (f instanceof import_obsidian4.TFolder) {
          await this.lexorank_reset_folder(f, recursive);
        }
      }
    }
    console.log(`Lexorank reset folder: ${tfolder.path} \u2714\uFE0F`);
  }
  async lexorank_reset_vault(root = "/", rebuild = false) {
    let i = 10;
    let res;
    while (i != 0) {
      let tfiles = this.children_as_chain(root);
      res = await this.lexorank_reset_tfiles(tfiles, rebuild);
      if (res.filter((x) => x).length == 0) {
        break;
      }
      i = i - 1;
    }
    console.log(`Lexorank reset vault: ${root} \u2714\uFE0F`);
    return res == null ? void 0 : res.filter((x) => x).length;
  }
};

// src/NCTextarea.ts
var NCTextarea = class {
  constructor(plugin) {
    this.yamljs = require_js_yaml();
    this.plugin = plugin;
    this.app = plugin.app;
    this.registerMarkdownCodeBlockProcessor();
  }
  arrayBufferToBase64(buffer) {
    let binary = "";
    let bytes = new Uint8Array(buffer);
    let len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
  }
  async registerMarkdownCodeBlockProcessor(field = "textarea") {
    let nc = this.plugin;
    nc.registerMarkdownCodeBlockProcessor(field, async (source, el, ctx) => {
      var _a, _b, _c;
      source = source.trim();
      let config;
      if (source == "") {
        config = {};
      } else {
        config = nc.textarea.yamljs.load(source);
      }
      let tfile = nc.chain.get_tfile(ctx.sourcePath);
      if (tfile) {
        let frontmatter = nc.app.metadataCache.getFileCache(tfile)["frontmatter"];
        if (frontmatter) {
          for (let key in frontmatter) {
            config[key] = frontmatter[key];
          }
        }
      }
      let container = el.createEl("div", { cls: "textarea-container" });
      let area = null;
      if (config["textarea"] != false) {
        let cls = "code_block_textarea";
        if ((_a = config.textarea) == null ? void 0 : _a.cls) {
          cls = config["textarea"]["cls"];
        }
        area = container.createEl("textarea", { cls });
        area.style.width = "100%";
        area.style.height = "200px";
        let style = (_b = config.textarea) == null ? void 0 : _b.style;
        if (style && typeof style == "object") {
          for (let name in style) {
            if (name == "backgroundImage") {
              let img = nc.chain.get_tfile(style[name]);
              if (img) {
                let data = await nc.app.vault.readBinary(img);
                let text = this.arrayBufferToBase64(data);
                let bs64 = `data:image/png;base64,${text}`;
                area.style[name] = `url('${bs64}')`;
                continue;
              }
            }
            area.style[name] = style[name];
          }
        }
      }
      for (let k in config) {
        if (k.startsWith("buttons")) {
          let btns = config[k];
          if (btns && Array.isArray(btns)) {
            let buttonContainer = container.createEl("div", { cls: "code_block_textarea_btn_container" });
            buttonContainer.style.display = "flex";
            buttonContainer.style.justifyContent = "flex-start";
            buttonContainer.style.marginTop = "10px";
            for (let btn of btns) {
              let name = btn[0];
              let fname = btn[1];
              if (!name || !fname) {
                continue;
              }
              let cls = "code_block_textarea_btn";
              if (btn[2]) {
                cls = btn[2];
              }
              let ufunc = nc.textarea[fname];
              if (!ufunc) {
                ufunc = await nc.utils.get_str_func(nc.app, fname);
              }
              if (ufunc) {
                let xbtn = buttonContainer.createEl("button", { text: name, cls });
                xbtn.addEventListener("click", () => {
                  ufunc(area, source, el, ctx);
                });
                continue;
              }
              let c = (_c = nc.app.commands) == null ? void 0 : _c.findCommand(fname);
              if (c) {
                let xbtn = buttonContainer.createEl("button", { text: name, cls });
                xbtn.addEventListener("click", () => {
                  nc.app.commands.executeCommandById(fname);
                });
                continue;
              }
              let tfile2 = nc.chain.get_tfile(fname);
              if (tfile2) {
                let xbtn = buttonContainer.createEl("button", { text: name, cls });
                xbtn.addEventListener("click", () => {
                  let tags = nc.chain.get_tags(tfile2).map((x) => x.slice(1)).filter(
                    (x) => nc.settings.tpl_tags_folder.contains(x)
                  );
                  if (tags.length > 0) {
                    nc.utils.parse_templater(
                      nc.app,
                      fname,
                      true,
                      {
                        area,
                        source,
                        el,
                        ctx
                      }
                    );
                  } else {
                    nc.chain.open_note_in_modal(tfile2.path);
                  }
                });
                continue;
              }
            }
            container.appendChild(buttonContainer);
          }
        }
      }
      if (area && config["focus"] != false) {
        area.focus();
      }
    });
  }
  clear_area(area) {
    area.value = "";
  }
  copy_area(area) {
    area.select();
    navigator.clipboard.writeText(area.value);
  }
  log_area(area) {
    console.log("\u5F53\u524DTextarea\u4E3A\uFF1A");
    console.log(area);
  }
};

// src/NCFileExplorer.ts
var import_obsidian5 = require("obsidian");

// node_modules/monkey-around/dist/index.mjs
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const inherited = obj[method], hadOwn = obj.hasOwnProperty(method), original = hadOwn ? inherited : function() {
    return Object.getPrototypeOf(obj)[method].apply(this, arguments);
  };
  let current = createWrapper(original);
  if (inherited)
    Object.setPrototypeOf(current, inherited);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, inherited || Function);
  }
}

// src/NCFileExplorer.ts
var NCFileExplorer = class {
  constructor(plugin) {
    this.explorerPatches = [];
    this.plugin = plugin;
    this.chain = plugin.chain;
    this.app = plugin.app;
    this.register();
  }
  async register() {
    await this.waitForFileExplorer();
    await this.patchFileExplorer();
    try {
      this.sort(0, true);
      this.set_display_text();
      this.set_fileitem_style();
    } catch (error) {
    }
  }
  async patchFileExplorer() {
    let explorerView = this.file_explorer;
    this.explorerPatches.push(
      around(Object.getPrototypeOf(this.plugin.app.dragManager), {
        onDragEnd: (original) => function(...args) {
          let dragManager = this;
          let nc = dragManager.app.plugins.plugins["note-chain"];
          async function move_file(dragManager2) {
            try {
              let hoverEl = dragManager2.hoverEl;
              if (hoverEl && (hoverEl.classList.contains("tree-item") && hoverEl.classList.contains("nav-folder") || hoverEl.classList.contains("nav-files-container"))) {
                let ghostEl = dragManager2.ghostEl;
                if (!ghostEl) {
                  return;
                }
                let x = parseInt(ghostEl.style.left, 10);
                let y = parseInt(ghostEl.style.top, 10);
                let element = document.elementFromPoint(x, y);
                if (!element) {
                  return;
                }
                let path;
                if (element.classList.contains("nav-file-title-content")) {
                  element = element.closest(".nav-file-title");
                  if (!element) {
                    return;
                  }
                }
                path = element.getAttribute("data-path");
                let target = dragManager2.app.vault.getAbstractFileByPath(path);
                if (target instanceof import_obsidian5.TFolder || target.extension != "md") {
                  return;
                }
                let sourceEls = dragManager2.sourceEls;
                if (!sourceEls || sourceEls.length == 0) {
                  return;
                }
                let tfiles;
                if (sourceEls.length == 1) {
                  tfiles = sourceEls.map((x2) => {
                    var _a;
                    return dragManager2.app.vault.getAbstractFileByPath((_a = x2 == null ? void 0 : x2.dataset) == null ? void 0 : _a.path);
                  });
                } else {
                  tfiles = nc.chain.get_selected_files(false);
                }
                setTimeout(() => {
                  nc.chain.chain_set_next_files(tfiles, target, true);
                  ;
                }, 100);
              }
            } catch (error) {
            }
          }
          if (nc.settings.isdraged) {
            move_file(dragManager);
          }
          original.call(this, ...args);
        }
      })
    );
    this.explorerPatches.push(
      around(Object.getPrototypeOf(explorerView), {
        getSortedFolderItems: (original) => function(e) {
          let plugin = this.app.plugins.getPlugin("note-chain");
          if (plugin) {
            try {
              let res = original.call(this, e);
              let tfiles = plugin.chain.children[e.path];
              if (tfiles) {
                res = res.sort((a, b) => tfiles.indexOf(a.file) - tfiles.indexOf(b.file));
              }
              return res;
            } catch (e2) {
              return original.call(this, e2);
            }
          } else {
            return original.call(this, e);
          }
        }
        // dragFiles:(original) => function(...args) {
        // 	let nc = this.app.plugins.plugins['note-chain'];
        // 	if(nc.settings.isdraged){
        // 	}else{
        // 		return original.call(this, ...args);
        // 	}
        // }
      })
    );
    let item = Object.values(this.file_explorer.fileItems)[0];
    if (item) {
      around(Object.getPrototypeOf(item), {
        getTtitle: (original) => function(e) {
          let plugin = this.app.plugins.getPlugin("note-chain");
          return function(e2) {
            if (plugin) {
              try {
                let res = plugin.explorer.get_display_text(this.file);
                return res;
              } catch (e3) {
                return original.call(this);
              }
            } else {
              return original.call(this);
            }
          };
        }
      });
    }
  }
  async unregister() {
    let items = this.file_explorer.fileItems;
    for (let key in items) {
      let item = items[key];
      await this._set_display_text_(item, this.get_origin_text(item.file));
      item.el.style.background = null;
      item.el.style.border = null;
    }
    this.explorerPatches.forEach((unpatch) => unpatch());
  }
  async waitForFileExplorer() {
    while (!this.file_explorer.fileItems) {
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
    return this.file_explorer.fileItems;
  }
  get file_explorer() {
    var _a;
    let a = this.app.workspace.getLeavesOfType(
      "file-explorer"
    );
    let view = (_a = a[0]) == null ? void 0 : _a.view;
    return view;
  }
  async sort(nsleep = 0, init = false) {
    var _a;
    if ((_a = this.file_explorer) == null ? void 0 : _a.sort) {
      if (nsleep > 0) {
        await sleep(nsleep);
      }
      if (init) {
        this.plugin.chain.init_children();
      }
      if (Object.keys(this.plugin.chain.children).length == 0) {
        setTimeout(() => {
          this.sort(nsleep, true);
        }, 3e3);
      } else {
        this.file_explorer.sort();
      }
    }
  }
  get_field_of_display_text(tfile) {
    if (this.plugin.settings.field_of_display_text) {
      let item = this.plugin.editor.get_frontmatter_config(tfile, this.plugin.settings.field_of_display_text);
      if (typeof item != "string") {
        return "";
      }
      return item;
    }
    return "";
  }
  get_origin_text(tfile) {
    if (tfile instanceof import_obsidian5.TFile) {
      if (tfile.extension == "md") {
        return tfile.basename;
      } else if (tfile.extension == "canvas") {
        return tfile.basename;
      } else if (tfile.extension == "base") {
        return tfile.basename;
      } else {
        return tfile.name;
      }
    } else {
      return tfile.name;
    }
  }
  get_item(tfile, field) {
    var _a, _b;
    if (!field) {
      return "";
    }
    let fields = field.split("|");
    let item = "";
    for (let f of fields) {
      if (f == "$0") {
        return this.get_origin_text(tfile);
      }
      if (f.startsWith("?")) {
        break;
      }
      if (tfile instanceof import_obsidian5.TFile) {
        let s = this.plugin.editor.get_frontmatter(tfile, f);
        if (typeof s === "number") {
          item = `${s}`;
        } else if (typeof s != "string" || s == "") {
          continue;
        }
        item = s;
        break;
      }
    }
    if (((_a = fields.last()) == null ? void 0 : _a.startsWith("?")) && item) {
      return ((_b = fields.last()) == null ? void 0 : _b.slice(1).replace(/\$1/g, item)) || "";
    }
    return item;
  }
  get_display_text(tfile) {
    let str = this.get_field_of_display_text(tfile);
    if (!str && this.plugin.settings.field_of_confluence_tab_format) {
      str = `<${this.plugin.settings.field_of_confluence_tab_format}><$0>`;
    } else {
      str = `<${this.plugin.settings.field_of_confluence_tab_format}>${str}`;
    }
    if (!str || str == "$0" || str == "<$0>") {
      return this.get_origin_text(tfile);
    }
    let mstr = str.replace(/\<(.+?)?\>/g, (match, field) => {
      return this.get_item(tfile, field);
    });
    mstr = mstr;
    if (mstr == "") {
      return this.get_origin_text(tfile);
    } else {
      return mstr;
    }
  }
  _set_display_text_(item, txt) {
    if (item && txt) {
      if (typeof txt == "string") {
        item.innerEl.setText(txt);
      }
    }
  }
  set_display_text() {
    let items = this.file_explorer.fileItems;
    for (let key in items) {
      let item = items[key];
      let txt = this.get_display_text(item.file);
      this._set_display_text_(item, txt);
    }
  }
  async get_fileitem_style(tfile) {
    if (this.plugin.settings.field_of_background_color) {
      let style = this.plugin.editor.get_frontmatter_config(tfile, this.plugin.settings.field_of_background_color);
      if (typeof style == "string") {
        let func = await this.plugin.utils.get_str_func(this.app, style);
        if (func) {
          return func;
        }
      }
      return style;
    }
    return null;
  }
  async set_fileitem_style() {
    let items = this.file_explorer.fileItems;
    for (let key in items) {
      let item = items[key];
      let style = await this.get_fileitem_style(item.file);
      await this.set_fileitem_style_of_file(item.file, style);
    }
  }
  async set_fileitem_style_of_file(tfile, style = null) {
    if (!tfile) {
      return;
    }
    if (!style) {
      style = await this.get_fileitem_style(tfile);
    }
    let items = this.file_explorer.fileItems;
    let item = items[tfile.path];
    if (item) {
      if (typeof style == "function") {
        style = await style(tfile);
        if (!style) {
          return;
        }
      }
      if (style == null) {
        item.el.style.background = null;
        item.el.style.border = null;
      } else if (typeof style == "string") {
        item.el.style.background = style;
      } else if (typeof style == "object") {
        for (let k in style) {
          item.el.style[k] = style[k];
        }
      } else if (typeof style == "function") {
        await style(tfile);
      }
    }
  }
};

// src/strings.ts
var Strings = class {
  constructor() {
    let lang = window.localStorage.getItem("language");
    if (lang) {
      this.language = lang;
    } else {
      this.language = "en";
    }
  }
  get cmd_mermaid_flowchart_link() {
    if (this.language == "zh") {
      return "Mermaid\u94FE\u63A5\u5361\u7247";
    } else {
      return "Mermaid of linked notes";
    }
  }
  get cmd_mermaid_flowchart_folder() {
    if (this.language == "zh") {
      return "Mermaid\u76EE\u5F55\u5361\u7247";
    } else {
      return "Mermaid of folder notes";
    }
  }
  get cmd_mermaid_flowchart_auto() {
    if (this.language == "zh") {
      return "Mermaid\u5361\u7247";
    } else {
      return "Mermaid of notes";
    }
  }
  get cmd_file_open_with_system_app() {
    if (this.language == "zh") {
      return "\u6587\u4EF6 - \u4F7F\u7528\u7CFB\u7EDF\u7A0B\u5E8F\u6253\u5F00\uFF08\u4EC5\u684C\u9762\uFF09";
    } else {
      return "File - open with system app (desktop only)";
    }
  }
  get cmd_file_show_in_system_explorer() {
    if (this.language == "zh") {
      return "\u6587\u4EF6 - \u5728\u7CFB\u7EDF\u6D4F\u89C8\u7684\u67E5\u770B\uFF08\u4EC5\u684C\u9762\uFF09";
    } else {
      return "File - show in system explorer (desktop only)";
    }
  }
  get cmd_file_rename() {
    if (this.language == "zh") {
      return "\u6587\u4EF6 - \u91CD\u547D\u540D\u6587\u4EF6";
    } else {
      return "File - rename file";
    }
  }
  get cmd_longform2notechain() {
    if (this.language == "zh") {
      return "\u6839\u636ELongForm\u91CD\u7F6E\u7B14\u8BB0\u94FE\u6761";
    } else {
      return "Reset note chain by longform";
    }
  }
  get cmd_longform4notechain() {
    if (this.language == "zh") {
      return "\u6839\u636E\u7B14\u8BB0\u94FE\u6761\uFF0C\u91CD\u7F6ELongForm\u573A\u666F";
    } else {
      return "Reset longform scenes by note chain";
    }
  }
  get cmd_sort_file_explorer() {
    if (this.language == "zh") {
      return "\u6839\u636E\u7B14\u8BB0\u94FE\u6392\u5E8F";
    } else {
      return "Sort file explorer by note chain";
    }
  }
  get cmd_open_notes_smarter() {
    if (this.language == "zh") {
      return "\u667A\u80FD\u6253\u5F00\u6587\u4EF6";
    } else {
      return "Open note smarter";
    }
  }
  get cmd_open_note() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u6587\u4EF6";
    } else {
      return "Open note";
    }
  }
  get cmd_open_prev_note() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u524D\u7F6E\u7B14\u8BB0";
    } else {
      return "Open prev note";
    }
  }
  get chain_move_up_node() {
    if (this.language == "zh") {
      return "\u5411\u524D\u79FB\u52A8\u7B14\u8BB0\u8282\u70B9";
    } else {
      return "Move node up";
    }
  }
  get chain_move_down_node() {
    if (this.language == "zh") {
      return "\u5411\u540E\u79FB\u52A8\u7B14\u8BB0\u8282\u70B9";
    } else {
      return "Move node down";
    }
  }
  get cmd_open_next_note() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Open next note";
    }
  }
  get cmd_reveal_note() {
    if (this.language == "zh") {
      return "\u5B9A\u4F4D\u5F53\u524D\u7B14\u8BB0";
    } else {
      return "Reveal current file in navigation";
    }
  }
  get cmd_open_and_reveal_note() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u5E76\u5B9A\u4F4D\u7B14\u8BB0";
    } else {
      return "Open and reveal note";
    }
  }
  get cmd_open_prev_note_of_right_leaf() {
    if (this.language == "zh") {
      return "\u53F3\u4FA7\u9875\u9762\u6253\u5F00\u524D\u7F6E\u7B14\u8BB0";
    } else {
      return "Open prev note of right leaf";
    }
  }
  get cmd_open_next_note_of_right_leaf() {
    if (this.language == "zh") {
      return "\u53F3\u4FA7\u9875\u9762\u6253\u5F00\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Open next note of right leaf";
    }
  }
  get cmd_execute_template_modal() {
    if (this.language == "zh") {
      return "\u6267\u884C\u811A\u672C\u7B14\u8BB0";
    } else {
      return "Execute Templater modal";
    }
  }
  get cmd_toogle_css_block_in_note() {
    if (this.language == "zh") {
      return "\u542F\u7528/\u5173\u95ED css \u4EE3\u7801\u5757";
    } else {
      return "Toogle css block in note";
    }
  }
  get cmd_set_frontmatter() {
    if (this.language == "zh") {
      return "\u6240\u9009\u7B14\u8BB0\u8BBE\u7F6E\u5C5E\u6027";
    } else {
      return "Set fronmatter for selected notes";
    }
  }
  get cmd_move_next_level() {
    if (this.language == "zh") {
      return "\u63D0\u9AD8\u7F29\u8FDB\u5C42\u7EA7";
    } else {
      return "Increase the indentation level";
    }
  }
  get cmd_move_none_level() {
    if (this.language == "zh") {
      return "\u5220\u9664\u7F29\u8FDB\u5C42\u7EA7";
    } else {
      return "Remove the indentation level";
    }
  }
  get cmd_move_prev_level() {
    if (this.language == "zh") {
      return "\u964D\u4F4E\u7F29\u8FDB\u5C42\u7EA7";
    } else {
      return "Decrease the indentation level";
    }
  }
  get cmd_open_note_in_modal() {
    if (this.language == "zh") {
      return "\u5F39\u7A97\u4E2D\u6253\u5F00\u7B14\u8BB0";
    } else {
      return "Open note in modal";
    }
  }
  get cmd_open_note_in_view() {
    if (this.language == "zh") {
      return "\u9875\u9762\u4E2D\u6253\u5F00\u7B14\u8BB0";
    } else {
      return "Open note in view";
    }
  }
  get cmd_insert_command_id() {
    if (this.language == "zh") {
      return "\u63D2\u5165\u547D\u4EE4ID";
    } else {
      return "Insert command id";
    }
  }
  get cmd_execut_current_note() {
    if (this.language == "zh") {
      return "\u6267\u884C\u5F53\u524D\u7B14\u8BB0";
    } else {
      return "Execute current note";
    }
  }
  get filemenu_create_next_note() {
    if (this.language == "zh") {
      return "\u521B\u5EFA\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Create next note";
    }
  }
  get filemenu_move_as_next_note() {
    if (this.language == "zh") {
      return "\u79FB\u52A8\u4E3A\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Move as next note";
    }
  }
  get filemenu_move_as_next_notes() {
    if (this.language == "zh") {
      return "\u79FB\u52A8\u4E3A\u540E\u7F6E\u7B14\u8BB0\uFF08\u9009\u4E2D\u7B14\u8BB0\uFF09";
    } else {
      return "Move as next notes(selected)";
    }
  }
  get clear_inlinks() {
    if (this.language == "zh") {
      return "\u6E05\u7406\u7B14\u8BB0\u5165\u94FE";
    } else {
      return "Clear inlinks of current file";
    }
  }
  get move_file_to_another_folder() {
    if (this.language == "zh") {
      return "\u79FB\u52A8\u5F53\u524D\u6587\u4EF6";
    } else {
      return "Move current file to another folder";
    }
  }
  get replace_notes_with_regx() {
    if (this.language == "zh") {
      return "\u6B63\u5219\u8868\u8FBE\u5F0F\u66FF\u6362\u7B14\u8BB0\u5185\u5BB9";
    } else {
      return "Replace by regex";
    }
  }
  get chain_insert_node() {
    if (this.language == "zh") {
      return "\u63D2\u5165\u8282\u70B9";
    } else {
      return "Insert node of chain";
    }
  }
  get chain_set_seq_note() {
    if (this.language == "zh") {
      return "\u91CD\u5851\u5F53\u524D\u6587\u4EF6\u5939\u7B14\u8BB0\u94FE\u6761";
    } else {
      return "Rebuild the chain of current folder";
    }
  }
  get create_new_note() {
    if (this.language == "zh") {
      return "\u521B\u5EFA\u65B0\u7B14\u8BB0";
    } else {
      return "Create new note";
    }
  }
  get setting_isSortFileExplorer() {
    if (this.language == "zh") {
      return "\u6839\u636E\u7B14\u8BB0\u94FE\u6761\u6392\u5E8F\u76EE\u5F55";
    } else {
      return "Sort by chain in file explorer?";
    }
  }
  get setting_isFolderFirst() {
    if (this.language == "zh") {
      return "\u6392\u5E8F\u65F6\u76EE\u5F55\u65F6\u6587\u4EF6\u5939\u4F18\u5148\uFF1F";
    } else {
      return "Sort folder first in file explorer?";
    }
  }
  get setting_isdraged() {
    if (this.language == "zh") {
      return "\u62D6\u52A8\u6392\u5E8F";
    } else {
      return "Sort files by drag & drop?";
    }
  }
  get setting_PrevChain() {
    if (this.language == "zh") {
      return "\u524D\u7F6E\u7B14\u8BB0\u6570\u91CF\uFF1F";
    } else {
      return "Number of prev notes to show?";
    }
  }
  get setting_NextChain() {
    if (this.language == "zh") {
      return "\u540E\u7F6E\u7B14\u8BB0\u6570\u91CF\uFF1F";
    } else {
      return "Number of next notes to show?";
    }
  }
  get setting_suggesterNotesMode() {
    if (this.language == "zh") {
      return `${this.chain_insert_node}\uFF1A\u9ED8\u8BA4\u6A21\u5F0F`;
    } else {
      return `${this.chain_insert_node}:Default mode`;
    }
  }
  get setting_auto_notechain() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u6587\u4EF6\u65F6\uFF0C\u81EA\u52A8\u91CD\u5851\u6587\u4EF6\u5939\u7B14\u8BB0\u94FE\uFF1F";
    } else {
      return "Auto build notechain of folder while open new file?";
    }
  }
  get setting_refreshDataView() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u6587\u4EF6\u65F6\uFF0C\u5237\u65B0Dataview\u89C6\u56FE\uFF1F";
    } else {
      return "Refresh dataview while open new file?";
    }
  }
  get setting_refreshTasks() {
    if (this.language == "zh") {
      return "\u6253\u5F00\u6587\u4EF6\u65F6\uFF0C\u5237\u65B0Tasks\u89C6\u56FE\uFF1F";
    } else {
      return "Refresh tasks while open new file?";
    }
  }
  get setting_wordcout() {
    if (this.language == "zh") {
      return "\u7EDF\u8BA1\u6BCF\u65E5\u5B57\u6570";
    } else {
      return "Register daily word count?";
    }
  }
  get setting_avata() {
    if (this.language == "zh") {
      return "\u5934\u50CF";
    } else {
      return "Avata";
    }
  }
  get setting_templater_tag() {
    if (this.language == "zh") {
      return "\u811A\u672C\u7B14\u8BB0\u6807\u7B7E\u6216\u76EE\u5F55";
    } else {
      return "Tags or folder of script note";
    }
  }
  get setting_wordcout_xfolder() {
    if (this.language == "zh") {
      return "\u8DF3\u8FC7\u4EE5\u4E0B\u76EE\u5F55";
    } else {
      return "Ignore these folders";
    }
  }
  get setting_notice_while_modify_chain() {
    if (this.language == "zh") {
      return "\u4FEE\u6539\u7B14\u8BB0\u94FE\u65F6\u663E\u793A\u901A\u77E5\uFF1F";
    } else {
      return "Notice while modify note chain?";
    }
  }
  get setting_field_of_prevnote() {
    if (this.language == "zh") {
      return "\u524D\u7F6E\u7B14\u8BB0\u5C5E\u6027\u540D";
    } else {
      return "Frontmatter of prev note";
    }
  }
  get setting_field_of_nextnote() {
    if (this.language == "zh") {
      return "\u540E\u7F6E\u7B14\u8BB0\u5C5E\u6027\u540D";
    } else {
      return "Frontmatter of next note";
    }
  }
  get setting_field_of_display_text() {
    if (this.language == "zh") {
      return "\u6587\u4EF6\u5217\u8868\u663E\u793A\u6587\u4EF6\u540D";
    } else {
      return "Display text for notes in file-explorer?";
    }
  }
  get setting_confluence_tab_format() {
    if (this.language == "zh") {
      return "\u4F7F\u7528Confluence\u7F29\u8FDB\u683C\u5F0F";
    } else {
      return "Use confluence indentation format";
    }
  }
  get setting_field_of_background_color() {
    if (this.language == "zh") {
      return "\u6587\u4EF6\u5217\u8868\u5143\u7D20\u98CE\u683C";
    } else {
      return "File-item style for notes in file-explorer?";
    }
  }
  get item_insert_suggester() {
    if (this.language == "zh") {
      return "\u63D2\u5165\u6A21\u5F0F\uFF08\u76F8\u5BF9\u4E8E\u951A\u70B9\uFF09";
    } else {
      return "Insert mode(relate to anchor).";
    }
  }
  get item_insert_node_after() {
    if (this.language == "zh") {
      return "\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Next note";
    }
  }
  get item_insert_node_before() {
    if (this.language == "zh") {
      return "\u524D\u7F6E\u7B14\u8BB0";
    } else {
      return "Prev note";
    }
  }
  get item_insert_node_as_head() {
    if (this.language == "zh") {
      return "\u94FE\u5934";
    } else {
      return "Head of chain";
    }
  }
  get item_insert_node_as_tail() {
    if (this.language == "zh") {
      return "\u94FE\u5C3E";
    } else {
      return "Tail of thain";
    }
  }
  get item_insert_folder_after() {
    if (this.language == "zh") {
      return "\u6587\u4EF6\u5939\u540E\u7F6E";
    } else {
      return "Folder as next";
    }
  }
  get item_get_brothers() {
    if (this.language == "zh") {
      return "\u540C\u7EA7\u7B14\u8BB0";
    } else {
      return "Notes in same folder";
    }
  }
  get item_same_folder() {
    if (this.language == "zh") {
      return "\u540C\u7EA7\u7B14\u8BB0+\u5B50\u76EE\u5F55";
    } else {
      return "Notes in same folder(recursive)";
    }
  }
  get item_inlinks_outlinks() {
    if (this.language == "zh") {
      return "\u51FA\u94FE+\u5165\u94FE";
    } else {
      return "outLinks + inLinks";
    }
  }
  get item_inlins() {
    if (this.language == "zh") {
      return "\u5165\u94FE";
    } else {
      return "inlinks";
    }
  }
  get item_outlinks() {
    if (this.language == "zh") {
      return "\u51FA\u94FE";
    } else {
      return "outlinks";
    }
  }
  get item_all_noes() {
    if (this.language == "zh") {
      return "\u6240\u6709\u7B14\u8BB0";
    } else {
      return "All notes";
    }
  }
  get item_recent() {
    if (this.language == "zh") {
      return "\u8FD1\u671F\u7B14\u8BB0";
    } else {
      return "Recent";
    }
  }
  get item_uncle_notes() {
    if (this.language == "zh") {
      return "\u4E0A\u7EA7\u7B14\u8BB0";
    } else {
      return "Notes in grandpa folder";
    }
  }
  get item_notechain() {
    if (this.language == "zh") {
      return "\u7B14\u8BB0\u94FE\u6761";
    } else {
      return "Note chain";
    }
  }
  get item_currentnote() {
    if (this.language == "zh") {
      return "\u5F53\u524D\u7B14\u8BB0";
    } else {
      return "Current note";
    }
  }
  get item_chain_insert_node_after() {
    if (this.language == "zh") {
      return "\u6DFB\u52A0\u540E\u7F6E\u7B14\u8BB0";
    } else {
      return "Create next note";
    }
  }
  get item_chain_insert_node_as_tail() {
    if (this.language == "zh") {
      return "\u94FE\u5C3E\u6DFB\u52A0\u7B14\u8BB0";
    } else {
      return "Create tail note";
    }
  }
  get item_chain_insert_node_before() {
    if (this.language == "zh") {
      return "\u6DFB\u52A0\u524D\u7F6E\u7B14\u8BB0";
    } else {
      return "Create prev note";
    }
  }
  get item_chain_insert_node_as_head() {
    if (this.language == "zh") {
      return "\u94FE\u5934\u6DFB\u52A0\u7B14\u8BB0";
    } else {
      return "Create head note";
    }
  }
  get item_item_chain_insert_null() {
    if (this.language == "zh") {
      return "\u65E0\u94FE\u63A5";
    } else {
      return "Create note not in chain";
    }
  }
  get prompt_notename() {
    if (this.language == "zh") {
      return "\u8F93\u5165\u7B14\u8BB0\u540D";
    } else {
      return "Input note name";
    }
  }
};
var strings = new Strings();

// src/WordCount.ts
var import_obsidian6 = require("obsidian");
var WordCount = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.nretry = 100;
    this.events = new Array();
    this.register();
  }
  filter(tfile) {
    var _a, _b;
    if (!tfile) {
      return false;
    }
    if (tfile.deleted) {
      return false;
    }
    if (tfile.extension != "md") {
      return false;
    }
    if (tfile.basename == ((_a = tfile.parent) == null ? void 0 : _a.name)) {
      return true;
    }
    let xfolders = this.plugin.settings.wordcountxfolder.split("\n").filter((x) => x != "");
    for (let item of xfolders) {
      if (tfile.path.startsWith(item)) {
        return false;
      } else if (item == "/") {
        if (((_b = tfile.parent) == null ? void 0 : _b.path) == "/") {
          return false;
        }
      }
    }
    return true;
  }
  // 统计字数
  count_words(ctx, ignore = /[\s!"#$%&'()*+,./:;<=>?@[\]^_`{|}，。！？【】、；：“”‘’《》（）［］—…￥]/g) {
    let N = ctx.replace(ignore, "").length;
    let enregex = /[a-zA-Z0-9-]+/g;
    let matches = ctx.match(enregex);
    if (matches) {
      let elen = 0;
      matches.forEach((x) => elen = elen + x.length);
      N = N - elen + matches.length;
    }
    return N;
  }
  async set_mtime_value(tfile, key, val) {
    var _a, _b;
    let activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
    let editorState = {};
    if (activeView && activeView.file === tfile) {
      let editor = activeView.editor;
      if (editor) {
        editorState.cursor = editor.getCursor();
        editorState.selection = editor.getSelection();
        editorState.sanchor = editor.getCursor("anchor");
        editorState.shead = editor.getCursor("head");
        editorState.scrollInfo = editor.getScrollInfo();
      }
    }
    let aline = ((_a = editorState == null ? void 0 : editorState.cursor) == null ? void 0 : _a.line) !== void 0 ? (_b = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _b.getLine(editorState.cursor.line) : void 0;
    if (aline && aline.startsWith("|") && aline.endsWith("|")) {
      return;
    }
    await this.app.fileManager.processFrontMatter(
      tfile,
      (fm) => {
        let t = import_obsidian6.moment.unix(tfile.stat.mtime / 1e3);
        let mtime = t.format("YYYY-MM-DD");
        if (fm[key] == null) {
          if (val > 0) {
            fm[key] = {};
            if (mtime == (0, import_obsidian6.moment)().format("YYYY-MM-DD") && mtime != import_obsidian6.moment.unix(tfile.stat.ctime / 1e3).format("YYYY-MM-DD")) {
              fm[key][t.add(-1, "days").format("YYYY-MM-DD")] = val;
            } else {
              fm[key][mtime] = val;
            }
          }
        } else {
          let ts = Object.keys(fm[key]).sort((b, a) => a.localeCompare(b)).filter((x) => !(x == mtime));
          if (ts.length == 0) {
            if (val > 0) {
              fm[key][mtime] = val;
            } else if (fm[key][mtime]) {
              fm[key][mtime] = val;
            }
          } else {
            if (val - fm[key][ts[0]] != 0) {
              fm[key][mtime] = val;
            } else if (fm[key][mtime]) {
              delete fm[key][mtime];
            }
          }
        }
      }
    );
    if (activeView && activeView.file === tfile) {
      let editor = activeView.editor;
      if (editor) {
        if (editorState.selection && editorState.sanchor && editorState.shead) {
          try {
            await editor.setSelection(editorState.sanchor, editorState.shead);
          } catch (error) {
            new import_obsidian6.Notice(`Error setting selection:${error}`, 3e3);
          }
        } else if (editorState.cursor) {
          await editor.setCursor(editorState.cursor);
        }
        if (editorState.scrollInfo) {
          await editor.scrollTo(editorState.scrollInfo.left, editorState.scrollInfo.top);
        }
      }
    }
  }
  get_new_words(tfile, day = (0, import_obsidian6.moment)().format("YYYY-MM-DD")) {
    var _a;
    let meta = this.app.metadataCache.getFileCache(tfile);
    let values = (_a = meta == null ? void 0 : meta.frontmatter) == null ? void 0 : _a.words;
    if (values) {
      let keys = Object.keys(values).sort((a, b) => a.localeCompare(b));
      let idx = keys.indexOf(day);
      if (idx < 0) {
        return 0;
      } else if (idx == 0) {
        return values[day];
      } else {
        return values[day] - values[keys[idx - 1]];
      }
    }
  }
  async update_word_count(tfile) {
    if (!this.filter(tfile)) {
      return;
    }
    let ctx = await this.app.vault.cachedRead(tfile);
    let mcache = this.app.metadataCache.getFileCache(tfile);
    if (mcache == null ? void 0 : mcache.frontmatterPosition) {
      ctx = ctx.slice(mcache.frontmatterPosition.end.offset);
    }
    let N = this.count_words(ctx);
    await this.set_mtime_value(tfile, "words", N);
  }
  check_frontmatter(tfile, kv) {
    try {
      if (!tfile) {
        return false;
      }
      let meta = this.app.metadataCache.getFileCache(tfile);
      if (meta == null ? void 0 : meta.frontmatter) {
        for (let k in kv) {
          if (!(meta.frontmatter[k] == kv[k])) {
            return false;
          }
        }
        return true;
      }
      return false;
    } catch (error) {
      return false;
    }
  }
  async wait_frontmatter(tfile, kv, nretry = this.nretry) {
    let flag = this.check_frontmatter(tfile, kv);
    while (!flag && nretry > 0) {
      await sleep(50);
      nretry = nretry - 1;
      flag = this.check_frontmatter(tfile, kv);
    }
    return flag;
  }
  async update_word_count_of_vault() {
    let tfiles = this.app.vault.getMarkdownFiles().filter((x) => this.filter(x));
    let i = 0;
    for (let tfile of tfiles) {
      new import_obsidian6.Notice(`${i}/${tfiles.length}:${tfile.name}`, 3e3);
      await this.update_word_count(tfile);
      i = i + 1;
    }
  }
  register() {
    if (this.plugin.settings.wordcout) {
      this.regeister_editor_change();
      this.regeister_active_leaf_change();
    } else {
      this.unregister();
    }
  }
  regeister_editor_change() {
    let e = this.app.workspace.on("editor-change", async (editor, info) => {
      var _a;
      if (((_a = info.file) == null ? void 0 : _a.extension) != "md") {
        return;
      }
      if (this.timerId !== null) {
        clearTimeout(this.timerId);
      }
      if (info.file) {
        this.timerId = setTimeout(() => {
          this.update_word_count(info.file);
        }, 3e3);
      }
    });
    this.plugin.registerEvent(e);
    this.events.push(e);
  }
  regeister_active_leaf_change() {
    let e = this.app.workspace.on("active-leaf-change", async (leaf) => {
      var _a, _b;
      let tfile = (leaf == null ? void 0 : leaf.view).file;
      if (!(leaf == null ? void 0 : leaf.view)) {
        return;
      }
      if (!(((_b = (_a = leaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.extension) == "md")) {
        return;
      }
      await this.update_word_count(tfile);
      if (this.curr_active_file == null) {
        this.curr_active_file = tfile;
        return;
      }
      if (this.curr_active_file != tfile) {
        await this.update_word_count(this.curr_active_file);
        this.curr_active_file = tfile;
      }
    });
    this.plugin.registerEvent(e);
    this.events.push(e);
  }
  unregister() {
    for (let e of this.events) {
      e.e.offref(e);
    }
    this.events = this.events.slice(-1, 0);
  }
  get_words_of_tfiles(files = null) {
    if (!files) {
      files = this.plugin.chain.get_all_tfiles();
    }
    return files.map(
      (x) => this.plugin.editor.get_frontmatter(x, "words")
    ).filter((x) => x);
  }
  sum_words_of_tifles(files = null, begt = 10, endt = 0) {
    files = this.get_words_of_tfiles(files);
    if (typeof begt == "number") {
      begt = (0, import_obsidian6.moment)().add(-begt, "days").format("YYYY-MM-DD");
    }
    if (typeof endt == "number") {
      endt = (0, import_obsidian6.moment)().add(-endt, "days").format("YYYY-MM-DD");
    }
    let startDate = new Date(begt);
    let endDate = new Date(endt);
    let dailyWordCounts = {};
    for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
      let dateStr = date.toISOString().split("T")[0];
      dailyWordCounts[dateStr] = 0;
    }
    files.forEach((file) => {
      let lastWordCount = 0;
      let earliestDate = new Date(Object.keys(file).sort()[0]);
      if (earliestDate < startDate) {
        lastWordCount = file[earliestDate.toISOString().split("T")[0]];
      }
      for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
        let dateStr = date.toISOString().split("T")[0];
        if (file.hasOwnProperty(dateStr)) {
          lastWordCount = file[dateStr];
        }
        dailyWordCounts[dateStr] += lastWordCount;
      }
    });
    return dailyWordCounts;
  }
  diff_words_of_tifles(dailyWordCounts, first_as_zero = true) {
    let dailyNewWordCounts = {};
    let previousTotal = 0;
    let first = "";
    for (let date in dailyWordCounts) {
      if (first === "") {
        first = date;
      }
      let currentTotal = dailyWordCounts[date];
      dailyNewWordCounts[date] = currentTotal - previousTotal;
      previousTotal = currentTotal;
    }
    if (first_as_zero && first !== "") {
      dailyNewWordCounts[first] = 0;
    }
    return dailyNewWordCounts;
  }
};

// src/graph.ts
var import_obsidian7 = require("obsidian");
var NoteNode = class {
  constructor(tfile, plugin) {
    this.tfile = tfile;
    this.note2id = {};
    this.id = 0;
    this.plugin = plugin;
  }
  // 返回 IDXXXX
  get_id(tfile) {
    if (tfile.basename in this.note2id) {
      return this.note2id[tfile.basename];
    }
    let newId = `ID${this.id.toString().padStart(4, "0")}`;
    this.note2id[tfile.basename] = newId;
    this.id = this.id + 1;
    return newId;
  }
  // 返回IDXXXX["tfile.basename"]
  get_node(tfile) {
    let id = this.get_id(tfile);
    return `${id}("${tfile.basename}")`;
  }
  get_mehrmaid_node(node, avata = "") {
    if (node in this.note2id) {
      return this.note2id[node];
    }
    if (node.startsWith("subgraph ")) {
      return node.slice("subgraph ".length);
    }
    let newId = `ID${this.id.toString().padStart(4, "0")}`;
    this.note2id[node] = newId;
    this.id = this.id + 1;
    let tfile = this.plugin.chain.get_tfile(node);
    if (tfile) {
      if (avata == "") {
        avata = this.plugin.settings.avata;
      }
      let meta = this.plugin.editor.get_frontmatter(tfile, avata);
      if (meta) {
        if (meta.startsWith("#")) {
          node = `![[${tfile.basename}${meta}|no-head]]`;
        } else {
          node = meta.replace("SELF", `[[${tfile.basename}]]`);
        }
      }
    }
    return `${newId}("${node}")`;
  }
  get_canvas_node(node) {
    if (node in this.note2id) {
      return this.note2id[node];
    }
    let newId = `ID${this.id.toString().padStart(4, "0")}`;
    this.note2id[node] = newId;
    this.id = this.id + 1;
    return newId;
  }
  notes2class() {
    let msg = "\n";
    for (let tfile in this.note2id) {
      msg = msg + `	class ${this.note2id[tfile]} internal-link;
`;
    }
    return msg;
  }
};
var MermaidGraph = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.editor = plugin.editor;
  }
  get_note_node(tfile) {
    let node = new NoteNode(tfile, this.plugin);
    return node;
  }
  subgraph_chain(node, tfiles, subgraph = "", line = "<-->") {
    let msg = "";
    let items = tfiles.map((x) => x);
    let stab = "	";
    if (subgraph != "") {
      msg = msg + `
	subgraph ${subgraph}
`;
      stab = "		";
    }
    let i = 0;
    while (i < items.length - 1) {
      let prev = node.get_node(items[i]);
      let next = node.get_node(items[i + 1]);
      msg = msg + `${stab}${prev}${line}${next}
`;
      i = i + 1;
    }
    if (subgraph != "") {
      msg = msg + "	end\n";
    }
    return msg;
  }
  subgraph_links(node, tfiles, subgraph = "", line = "-->", tfiles_first = false) {
    let msg = "";
    let items = tfiles.map((x) => x);
    let stab = "	";
    if (subgraph != "") {
      msg = msg + `
	subgraph ${subgraph}
`;
      stab = "		";
    }
    let i = 0;
    let sid = node.get_node(node.tfile);
    while (i < items.length) {
      let id = node.get_node(items[i]);
      if (tfiles_first) {
        msg = msg + `${stab}${id}${line}${sid}
`;
      } else {
        msg = msg + `${stab}${sid}${line}${id}
`;
      }
      i = i + 1;
    }
    if (subgraph != "") {
      msg = msg + "	end\n";
    }
    return msg;
  }
  // [src,dst,io]
  edges_of_tfiles(tfiles, merge_inout = true) {
    let inlinks = {};
    let outlinks = {};
    for (let tfile of tfiles) {
      outlinks[tfiles.indexOf(tfile)] = this.plugin.chain.get_outlinks(tfile, true);
      inlinks[tfiles.indexOf(tfile)] = this.plugin.chain.get_inlinks(tfile, true);
    }
    let edges = [];
    for (let tfile of tfiles) {
      let i = tfiles.indexOf(tfile);
      for (let outlink of outlinks[i]) {
        if (tfiles.contains(outlink)) {
          if (tfiles.indexOf(outlink) <= i) {
            continue;
          }
          if (merge_inout) {
            if (inlinks[i].contains(outlink)) {
              edges.push([tfile, outlink, true]);
            } else {
              edges.push([tfile, outlink, false]);
            }
          } else {
            edges.push([tfile, outlink, false]);
          }
        }
      }
      for (let inlink of inlinks[i]) {
        if (tfiles.contains(inlink)) {
          if (tfiles.indexOf(inlink) <= i) {
            continue;
          }
          if (merge_inout) {
            if (!outlinks[i].contains(inlink)) {
              edges.push([inlink, tfile, false]);
            }
          } else {
            edges.push([inlink, tfile, false]);
          }
        }
      }
    }
    return edges;
  }
  subgraph_cross(node, tfiles, subgraph = "", line = "-->", tfiles_first = false) {
    let msg = "";
    let items = tfiles.map((x) => x);
    let stab = "	";
    if (subgraph != "") {
      msg = msg + `
	subgraph ${subgraph}
`;
      stab = "		";
    }
    let edges = this.edges_of_tfiles(tfiles);
    for (let edge of edges) {
      let sid = node.get_node(edge[0]);
      let did = node.get_node(edge[1]);
      if (edge[2]) {
        msg = msg + `${stab}${sid}<-.->${did}
`;
      } else {
        msg = msg + `${stab}${sid}-.->${did}
`;
      }
    }
    if (subgraph != "") {
      msg = msg + "	end\n";
    }
    return msg;
  }
  get_flowchart(tfile, N = 2, c_chain = "#F05454", c_inlink = "#776B5D", c_outlink = "#222831", c_anchor = "#40A578") {
    if (!tfile) {
      let leaf = this.plugin.chain.get_last_activate_leaf();
      if (leaf) {
        tfile = leaf.view.file;
      }
    }
    if (!tfile) {
      return "No File.";
    }
    let node = new NoteNode(tfile, this.plugin);
    let nc = this.plugin;
    let msg = "```mermaid\nflowchart TD\n";
    let chain = nc.chain.get_chain(tfile, N, N);
    msg = msg + this.subgraph_chain(node, chain, "\u7B14\u8BB0\u94FE");
    let inlinks = nc.chain.get_inlinks(tfile, true).filter((x) => !chain.contains(x));
    let outlinks = nc.chain.get_outlinks(tfile, true).filter((x) => !chain.contains(x));
    msg = msg + this.subgraph_links(node, inlinks, "\u5165\u94FE", "-->", true);
    msg = msg + this.subgraph_links(node, outlinks, "\u51FA\u94FE", "-->");
    msg = msg + node.notes2class();
    msg = msg + [
      "classDef \u7B14\u8BB0\u94FEC fill:" + c_chain,
      "classDef \u5165\u94FEC fill:" + c_inlink,
      "classDef \u51FA\u94FEC fill:" + c_outlink,
      `classDef Anchor fill:${c_anchor},stoke:${c_anchor}`,
      "class \u7B14\u8BB0\u94FE \u7B14\u8BB0\u94FEC",
      "class \u5165\u94FE \u5165\u94FEC",
      "class \u51FA\u94FE \u51FA\u94FEC",
      ""
    ].join("\n");
    msg = msg + "```";
    msg = msg.replace(
      `class ${node.get_id(tfile)} internal-link;`,
      `class ${node.get_id(tfile)} Anchor;`
    );
    return msg;
  }
  flowchart_folder(tfile, subgraph = "Folder", color = "#F05454", c_anchor = "#40A578") {
    if (!tfile) {
      let leaf = this.plugin.chain.get_last_activate_leaf();
      if (leaf) {
        tfile = leaf.view.file;
      }
    }
    if (!tfile) {
      return "No File.";
    }
    let tfiles = this.plugin.chain.get_brothers(tfile);
    return this.flowchart_cross(tfile, tfiles, subgraph, color, c_anchor);
  }
  flowchart_notechain(tfile, N = 10, subgraph = "NoteChain", color = "#F05454", c_anchor = "#40A578") {
    if (!tfile) {
      let leaf = this.plugin.chain.get_last_activate_leaf();
      if (leaf) {
        tfile = leaf.view.file;
      }
    }
    if (!tfile) {
      return "No File.";
    }
    let tfiles = this.plugin.chain.get_chain(tfile, N, N);
    return this.flowchart_cross(tfile, tfiles, subgraph, color, c_anchor);
  }
  flowchart_cross(anchor, tfiles, subgraph = "", color = "#F05454", c_anchor = "#40A578") {
    let node = new NoteNode(tfiles[0], this.plugin);
    let msg = "```mermaid\nflowchart TD\n";
    msg = msg + this.subgraph_cross(node, tfiles, subgraph);
    msg = msg + node.notes2class();
    msg = msg + [
      `classDef ${subgraph}C fill:${color}`,
      `classDef Anchor fill:${c_anchor},stoke:${c_anchor}`,
      `class ${subgraph} ${subgraph}C`,
      ""
    ].join("\n");
    msg = msg + "```";
    msg = msg.replace(
      `class ${node.get_id(anchor)} internal-link;`,
      `class ${node.get_id(anchor)} Anchor;`
    );
    return msg;
  }
  get_subgrah_names(group_name, tfiles, name = "group") {
    let nc = this.plugin;
    let items = {};
    for (let cfile of tfiles) {
      let cgroup = nc.editor.get_frontmatter(cfile, name);
      if (cgroup && Array.isArray(cgroup)) {
        for (let cg of cgroup) {
          let tmp = cg.split("/");
          if (tmp[0] == group_name) {
            if (tmp.length == 1) {
              items[tfiles.indexOf(cfile)] = "";
            } else {
              items[tfiles.indexOf(cfile)] = tmp[1];
            }
            break;
          }
        }
      }
    }
    return items;
  }
  flowchart_groups(anchor, name = "group") {
    let nc = this.plugin;
    let tfiles = nc.chain.get_brothers(anchor);
    tfiles = nc.chain.get_group_links(tfiles, 1);
    let node = nc.mermaid.get_note_node(anchor);
    let group = nc.editor.get_frontmatter(anchor, name);
    if (!group || !Array.isArray(group)) {
      return [];
    }
    let res = [];
    for (let g of group) {
      g = g.split("/")[0];
      let items = this.get_subgrah_names(g, tfiles, name);
      let subs = new Set(Object.values(items));
      let msg = `\`\`\`mermaid
---
title: ${g}
---
flowchart TD
`;
      for (let sub of subs) {
        if (sub == "") {
          for (let idx in items) {
            if (items[idx] == sub) {
              msg = msg + "\n" + node.get_node(tfiles[idx]);
            }
          }
        } else {
          msg = msg + "\nsubgraph " + sub + "\n";
          for (let idx in items) {
            if (items[idx] == sub) {
              msg = msg + "\n	" + node.get_node(tfiles[idx]);
            }
          }
          msg = msg + "\nend";
        }
      }
      msg = msg + "\n" + this.subgraph_cross(node, Object.keys(items).map((x) => tfiles[x]));
      msg = msg + "\n" + node.notes2class();
      msg = msg + "\n```";
      res.push(msg);
    }
    return res;
  }
  get_relationship_graph(tfile, N = 1, key = "link", show_all_node = true) {
    let nc = this.plugin;
    let node = new NoteNode(tfile, this.plugin);
    let msg = "```mermaid\nflowchart TD\n";
    let tfiles = nc.chain.get_group_links([tfile], N);
    if (show_all_node) {
      for (let tfile2 of tfiles) {
        msg += `${node.get_node(tfile2)}
`;
      }
    }
    let processedFiles = /* @__PURE__ */ new Set();
    for (let currentFile of tfiles) {
      if (processedFiles.has(currentFile))
        continue;
      processedFiles.add(currentFile);
      let links = nc.editor.get_frontmatter(currentFile, key);
      if (links) {
        for (let [relation, linkedNote] of Object.entries(links)) {
          if (linkedNote instanceof Array) {
            for (let item of linkedNote) {
              let linkedTFile = nc.chain.get_tfile(item);
              if (linkedTFile instanceof import_obsidian7.TFile) {
                msg += `	${node.get_node(currentFile)} -->|${relation}| ${node.get_node(linkedTFile)}
`;
              }
            }
          } else {
            let linkedTFile = nc.chain.get_tfile(linkedNote);
            if (linkedTFile instanceof import_obsidian7.TFile) {
              msg += `	${node.get_node(currentFile)} -->|${relation}| ${node.get_node(linkedTFile)}
`;
            }
          }
        }
      }
    }
    msg = msg + node.notes2class();
    msg += "```";
    let c_anchor = "#40A578";
    msg = msg.replace(
      `class ${node.get_id(tfile)} internal-link;`,
      `classDef Anchor fill:${c_anchor},stoke:${c_anchor}
class ${node.get_id(tfile)} Anchor;`
    );
    return msg;
  }
  get_mehrmaid_graph(tfile, N = 1, key = "mermaid", c_anchor = "#d4c4b7", field = "avata") {
    if (!tfile) {
      let leaf = this.plugin.chain.get_last_activate_leaf();
      if (leaf) {
        tfile = leaf.view.file;
      }
    }
    if (!tfile) {
      return "No File.";
    }
    let nc = this.plugin;
    let node = new NoteNode(tfile, this.plugin);
    let msg = "```mehrmaid\nflowchart TD\n";
    let tfiles;
    if (N == -1) {
      tfiles = nc.chain.get_brothers(tfile);
    } else {
      tfiles = nc.chain.get_group_links([tfile], N);
    }
    tfiles = nc.chain.sort_tfiles_by_chain(tfiles);
    for (let currentFile of tfiles) {
      let src2 = `[[${currentFile.basename}]]`;
      let links = nc.editor.get_frontmatter(currentFile, key);
      if (links && Array.isArray(links)) {
        for (let link of links) {
          if (link["edge"] != null && link["node"] != null) {
            let cedge = link["edge"];
            let cnode = link["node"];
            if (cedge == "") {
              cedge = "";
            } else {
              cedge = `|"${cedge}"|`;
            }
            let line = "-->";
            if (link["line"]) {
              line = link["line"];
            }
            if (line[0] == "<" && line[line.length - 1] != ">") {
              line = line.slice(1) + ">";
              if (cnode instanceof Array) {
                for (let item of cnode) {
                  msg += `${node.get_mehrmaid_node(item, field)} ${line} ${cedge} ${node.get_mehrmaid_node(src2, field)}
`;
                }
              } else {
                msg += `${node.get_mehrmaid_node(cnode, field)} ${line} ${cedge} ${node.get_mehrmaid_node(src2, field)}
`;
              }
            } else {
              if (cnode instanceof Array) {
                for (let item of cnode) {
                  msg += `${node.get_mehrmaid_node(src2, field)} ${line} ${cedge} ${node.get_mehrmaid_node(item, field)}
`;
                }
              } else {
                msg += `${node.get_mehrmaid_node(src2, field)} ${line} ${cedge} ${node.get_mehrmaid_node(cnode, field)}
`;
              }
            }
          } else {
            if (link["group"]) {
              msg += `subgraph ${link["group"]}
	${node.get_mehrmaid_node(src2, field)}
end
`;
              if (link["color"]) {
                msg += `classDef ${link["group"]}Class fill:${link["color"]}
`;
                msg += `class ${link["group"]} ${link["group"]}Class
`;
              }
            }
          }
        }
      }
    }
    let src = `[[${tfile.basename}]]`;
    msg += `${node.get_mehrmaid_node(src)}
`;
    if (c_anchor) {
      msg += `classDef Anchor fill:${c_anchor},stoke:${c_anchor}
class ${node.get_mehrmaid_node(src)} Anchor;
`;
    }
    msg += "```";
    return msg;
  }
};
var CanvasGraph = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.editor = plugin.editor;
  }
  gen_random_string(length) {
    let characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let randomString = "";
    for (let i = 0; i < length; i++) {
      let randomIndex = Math.floor(Math.random() * characters.length);
      randomString += characters.charAt(randomIndex);
    }
    return randomString;
  }
  new_note_node(tfile) {
    let node = new NoteNode(tfile, this.plugin);
    return node;
  }
  gen_node(NN, tfile, x = 0, y = 0, width = 400, height = 400) {
    let rsp = {};
    if (typeof tfile == "string") {
      rsp["type"] = "text";
      rsp["text"] = tfile;
      rsp["id"] = NN.get_canvas_node(rsp["text"]);
    } else {
      rsp["type"] = "file";
      if (tfile instanceof import_obsidian7.TFolder) {
        rsp["file"] = tfile.path + "/" + tfile.name + ".md";
      } else {
        rsp["file"] = tfile.path;
      }
      rsp["id"] = NN.get_canvas_node(rsp["file"]);
    }
    rsp["x"] = x;
    rsp["y"] = y;
    rsp["height"] = height;
    rsp["width"] = width;
    return rsp;
  }
  rc_of_sequence(i, r, c) {
    let row = Math.floor((i - 1) / c) + 1;
    let col = row % 2 === 1 ? (i - 1) % c + 1 : c - (i - 1) % c;
    return [row, col];
  }
  async note_to_canvas(tfile, nrow = 1, ncol = 1, width = 400, height = 400, wmarin = 100, hmargin = 100, write = true) {
    let content = await this.plugin.app.vault.read(tfile);
    let titles = [...content.matchAll(/^(#+)\s+(.+)/gm)];
    if (nrow * ncol < titles.length) {
      ncol = Math.ceil(titles.length / nrow);
    }
    let nodes = [];
    let i = 0;
    let NN = this.new_note_node(tfile);
    for (let match of titles) {
      i = i + 1;
      let title = `![[${tfile.basename}#${match[2]}]]`;
      let pos = this.rc_of_sequence(i, nrow, ncol);
      let node = this.gen_node(
        NN = NN,
        title,
        pos[1] * (width + wmarin),
        pos[0] * (height + hmargin),
        width = width,
        height = height
      );
      nodes.push(node);
    }
    let res = {
      "nodes": nodes,
      "edges": []
    };
    if (write) {
      let path = this.path_md2canvas(tfile);
      await this.write_canvas_file(res, path);
    }
    return res;
  }
  async write_canvas_file(canvas, path) {
    let msg = JSON.stringify(canvas);
    let canvasFile = this.plugin.app.vault.getAbstractFileByPath(path);
    if (canvasFile) {
      await this.plugin.app.vault.modify(canvasFile, msg);
    } else {
      await this.plugin.app.vault.create(path, msg);
    }
  }
  path_md2canvas(tfile) {
    return tfile.path.replace(".md", ".canvas");
  }
};

// src/setting.ts
var import_obsidian8 = require("obsidian");
var DEFAULT_SETTINGS = {
  PrevChain: "10",
  NextChain: "10",
  field_of_prevnote: "PrevNote",
  field_of_nextnote: "NextNote",
  field_of_display_text: "notechain.display",
  field_of_confluence_tab_format: "notechain.level",
  field_of_background_color: "notechain.style",
  auto_notechain: false,
  notice_while_modify_chain: false,
  refreshDataView: true,
  refreshTasks: true,
  isSortFileExplorer: true,
  isFolderFirst: true,
  isdraged: true,
  suggesterNotesMode: "",
  wordcout: true,
  wordcountxfolder: "",
  modal_default_width: 800,
  modal_default_height: 600,
  avata: "avata",
  tpl_tags_folder: "\u811A\u672C\u7B14\u8BB0\nScriptNote"
};
var NCSettingTab = class extends import_obsidian8.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_isSortFileExplorer).addToggle(
      (text) => text.setValue(this.plugin.settings.isSortFileExplorer).onChange(async (value) => {
        this.plugin.settings.isSortFileExplorer = value;
        await this.plugin.saveSettings();
        this.plugin.explorer.sort();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_isFolderFirst).addToggle(
      (text) => text.setValue(this.plugin.settings.isFolderFirst).onChange(async (value) => {
        this.plugin.settings.isFolderFirst = value;
        await this.plugin.saveSettings();
        this.plugin.explorer.sort();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_isdraged).addToggle(
      (text) => text.setValue(this.plugin.settings.isdraged).onChange(async (value) => {
        this.plugin.settings.isdraged = value;
        await this.plugin.saveSettings();
        this.plugin.explorer.sort();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_PrevChain).addText((text) => text.setValue(this.plugin.settings.PrevChain).onChange(async (value) => {
      this.plugin.settings.PrevChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_suggesterNotesMode).addDropdown((dropdown) => dropdown.addOption("item_get_brothers", this.plugin.strings.item_get_brothers).addOption("item_uncle_notes", this.plugin.strings.item_uncle_notes).addOption("item_notechain", this.plugin.strings.item_notechain).addOption("item_same_folder", this.plugin.strings.item_same_folder).addOption("item_inlinks_outlinks", this.plugin.strings.item_inlinks_outlinks).addOption("item_inlins", this.plugin.strings.item_inlins).addOption("item_outlinks", this.plugin.strings.item_outlinks).addOption("item_all_noes", this.plugin.strings.item_all_noes).addOption("item_recent", this.plugin.strings.item_recent).addOption("", "").setValue(this.plugin.settings.suggesterNotesMode).onChange(async (value) => {
      this.plugin.settings.suggesterNotesMode = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_NextChain).addText((text) => text.setValue(this.plugin.settings.NextChain).onChange(async (value) => {
      this.plugin.settings.NextChain = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_auto_notechain).addToggle(
      (text) => text.setValue(this.plugin.settings.auto_notechain).onChange(async (value) => {
        this.plugin.settings.auto_notechain = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_field_of_prevnote).addText((text) => text.setValue(this.plugin.settings.field_of_prevnote).onChange(async (value) => {
      this.plugin.settings.field_of_prevnote = value;
      this.plugin.explorer.set_display_text();
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_field_of_nextnote).addText((text) => text.setValue(this.plugin.settings.field_of_nextnote).onChange(async (value) => {
      this.plugin.settings.field_of_nextnote = value;
      this.plugin.explorer.set_display_text();
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_field_of_display_text).addText((text) => text.setValue(this.plugin.settings.field_of_display_text).onChange(async (value) => {
      this.plugin.settings.field_of_display_text = value;
      this.plugin.explorer.set_display_text();
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_confluence_tab_format).addText((text) => text.setValue(this.plugin.settings.field_of_confluence_tab_format).onChange(async (value) => {
      this.plugin.settings.field_of_confluence_tab_format = value;
      this.plugin.explorer.set_display_text();
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_field_of_background_color).addText((text) => text.setValue(this.plugin.settings.field_of_background_color).onChange(async (value) => {
      this.plugin.settings.field_of_background_color = value;
      this.plugin.explorer.set_fileitem_style();
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_notice_while_modify_chain).addToggle(
      (text) => text.setValue(this.plugin.settings.notice_while_modify_chain).onChange(async (value) => {
        this.plugin.settings.notice_while_modify_chain = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_refreshDataView).addToggle(
      (text) => text.setValue(this.plugin.settings.refreshDataView).onChange(async (value) => {
        this.plugin.settings.refreshDataView = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_refreshTasks).addToggle(
      (text) => text.setValue(this.plugin.settings.refreshTasks).onChange(async (value) => {
        this.plugin.settings.refreshTasks = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_wordcout).addToggle(
      (text) => text.setValue(this.plugin.settings.wordcout).onChange(async (value) => {
        this.plugin.settings.wordcout = value;
        await this.plugin.saveSettings();
        this.plugin.wordcout.register();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_wordcout_xfolder).addTextArea(
      (text) => text.setValue(this.plugin.settings.wordcountxfolder).onChange(async (value) => {
        this.plugin.settings.wordcountxfolder = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_avata).addTextArea(
      (text) => text.setValue(this.plugin.settings.avata).onChange(async (value) => {
        this.plugin.settings.avata = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName(this.plugin.strings.setting_templater_tag).addTextArea(
      (text) => text.setValue(this.plugin.settings.tpl_tags_folder).onChange(async (value) => {
        this.plugin.settings.tpl_tags_folder = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/commands.ts
var import_obsidian9 = require("obsidian");
var cmd_longform2notechain = (plugin) => ({
  id: "longform2notechain",
  name: plugin.strings.cmd_longform2notechain,
  icon: "git-pull-request-create-arrow",
  callback: async () => {
    let curr = plugin.chain.current_note;
    if (curr == null || curr.parent == null) {
      return;
    }
    curr = await plugin.chain.get_folder_note(curr.parent, false);
    if (curr == null) {
      return;
    }
    plugin.app.fileManager.processFrontMatter(
      curr,
      async (fm) => {
        async function set_confluence_level(scenes2, level = 0) {
          if (Array.isArray(scenes2)) {
            for (let scene of scenes2) {
              if (Array.isArray(scene)) {
                set_confluence_level(scene, level + 1);
              } else {
                set_confluence_level(scene, level);
              }
            }
          } else if (typeof scenes2 === "string") {
            let note = plugin.chain.get_tfile(scenes2);
            if (note) {
              let slevel = "	".repeat(level);
              let prelevel = plugin.editor.get_frontmatter(note, plugin.settings.field_of_confluence_tab_format);
              if (prelevel == slevel || prelevel == null && slevel == "") {
                return;
              }
              await plugin.editor.set_frontmatter(
                note,
                plugin.settings.field_of_confluence_tab_format,
                slevel
              );
            }
          }
        }
        if (!curr) {
          return;
        }
        if (fm["longform"] == null) {
          return;
        }
        let scenes = plugin.utils.concat_array(fm.longform.scenes);
        await set_confluence_level(fm.longform.scenes);
        let ignoredFiles = plugin.utils.concat_array(fm.longform.ignoredFiles);
        await set_confluence_level(fm.longform.ignoredFiles);
        ignoredFiles = ignoredFiles.filter((f) => !scenes.contains(f));
        let notes = plugin.utils.concat_array([scenes, ignoredFiles]);
        if (!notes || notes.length == 0) {
          return;
        }
        if (!notes.contains(curr.basename)) {
          notes.unshift(curr.basename);
        }
        notes = notes.map((f) => plugin.chain.get_tfile(f));
        if (curr.parent == null) {
          return;
        }
        ;
        let tfiles = plugin.chain.get_tfiles_of_folder(curr.parent).filter((f) => !notes.contains(f));
        notes = plugin.utils.concat_array([tfiles, notes]);
        await plugin.chain.chain_concat_tfiles(notes);
        plugin.explorer.sort();
      }
    );
  }
});
var cmd_longform4notechain = (plugin) => ({
  id: "longform4notechain",
  name: plugin.strings.cmd_longform4notechain,
  icon: "git-pull-request-draft",
  callback: async () => {
    let nc = plugin;
    let curr = plugin.chain.current_note;
    if (curr == null || curr.parent == null) {
      return;
    }
    let path = curr.parent.path + "/" + curr.parent.name + ".md";
    let dst = await nc.chain.get_tfile(path);
    if (dst == null) {
      dst = await plugin.app.vault.create(
        curr.parent.path + "/" + curr.parent.name + ".md",
        ""
      );
    }
    await plugin.app.fileManager.processFrontMatter(
      dst,
      (fm) => {
        if (fm["longform"] == null) {
          fm["longform"] = {
            "format": "scenes",
            "title": dst.parent.name,
            "workflow": "Default Workflow",
            "sceneFolder": "/",
            "scenes": [],
            "ignoredFiles": []
          };
        }
        if (dst == null) {
          return;
        }
        if (dst.parent == null) {
          return;
        }
        ;
        if (fm["longform"] == null) {
          return;
        }
        let notes = plugin.chain.get_tfiles_of_folder(dst.parent);
        notes = plugin.chain.sort_tfiles_by_chain(notes);
        let levels = notes.map((f) => plugin.chain.get_confluence_level(f));
        notes = notes.map((x) => x.basename);
        if (notes.length > 0) {
          let source = `scenes:
`;
          for (let i in notes) {
            let note = notes[i];
            let level = levels[i];
            source += "  ";
            for (let j = -1; j < level; j++) {
              source += `- `;
            }
            source += `${note}
`;
          }
          let config = plugin.easyapi.editor.yamljs.load(source);
          notes = config["scenes"];
        }
        fm.longform.scenes = notes;
      }
    );
    await nc.chain.open_note(dst);
  }
});
var cmd_sort_file_explorer = (plugin) => ({
  id: "sort_file_explorer",
  name: plugin.strings.cmd_sort_file_explorer,
  icon: "lucide-refresh-cw",
  callback: async () => {
    await plugin.explorer.sort(0, true);
    await plugin.explorer.set_fileitem_style();
    await plugin.explorer.set_display_text();
  }
});
var cmd_open_notes_smarter = (plugin) => ({
  id: "open_notes_smarter",
  name: plugin.strings.cmd_open_notes_smarter,
  icon: "binoculars",
  callback: () => {
    plugin.open_note_smarter();
  }
});
var cmd_open_note = (plugin) => ({
  id: "suggestor_open_note",
  name: plugin.strings.cmd_open_note,
  icol: "square-arrow-out-up-right",
  callback: () => {
    plugin.chain.sugguster_open_note();
  }
});
var cmd_open_prev_note = (plugin) => ({
  id: "open_prev_notes",
  name: plugin.strings.cmd_open_prev_note,
  icon: "file-output",
  callback: () => {
    plugin.chain.open_prev_notes();
  }
});
var cmd_open_next_note = (plugin) => ({
  id: "open_next_notes",
  name: plugin.strings.cmd_open_next_note,
  icon: "file-input",
  callback: () => {
    plugin.chain.open_next_notes();
  }
});
var clear_inlinks = (plugin) => ({
  id: "clear_inlinks",
  name: plugin.strings.clear_inlinks,
  icon: "unlink",
  callback: () => {
    plugin.clear_inlinks();
  }
});
var move_file_to_another_folder = (plugin) => ({
  id: "move_file_to_another_folder",
  name: plugin.strings.move_file_to_another_folder,
  icon: "folder-tree",
  callback: () => {
    plugin.chain.cmd_move_file_to_another_folder();
  }
});
var replace_notes_with_regx = (plugin) => ({
  id: "replace_notes_with_regx",
  name: plugin.strings.replace_notes_with_regx,
  icon: "regex",
  callback: () => {
    plugin.replace_notes_with_regx();
  }
});
var chain_insert_node = (plugin) => ({
  id: "chain_insert_node",
  name: plugin.strings.chain_insert_node,
  icon: "git-branch-plus",
  callback: async () => {
    await plugin.cmd_chain_insert_node();
    await plugin.explorer.sort(500);
  }
});
var chain_set_seq_note = (plugin) => ({
  id: "chain_set_seq_note",
  name: plugin.strings.chain_set_seq_note,
  icon: "wind-arrow-down",
  callback: async () => {
    await plugin.chain.chain_suggester_tfiles();
    plugin.explorer.sort();
  }
});
var chain_move_up_node = (plugin) => ({
  id: "chain_move_up_node",
  name: plugin.strings.chain_move_up_node,
  icon: "arrow-up-from-line",
  callback: async () => {
    let tfile = plugin.chain.current_note;
    if (tfile) {
      let anchor = plugin.chain.get_prev_note(tfile);
      if (anchor) {
        await plugin.chain.chain_insert_node_before(
          tfile,
          anchor
        );
        await plugin.explorer.sort();
      }
    }
  }
});
var chain_move_down_node = (plugin) => ({
  id: "chain_move_donw_node",
  name: plugin.strings.chain_move_down_node,
  icon: "arrow-down-from-line",
  callback: async () => {
    let tfile = plugin.chain.current_note;
    if (tfile) {
      let anchor = plugin.chain.get_next_note(tfile);
      if (anchor) {
        await plugin.chain.chain_insert_node_after(
          tfile,
          anchor
        );
        await plugin.explorer.sort();
      }
    }
  }
});
var create_new_note = (plugin) => ({
  id: "create_new_note",
  name: plugin.strings.create_new_note,
  icon: "file-plus",
  callback: async () => {
    let targets = {};
    targets[plugin.strings.item_chain_insert_node_after] = "chain_insert_node_after";
    targets[plugin.strings.item_chain_insert_node_as_tail] = "chain_insert_node_as_tail";
    targets[plugin.strings.item_chain_insert_node_before] = "chain_insert_node_before";
    targets[plugin.strings.item_chain_insert_node_as_head] = "chain_insert_node_as_head";
    targets[plugin.strings.item_item_chain_insert_null] = "null";
    let target = await plugin.dialog_suggest(
      plugin.utils.array_prefix_id(Object.keys(targets)),
      Object.values(targets),
      true
    );
    if (!target) {
      return;
    }
    let name = await plugin.dialog_prompt(plugin.strings.prompt_notename);
    if (name) {
      let curr = plugin.chain.current_note;
      if (curr && curr.parent) {
        let path = curr.parent.path + "/" + name + ".md";
        let dst = await plugin.chain.get_tfile(path);
        if (dst == null) {
          dst = await plugin.app.vault.create(
            curr.parent.path + "/" + name + ".md",
            ""
          );
          if (!(target === "null")) {
            await plugin.chain[target](dst, curr);
            if (target == "chain_insert_node_after" || target == "chain_insert_node_before") {
              await plugin.editor.set_frontmatter_align_file(
                curr,
                dst,
                plugin.settings.field_of_confluence_tab_format
              );
            }
          }
          await plugin.chain.open_note(dst);
          await plugin.explorer.sort();
        }
      }
    }
  }
});
var cmd_reveal_note = (plugin) => ({
  id: "cmd_reveal_note",
  name: plugin.strings.cmd_reveal_note,
  icon: "locate",
  callback: async () => {
    let nc = plugin;
    let note = nc.chain.current_note;
    if (note) {
      await plugin.app.commands.executeCommandById("file-explorer:open");
      await nc.explorer.file_explorer.tree.setCollapseAll(true);
      await nc.explorer.file_explorer.revealInFolder(note);
      await sleep(100);
      let containerEl = nc.explorer.file_explorer.containerEl;
      let panel = containerEl.querySelector(".nav-files-container");
      let itemEl = containerEl.querySelector(`[data-path="${note.path}"]`);
      if (panel && itemEl && itemEl.offsetTop) {
        let xtop = panel.scrollTop + (itemEl.offsetTop - (panel.scrollTop + panel.clientHeight / 2));
        panel.scrollTo({ top: xtop, behavior: "smooth" });
      }
    }
  }
});
var cmd_open_and_reveal_note = (plugin) => ({
  id: "cmd_open_and_reveal_note",
  name: plugin.strings.cmd_open_and_reveal_note,
  icon: "map-pin-house",
  callback: async () => {
    let nc = plugin;
    let note = await nc.chain.sugguster_note();
    if (note) {
      await nc.chain.open_note(note);
      await nc.explorer.file_explorer.tree.setCollapseAll(true);
      await nc.explorer.file_explorer.revealInFolder(note);
      await sleep(100);
      let containerEl = nc.explorer.file_explorer.containerEl;
      let panel = containerEl.querySelector(".nav-files-container");
      let itemEl = containerEl.querySelector(`[data-path="${note.path}"]`);
      if (panel && itemEl && itemEl.offsetTop) {
        let xtop = panel.scrollTop + (itemEl.offsetTop - (panel.scrollTop + panel.clientHeight / 2));
        panel.scrollTo({ top: xtop, behavior: "smooth" });
      }
    }
  }
});
var cmd_open_prev_note_of_right_leaf = (plugin) => ({
  id: "cmd_open_prev_note_of_right_leaf",
  name: plugin.strings.cmd_open_prev_note_of_right_leaf,
  icon: "file-output",
  callback: async () => {
    let nc = plugin;
    let leaf = nc.chain.get_last_activate_leaf();
    if (leaf) {
      let prev = nc.chain.get_prev_note(leaf.view.file);
      if (prev) {
        await leaf.openFile(prev, { active: false });
        await nc.app.workspace.trigger("file-open", leaf);
      }
    }
  }
});
var cmd_open_next_note_of_right_leaf = (plugin) => ({
  id: "cmd_open_next_note_of_right_leaf",
  name: plugin.strings.cmd_open_next_note_of_right_leaf,
  icon: "file-input",
  callback: async () => {
    let nc = plugin;
    let leaf = nc.chain.get_last_activate_leaf();
    if (leaf) {
      let next = nc.chain.get_next_note(leaf.view.file);
      if (next) {
        await leaf.openFile(next, { active: false });
        await nc.app.workspace.trigger("file-open", leaf);
      }
    }
  }
});
var cmd_file_open_with_system_app = (plugin) => ({
  id: "cmd_file_open_with_system_app",
  name: plugin.strings.cmd_file_open_with_system_app,
  icon: "book-open",
  callback: async () => {
    let nc = plugin;
    if (nc.app.isMobile) {
      return;
    }
    let tfile = nc.chain.current_note;
    if (tfile) {
      let items = await nc.chain.get_file_links(tfile);
      let keys = Object.keys(items);
      let key = await nc.dialog_suggest(
        nc.utils.array_prefix_id(keys),
        keys
      );
      if (key) {
        let item = items[key];
        let electron = require("electron");
        electron.remote.shell.openPath(item);
      }
    }
  }
});
var cmd_file_show_in_system_explorer = (plugin) => ({
  id: "cmd_file_show_in_system_explorer",
  name: plugin.strings.cmd_file_show_in_system_explorer,
  icon: "book-open-text",
  callback: async () => {
    let nc = plugin;
    if (nc.app.isMobile) {
      return;
    }
    let tfile = nc.chain.current_note;
    if (tfile) {
      let items = await nc.chain.get_file_links(tfile);
      let keys = Object.keys(items);
      let key = await nc.dialog_suggest(
        nc.utils.array_prefix_id(keys),
        keys
      );
      if (key) {
        let item = items[key];
        let electron = require("electron");
        electron.remote.shell.showItemInFolder(item);
      }
    }
  }
});
var cmd_file_rename = (plugin) => ({
  id: "cmd_file_rename",
  name: plugin.strings.cmd_file_rename,
  icon: "pen-line",
  callback: async () => {
    let nc = plugin;
    if (nc.app.isMobile) {
      return;
    }
    let tfile = nc.chain.current_note;
    if (tfile) {
      let items = {};
      let links = nc.chain.get_inlinks(tfile, false);
      for (let i of links) {
        if (i.extension === "md") {
          items["\u2139\uFE0F " + i.basename] = i;
        } else {
          items["\u2139\uFE0F " + i.name] = i;
        }
      }
      links = nc.chain.get_outlinks(tfile, false);
      for (let i of links) {
        if (i.extension === "md") {
          items["\u{1F17E}\uFE0F " + i.basename] = i;
        } else {
          items["\u{1F17E}\uFE0F " + i.name] = i;
        }
      }
      let keys = Object.keys(items);
      let key = await nc.dialog_suggest(
        nc.utils.array_prefix_id(keys),
        keys
      );
      if (key) {
        let note = items[key];
        let res = await nc.dialog_prompt("New Name", "", note.basename);
        if (res && !(res === note.basename) && !(res === "")) {
          let npath = note.parent.path + "/" + res + "." + note.extension;
          let dst = nc.chain.get_tfile(res + "." + note.extension);
          if (dst) {
            new import_obsidian9.Notice("Exist:" + res + note.extension, 3e3);
          } else {
            nc.app.fileManager.renameFile(note, npath);
          }
        }
      }
    }
  }
});
var cmd_mermaid_flowchart_link = (plugin) => ({
  id: "cmd_mermaid_flowchart_link",
  name: plugin.strings.cmd_mermaid_flowchart_link,
  icon: "file-heart",
  callback: async () => {
    const content = "```dataviewjs\nlet nc=app.plugins.getPlugin('note-chain');\nlet msg =nc.mermaid.get_flowchart(null,2);\ndv.span(msg)\n```";
    await plugin.chain.open_note_in_modal(content);
  }
});
var cmd_mermaid_flowchart_folder = (plugin) => ({
  id: "cmd_mermaid_flowchart_folder",
  name: plugin.strings.cmd_mermaid_flowchart_folder,
  icon: "folder-heart",
  callback: async () => {
    const content = "```dataviewjs\nlet nc=app.plugins.getPlugin('note-chain');\nlet msg =nc.mermaid.flowchart_folder(null,'Folder');\ndv.span(msg)\n```";
    await plugin.chain.open_note_in_modal(content);
  }
});
var cmd_mermaid_flowchart_auto = (plugin) => ({
  id: "cmd_mermaid_flowchart_auto",
  name: plugin.strings.cmd_mermaid_flowchart_auto,
  icon: "heart",
  callback: async () => {
    const content = "```dataviewjs\nlet nc=app.plugins.getPlugin('note-chain');\nlet msg =nc.mermaid.get_mehrmaid_graph(null,4,'mermaid');\ndv.span(msg)\n```";
    await plugin.chain.open_note_in_modal(content);
  }
});
var cmd_execute_template_modal = (plugin) => ({
  id: "cmd_execute_template_modal",
  name: plugin.strings.cmd_execute_template_modal,
  icon: "file-terminal",
  callback: async () => {
    let tpl = plugin.app.plugins.plugins["templater-obsidian"];
    if (!tpl) {
      return;
    }
    let tfiles = [];
    let folder = plugin.app.vault.getFolderByPath(tpl.settings.templates_folder);
    if (folder) {
      let xfiles = plugin.chain.get_tfiles_of_folder(folder, true);
      let tfile2 = plugin.chain.get_tfile(folder.path + "/" + folder.name + ".md");
      let infiles = plugin.chain.get_links(tfile2);
      for (let f of infiles) {
        if (!xfiles.contains(f)) {
          xfiles.push(f);
        }
      }
      xfiles = plugin.chain.sort_tfiles_by_chain(xfiles);
      for (let f of xfiles) {
        tfiles.push(f);
      }
    }
    let items = plugin.settings.tpl_tags_folder.trim().split("\n");
    if (items.length > 0) {
      for (let item of items) {
        let xfiles = plugin.chain.get_group(item);
        for (let f of xfiles) {
          if (!tfiles.contains(f)) {
            tfiles.push(f);
          }
        }
      }
    }
    let tfile = await plugin.chain.sugguster_note(tfiles, 0, true);
    if (tfile) {
      let res = await plugin.utils.parse_templater(plugin.app, tfile.basename);
      let txt = res.join("\n").trim();
      let view = plugin.app.workspace.getActiveFileView();
      if (view) {
        view.editor.replaceSelection(txt);
      }
    }
  }
});
var cmd_toogle_css_block_in_note = (plugin) => ({
  id: "cmd_toogle_css_block_in_note",
  name: plugin.strings.cmd_toogle_css_block_in_note,
  icon: "atom",
  callback: async () => {
    await plugin.utils.toogle_note_css(plugin.app, document, "/");
  }
});
var cmd_set_frontmatter = (plugin) => ({
  id: "cmd_set_frontmatter",
  name: plugin.strings.cmd_set_frontmatter,
  icon: "database",
  callback: async () => {
    let files = plugin.chain.get_selected_files(true);
    if (files.length == 0) {
      return;
    }
    let field = await plugin.dialog_prompt("Frontmatter name");
    if (!field) {
      return;
    }
    let prev = plugin.editor.get_frontmatter(files[0], field);
    if (prev) {
      if (Array.isArray(prev)) {
        prev = prev.map((x) => x.toString()).join("\n");
      } else {
        prev = prev.toString();
      }
    } else {
      prev = "";
    }
    let value = await plugin.dialog_prompt("Frontmatter value", "", prev);
    value = value.trim();
    if (!value) {
      return;
    }
    value = value.replace(/\\n/g, "\n").replace(/\\t/g, "	");
    value = value.split("\n");
    value = value.map((x) => {
      if (x.match(/^-?\d+$/)) {
        return parseInt(x);
      } else if (x.match(/^-?\d+(\.\d*)?$/)) {
        return parseFloat(x);
      } else {
        return x;
      }
    });
    if (value.length == 1) {
      value = value[0];
    }
    for (let tfile of files) {
      await plugin.editor.set_frontmatter(tfile, field, value, 1);
    }
  }
});
var cmd_move_next_level = (plugin) => ({
  id: "move_next_level",
  name: plugin.strings.cmd_move_next_level,
  hotkeys: [{ modifiers: ["Mod", "Shift"], key: "L" }],
  icon: "arrow-right-from-line",
  callback: async () => {
    let key = plugin.settings.field_of_confluence_tab_format;
    if (!key) {
      return;
    }
    let tfiles = plugin.chain.get_selected_files();
    for (let tfile of tfiles) {
      let level = plugin.editor.get_frontmatter(tfile, key);
      if (!level) {
        await plugin.editor.set_frontmatter(tfile, key, "	", 1);
      } else {
        await plugin.editor.set_frontmatter(tfile, key, level + "	", 1);
      }
    }
  }
});
var cmd_move_none_level = (plugin) => ({
  id: "move_none_level",
  name: plugin.strings.cmd_move_none_level,
  hotkeys: [{ modifiers: ["Mod", "Shift"], key: "K" }],
  icon: "align-justify",
  callback: async () => {
    let key = plugin.settings.field_of_confluence_tab_format;
    if (!key) {
      return;
    }
    let tfiles = plugin.chain.get_selected_files();
    for (let tfile of tfiles) {
      let level = plugin.editor.get_frontmatter(tfile, key);
      if (level) {
        await plugin.editor.set_frontmatter(tfile, key, "", 1);
      }
    }
  }
});
var cmd_move_prev_level = (plugin) => ({
  id: "move_prev_level",
  name: plugin.strings.cmd_move_prev_level,
  hotkeys: [{ modifiers: ["Mod", "Shift"], key: "J" }],
  icon: "arrow-left-from-line",
  callback: async () => {
    let key = plugin.settings.field_of_confluence_tab_format;
    if (!key) {
      return;
    }
    let tfiles = plugin.chain.get_selected_files();
    for (let tfile of tfiles) {
      let level = plugin.editor.get_frontmatter(tfile, key);
      if (level) {
        await plugin.editor.set_frontmatter(tfile, key, level.slice(1), 1);
      }
    }
  }
});
var cmd_insert_command_id = (plugin) => ({
  id: "insert_command_id",
  name: plugin.strings.cmd_insert_command_id,
  icon: "terminal",
  callback: async () => {
    var _a;
    let editor = (_a = plugin.app.workspace.getActiveFileView()) == null ? void 0 : _a.editor;
    if (!editor) {
      return;
    }
    let ids = {};
    Object.keys(
      plugin.app.commands.commands
    ).forEach(
      (x) => {
        ids[plugin.app.commands.commands[x].name] = x;
      }
    );
    let names = Object.keys(ids);
    let msg = plugin.utils.array_prefix_id(names);
    let cmd = await plugin.dialog_suggest(msg, names);
    if (cmd) {
      editor.replaceSelection(ids[cmd]);
    }
  }
});
var cmd_open_note_in_modal = (plugin) => ({
  id: "cmd_open_note_in_modal",
  name: plugin.strings.cmd_open_note_in_modal,
  icon: "Laptop",
  callback: async () => {
    let note = await plugin.chain.sugguster_note();
    if (note) {
      plugin.chain.open_note_in_modal(note.path);
    }
  }
});
var cmd_open_note_in_view = (plugin) => ({
  id: "cmd_open_note_in_view",
  name: plugin.strings.cmd_open_note_in_view,
  icon: "Panels Top Left",
  callback: async () => {
    let note = await plugin.chain.sugguster_note();
    if (note) {
      plugin.chain.open_note_in_view(note.path);
    }
  }
});
var cmd_execut_current_note = (plugin) => ({
  id: "cmd_execut_current_note",
  name: plugin.strings.cmd_execut_current_note,
  icon: "Panels Top Left",
  hotkeys: [{ modifiers: ["Alt"], key: "R" }],
  callback: async () => {
    let cfile = plugin.chain.current_note;
    if (!cfile) {
      return;
    }
    let ctx = await plugin.app.vault.cachedRead(cfile);
    let flag = false;
    if (ctx.search("\n```js //templater\n") > 0) {
      new import_obsidian9.Notice(`\u6267\u884C\u5F53\u524D\u811A\u672C\uFF1A${cfile.basename}`);
      flag = true;
      plugin.utils.parse_templater(plugin.app, cfile.basename);
    }
    if (ctx.search("\n```css\n") > 0) {
      let all_css = await plugin.easyapi.editor.extract_code_block(cfile, "css");
      let css = all_css.join("\n\n\n").trim();
      if (css != "") {
        flag = true;
        new import_obsidian9.Notice(`\u5207\u6362\u5F53\u524D\u6837\u5F0F\uFF1A${cfile.basename}`);
        let cpath = plugin.app.vault.configDir + "/snippets/" + cfile.basename + ".css";
        await plugin.app.vault.adapter.write(cpath, css);
        let config = await plugin.app.vault.readJson(plugin.app.vault.configDir + "/appearance.json");
        if (!config["enabledCssSnippets"].contains(cfile.basename)) {
          config["enabledCssSnippets"].push(cfile.basename);
          await plugin.app.vault.writeJson(plugin.app.vault.configDir + "/appearance.json", config);
        }
        plugin.utils.toogle_note_css(plugin.app, document, cfile.basename, false);
      }
    }
    if (!flag) {
      plugin.chain.open_note_in_modal(cfile.path);
    }
  }
});
var commandBuilders = [
  cmd_open_note,
  cmd_reveal_note,
  cmd_open_and_reveal_note,
  cmd_open_prev_note,
  cmd_open_next_note,
  cmd_open_prev_note_of_right_leaf,
  cmd_open_next_note_of_right_leaf,
  cmd_open_notes_smarter,
  cmd_longform2notechain,
  cmd_longform4notechain,
  cmd_sort_file_explorer,
  clear_inlinks,
  replace_notes_with_regx,
  move_file_to_another_folder,
  chain_insert_node,
  chain_set_seq_note,
  create_new_note,
  chain_move_up_node,
  chain_move_down_node,
  cmd_file_rename,
  cmd_mermaid_flowchart_link,
  cmd_mermaid_flowchart_folder,
  cmd_mermaid_flowchart_auto,
  cmd_execute_template_modal,
  cmd_toogle_css_block_in_note,
  cmd_set_frontmatter,
  cmd_move_next_level,
  cmd_move_none_level,
  cmd_move_prev_level,
  cmd_insert_command_id,
  cmd_open_note_in_modal,
  cmd_open_note_in_view,
  cmd_execut_current_note
];
var commandBuildersDesktop = [
  cmd_file_open_with_system_app,
  cmd_file_show_in_system_explorer
];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
  if (plugin.app.isMobile == false) {
    commandBuildersDesktop.forEach((c) => {
      plugin.addCommand(c(plugin));
    });
  }
}

// src/gui/inputSuggester.ts
var import_obsidian10 = require("obsidian");
var InputSuggester = class extends import_obsidian10.FuzzySuggestModal {
  constructor(app, displayItems, items, options = {}, new_value = false) {
    super(app);
    this.displayItems = displayItems;
    this.items = items;
    this.new_value = new_value;
    this.promise = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.inputEl.addEventListener("keydown", (event) => {
      var _a;
      if (event.code !== "Tab") {
        return;
      }
      const self = this;
      const { values, selectedItem } = self.chooser;
      const { value } = this.inputEl;
      this.inputEl.value = (_a = values[selectedItem].item) != null ? _a : value;
    });
    if (options.placeholder)
      this.setPlaceholder(options.placeholder);
    if (options.limit)
      this.limit = options.limit;
    if (options.emptyStateText)
      this.emptyStateText = options.emptyStateText;
    this.open();
  }
  static Suggest(app, displayItems, items, options = {}, new_value = false) {
    const newSuggester = new InputSuggester(
      app,
      displayItems,
      items,
      options,
      new_value
    );
    return newSuggester.promise;
  }
  getItemText(item) {
    if (item === this.inputEl.value)
      return item;
    return this.displayItems[this.items.indexOf(item)];
  }
  getItems() {
    if (this.inputEl.value === "" || !this.new_value)
      return this.items;
    return [...this.items, this.inputEl.value];
  }
  selectSuggestion(value, evt) {
    this.resolved = true;
    super.selectSuggestion(value, evt);
  }
  onChooseItem(item, evt) {
    this.resolved = true;
    this.resolvePromise(item);
  }
  onClose() {
    super.onClose();
    if (!this.resolved)
      this.rejectPromise("no input given.");
  }
};
async function dialog_suggest(displayItems, items, placeholder = "", new_value = false) {
  try {
    return await InputSuggester.Suggest(
      this.app,
      displayItems,
      items,
      {
        placeholder
      },
      new_value
    );
  } catch (error) {
    return null;
  }
}

// src/gui/inputPrompt.ts
var import_obsidian11 = require("obsidian");
var InputPrompt = class extends import_obsidian11.Modal {
  constructor(app, header, placeholder, value) {
    super(app);
    this.header = header;
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (!evt.isComposing && evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.placeholder = placeholder != null ? placeholder : "";
    this.input = value != null ? value : "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app, header, placeholder, value) {
    const newPromptModal = new InputPrompt(
      app,
      header,
      placeholder,
      value
    );
    return newPromptModal.waitForClose;
  }
  display() {
    this.containerEl.addClass("quickAddModal", "qaInputPrompt");
    this.contentEl.empty();
    this.titleEl.textContent = this.header;
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(
      mainContentContainer,
      this.placeholder,
      this.input
    );
    this.createButtonBar(mainContentContainer);
  }
  createInputField(container, placeholder, value) {
    const textComponent = new import_obsidian11.TextComponent(container);
    textComponent.inputEl.style.width = "100%";
    textComponent.setPlaceholder(placeholder != null ? placeholder : "").setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  createButton(container, text, callback) {
    const btn = new import_obsidian11.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    this.createButton(
      buttonBarContainer,
      "Ok",
      this.submitClickCallback
    ).setCta().buttonEl.style.marginRight = "0";
    this.createButton(
      buttonBarContainer,
      "Cancel",
      this.cancelClickCallback
    );
    buttonBarContainer.style.display = "flex";
    buttonBarContainer.style.flexDirection = "row-reverse";
    buttonBarContainer.style.justifyContent = "flex-start";
    buttonBarContainer.style.marginTop = "1rem";
    buttonBarContainer.style.gap = "0.5rem";
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener(
      "keydown",
      this.submitEnterCallback
    );
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
async function dialog_prompt(header = "Input", placeholder = "", value = "") {
  try {
    return await InputPrompt.Prompt(
      this.app,
      header,
      placeholder,
      value
    );
  } catch (e) {
    return null;
  }
}

// ../easyapi/src/easyapi/gui/inputSuggester.ts
var import_obsidian12 = require("obsidian");
var InputSuggester2 = class extends import_obsidian12.FuzzySuggestModal {
  constructor(app, displayItems, items, options = {}, new_value = false) {
    super(app);
    this.displayItems = displayItems;
    this.items = items;
    this.new_value = new_value;
    this.promise = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.inputEl.addEventListener("keydown", (event) => {
      var _a;
      if (event.code !== "Tab") {
        return;
      }
      const self = this;
      const { values, selectedItem } = self.chooser;
      const { value } = this.inputEl;
      this.inputEl.value = (_a = values[selectedItem].item) != null ? _a : value;
    });
    if (options.placeholder)
      this.setPlaceholder(options.placeholder);
    if (options.limit)
      this.limit = options.limit;
    if (options.emptyStateText)
      this.emptyStateText = options.emptyStateText;
    this.open();
  }
  static Suggest(app, displayItems, items, options = {}, new_value = false) {
    const newSuggester = new InputSuggester2(
      app,
      displayItems,
      items,
      options,
      new_value
    );
    return newSuggester.promise;
  }
  getItemText(item) {
    if (item === this.inputEl.value)
      return item;
    return this.displayItems[this.items.indexOf(item)];
  }
  getItems() {
    if (this.inputEl.value === "" || !this.new_value)
      return this.items;
    return [...this.items, this.inputEl.value];
  }
  selectSuggestion(value, evt) {
    this.resolved = true;
    super.selectSuggestion(value, evt);
  }
  onChooseItem(item, evt) {
    this.resolved = true;
    this.resolvePromise(item);
  }
  onClose() {
    super.onClose();
    if (!this.resolved)
      this.rejectPromise("no input given.");
  }
};
async function dialog_suggest2(displayItems, items, placeholder = "", new_value = false) {
  try {
    return await InputSuggester2.Suggest(
      this.app,
      displayItems,
      items,
      {
        placeholder
      },
      new_value
    );
  } catch (error) {
    return null;
  }
}

// ../easyapi/src/easyapi/gui/inputPrompt.ts
var import_obsidian13 = require("obsidian");
var InputPrompt2 = class extends import_obsidian13.Modal {
  constructor(app, header, placeholder, value) {
    super(app);
    this.header = header;
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (!evt.isComposing && evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.placeholder = placeholder != null ? placeholder : "";
    this.input = value != null ? value : "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app, header, placeholder, value) {
    const newPromptModal = new InputPrompt2(
      app,
      header,
      placeholder,
      value
    );
    return newPromptModal.waitForClose;
  }
  display() {
    this.containerEl.addClass("quickAddModal", "qaInputPrompt");
    this.contentEl.empty();
    this.titleEl.textContent = this.header;
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(
      mainContentContainer,
      this.placeholder,
      this.input
    );
    this.createButtonBar(mainContentContainer);
  }
  createInputField(container, placeholder, value) {
    const textComponent = new import_obsidian13.TextComponent(container);
    textComponent.inputEl.classList.add("input-field");
    textComponent.setPlaceholder(placeholder != null ? placeholder : "").setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  createButton(container, text, callback) {
    const btn = new import_obsidian13.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    this.createButton(
      buttonBarContainer,
      "Ok",
      this.submitClickCallback
    ).setCta();
    this.createButton(
      buttonBarContainer,
      "Cancel",
      this.cancelClickCallback
    );
    buttonBarContainer.classList.add("button-bar");
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener(
      "keydown",
      this.submitEnterCallback
    );
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
async function dialog_prompt2(header = "Input", placeholder = "", value = "") {
  try {
    return await InputPrompt2.Prompt(
      this.app,
      header,
      placeholder,
      value
    );
  } catch (e) {
    return null;
  }
}

// ../easyapi/src/easyapi/editor.ts
var EasyEditor = class {
  constructor(app, api) {
    this.yamljs = require_js_yaml2();
    this.app = app;
    this.ea = api;
  }
  cn2num(chinese) {
    let v = parseFloat(chinese);
    if (!Number.isNaN(v)) {
      return v;
    }
    chinese = chinese.trim();
    const cnNumbers = {
      "\u96F6": 0,
      "\u4E00": 1,
      "\u4E8C": 2,
      "\u4E09": 3,
      "\u56DB": 4,
      "\u4E94": 5,
      "\u516D": 6,
      "\u4E03": 7,
      "\u516B": 8,
      "\u4E5D": 9,
      "\u5341": 10,
      "\u767E": 100,
      "\u5343": 1e3,
      "\u4E07": 1e4
    };
    let sign = 1;
    let i = 0;
    if (i + 1 <= chinese.length && chinese[i] === "\u8D1F") {
      sign = -1;
      i += 1;
    }
    let integer_total = 0;
    let decimal_total = 0;
    let temp = 0;
    let processing_decimal = false;
    let decimal_factor = 0.1;
    while (i < chinese.length) {
      const c = chinese[i];
      i += 1;
      if (c === "\u70B9") {
        processing_decimal = true;
        integer_total += temp;
        temp = 0;
        continue;
      }
      if (!(c in cnNumbers)) {
        return parseFloat("-");
      }
      if (!processing_decimal) {
        if (cnNumbers.hasOwnProperty(c)) {
          const num = cnNumbers[c];
          if (num >= 10) {
            if (temp === 0 && num === 10) {
              integer_total += 1 * num;
            } else {
              integer_total += temp * num;
            }
            temp = 0;
          } else {
            temp = temp * 10 + num;
          }
        }
      } else {
        if (cnNumbers.hasOwnProperty(c) && cnNumbers[c] < 10) {
          decimal_total += cnNumbers[c] * decimal_factor;
          decimal_factor *= 0.1;
        }
      }
    }
    integer_total += temp;
    return sign * (integer_total + decimal_total);
  }
  slice_by_position(ctx, pos) {
    if (pos.position) {
      pos = pos.position;
    }
    return ctx.slice(pos.start.offset, pos.end.offset);
  }
  parse_list_regx(aline, regx, field = {}) {
    let match = aline.match(regx);
    if (!match) {
      return null;
    }
    let res = { src: aline };
    for (let k in field) {
      res[k] = match[field[k]];
    }
    return res;
  }
  parse_list_dataview(aline, src = "_src_") {
    let res = {};
    if (src) {
      res[src] = aline;
    }
    let regex = /[($$](.*?)::(.*?)[)$$]/g;
    let match;
    while ((match = regex.exec(aline)) !== null) {
      let key = match[1].trim();
      let value = match[2].trim();
      res[key] = value;
    }
    return res;
  }
  keys_in(keys, obj) {
    for (let k of keys) {
      if (!(k in obj)) {
        return false;
      }
    }
    return true;
  }
  async extract_code_block(tfile, btype) {
    let xfile = this.ea.file.get_tfile(tfile);
    if (xfile) {
      tfile = await this.app.vault.cachedRead(xfile);
    }
    if (typeof tfile != "string") {
      return [];
    }
    let blocks = [];
    let reg = new RegExp(`\`\`\`${btype}\\n([\\s\\S]*?)
\`\`\``, "g");
    ;
    let matches;
    while ((matches = reg.exec(tfile)) !== null) {
      blocks.push(matches[1].trim());
    }
    reg = new RegExp(`~~~${btype}\\n([\\s\\S]*?)
~~~`, "g");
    ;
    while ((matches = reg.exec(tfile)) !== null) {
      blocks.push(matches[1].trim());
    }
    return blocks;
  }
  async get_selection(cancel_selection = false) {
    var _a;
    let editor = (_a = this.app.workspace.getActiveFileView()) == null ? void 0 : _a.editor;
    if (editor) {
      let sel = editor.getSelection();
      if (cancel_selection) {
        let cursor = editor.getCursor();
        await editor.setSelection(cursor, cursor);
      }
      return sel;
    } else {
      return "";
    }
  }
  async get_code_section(tfile, ctype = "", idx = 0, as_simple = true) {
    var _a;
    let dvmeta = this.app.metadataCache.getFileCache(tfile);
    let ctx = await this.app.vault.cachedRead(tfile);
    let section = (_a = dvmeta == null ? void 0 : dvmeta.sections) == null ? void 0 : _a.filter((x) => x.type == "code").filter((x) => {
      let c = ctx.slice(x.position.start.offset, x.position.end.offset).trim();
      return c.startsWith("```" + ctype) || c.startsWith("~~~" + ctype);
    })[idx];
    if (section) {
      let c = ctx.slice(
        section.position.start.offset,
        section.position.end.offset
      );
      if (as_simple) {
        return c.slice(4 + ctype.length, c.length - 4);
      } else {
        let res = {
          code: c,
          section,
          ctx
        };
        return res;
      }
    }
  }
  async get_heading_section(tfile, heading, idx = 0, with_heading = true) {
    var _a;
    let dvmeta = this.app.metadataCache.getFileCache(tfile);
    let ctx = await this.app.vault.cachedRead(tfile);
    if (!(dvmeta == null ? void 0 : dvmeta.headings)) {
      return "";
    }
    let section = (_a = dvmeta == null ? void 0 : dvmeta.headings) == null ? void 0 : _a.filter((x) => x.heading == heading)[idx];
    if (section) {
      let idx2 = dvmeta.headings.indexOf(section) + 1;
      while (idx2 < dvmeta.headings.length) {
        let csec = dvmeta.headings[idx2];
        if (csec.level <= section.level) {
          break;
        }
        idx2 = idx2 + 1;
      }
      if (idx2 < dvmeta.headings.length) {
        let csec = dvmeta.headings[idx2];
        let c = ctx.slice(
          with_heading ? section.position.start.offset : section.position.end.offset,
          csec.position.start.offset
        );
        return c;
      } else {
        let c = ctx.slice(
          with_heading ? section.position.start.offset : section.position.end.offset
        );
        return c;
      }
    }
  }
  async get_current_section(with_section = false) {
    var _a;
    let editor = this.ea.ceditor;
    let tfile = this.ea.cfile;
    if (!editor || !tfile) {
      return null;
    }
    let cursor = editor.getCursor();
    let cache = this.app.metadataCache.getFileCache(tfile);
    if (!cache || !(cache == null ? void 0 : cache.sections)) {
      return null;
    }
    if (cursor) {
      let section = (_a = cache == null ? void 0 : cache.sections) == null ? void 0 : _a.filter(
        (x) => {
          return x.position.start.line <= cursor.line && x.position.end.line >= cursor.line;
        }
      )[0];
      if (!section && cursor.line > cache.sections[cache.sections.length - 1].position.end.line) {
        section = cache.sections[cache.sections.length - 1];
      }
      if (!section && cursor.line < cache.sections[0].position.start.line) {
        section = cache.sections[0];
      }
      if (!section) {
        return null;
      }
      let ctx = await this.app.vault.cachedRead(tfile);
      ctx = ctx.slice(
        section.position.start.offset,
        section.position.end.offset
      );
      if (with_section) {
        return {
          "section": section,
          "sec": ctx
        };
      } else {
        return ctx;
      }
      return;
    } else {
      return null;
    }
  }
  set_obj_value(data, key, value) {
    let items = key.trim().split(".");
    if (!items) {
      return;
    }
    let curr = data;
    for (let item of items.slice(0, items.length - 1)) {
      let kv2 = item.match(/^(.*?)(\[-?\d+\])?$/);
      if (!kv2) {
        return;
      }
      let k2 = kv2[1];
      if (kv2[2]) {
        let i = parseInt(kv2[2].slice(1, kv2[2].length - 1));
        if (!(k2 in curr)) {
          curr[k2] = [{}];
          curr = curr[k2][0];
        } else {
          if (Array.isArray(curr[k2])) {
            let tmp = {};
            if (i < 0) {
              curr[k2].splice(-i - 1, 0, tmp);
            } else if (i < curr[k2].length) {
              curr[k2][i] = tmp;
            } else {
              curr[k2].push(tmp);
            }
            curr = tmp;
          } else {
            curr[k2] = [{}];
            curr = curr[k2][0];
          }
        }
      } else {
        if (!(k2 in curr)) {
          curr[k2] = {};
          curr = curr[k2];
        } else {
          if (typeof curr[k2] != "object") {
            curr[k2] = {};
            curr = curr[k2];
          } else {
            curr = curr[k2];
          }
        }
      }
    }
    let kv = items[items.length - 1].match(/^(.*?)(\[-?\d+\])?$/);
    if (!kv) {
      return;
    }
    let k = kv[1];
    if (kv[2]) {
      let i = parseInt(kv[2].slice(1, kv[2].length - 1));
      if (k in curr) {
        if (Array.isArray(curr[k])) {
          if (i < 0) {
            curr[k].splice(-i - 1, 0, value);
          } else if (i < curr[k].length) {
            curr[k][i] = value;
          } else {
            curr[k].push(value);
          }
        } else {
          curr[k] = value;
        }
      } else {
        curr[k] = [value];
      }
    } else {
      curr[k] = value;
    }
  }
  get_obj_value(data, key) {
    try {
      if (data[key]) {
        return data[key];
      }
      let keys = key.split(".");
      let left = keys[0];
      let right = keys.slice(1).join(".");
      if (left) {
        let items = left.match(/^(.*?)(\[-?\d+\])?$/);
        if (!items) {
          return null;
        }
        if (items[1]) {
          data = data[items[1]];
        }
        if (!data) {
          return null;
        }
        if (items[2]) {
          if (Array.isArray(data)) {
            if (data.length == 0) {
              data = null;
            } else {
              let i = parseInt(items[2].slice(1, items[2].length - 1));
              i = (i % data.length + data.length) % data.length;
              data = data[i];
            }
          } else if (typeof data == "object") {
            let keys2 = Object.keys(data).sort();
            if (keys2.length == 0) {
              data = null;
            } else {
              let i = parseInt(items[2].slice(1, items[2].length - 1));
              i = (i % keys2.length + keys2.length) % keys2.length;
              data = data[keys2[i]];
            }
          }
        }
      }
      if (!right) {
        return data;
      } else {
        return this.get_obj_value(data, right);
      }
    } catch (error) {
      return null;
    }
  }
  // LINE 存在时在其之后插件，不存在在末尾
  async insert_after_line(tfile, aline, LINE, tail = true, suffix = "\n\n") {
    if (!tfile) {
      return false;
    }
    let ctx = await this.ea.app.vault.cachedRead(tfile);
    let idx = ctx.indexOf(LINE);
    if (idx == -1 && tail) {
      ctx = `${ctx}${suffix}${aline}`;
    } else {
      ctx = `${ctx.slice(0, idx + LINE.length)}
${aline}${ctx.slice(idx + LINE.length)}`;
    }
    await this.ea.app.vault.modify(tfile, ctx);
    return true;
  }
};

// ../easyapi/src/easyapi/file.ts
var import_obsidian14 = require("obsidian");
var File = class {
  constructor(app, api) {
    this.app = app;
    this.api = api;
  }
  get_tfile(path, only_first = true) {
    try {
      if (path instanceof import_obsidian14.TFile) {
        return path;
      }
      path = path.split("|")[0].replace("![[", "").replace("[[", "").replace("]]", "");
      let tfile = this.app.vault.getFileByPath(path);
      if (tfile) {
        return tfile;
      }
      let tfiles = this.app.metadataCache.uniqueFileLookup.get(path.toLowerCase());
      if (!tfiles) {
        tfiles = this.app.metadataCache.uniqueFileLookup.get(path.toLowerCase() + ".md");
        if (!tfiles) {
          return null;
        } else {
          path = path + ".md";
        }
      }
      let ctfiles = tfiles.filter((x) => x.name == path);
      if (ctfiles.length > 0) {
        if (only_first) {
          return ctfiles[0];
        } else {
          return ctfiles;
        }
      }
      if (tfiles.length > 0) {
        if (only_first) {
          return tfiles[0];
        } else {
          return tfiles;
        }
      }
      return null;
    } catch (e) {
      return null;
    }
  }
  get_all_tfiles() {
    let files = this.app.vault.getMarkdownFiles();
    return files;
  }
  get_tfiles_of_folder(tfolder, n = 0) {
    if (!tfolder) {
      return [];
    }
    let notes = [];
    for (let c of tfolder.children) {
      if (c instanceof import_obsidian14.TFile && c.extension === "md") {
        notes.push(c);
      } else if (c instanceof import_obsidian14.TFolder && n != 0) {
        let tmp = this.get_tfiles_of_folder(c, n - 1);
        for (let x of tmp) {
          notes.push(x);
        }
      }
    }
    return notes;
  }
  get_all_tfiles_of_tags(tags, sort_mode = "") {
    if (!Array.isArray(tags)) {
      tags = [tags];
    }
    tags = tags.map((x) => {
      if (x.startsWith("#")) {
        return x;
      } else {
        return "#" + x;
      }
    });
    let tfiles = this.get_all_tfiles().filter((x) => {
      let ttags = this.get_tags(x);
      for (let tag of tags) {
        if (ttags.contains(tag)) {
          return true;
        }
      }
    });
    return tfiles;
  }
  generate_structure(tfolder, depth = 0, isRoot = true, only_folder = false, only_md = true) {
    let structure = "";
    const indentUnit = "    ";
    const verticalLine = "\u2502   ";
    const indent = verticalLine.repeat(Math.max(depth - 1, 0)) + indentUnit.repeat(depth > 0 ? 1 : 0);
    const children = tfolder.children || [];
    if (isRoot) {
      structure += `${tfolder.name}/
`;
      isRoot = false;
    }
    children.forEach((child, index) => {
      const isLast = index === children.length - 1;
      const prefix = isLast ? "\u2514\u2500\u2500 " : "\u251C\u2500\u2500 ";
      if (child instanceof import_obsidian14.TFolder) {
        structure += `${indent}${prefix}${child.name}/
`;
        structure += this.generate_structure(child, depth + 1, isRoot, only_folder, only_md);
      } else if (!only_folder) {
        if (only_md && child.extension != "md") {
          return;
        }
        structure += `${indent}${prefix}${child.name}
`;
      }
    });
    return structure;
  }
  get_tags(tfile) {
    var _a;
    if (!tfile) {
      return [];
    }
    let mcache = this.app.metadataCache.getFileCache(tfile);
    let tags = [];
    if (mcache == null ? void 0 : mcache.tags) {
      for (let curr of mcache.tags) {
        if (!tags.contains(curr.tag)) {
          tags.push(curr.tag);
        }
      }
    }
    if ((_a = mcache == null ? void 0 : mcache.frontmatter) == null ? void 0 : _a.tags) {
      if (Array.isArray(mcache.frontmatter.tags)) {
        for (let curr of mcache.frontmatter.tags) {
          let tag = "#" + curr;
          if (!tags.contains(tag)) {
            tags.push(tag);
          }
        }
      } else if (typeof mcache.frontmatter.tags === "string") {
        let tag = `#` + mcache.frontmatter.tags;
        if (!tags.contains(tag)) {
          tags.push(tag);
        }
      }
    }
    return tags;
  }
};

// ../easyapi/src/easyapi/random.ts
var import_obsidian15 = require("obsidian");
var Random = class {
  constructor(app, ea) {
    this.app = app;
    this.ea = ea;
  }
  /**
  * 随机获取 M 个值，位于 0～N 之间
  * @param {number} N - 最大值（不包含）
  * @param {number} M - 需要获取的随机数数量
  * @param {boolean} repeat - 是否允许重复值
  * @returns {number[]} - 包含 M 个随机数的数组
  */
  random_number(N, M, repeat = false) {
    if (M <= 0)
      return [];
    if (!repeat && M > N) {
      throw new Error("\u5F53\u4E0D\u5141\u8BB8\u91CD\u590D\u65F6\uFF0CM \u4E0D\u80FD\u5927\u4E8E N");
    }
    const result = [];
    if (repeat) {
      for (let i = 0; i < M; i++) {
        result.push(Math.floor(Math.random() * N));
      }
    } else {
      const numbers = Array.from({ length: N }, (_, i) => i);
      for (let i = numbers.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [numbers[i], numbers[j]] = [numbers[j], numbers[i]];
      }
      result.push(...numbers.slice(0, M));
    }
    return result;
  }
  // 线性同余生成器 (LCG)
  lcg(seed) {
    const a = 1664525;
    const c = 1013904223;
    const m = Math.pow(2, 32);
    return (a * seed + c) % m;
  }
  /**
   * 基于日期生成固定随机数序列
   * @param {moment} t - 时间对象（使用moment.js）
   * @param {number} N - 随机数范围上限（0到N-1）
   * @param {number} M - 需要的随机数数量
   * @returns {number[]} - 排序后的随机数数组
   */
  random_number_for_date(t, N, M) {
    if (M <= 0)
      return [];
    if (M >= N)
      return Array.from({ length: N }, (_, i) => i);
    const dateStr = t.format("YYYY-MM-DD");
    let seed = 0;
    for (let i = 0; i < dateStr.length; i++) {
      seed = (seed << 5) - seed + dateStr.charCodeAt(i);
      seed |= 0;
    }
    const numbers = Array.from({ length: N }, (_, i) => i);
    let currentSeed = seed;
    for (let i = N - 1; i > 0; i--) {
      currentSeed = this.lcg(currentSeed);
      const j = Math.abs(currentSeed) % (i + 1);
      [numbers[i], numbers[j]] = [numbers[j], numbers[i]];
    }
    return numbers.slice(0, M).sort((a, b) => a - b);
  }
  // 根据字符串返回 0~N 之间的整数
  string_to_random_number(str, N) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      hash = (hash << 5) - hash + str.charCodeAt(i);
      hash |= 0;
    }
    return Math.abs(hash) % N;
  }
  // 从数组中随机获取 N 个元素
  random_elements(arr, n) {
    const shuffled = [...arr];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled.slice(0, n);
  }
  _get_tfiles_(filter) {
    let tfiles = this.ea.nc.chain.get_all_tfiles();
    if (filter) {
      tfiles = tfiles.filter((x) => filter(x));
    }
    return tfiles;
  }
  random_notes(n = 3, filter = null) {
    let tfiles = this._get_tfiles_(filter);
    let idx = this.random_number(tfiles.length, n);
    tfiles = idx.map((i) => tfiles[i]);
    return tfiles;
  }
  random_daily_notes(n = 3, before_today = true, filter = null) {
    let t = (0, import_obsidian15.moment)((0, import_obsidian15.moment)().format("YYYY-MM-DD"));
    let dnote = this.ea.nc.chain.get_last_daily_note();
    if (dnote) {
      t = (0, import_obsidian15.moment)(dnote.basename);
    }
    let tfiles = this._get_tfiles_(filter);
    if (before_today) {
      tfiles = tfiles.filter(
        (f) => f.stat.ctime < t.unix() * 1e3
      );
    }
    let idx = this.random_number_for_date(t, tfiles.length, n);
    tfiles = idx.map((i) => tfiles[i]);
    return tfiles;
  }
};

// ../easyapi/src/easyapi/waiter.ts
var import_obsidian16 = require("obsidian");
var Waiter = class {
  constructor(app, ea) {
    this.app = app;
    this.ea = ea;
  }
  async wait(condition, timeout = 0) {
    let start = (0, import_obsidian16.moment)();
    while (!condition()) {
      let end = (0, import_obsidian16.moment)();
      if ((start.valueOf() - end.valueOf()) / 1e3 > timeout) {
        return false;
      }
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
    return true;
  }
  async wait_for(vfunc, timeout = 30) {
    let start = (0, import_obsidian16.moment)();
    let res = await vfunc();
    while (!res) {
      let end = (0, import_obsidian16.moment)();
      if ((start.valueOf() - end.valueOf()) / 1e3 > timeout) {
        return null;
      }
      await new Promise((resolve) => setTimeout(resolve, 100));
      res = await vfunc();
    }
    return res;
  }
};

// ../easyapi/src/easyapi/templater.ts
var import_obsidian17 = require("obsidian");
var Templater = class {
  constructor(app, ea) {
    this.app = app;
    this.ea = ea;
  }
  get tpl() {
    return this.ea.get_plugin("templater-obsidian");
  }
  get_tp_func(target) {
    let items = target.split(".");
    if (items[0].localeCompare("tp") != 0 || items.length != 3) {
      return void 0;
    }
    let modules = this.tpl.templater.functions_generator.internal_functions.modules_array.filter(
      (item) => item.name.localeCompare(items[1]) == 0
    );
    if (modules.length == 0) {
      return void 0;
    }
    return modules[0].static_functions.get(items[2]);
  }
  async get_tp_user_func(target) {
    if (!target.match(/^tp\.user\.\w+$/)) {
      return null;
    }
    let items = target.split(".");
    if (items[0].localeCompare("tp") != 0 || items[1].localeCompare("user") != 0 || items.length != 3) {
      return void 0;
    }
    let funcs = await this.tpl.templater.functions_generator.user_functions.user_script_functions.generate_user_script_functions();
    return funcs.get(items[2]);
  }
  async templater$1(template, active_file, target_file, extra = null) {
    let config = {
      template_file: template,
      active_file,
      target_file,
      extra,
      run_mode: "DynamicProcessor"
    };
    let { templater } = this.tpl;
    let functions = await templater.functions_generator.internal_functions.generate_object(config);
    functions.user = {};
    let userScriptFunctions = await templater.functions_generator.user_functions.user_script_functions.generate_user_script_functions(config);
    userScriptFunctions.forEach(
      (value, key) => {
        functions.user[key] = value;
      }
    );
    if (template) {
      let userSystemFunctions = await templater.functions_generator.user_functions.user_system_functions.generate_system_functions(config);
      userSystemFunctions.forEach(
        (value, key) => {
          functions.user[key] = value;
        }
      );
    }
    return async (command) => {
      return await templater.parser.parse_commands(command, functions);
    };
  }
  async extract_templater_block(tfile, reg = /<%\*\s*([\s\S]*?)\s*-?%>/g) {
    let xfile = this.ea.file.get_tfile(tfile);
    if (xfile) {
      tfile = await this.app.vault.cachedRead(xfile);
    }
    if (typeof tfile != "string") {
      return [];
    }
    let blocks = [];
    let matches;
    while ((matches = reg.exec(tfile)) !== null) {
      blocks.push(matches[0].trim());
    }
    let tpls = await this.ea.editor.extract_code_block(tfile, "js //templater");
    for (let tpl of tpls) {
      blocks.push(`<%*
${tpl}
-%>`);
    }
    return blocks;
  }
  // target_file：target>activate>template
  async parse_templater(template, extract = true, extra = null, idx = null, target = "") {
    let file = this.ea.file.get_tfile(template);
    if (file) {
      template = file;
    }
    let blocks;
    let template_file = null;
    if (template instanceof import_obsidian17.TFile) {
      template_file = template;
      if (extract) {
        blocks = await this.extract_templater_block(template);
      } else {
        let item = await this.app.vault.cachedRead(template);
        blocks = [item];
      }
    } else {
      if (extract) {
        blocks = await this.extract_templater_block(template);
      } else {
        blocks = [template];
      }
    }
    let active_file = this.ea.cfile;
    let target_file = this.ea.file.get_tfile(target);
    if (!target) {
      if (active_file) {
        target_file = active_file;
      } else if (file) {
        target_file = file;
      } else {
        throw new Error("Target File must be TFile");
      }
    }
    let templateFunc = await this.templater$1(template_file, active_file, target_file, extra = extra);
    if (templateFunc) {
      let res = [];
      if (idx) {
        for (let i of idx) {
          let block = blocks[i];
          if (block) {
            let item = await templateFunc(block);
            res.push(item);
          } else {
            res.push("");
          }
        }
      } else {
        for (let block of blocks) {
          let item = await templateFunc(block);
          res.push(item);
        }
      }
      return res;
    } else {
      return [];
    }
  }
};

// ../easyapi/src/easyapi/time.ts
var import_obsidian18 = require("obsidian");
var Time = class {
  constructor(app, ea) {
    this.app = app;
    this.ea = ea;
  }
  get today() {
    let t = (0, import_obsidian18.moment)().format("YYYY-MM-DD");
    return (0, import_obsidian18.moment)(t);
  }
  as_date(t) {
    let xt = t.format("YYYY-MM-DD");
    return (0, import_obsidian18.moment)(xt);
  }
  /**
   * 获取相对于基准日期的偏移月份的指定日期
   * @param {number} dayIndex - 日期索引（正数表示第几天，负数表示倒数第几天）
   * @param {number} monthOffset - 月份偏移量（正数为未来月份，负数为过去月份）
   * @param {Date|string|moment.Moment} baseDate - 基准日期，默认为当日
   * @returns {moment.Moment} 计算后的目标日期
   */
  relative_month_day(dayIndex, monthOffset = 0, baseDate = this.today) {
    let baseMoment = (0, import_obsidian18.moment)(baseDate).clone();
    let targetMoment = baseMoment.clone().add(monthOffset, "months");
    if (dayIndex > 0) {
      targetMoment.startOf("month").add(dayIndex - 1, "days");
    } else {
      targetMoment.endOf("month").add(dayIndex + 1, "days");
    }
    return this.as_date(targetMoment);
  }
  /**
   * 获取相对于基准日期的偏移周数的指定星期几
   * @param {number} dayIndex - 星期索引（0-6，0为周日，1为周一，依此类推；或使用负数表示倒数）
   * @param {number} weekOffset - 周数偏移量（正数为未来周数，负数为过去周数）
   * @param {Date|string|moment.Moment} baseDate - 基准日期，默认为当日
   * @returns {moment.Moment} 计算后的目标日期
   * 
   * @example
   * relative_week_day(1, 0)       // 本周一
   * relative_week_day(0, -1)      // 上周日
   * relative_week_day(6, 2)       // 两周后的周六
   * relative_week_day(-1, 1)      // 下周的倒数第1天（周六）
   */
  relative_week_day(dayIndex, weekOffset = 0, baseDate = this.today) {
    let baseMoment = (0, import_obsidian18.moment)(baseDate).clone();
    let targetMoment = baseMoment.add(weekOffset, "weeks");
    if (dayIndex >= 0) {
      targetMoment.day(dayIndex);
    } else {
      targetMoment.endOf("week").add(dayIndex + 1, "days");
    }
    return this.as_date(targetMoment);
  }
  /**
      * 解析中文自然语言日期（新增支持"下个月5号"/"上个月15号"等格式）
      * @param {string} msg - 包含日期的文本（如"下个月5号开会"）
      * @param {moment.Moment} base - 基准日期，默认为当天
      * @returns {{date: string, text: string}} 处理后的日期和文本
      * 
      * @example
      * parse_date("下个月5号评审") // {date: "2025-07-05", text: "评审"}
      * parse_date("上个月15号账单") // {date: "2025-05-15", text: "账单"}
      */
  extract_chinese_date(msg, base = this.today) {
    let result = { date: base.format("YYYY-MM-DD"), text: msg };
    let dayKeywords = [
      { pattern: /^大前天/, days: -3 },
      { pattern: /^前天/, days: -2 },
      { pattern: /^昨天/, days: -1 },
      { pattern: /^今天/, days: 0 },
      { pattern: /^明天/, days: 1 },
      { pattern: /^后天/, days: 2 },
      { pattern: /^大后天/, days: 3 }
    ];
    for (let { pattern, days } of dayKeywords) {
      if (pattern.test(msg)) {
        result.date = base.clone().add(days, "days").format("YYYY-MM-DD");
        result.text = msg.replace(pattern, "").trim();
        return result;
      }
    }
    let monthDayMatch = msg.match(/^(上个月|下个月)(\d{1,2})号?/);
    if (monthDayMatch) {
      let [fullMatch, direction, day] = monthDayMatch;
      let monthOffset = direction === "\u4E0A\u4E2A\u6708" ? -1 : 1;
      let targetDate = base.clone().add(monthOffset, "months").date(parseInt(day));
      if (targetDate.date() !== parseInt(day)) {
        targetDate.endOf("month");
      }
      result.date = targetDate.format("YYYY-MM-DD");
      result.text = msg.slice(fullMatch.length).trim();
      return result;
    }
    let weekMatch = msg.match(/^([上下]([一二三四五六七八九十两]|\d+)周周|上上周|上上星期|上周|上星期|周|星期|下周|下星期|下下周|下下星期)([一二三四五六七日]|[1-7])/);
    if (weekMatch) {
      let [fullMatch, weekStr, weekCount, dayChar] = weekMatch;
      let dayMap = { "\u4E00": 1, "\u4E8C": 2, "\u4E09": 3, "\u56DB": 4, "\u4E94": 5, "\u516D": 6, "\u65E5": 7, "\u4E03": 7 };
      if (weekCount) {
        let nmap = { "\u4E00": 1, "\u4E8C": 2, "\u4E09": 3, "\u56DB": 4, "\u4E94": 5, "\u516D": 6, "\u65E5": 7, "\u4E03": 7, "\u516B": 8, "\u4E5D": 9, "\u4E24": 2 };
        weekCount = nmap[weekCount] || parseInt(weekCount);
      }
      let targetDay = dayMap[dayChar] || parseInt(dayChar);
      let weekOffset = ["\u5468", "\u661F\u671F"].contains(weekStr) ? 0 : ["\u4E0B\u5468", "\u4E0B\u661F\u671F"].contains(weekStr) ? 1 : ["\u4E0B\u4E0B\u5468", "\u4E0B\u4E0B\u661F\u671F"].contains(weekStr) ? 2 : ["\u4E0A\u5468", "\u4E0A\u661F\u671F"].contains(weekStr) ? -1 : ["\u4E0A\u4E0A\u5468", "\u4E0A\u4E0A\u661F\u671F"].contains(weekStr) ? -2 : msg.slice(0, 1) == "\u4E0A" ? -weekCount : weekCount;
      let date = this.relative_week_day(targetDay, weekOffset, base);
      if (date.isBefore(base, "day")) {
        date.add(1, "week");
      }
      result.date = date.format("YYYY-MM-DD");
      result.text = msg.slice(fullMatch.length).trim();
      return result;
    }
    let absoluteMonthMatch = msg.match(/^(\d{1,2})月(\d{1,2})(?:号|日)?/);
    if (absoluteMonthMatch) {
      const [fullMatch, month, day] = absoluteMonthMatch;
      let date = base.clone().month(parseInt(month) - 1).date(parseInt(day));
      if (date.isBefore(base, "day")) {
        date.add(1, "year");
      }
      result.date = date.format("YYYY-MM-DD");
      result.text = msg.slice(fullMatch.length).trim();
      return result;
    }
    if (result.text == msg) {
      result.date = null;
    }
    return result;
  }
  parse_minutes(xt) {
    if (typeof xt == "number") {
      return xt;
    }
    if (xt.match(/^\d*$/) && parseInt(xt)) {
      return parseInt(xt);
    }
    let items = xt.match(/^(.{1,2})个半小时$/);
    if (items) {
      return this.ea.editor.cn2num(items[1]) * 60 + 30;
    }
    let compoundMatch = xt.match(/^(.*?)(h|hour|hours|时|小时|个小时)(.*?)(m|min|minute|minutes|分|分钟)?$/i);
    if (compoundMatch) {
      let hours = this.ea.editor.cn2num(compoundMatch[1]) || 0;
      let minutes = this.ea.editor.cn2num(compoundMatch[3]) || 0;
      return Math.round(hours * 60 + minutes);
    }
    let simpleMatch = xt.match(/^(.*?)(m|min|minute|minutes|分|分钟)$/i);
    if (simpleMatch) {
      let value = this.ea.editor.cn2num(simpleMatch[1]);
      return Math.round(value);
    }
    return Number.NaN;
  }
  parse_time(st, date = this.today, nearest = true) {
    if (!st) {
      return null;
    }
    if (import_obsidian18.moment.isMoment(st)) {
      return st;
    }
    if (import_obsidian18.moment.isMoment(date)) {
      date = date.format("YYYY-MM-DD");
    }
    let items = st.match(/^(\d{2}):?(\d{2})$/);
    if (items) {
      let t = (0, import_obsidian18.moment)(`${date} ${items[1]}:${items[2]}:00`, "YYYY-MM-DD HH:mm:ss");
      if (t.isValid()) {
        return t;
      }
    }
    let cnTimeRegex = /^(早上|上午|凌晨|下午|晚上)?([零一二三四五六七八九十百]+|[\d]+)点(半|([零一二三四五六七八九十]+)分?|([\d]+)分?)?$/;
    let match = st.match(cnTimeRegex);
    if (match) {
      let [_, period, hourStr, minuteCnStr] = match;
      let hour = this.ea.editor.cn2num(hourStr);
      let minute = 0;
      if (minuteCnStr === "\u534A") {
        minute = 30;
      } else if (minuteCnStr) {
        minute = this.ea.editor.cn2num(minuteCnStr);
      }
      if (["\u4E0B\u5348"].includes(period)) {
        hour = hour >= 12 ? hour : hour + 12;
      } else if (["\u665A\u4E0A"].includes(period)) {
        hour = hour >= 5 && hour < 12 ? hour + 12 : hour;
      } else if (!period && nearest && hour <= 12) {
        let t = (0, import_obsidian18.moment)();
        let a = t.hour() * 60 + t.minutes();
        let b = hour * 60 + minute;
        if (a > b && a - b > b - a + 12 * 60) {
          hour = hour + 12;
        }
      }
      hour %= 24;
      return (0, import_obsidian18.moment)(`${date} ${hour}:${minute}`, "YYYY-MM-DD HH:mm");
    }
    return null;
  }
  time_plus_minutes(st, xt) {
    let t = this.parse_time(st);
    let n = this.parse_minutes(xt);
    if (!t || typeof t == "string" || Number.isNaN(n)) {
      return null;
    }
    return t.clone().add(xt, "minutes");
  }
  generate_start_times(jobs, delta = 10, is_today = true, st = "06:45", compress = true) {
    var _a;
    let _st = this.parse_time(st);
    if (!_st) {
      return [];
    }
    st = _st;
    let timeList = [];
    let t = this.parse_time((0, import_obsidian18.moment)().format("HH:mm"));
    if (!is_today || true) {
      t = this.parse_time((0, import_obsidian18.moment)().format("23:59"));
    }
    if (!t) {
      return [];
    }
    for (let hour = st.hour(); hour <= t.hour(); hour++) {
      let startMinute = hour === st.hour() ? st.minute() : 0;
      let endMinute = hour === t.hour() ? t.minute() + 1 : 60;
      for (let minute = startMinute; minute < endMinute; minute += delta) {
        let time = `${String(hour).padStart(2, "0")}:${String(minute).padStart(2, "0")}`;
        let ct = this.parse_time(time);
        if (!ct) {
          continue;
        }
        let flag = true;
        for (let item of jobs) {
          if (item.st <= ct && item.et > ct) {
            flag = false;
            break;
          }
        }
        if (flag) {
          timeList.push(time);
        }
      }
    }
    let et = (_a = this.get_max_endt(jobs)) == null ? void 0 : _a.format("HH:mm");
    if (et && !timeList.contains(et)) {
      timeList.push(et);
    }
    timeList = timeList.sort((a, b) => -a.localeCompare(b));
    if (compress) {
      return this.compress_timelist(timeList, delta);
    } else {
      return timeList;
    }
  }
  get_max_endt(jobs, st = "06:45") {
    if (jobs.length == 0) {
      return this.parse_time(st);
    } else {
      return import_obsidian18.moment.unix(
        Math.max(...jobs.map((x) => x.et)) / 1e3
      );
    }
  }
  compress_timelist(timeList, delta = 5) {
    let compressedList = [];
    let startRange = null;
    let prevTime = null;
    for (let i = 0; i < timeList.length; i++) {
      let currentTime = timeList[i];
      let currentParsed = this.parse_time(currentTime);
      if (!currentParsed) {
        continue;
      }
      if (prevTime === null) {
        startRange = currentTime;
      } else {
        let prevParsed = this.parse_time(prevTime);
        if (!prevParsed) {
          continue;
        }
        let diffMinutes = prevParsed.hour() * 60 + prevParsed.minute() - (currentParsed.hour() * 60 + currentParsed.minute());
        if (diffMinutes !== delta) {
          if (startRange !== prevTime) {
            compressedList.push(startRange);
            compressedList.push(prevTime);
          } else {
            compressedList.push(startRange);
          }
          startRange = currentTime;
        }
      }
      prevTime = currentTime;
    }
    if (startRange !== prevTime) {
      compressedList.push(startRange);
      compressedList.push(prevTime);
    } else if (prevTime !== null) {
      compressedList.push(prevTime);
    }
    return compressedList;
  }
};

// ../easyapi/src/easyapi/easyapi.ts
var EasyAPI = class {
  constructor(app) {
    this.app = app;
    this.dialog_suggest = dialog_suggest2;
    this.dialog_prompt = dialog_prompt2;
    this.editor = new EasyEditor(app, this);
    this.file = new File(app, this);
    this.waiter = new Waiter(app, this);
    this.random = new Random(app, this);
    this.tpl = new Templater(app, this);
    this.time = new Time(app, this);
  }
  get_plugin(name) {
    var _a;
    return (_a = this.app.plugins) == null ? void 0 : _a.plugins[name];
  }
  get ea() {
    return this.get_plugin("easyapi");
  }
  get nc() {
    return this.get_plugin("note-chain");
  }
  get ns() {
    return this.get_plugin("note-sync");
  }
  get wv() {
    return this.get_plugin("webview-llm");
  }
  get qa() {
    var _a;
    return (_a = this.get_plugin("quickadd")) == null ? void 0 : _a.api;
  }
  get dv() {
    var _a;
    return (_a = this.get_plugin("dataview")) == null ? void 0 : _a.api;
  }
  get cfile() {
    return this.app.workspace.getActiveFile();
  }
  get cmeta() {
    let cfile = this.cfile;
    if (cfile) {
      return this.app.metadataCache.getFileCache(cfile);
    }
  }
  get cfm() {
    let cmeta = this.cmeta;
    if (cmeta) {
      return cmeta.frontmatter;
    }
  }
  get ccontent() {
    let cfile = this.cfile;
    if (cfile) {
      return this.app.vault.read(cfile);
    }
  }
  get cfolder() {
    var _a;
    return (_a = this.cfile) == null ? void 0 : _a.parent;
  }
  get cview() {
    let view = this.app.workspace.getActiveFileView();
    return view;
  }
  get ceditor() {
    var _a;
    let editor = (_a = this.cview) == null ? void 0 : _a.editor;
    return editor;
  }
};

// src/NCView.ts
var import_obsidian19 = require("obsidian");
var NoteContentView = class extends import_obsidian19.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.fileModifyHandler = null;
    this.debounceTimer = null;
    this.plugin = plugin;
    this.icon = "getIcon";
  }
  getViewType() {
    return "note-content-view";
  }
  getDisplayText() {
    return "Note Preview";
  }
  getState() {
    return {
      content: this.content,
      sourcePath: this.sourcePath
    };
  }
  async setState(state, result) {
    this.content = state.content;
    this.sourcePath = state.sourcePath;
    await this.setContent(this.content, this.sourcePath);
  }
  getIcon() {
    return "";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const div = container.createDiv();
    div.addClass("markdown-rendered");
    div.addEventListener("click", async (e) => {
      const target = e.target;
      if (target.tagName === "A" && target.hasClass("internal-link")) {
        e.preventDefault();
        const link = target.getAttr("href");
        if (link) {
          this.app.workspace.openLinkText(link, this.sourcePath, true);
        }
      }
    });
    import_obsidian19.MarkdownRenderer.render(this.app, "", div, "", this);
  }
  async setContent(content, sourcePath) {
    this.content = content;
    this.sourcePath = sourcePath;
    const container = this.containerEl.children[1];
    container.empty();
    const div = container.createDiv();
    div.addClass("markdown-rendered");
    await import_obsidian19.MarkdownRenderer.render(this.app, content, div, sourcePath, this);
    div.addEventListener("click", async (e) => {
      const target = e.target;
      if (target.tagName === "A" && target.hasClass("internal-link")) {
        e.preventDefault();
        const link = target.getAttr("href");
        if (link) {
          this.app.workspace.openLinkText(link, this.sourcePath, true);
        }
      }
    });
    div.querySelectorAll("a.internal-link").forEach((el) => {
      const href = el.getAttribute("href");
      if (href) {
        el.setAttribute("data-href", href);
        el.setAttr("aria-label", href);
        el.addClass("hover-link");
        el.addEventListener("mouseenter", (e) => {
          this.app.workspace.trigger("hover-link", {
            event: e,
            source: "markdown",
            hoverParent: el,
            targetEl: el,
            linktext: href,
            sourcePath: this.sourcePath
          });
        });
      }
    });
    if (this.fileModifyHandler) {
      this.app.vault.offref(this.fileModifyHandler);
      this.fileModifyHandler = null;
    }
    const file = this.app.vault.getAbstractFileByPath(sourcePath);
    if (file instanceof import_obsidian19.TFile) {
      this.registerEvent(
        this.app.vault.on("modify", (modifiedFile) => {
          if (modifiedFile.path === sourcePath) {
            if (this.debounceTimer) {
              window.clearTimeout(this.debounceTimer);
            }
            this.debounceTimer = window.setTimeout(() => {
              this.app.vault.read(modifiedFile).then((newContent) => {
                this.setContent(newContent, sourcePath);
              });
              this.debounceTimer = null;
            }, 5e3);
          }
        })
      );
    }
  }
  async onClose() {
    if (this.fileModifyHandler) {
      this.app.vault.offref(this.fileModifyHandler);
      this.fileModifyHandler = null;
    }
  }
};

// main.ts
var NoteChainPlugin = class extends import_obsidian20.Plugin {
  async onload() {
    this.dialog_suggest = dialog_suggest;
    this.dialog_prompt = dialog_prompt;
    this.status = "waiting";
    this.app.workspace.onLayoutReady(
      async () => {
        await this._onload_();
        this._after_loading_();
      }
    );
  }
  async _after_loading_() {
    var _a, _b;
    while (!((_a = this.app.plugins) == null ? void 0 : _a.plugins["note-chain"])) {
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
    this.app.commands.executeCommandById(
      "dataview:dataview-force-refresh-views"
    );
    let target = await this.app.plugins.getPlugin("obsidian-tasks-plugin");
    target && target.cache.notifySubscribers();
    return (_b = this.app.plugins) == null ? void 0 : _b.plugins["note-chain"];
  }
  async _onload_() {
    this.status = "loading";
    this.debug = true;
    await this.loadSettings();
    this.utils = (init_utils(), __toCommonJS(utils_exports));
    this.ob = require("obsidian");
    this.editor = new NCEditor(this);
    this.chain = new NoteChain(
      this,
      this.editor,
      this.settings.field_of_prevnote,
      this.settings.field_of_nextnote
    );
    this.explorer = new NCFileExplorer(this);
    this.mermaid = new MermaidGraph(this);
    this.canvas = new CanvasGraph(this);
    this.strings = new Strings();
    this.easyapi = new EasyAPI(this.app);
    addCommands(this);
    this.addSettingTab(new NCSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-open", this.ufunc_on_file_open.bind(this))
    );
    this.registerEvent(this.app.vault.on(
      "delete",
      async (file) => {
        await this.chain.chain_pop_node(file);
        await this.explorer.sort();
      }
    ));
    this.registerEvent(this.app.vault.on(
      "create",
      async () => {
        await sleep(500);
        this.explorer.sort(0, true);
      }
    ));
    this.registerEvent(this.app.vault.on(
      "rename",
      async (file, oldPath) => {
        let oldFolder = this.app.vault.getFolderByPath(
          oldPath.slice(0, oldPath.lastIndexOf("/"))
        );
        if (oldFolder != file.parent && this.settings.auto_notechain) {
          await this.chain.chain_pop_node(file);
          await this.auto_notechain(file);
        }
        oldFolder && this.chain.refresh_folder(oldFolder);
        this.chain.refresh_tfile(file);
        this.explorer.sort();
        this.explorer.set_fileitem_style_of_file(file);
      }
    ));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian20.TFile) {
          menu.addItem((item) => {
            item.setTitle(this.strings.filemenu_create_next_note).setIcon("file-plus").onClick(async () => {
              let filename = await this.dialog_prompt("File name");
              if (!filename) {
                return;
              }
              let dst = file.parent ? file.parent.path + "/" + filename + ".md" : filename + ".md";
              if (this.chain.get_tfile(dst)) {
                new import_obsidian20.Notice("Exists:" + file.path, 3e3);
              } else {
                let tfile = await this.app.vault.create(dst, "");
                await this.chain.chain_insert_node_after(tfile, file);
                await this.editor.set_frontmatter_align_file(
                  file,
                  tfile,
                  this.settings.field_of_confluence_tab_format
                );
                await this.chain.open_note(tfile, false, false);
              }
            });
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian20.TFile && file.extension == "md") {
          menu.addItem((item) => {
            item.setTitle(this.strings.filemenu_move_as_next_note).setIcon("hand").onClick(async () => {
              let anchor = await this.chain.sugguster_note();
              if (anchor) {
                await this.chain.chain_insert_node_after(file, anchor);
                await this.editor.set_frontmatter_align_file(
                  anchor,
                  file,
                  this.settings.field_of_confluence_tab_format
                );
                if (file.parent != anchor.parent) {
                  let dst = anchor.parent.path + "/" + file.name;
                  await this.app.fileManager.renameFile(file, dst);
                }
                this.explorer.sort();
              }
            });
          });
        } else if (file instanceof import_obsidian20.TFolder) {
          menu.addItem((item) => {
            item.setTitle(this.strings.filemenu_move_as_next_note).setIcon("hand").onClick(async () => {
              var _a;
              let notes = (_a = file.parent) == null ? void 0 : _a.children;
              if (notes) {
                notes = this.chain.sort_tfiles_by_chain(notes);
                notes = notes.filter((x) => x != file);
                let anchor = await this.dialog_suggest(
                  notes.map((x) => x instanceof import_obsidian20.TFile ? "\u{1F4C3}" + x.basename : "\u{1F4C1}" + x.name),
                  notes
                );
                if (!anchor) {
                  return;
                }
                await this.chain.move_folder_as_next_note(file, anchor);
                new import_obsidian20.Notice(`${anchor instanceof import_obsidian20.TFile ? anchor.basename : anchor.name}-->${file.name}`);
                this.chain.refresh_tfile(file);
                await this.explorer.sort(0, true);
              }
            });
          });
        }
        let selector = document.querySelectorAll(
          ".tree-item-self.is-selected"
        );
        let items = Object.values(selector).map((x) => {
          var _a;
          return (_a = x.dataset) == null ? void 0 : _a.path;
        });
        let tfiles = items.map((x) => this.chain.get_tfile(x)).filter((x) => x.extension == "md");
        if (tfiles.length > 1) {
          menu.addItem((item) => {
            item.setTitle(this.strings.filemenu_move_as_next_notes).setIcon("hand").onClick(async () => {
              tfiles = this.chain.sort_tfiles_by_chain(tfiles);
              let notes = this.chain.get_all_tfiles();
              notes = notes.filter((x) => !tfiles.contains(x));
              let anchor = await this.chain.sugguster_note(notes);
              if (!anchor) {
                return;
              }
              for (let tfile of tfiles) {
                if (tfile.parent.path != anchor.parent.path) {
                  let dst = anchor.parent.path + "/" + tfile.name;
                  await this.app.fileManager.renameFile(tfile, dst);
                }
                await this.chain.chain_pop_node(tfile);
              }
              tfiles.unshift(anchor);
              let anchor_next = this.chain.get_next_note(anchor);
              if (anchor_next) {
                tfiles.push(anchor_next);
              }
              await this.chain.chain_concat_tfiles(tfiles);
              for (let dst of tfiles.slice(1, tfiles.length - 1)) {
                await this.editor.set_frontmatter_align_file(
                  anchor,
                  dst,
                  this.settings.field_of_confluence_tab_format
                );
              }
            });
          });
        }
      })
    );
    this.registerEvent(
      this.app.metadataCache.on(
        "changed",
        async (file, data, cache) => {
          if (file == this.chain.current_note) {
            clearTimeout(this.timerId);
          }
          let timerId = setTimeout(async () => {
            if (file.parent) {
              this.chain.children[file.parent.path] = this.chain.sort_tfiles_by_chain(
                file.parent.children
              );
            }
            this.explorer.sort(0, false);
            if (this.settings.field_of_display_text) {
              let txt = this.explorer.get_display_text(file);
              let items = this.explorer.file_explorer.fileItems;
              this.explorer._set_display_text_(items[file.path], txt);
              let canvas = items[file.path.slice(0, file.path.length - 2) + "canvas"];
              this.explorer._set_display_text_(canvas, txt);
              if (file.parent && file.basename == file.parent.name || file.parent && file.parent.path == "/") {
                let field = this.editor.get_frontmatter(file, this.settings.field_of_display_text);
                let prev = file.note_chain_display_field;
                if (!prev || prev != field) {
                  for (let key in items) {
                    let item = items[key];
                    let ppath = "";
                    if (file.parent.path == "/") {
                      ppath == "";
                    } else {
                      ppath = file.parent.path + "/";
                    }
                    if (item.file.path.startsWith(ppath) || item.file.path == file.parent.path) {
                      let txt2 = this.explorer.get_display_text(item.file);
                      this.explorer._set_display_text_(item, txt2);
                    }
                  }
                }
                file.note_chain_display_field = field;
              }
            }
            if (this.settings.field_of_background_color) {
              let style = await this.explorer.get_fileitem_style(file);
              await this.explorer.set_fileitem_style_of_file(file, style);
              let items = this.explorer.file_explorer.fileItems;
              let canvas = items[file.path.slice(0, file.path.length - 2) + "canvas"];
              if (canvas) {
                await this.explorer.set_fileitem_style_of_file(canvas.file, style);
              }
              if (file.parent && file.basename == file.parent.name || file.parent && file.parent.path == "/") {
                let field = this.editor.get_frontmatter(file, this.settings.field_of_background_color);
                let prev = file.note_chain_bgcolor;
                if (!prev || prev != field) {
                  for (let key in items) {
                    let item = items[key];
                    let ppath = "";
                    if (file.parent.path == "/") {
                      ppath == "";
                    } else {
                      ppath = file.parent.path + "/";
                    }
                    if (item.file.path.startsWith(ppath) || item.file.path == file.parent.path) {
                      let style2 = await this.explorer.get_fileitem_style(item.file);
                      await this.explorer.set_fileitem_style_of_file(item.file, style2);
                    }
                  }
                }
                file.note_chain_bgcolor = field;
              }
            }
          }, 500);
          if (file == this.chain.current_note) {
            this.timerId = this.timerId;
          }
        }
      )
    );
    this.registerView(
      "note-content-view",
      (leaf) => new NoteContentView(leaf, this)
    );
    this.wordcout = new WordCount(this, this.app);
    this.textarea = new NCTextarea(this);
    this.status = "loaded";
  }
  async onunload() {
    await this.explorer.unregister();
    await this.explorer.sort();
  }
  async ufunc_on_file_open(file) {
    if (this.settings.refreshDataView) {
      this.app.commands.executeCommandById(
        "dataview:dataview-force-refresh-views"
      );
    }
    if (this.settings.refreshTasks) {
      let target = await this.app.plugins.getPlugin("obsidian-tasks-plugin");
      target && target.cache.notifySubscribers();
    }
    if (this.settings.auto_notechain) {
      await this.auto_notechain(file);
    }
  }
  async auto_notechain(file) {
    var _a;
    let notes = this.chain.get_brothers(file);
    if (notes.length == 0) {
      return;
    }
    if (!this.wordcout.filter(file)) {
      return;
    }
    if ((_a = this.explorer) == null ? void 0 : _a.file_explorer) {
      notes = this.chain.sort_tfiles(notes, this.explorer.file_explorer.sortOrder);
      notes = this.chain.sort_tfiles(notes, "chain");
      let bnotes = notes.filter((x) => x.basename.contains(".sync-conflict"));
      let anotes = notes.filter((x) => !x.basename.contains(".sync-conflict"));
      notes = this.utils.concat_array(anotes, bnotes);
      if (notes.length > 0) {
        await this.chain.chain_concat_tfiles(notes);
        await this.chain.chain_set_prev(notes[0], null);
        await this.chain.chain_set_next(notes[notes.length - 1], null);
      }
      this.explorer.sort();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async clear_inlinks(tfile = this.chain.current_note, mode = "suggester") {
    if (tfile == null) {
      return;
    }
    let notes = this.chain.get_inlinks(tfile);
    if (notes.length) {
      if (mode === "suggester") {
        mode = await this.dialog_suggest(
          ["delete links", "replace links", "delete paragraph with links"],
          [["link", "del"], ["link", "rep"], ["para", "del"]]
        );
      }
      let reg = this.editor.regexp_link(tfile, mode[0]);
      if (reg) {
        for (let note of notes) {
          let target;
          if (mode[1] === "rep") {
            target = tfile.basename;
          } else {
            target = "";
          }
          this.editor.replace(note, reg, target);
        }
      }
    }
  }
  async replace_notes_with_regx() {
    let notes = await this.chain.suggester_notes();
    if ((notes == null ? void 0 : notes.length) > 0) {
      try {
        let regs = await this.dialog_prompt("Enter the regular expression to replace.");
        if (regs == null) {
          return;
        }
        let reg = new RegExp(regs, "g");
        let target = await this.dialog_prompt("Enter the target string.");
        if (target == null) {
          return;
        }
        target = target.replace(
          /\\n/g,
          "\n"
        );
        for (let note of notes) {
          await this.editor.replace(note, reg, target);
        }
      } catch (error) {
      }
    }
  }
  async cmd_chain_insert_node() {
    let selector = document.querySelectorAll(
      ".tree-item-self.is-selected"
    );
    let items = Object.values(selector).map((x) => {
      var _a;
      return (_a = x.dataset) == null ? void 0 : _a.path;
    });
    let tfiles = items.map((x) => this.chain.get_tfile(x)).filter((x) => x.extension == "md");
    if (tfiles.length > 1) {
      tfiles = this.chain.sort_tfiles_by_chain(tfiles);
      let notes2 = this.chain.get_all_tfiles();
      notes2 = notes2.filter((x) => !tfiles.contains(x));
      let anchor = await this.chain.sugguster_note(notes2);
      if (!anchor) {
        return;
      }
      for (let tfile of tfiles) {
        if (tfile.parent.path != anchor.parent.path) {
          let dst = anchor.parent.path + "/" + tfile.name;
          await this.app.fileManager.renameFile(tfile, dst);
        }
        await this.chain.chain_pop_node(tfile);
      }
      tfiles.unshift(anchor);
      let anchor_next = this.chain.get_next_note(anchor);
      if (anchor_next) {
        tfiles.push(anchor_next);
      }
      await this.chain.chain_concat_tfiles(tfiles);
      return;
    }
    let curr = this.chain.current_note;
    if (curr == null) {
      return;
    }
    let smode = this.strings[this.settings.suggesterNotesMode];
    let notes = await this.chain.suggester_notes(curr, false, smode);
    if (!notes) {
      return;
    }
    notes = this.chain.sort_tfiles(notes, ["mtime", "x"]);
    notes = this.chain.sort_tfiles_by_chain(notes);
    const note = await this.dialog_suggest(
      this.utils.array_prefix_id(
        notes.map((file) => this.tfile_to_string(file, [], ""))
      ),
      notes
    );
    if (!note) {
      return;
    }
    let sitems = [
      this.strings.item_insert_node_after,
      this.strings.item_insert_node_before,
      this.strings.item_insert_node_as_head,
      this.strings.item_insert_node_as_tail,
      this.strings.item_insert_folder_after
    ];
    let mode = await this.dialog_suggest(
      this.utils.array_prefix_id(sitems),
      sitems,
      false,
      this.strings.item_insert_suggester
    );
    if (!mode) {
      return;
    }
    if (mode === this.strings.item_insert_node_as_head) {
      await this.chain.chain_insert_node_as_head(curr, note);
    } else if (mode === this.strings.item_insert_node_as_tail) {
      await this.chain.chain_insert_node_as_tail(curr, note);
    } else if (mode === this.strings.item_insert_node_before) {
      await this.chain.chain_insert_node_before(curr, note);
      await this.editor.set_frontmatter_align_file(
        note,
        curr,
        this.settings.field_of_confluence_tab_format
      );
    } else if (mode === this.strings.item_insert_node_after) {
      await this.chain.chain_insert_node_after(curr, note);
      await this.editor.set_frontmatter_align_file(
        note,
        curr,
        this.settings.field_of_confluence_tab_format
      );
    } else if (mode === this.strings.item_insert_folder_after) {
      await this.chain.chain_insert_folder_after(curr, note);
    } else {
      return;
    }
  }
  tfile_to_string(tfile, fields, seq) {
    let items = new Array();
    if (tfile == this.chain.current_note) {
      items.push("\u{1F3E0}" + tfile.basename);
    } else {
      items.push(tfile.basename);
    }
    for (let field of fields) {
      try {
        items.push(this.editor.get_frontmatter(tfile, field));
      } catch (error) {
        items.push("-");
      }
    }
    return items.join(seq);
  }
  async open_note_smarter() {
    let curr = this.chain.current_note;
    let notes = await this.chain.suggester_notes(curr, false);
    notes = this.chain.sort_tfiles(notes, ["mtime", "x"]);
    notes = this.chain.sort_tfiles_by_chain(notes);
    if (notes.length > 0) {
      let note = await this.dialog_suggest(
        this.utils.array_prefix_id(
          notes.map((file) => this.chain.tfile_to_string(file))
        ),
        notes
      );
      if (note) {
        await this.chain.open_note(note);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
